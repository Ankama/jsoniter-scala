[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 12, 2018 12:09:58 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 58 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d7(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d12(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e12(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 422 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 629 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44619.747 ops/s
[info] # Warmup Iteration   2: 597272.076 ops/s
[info] # Warmup Iteration   3: 812935.159 ops/s
[info] # Warmup Iteration   4: 791211.317 ops/s
[info] # Warmup Iteration   5: 791413.469 ops/s
[info] Iteration   1: 794384.133 ops/s
[info]                  ·gc.alloc.rate:                   2284.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              4526.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3984.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 836305.730 ops/s
[info]                  ·gc.alloc.rate:                   2442.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              4597.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5031.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 845249.008 ops/s
[info]                  ·gc.alloc.rate:               2453.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          4567.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4975.214 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 845283.079 ops/s
[info]                  ·gc.alloc.rate:                   2455.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4572.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3738.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 840874.472 ops/s
[info]                  ·gc.alloc.rate:               2470.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          4623.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5022.175 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   832419.284 ±(99.9%) 83109.404 ops/s [Average]
[info]   (min, avg, max) = (794384.133, 832419.284, 845283.079), stdev = 21583.248
[info]   CI (99.9%): [749309.880, 915528.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2421.299 ±(99.9%) 296.494 MB/sec [Average]
[info]   (min, avg, max) = (2284.655, 2421.299, 2470.062), stdev = 76.999
[info]   CI (99.9%): [2124.805, 2717.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4577.469 ±(99.9%) 139.166 B/op [Average]
[info]   (min, avg, max) = (4526.588, 4577.469, 4623.324), stdev = 36.141
[info]   CI (99.9%): [4438.304, 4716.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2409.631 ±(99.9%) 1406.494 MB/sec [Average]
[info]   (min, avg, max) = (2008.049, 2409.631, 2683.152), stdev = 365.262
[info]   CI (99.9%): [1003.138, 3816.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4550.549 ±(99.9%) 2445.796 B/op [Average]
[info]   (min, avg, max) = (3738.939, 4550.549, 5031.979), stdev = 635.166
[info]   CI (99.9%): [2104.752, 6996.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.830), stdev = 1.706
[info]   CI (99.9%): [≈ 0, 7.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.541 ±(99.9%) 13.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.541, 7.589), stdev = 3.381
[info]   CI (99.9%): [≈ 0, 14.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.23% complete, ETA 01:55:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50041.884 ops/s
[info] # Warmup Iteration   2: 1618639.758 ops/s
[info] # Warmup Iteration   3: 1805886.755 ops/s
[info] # Warmup Iteration   4: 1853240.655 ops/s
[info] # Warmup Iteration   5: 1954995.245 ops/s
[info] Iteration   1: 1917824.262 ops/s
[info]                  ·gc.alloc.rate:               1326.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          1088.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1090.056 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1892425.818 ops/s
[info]                  ·gc.alloc.rate:                   1299.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1870572.128 ops/s
[info]                  ·gc.alloc.rate:                   1295.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1089.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1869357.981 ops/s
[info]                  ·gc.alloc.rate:               1294.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          1089.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1121.684 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1875806.032 ops/s
[info]                  ·gc.alloc.rate:               1297.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          1088.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1119.529 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1885197.244 ±(99.9%) 78673.513 ops/s [Average]
[info]   (min, avg, max) = (1869357.981, 1885197.244, 1917824.262), stdev = 20431.261
[info]   CI (99.9%): [1806523.732, 1963870.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1302.672 ±(99.9%) 52.468 MB/sec [Average]
[info]   (min, avg, max) = (1294.229, 1302.672, 1326.737), stdev = 13.626
[info]   CI (99.9%): [1250.204, 1355.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1087.368 ±(99.9%) 13.952 B/op [Average]
[info]   (min, avg, max) = (1080.968, 1087.368, 1089.659), stdev = 3.623
[info]   CI (99.9%): [1073.417, 1101.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1330.976 ±(99.9%) 9.485 MB/sec [Average]
[info]   (min, avg, max) = (1328.642, 1330.976, 1334.508), stdev = 2.463
[info]   CI (99.9%): [1321.491, 1340.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1111.103 ±(99.9%) 52.026 B/op [Average]
[info]   (min, avg, max) = (1090.056, 1111.103, 1121.684), stdev = 13.511
[info]   CI (99.9%): [1059.077, 1163.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.46% complete, ETA 01:54:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1105829.011 ops/s
[info] # Warmup Iteration   2: 5567561.540 ops/s
[info] # Warmup Iteration   3: 5920267.367 ops/s
[info] # Warmup Iteration   4: 5854738.742 ops/s
[info] # Warmup Iteration   5: 5932486.726 ops/s
[info] Iteration   1: 5854613.885 ops/s
[info]                  ·gc.alloc.rate:                   398.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              106.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5651527.962 ops/s
[info]                  ·gc.alloc.rate:               409.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          114.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5968863.895 ops/s
[info]                  ·gc.alloc.rate:      394.591 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5911826.854 ops/s
[info]                  ·gc.alloc.rate:               413.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5967035.119 ops/s
[info]                  ·gc.alloc.rate:      394.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5870773.543 ±(99.9%) 505385.617 ops/s [Average]
[info]   (min, avg, max) = (5651527.962, 5870773.543, 5968863.895), stdev = 131247.040
[info]   CI (99.9%): [5365387.926, 6376159.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   401.933 ±(99.9%) 33.919 MB/sec [Average]
[info]   (min, avg, max) = (394.373, 401.933, 413.188), stdev = 8.809
[info]   CI (99.9%): [368.014, 435.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.800 ±(99.9%) 16.482 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.800, 114.039), stdev = 4.280
[info]   CI (99.9%): [91.318, 124.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339.038 ±(99.9%) 1218.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.038, 671.877), stdev = 316.334
[info]   CI (99.9%): [≈ 0, 1557.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91.771 ±(99.9%) 328.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.771, 178.853), stdev = 85.282
[info]   CI (99.9%): [≈ 0, 420.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.69% complete, ETA 01:54:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1761.445 ops/s
[info] # Warmup Iteration   2: 170554.937 ops/s
[info] # Warmup Iteration   3: 267679.476 ops/s
[info] # Warmup Iteration   4: 263494.773 ops/s
[info] # Warmup Iteration   5: 265347.144 ops/s
[info] Iteration   1: 273658.299 ops/s
[info]                  ·gc.alloc.rate:                   2317.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              13326.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11556.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 274548.535 ops/s
[info]                  ·gc.alloc.rate:                   2374.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              13612.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15389.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 275074.197 ops/s
[info]                  ·gc.alloc.rate:               2340.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          13392.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11535.232 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 272306.940 ops/s
[info]                  ·gc.alloc.rate:               2358.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          13628.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15568.012 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 270770.685 ops/s
[info]                  ·gc.alloc.rate:               2332.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          13555.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11766.874 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   273271.731 ±(99.9%) 6728.882 ops/s [Average]
[info]   (min, avg, max) = (270770.685, 273271.731, 275074.197), stdev = 1747.469
[info]   CI (99.9%): [266542.849, 280000.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2344.703 ±(99.9%) 86.294 MB/sec [Average]
[info]   (min, avg, max) = (2317.244, 2344.703, 2374.721), stdev = 22.410
[info]   CI (99.9%): [2258.409, 2430.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13503.247 ±(99.9%) 523.083 B/op [Average]
[info]   (min, avg, max) = (13326.970, 13503.247, 13628.568), stdev = 135.843
[info]   CI (99.9%): [12980.164, 14026.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.754 ±(99.9%) 1418.714 MB/sec [Average]
[info]   (min, avg, max) = (2009.381, 2285.754, 2694.006), stdev = 368.435
[info]   CI (99.9%): [867.040, 3704.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13163.104 ±(99.9%) 8150.099 B/op [Average]
[info]   (min, avg, max) = (11535.232, 13163.104, 15568.012), stdev = 2116.555
[info]   CI (99.9%): [5013.005, 21313.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.262 ±(99.9%) 2.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 1.291), stdev = 0.575
[info]   CI (99.9%): [≈ 0, 2.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.508 ±(99.9%) 12.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.508, 7.423), stdev = 3.307
[info]   CI (99.9%): [≈ 0, 14.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.92% complete, ETA 01:53:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33709.904 ops/s
[info] # Warmup Iteration   2: 778606.271 ops/s
[info] # Warmup Iteration   3: 886706.838 ops/s
[info] # Warmup Iteration   4: 890052.819 ops/s
[info] # Warmup Iteration   5: 896269.611 ops/s
[info] Iteration   1: 919816.557 ops/s
[info]                  ·gc.alloc.rate:                   2464.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4587.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.447 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 921844.054 ops/s
[info]                  ·gc.alloc.rate:                   2454.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3424.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 933568.585 ops/s
[info]                  ·gc.alloc.rate:               2499.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          4214.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4509.631 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 934787.990 ops/s
[info]                  ·gc.alloc.rate:               2503.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          4214.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3383.256 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 932720.303 ops/s
[info]                  ·gc.alloc.rate:               2525.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          4260.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4533.353 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   928547.498 ±(99.9%) 27413.560 ops/s [Average]
[info]   (min, avg, max) = (919816.557, 928547.498, 934787.990), stdev = 7119.214
[info]   CI (99.9%): [901133.938, 955961.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2489.467 ±(99.9%) 112.068 MB/sec [Average]
[info]   (min, avg, max) = (2454.859, 2489.467, 2525.146), stdev = 29.104
[info]   CI (99.9%): [2377.400, 2601.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4219.301 ±(99.9%) 98.554 B/op [Average]
[info]   (min, avg, max) = (4190.528, 4219.301, 4260.923), stdev = 25.594
[info]   CI (99.9%): [4120.746, 4317.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2411.713 ±(99.9%) 1419.633 MB/sec [Average]
[info]   (min, avg, max) = (2006.087, 2411.713, 2686.596), stdev = 368.674
[info]   CI (99.9%): [992.080, 3831.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4087.694 ±(99.9%) 2406.908 B/op [Average]
[info]   (min, avg, max) = (3383.256, 4087.694, 4587.769), stdev = 625.066
[info]   CI (99.9%): [1680.785, 6494.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.768), stdev = 1.674
[info]   CI (99.9%): [≈ 0, 7.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.325 ±(99.9%) 11.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.325, 6.447), stdev = 2.864
[info]   CI (99.9%): [≈ 0, 12.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.15% complete, ETA 01:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245668.896 ops/s
[info] # Warmup Iteration   2: 2743550.869 ops/s
[info] # Warmup Iteration   3: 2871508.987 ops/s
[info] # Warmup Iteration   4: 2873869.292 ops/s
[info] # Warmup Iteration   5: 2850961.417 ops/s
[info] Iteration   1: 2832837.247 ops/s
[info]                  ·gc.alloc.rate:                   1214.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              674.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2763104.463 ops/s
[info]                  ·gc.alloc.rate:               1193.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          679.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 761.527 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2758341.270 ops/s
[info]                  ·gc.alloc.rate:               1190.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          679.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 763.623 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2829872.322 ops/s
[info]                  ·gc.alloc.rate:               1193.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          663.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 372.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2857823.039 ops/s
[info]                  ·gc.alloc.rate:                   1240.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              683.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     737.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2808395.668 ±(99.9%) 172833.854 ops/s [Average]
[info]   (min, avg, max) = (2758341.270, 2808395.668, 2857823.039), stdev = 44884.403
[info]   CI (99.9%): [2635561.815, 2981229.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1206.343 ±(99.9%) 81.907 MB/sec [Average]
[info]   (min, avg, max) = (1190.195, 1206.343, 1240.350), stdev = 21.271
[info]   CI (99.9%): [1124.435, 1288.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   676.017 ±(99.9%) 28.913 B/op [Average]
[info]   (min, avg, max) = (663.729, 676.017, 683.117), stdev = 7.509
[info]   CI (99.9%): [647.105, 704.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.117 ±(99.9%) 1150.373 MB/sec [Average]
[info]   (min, avg, max) = (669.706, 1204.117, 1339.563), stdev = 298.748
[info]   CI (99.9%): [53.745, 2354.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   675.492 ±(99.9%) 654.057 B/op [Average]
[info]   (min, avg, max) = (372.332, 675.492, 763.623), stdev = 169.856
[info]   CI (99.9%): [21.435, 1329.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.893), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.432 ±(99.9%) 3.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.144), stdev = 0.957
[info]   CI (99.9%): [≈ 0, 4.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.39% complete, ETA 01:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1633108.602 ops/s
[info] # Warmup Iteration   2: 14680477.686 ops/s
[info] # Warmup Iteration   3: 15064610.452 ops/s
[info] # Warmup Iteration   4: 14999463.068 ops/s
[info] # Warmup Iteration   5: 15091398.713 ops/s
[info] Iteration   1: 15055768.104 ops/s
[info]                  ·gc.alloc.rate:               791.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14970369.071 ops/s
[info]                  ·gc.alloc.rate:               787.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 15074001.205 ops/s
[info]                  ·gc.alloc.rate:                   786.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15103134.942 ops/s
[info]                  ·gc.alloc.rate:               783.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15046395.481 ops/s
[info]                  ·gc.alloc.rate:               802.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          83.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140.511 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   15049933.760 ±(99.9%) 190467.836 ops/s [Average]
[info]   (min, avg, max) = (14970369.071, 15049933.760, 15103134.942), stdev = 49463.892
[info]   CI (99.9%): [14859465.925, 15240401.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   790.444 ±(99.9%) 28.456 MB/sec [Average]
[info]   (min, avg, max) = (783.655, 790.444, 802.617), stdev = 7.390
[info]   CI (99.9%): [761.988, 818.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.656 ±(99.9%) 3.326 B/op [Average]
[info]   (min, avg, max) = (81.662, 82.656, 83.941), stdev = 0.864
[info]   CI (99.9%): [79.330, 85.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.382 ±(99.9%) 1158.390 MB/sec [Average]
[info]   (min, avg, max) = (670.108, 805.382, 1343.523), stdev = 300.830
[info]   CI (99.9%): [≈ 0, 1963.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   84.220 ±(99.9%) 121.175 B/op [Average]
[info]   (min, avg, max) = (69.974, 84.220, 140.511), stdev = 31.469
[info]   CI (99.9%): [≈ 0, 205.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.62% complete, ETA 01:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2025276.341 ops/s
[info] # Warmup Iteration   2: 16634288.651 ops/s
[info] # Warmup Iteration   3: 16826647.290 ops/s
[info] # Warmup Iteration   4: 16903612.011 ops/s
[info] # Warmup Iteration   5: 17077728.121 ops/s
[info] Iteration   1: 17079362.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17065408.173 ops/s
[info]                  ·gc.alloc.rate:      1.432 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.132 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17061489.330 ops/s
[info]                  ·gc.alloc.rate:      1.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.120 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17083175.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17079432.161 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17073773.382 ±(99.9%) 37160.366 ops/s [Average]
[info]   (min, avg, max) = (17061489.330, 17073773.382, 17083175.116), stdev = 9650.429
[info]   CI (99.9%): [17036613.016, 17110933.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.548 ±(99.9%) 2.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.548, 1.432), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.051 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.051, 0.132), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.85% complete, ETA 01:52:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1485.450 ops/s
[info] # Warmup Iteration   2: 416582.866 ops/s
[info] # Warmup Iteration   3: 703597.149 ops/s
[info] # Warmup Iteration   4: 708987.196 ops/s
[info] # Warmup Iteration   5: 708435.887 ops/s
[info] Iteration   1: 698241.238 ops/s
[info]                  ·gc.alloc.rate:                   2062.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              4649.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4527.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 709389.293 ops/s
[info]                  ·gc.alloc.rate:                   2106.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              4673.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4463.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 709877.258 ops/s
[info]                  ·gc.alloc.rate:               2093.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          4641.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4463.207 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 709753.457 ops/s
[info]                  ·gc.alloc.rate:               2108.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          4674.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4469.751 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 708656.000 ops/s
[info]                  ·gc.alloc.rate:               2120.025 MB/sec
[info]                  ·gc.alloc.rate.norm:          4706.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4484.173 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   707183.449 ±(99.9%) 19335.719 ops/s [Average]
[info]   (min, avg, max) = (698241.238, 707183.449, 709877.258), stdev = 5021.425
[info]   CI (99.9%): [687847.730, 726519.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2098.214 ±(99.9%) 84.703 MB/sec [Average]
[info]   (min, avg, max) = (2062.607, 2098.214, 2120.025), stdev = 21.997
[info]   CI (99.9%): [2013.511, 2182.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4669.078 ±(99.9%) 98.115 B/op [Average]
[info]   (min, avg, max) = (4641.709, 4669.078, 4706.701), stdev = 25.480
[info]   CI (99.9%): [4570.963, 4767.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.820 ±(99.9%) 16.672 MB/sec [Average]
[info]   (min, avg, max) = (2008.379, 2013.820, 2019.792), stdev = 4.330
[info]   CI (99.9%): [1997.148, 2030.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4481.481 ±(99.9%) 103.717 B/op [Average]
[info]   (min, avg, max) = (4463.120, 4481.481, 4527.154), stdev = 26.935
[info]   CI (99.9%): [4377.764, 4585.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.335 ±(99.9%) 2.797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.634), stdev = 0.726
[info]   CI (99.9%): [≈ 0, 3.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.744 ±(99.9%) 6.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.744, 3.625), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 6.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.08% complete, ETA 01:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172783.304 ops/s
[info] # Warmup Iteration   2: 1826491.222 ops/s
[info] # Warmup Iteration   3: 2078981.563 ops/s
[info] # Warmup Iteration   4: 2065936.008 ops/s
[info] # Warmup Iteration   5: 2094636.479 ops/s
[info] Iteration   1: 2129334.442 ops/s
[info]                  ·gc.alloc.rate:                   2971.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              2196.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1978.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2110946.069 ops/s
[info]                  ·gc.alloc.rate:                   2987.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              2226.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2494.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2116480.665 ops/s
[info]                  ·gc.alloc.rate:               2968.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1994.792 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2132859.433 ops/s
[info]                  ·gc.alloc.rate:               2990.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1985.384 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2114528.010 ops/s
[info]                  ·gc.alloc.rate:               2966.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2008.501 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2120829.724 ±(99.9%) 37201.917 ops/s [Average]
[info]   (min, avg, max) = (2110946.069, 2120829.724, 2132859.433), stdev = 9661.220
[info]   CI (99.9%): [2083627.806, 2158031.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2976.945 ±(99.9%) 44.364 MB/sec [Average]
[info]   (min, avg, max) = (2966.392, 2976.945, 2990.902), stdev = 11.521
[info]   CI (99.9%): [2932.581, 3021.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2208.954 ±(99.9%) 42.906 B/op [Average]
[info]   (min, avg, max) = (2196.012, 2208.954, 2226.856), stdev = 11.142
[info]   CI (99.9%): [2166.048, 2251.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2819.026 ±(99.9%) 1135.836 MB/sec [Average]
[info]   (min, avg, max) = (2676.471, 2819.026, 3346.484), stdev = 294.973
[info]   CI (99.9%): [1683.190, 3954.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2092.222 ±(99.9%) 866.248 B/op [Average]
[info]   (min, avg, max) = (1978.294, 2092.222, 2494.137), stdev = 224.962
[info]   CI (99.9%): [1225.973, 2958.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.31% complete, ETA 01:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.698 ops/s
[info] # Warmup Iteration   2: 9055237.985 ops/s
[info] # Warmup Iteration   3: 9768495.683 ops/s
[info] # Warmup Iteration   4: 9838734.845 ops/s
[info] # Warmup Iteration   5: 9442224.034 ops/s
[info] Iteration   1: 9748288.800 ops/s
[info]                  ·gc.alloc.rate:               1245.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          201.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 215.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 9531690.099 ops/s
[info]                  ·gc.alloc.rate:               1197.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          197.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 220.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 10088942.051 ops/s
[info]                  ·gc.alloc.rate:               1246.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          194.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 10041900.343 ops/s
[info]                  ·gc.alloc.rate:                   1253.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10019540.365 ops/s
[info]                  ·gc.alloc.rate:                   1249.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9886072.332 ±(99.9%) 918972.281 ops/s [Average]
[info]   (min, avg, max) = (9531690.099, 9886072.332, 10088942.051), stdev = 238654.183
[info]   CI (99.9%): [8967100.051, 10805044.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1238.942 ±(99.9%) 89.150 MB/sec [Average]
[info]   (min, avg, max) = (1197.902, 1238.942, 1253.997), stdev = 23.152
[info]   CI (99.9%): [1149.792, 1328.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.260 ±(99.9%) 9.487 B/op [Average]
[info]   (min, avg, max) = (194.520, 197.260, 201.142), stdev = 2.464
[info]   CI (99.9%): [187.773, 206.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1201.823 ±(99.9%) 1149.397 MB/sec [Average]
[info]   (min, avg, max) = (667.863, 1201.823, 1336.385), stdev = 298.495
[info]   CI (99.9%): [52.426, 2351.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   191.846 ±(99.9%) 189.493 B/op [Average]
[info]   (min, avg, max) = (104.183, 191.846, 220.433), stdev = 49.211
[info]   CI (99.9%): [2.353, 381.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.521), stdev = 2.017
[info]   CI (99.9%): [≈ 0, 8.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 1.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.710), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.54% complete, ETA 01:52:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46983.954 ops/s
[info] # Warmup Iteration   2: 3086935.038 ops/s
[info] # Warmup Iteration   3: 3199901.238 ops/s
[info] # Warmup Iteration   4: 3238448.071 ops/s
[info] # Warmup Iteration   5: 3231053.892 ops/s
[info] Iteration   1: 3243008.306 ops/s
[info]                  ·gc.alloc.rate:                   2025.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              982.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3253358.311 ops/s
[info]                  ·gc.alloc.rate:                   2017.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3208132.891 ops/s
[info]                  ·gc.alloc.rate:               2017.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 981.408 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3269494.563 ops/s
[info]                  ·gc.alloc.rate:               2044.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          983.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 963.281 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3261893.183 ops/s
[info]                  ·gc.alloc.rate:               2052.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          990.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 967.138 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3247177.451 ±(99.9%) 92228.121 ops/s [Average]
[info]   (min, avg, max) = (3208132.891, 3247177.451, 3269494.563), stdev = 23951.350
[info]   CI (99.9%): [3154949.330, 3339405.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2031.485 ±(99.9%) 62.009 MB/sec [Average]
[info]   (min, avg, max) = (2017.634, 2031.485, 2052.779), stdev = 16.104
[info]   CI (99.9%): [1969.475, 2093.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984.581 ±(99.9%) 22.758 B/op [Average]
[info]   (min, avg, max) = (976.046, 984.581, 990.513), stdev = 5.910
[info]   CI (99.9%): [961.823, 1007.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2003.641 ±(99.9%) 10.473 MB/sec [Average]
[info]   (min, avg, max) = (2000.481, 2003.641, 2007.286), stdev = 2.720
[info]   CI (99.9%): [1993.168, 2014.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   971.116 ±(99.9%) 26.801 B/op [Average]
[info]   (min, avg, max) = (963.281, 971.116, 981.408), stdev = 6.960
[info]   CI (99.9%): [944.315, 997.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.122), stdev = 1.830
[info]   CI (99.9%): [≈ 0, 7.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.412 ±(99.9%) 3.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 2.000), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.77% complete, ETA 01:51:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3936509.038 ops/s
[info] # Warmup Iteration   2: 12769122.159 ops/s
[info] # Warmup Iteration   3: 12955047.304 ops/s
[info] # Warmup Iteration   4: 13705008.659 ops/s
[info] # Warmup Iteration   5: 13735855.791 ops/s
[info] Iteration   1: 13855600.154 ops/s
[info]                  ·gc.alloc.rate:                   1814.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13639987.164 ops/s
[info]                  ·gc.alloc.rate:                   1784.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13920034.029 ops/s
[info]                  ·gc.alloc.rate:                   1835.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13898478.667 ops/s
[info]                  ·gc.alloc.rate:               1806.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.223 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13882523.554 ops/s
[info]                  ·gc.alloc.rate:                   1844.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13839324.713 ±(99.9%) 438532.694 ops/s [Average]
[info]   (min, avg, max) = (13639987.164, 13839324.713, 13920034.029), stdev = 113885.548
[info]   CI (99.9%): [13400792.020, 14277857.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1817.132 ±(99.9%) 91.523 MB/sec [Average]
[info]   (min, avg, max) = (1784.927, 1817.132, 1844.832), stdev = 23.768
[info]   CI (99.9%): [1725.610, 1908.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.635 ±(99.9%) 6.791 B/op [Average]
[info]   (min, avg, max) = (204.504, 206.635, 209.151), stdev = 1.764
[info]   CI (99.9%): [199.844, 213.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.640 ±(99.9%) 1417.203 MB/sec [Average]
[info]   (min, avg, max) = (1344.677, 1749.640, 2021.107), stdev = 368.043
[info]   CI (99.9%): [332.437, 3166.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.821 ±(99.9%) 157.989 B/op [Average]
[info]   (min, avg, max) = (152.223, 198.821, 229.576), stdev = 41.029
[info]   CI (99.9%): [40.831, 356.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.570 ±(99.9%) 4.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.769), stdev = 1.229
[info]   CI (99.9%): [≈ 0, 5.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.319), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.00% complete, ETA 01:51:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17176.306 ops/s
[info] # Warmup Iteration   2: 308284.667 ops/s
[info] # Warmup Iteration   3: 855275.185 ops/s
[info] # Warmup Iteration   4: 1280554.063 ops/s
[info] # Warmup Iteration   5: 1280611.133 ops/s
[info] Iteration   1: 1330583.135 ops/s
[info]                  ·gc.alloc.rate:                   2828.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              3345.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3161.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 1299578.009 ops/s
[info]                  ·gc.alloc.rate:                   2782.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              3369.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3226.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1330273.165 ops/s
[info]                  ·gc.alloc.rate:               2870.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          3395.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3332.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3941.508 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1342677.045 ops/s
[info]                  ·gc.alloc.rate:               2897.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          3396.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3134.285 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1346111.592 ops/s
[info]                  ·gc.alloc.rate:               2905.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          3396.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3136.429 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1329844.589 ±(99.9%) 70638.127 ops/s [Average]
[info]   (min, avg, max) = (1299578.009, 1329844.589, 1346111.592), stdev = 18344.497
[info]   CI (99.9%): [1259206.462, 1400482.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2856.906 ±(99.9%) 197.756 MB/sec [Average]
[info]   (min, avg, max) = (2782.515, 2856.906, 2905.277), stdev = 51.357
[info]   CI (99.9%): [2659.150, 3054.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3380.595 ±(99.9%) 89.044 B/op [Average]
[info]   (min, avg, max) = (3345.058, 3380.595, 3396.817), stdev = 23.124
[info]   CI (99.9%): [3291.550, 3469.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2805.373 ±(99.9%) 1134.988 MB/sec [Average]
[info]   (min, avg, max) = (2665.198, 2805.373, 3332.528), stdev = 294.753
[info]   CI (99.9%): [1670.386, 3940.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3320.062 ±(99.9%) 1345.464 B/op [Average]
[info]   (min, avg, max) = (3134.285, 3320.062, 3941.508), stdev = 349.413
[info]   CI (99.9%): [1974.599, 4665.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.080), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.071 ±(99.9%) 8.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.071, 4.826), stdev = 2.112
[info]   CI (99.9%): [≈ 0, 9.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 11.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.23% complete, ETA 01:51:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217077.232 ops/s
[info] # Warmup Iteration   2: 2328257.288 ops/s
[info] # Warmup Iteration   3: 2481097.714 ops/s
[info] # Warmup Iteration   4: 2520215.454 ops/s
[info] # Warmup Iteration   5: 2520696.879 ops/s
[info] Iteration   1: 2531270.909 ops/s
[info]                  ·gc.alloc.rate:                   2226.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1383.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2519433.420 ops/s
[info]                  ·gc.alloc.rate:                   2243.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1401.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1672.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 2524122.739 ops/s
[info]                  ·gc.alloc.rate:               2221.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1385.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1251.272 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2532404.562 ops/s
[info]                  ·gc.alloc.rate:               2242.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          1393.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1248.425 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2527625.369 ops/s
[info]                  ·gc.alloc.rate:               2238.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          1393.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1253.242 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2526971.400 ±(99.9%) 20499.816 ops/s [Average]
[info]   (min, avg, max) = (2519433.420, 2526971.400, 2532404.562), stdev = 5323.737
[info]   CI (99.9%): [2506471.584, 2547471.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2234.514 ±(99.9%) 38.442 MB/sec [Average]
[info]   (min, avg, max) = (2221.679, 2234.514, 2243.855), stdev = 9.983
[info]   CI (99.9%): [2196.072, 2272.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1391.592 ±(99.9%) 27.768 B/op [Average]
[info]   (min, avg, max) = (1383.933, 1391.592, 1401.661), stdev = 7.211
[info]   CI (99.9%): [1363.824, 1419.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2144.144 ±(99.9%) 1149.078 MB/sec [Average]
[info]   (min, avg, max) = (2006.783, 2144.144, 2677.935), stdev = 298.412
[info]   CI (99.9%): [995.066, 3293.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1335.563 ±(99.9%) 725.994 B/op [Average]
[info]   (min, avg, max) = (1248.425, 1335.563, 1672.816), stdev = 188.538
[info]   CI (99.9%): [609.569, 2061.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.456), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.453 ±(99.9%) 3.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 2.149), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.46% complete, ETA 01:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.654 ops/s
[info] # Warmup Iteration   2: 18218033.483 ops/s
[info] # Warmup Iteration   3: 18878509.044 ops/s
[info] # Warmup Iteration   4: 19189756.395 ops/s
[info] # Warmup Iteration   5: 19478339.642 ops/s
[info] Iteration   1: 20257346.317 ops/s
[info]                  ·gc.alloc.rate:               637.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 20258607.505 ops/s
[info]                  ·gc.alloc.rate:               636.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 20217701.623 ops/s
[info]                  ·gc.alloc.rate:               634.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 20042079.567 ops/s
[info]                  ·gc.alloc.rate:                   636.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20163360.885 ops/s
[info]                  ·gc.alloc.rate:               633.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.047 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20187819.179 ±(99.9%) 347499.084 ops/s [Average]
[info]   (min, avg, max) = (20042079.567, 20187819.179, 20258607.505), stdev = 90244.408
[info]   CI (99.9%): [19840320.096, 20535318.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   635.705 ±(99.9%) 6.536 MB/sec [Average]
[info]   (min, avg, max) = (633.384, 635.705, 637.924), stdev = 1.697
[info]   CI (99.9%): [629.169, 642.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.561 ±(99.9%) 0.908 B/op [Average]
[info]   (min, avg, max) = (49.415, 49.561, 49.969), stdev = 0.236
[info]   CI (99.9%): [48.653, 50.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.005 ±(99.9%) 2.089 MB/sec [Average]
[info]   (min, avg, max) = (665.488, 666.005, 666.792), stdev = 0.543
[info]   CI (99.9%): [663.916, 668.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   51.924 ±(99.9%) 0.997 B/op [Average]
[info]   (min, avg, max) = (51.699, 51.924, 52.311), stdev = 0.259
[info]   CI (99.9%): [50.927, 52.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.70% complete, ETA 01:50:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139053.778 ops/s
[info] # Warmup Iteration   2: 6140339.325 ops/s
[info] # Warmup Iteration   3: 6436057.302 ops/s
[info] # Warmup Iteration   4: 6350195.619 ops/s
[info] # Warmup Iteration   5: 6404035.709 ops/s
[info] Iteration   1: 6345161.927 ops/s
[info]                  ·gc.alloc.rate:                   1788.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     331.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6334755.215 ops/s
[info]                  ·gc.alloc.rate:                   1814.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              450.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     498.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6391421.157 ops/s
[info]                  ·gc.alloc.rate:                   1832.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6468389.118 ops/s
[info]                  ·gc.alloc.rate:               1814.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324.485 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6306478.721 ops/s
[info]                  ·gc.alloc.rate:               1811.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 499.569 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6369241.228 ±(99.9%) 243767.989 ops/s [Average]
[info]   (min, avg, max) = (6306478.721, 6369241.228, 6468389.118), stdev = 63305.773
[info]   CI (99.9%): [6125473.238, 6613009.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1812.390 ±(99.9%) 59.249 MB/sec [Average]
[info]   (min, avg, max) = (1788.991, 1812.390, 1832.090), stdev = 15.387
[info]   CI (99.9%): [1753.141, 1871.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   447.825 ±(99.9%) 18.467 B/op [Average]
[info]   (min, avg, max) = (441.570, 447.825, 451.900), stdev = 4.796
[info]   CI (99.9%): [429.358, 466.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.262 ±(99.9%) 1410.753 MB/sec [Average]
[info]   (min, avg, max) = (1333.576, 1736.262, 2006.990), stdev = 366.368
[info]   CI (99.9%): [325.510, 3147.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   429.404 ±(99.9%) 356.810 B/op [Average]
[info]   (min, avg, max) = (324.485, 429.404, 499.569), stdev = 92.662
[info]   CI (99.9%): [72.594, 786.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.789 ±(99.9%) 6.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.904), stdev = 1.741
[info]   CI (99.9%): [≈ 0, 7.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.970), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.93% complete, ETA 01:50:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8388985.394 ops/s
[info] # Warmup Iteration   2: 28219903.940 ops/s
[info] # Warmup Iteration   3: 28799098.175 ops/s
[info] # Warmup Iteration   4: 28835045.129 ops/s
[info] # Warmup Iteration   5: 28856248.347 ops/s
[info] Iteration   1: 28919564.571 ops/s
[info]                  ·gc.alloc.rate:                   904.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27392619.674 ops/s
[info]                  ·gc.alloc.rate:               852.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28642854.437 ops/s
[info]                  ·gc.alloc.rate:                   914.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27860381.330 ops/s
[info]                  ·gc.alloc.rate:               865.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27476292.181 ops/s
[info]                  ·gc.alloc.rate:               864.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28058342.439 ±(99.9%) 2657025.046 ops/s [Average]
[info]   (min, avg, max) = (27392619.674, 28058342.439, 28919564.571), stdev = 690020.967
[info]   CI (99.9%): [25401317.392, 30715367.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   880.241 ±(99.9%) 105.924 MB/sec [Average]
[info]   (min, avg, max) = (852.091, 880.241, 914.521), stdev = 27.508
[info]   CI (99.9%): [774.318, 986.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.370 ±(99.9%) 2.140 B/op [Average]
[info]   (min, avg, max) = (48.878, 49.370, 50.250), stdev = 0.556
[info]   CI (99.9%): [47.229, 51.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.924 ±(99.9%) 1156.115 MB/sec [Average]
[info]   (min, avg, max) = (671.186, 805.924, 1343.008), stdev = 300.239
[info]   CI (99.9%): [≈ 0, 1962.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.070 ±(99.9%) 61.911 B/op [Average]
[info]   (min, avg, max) = (36.526, 45.070, 73.794), stdev = 16.078
[info]   CI (99.9%): [≈ 0, 106.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.16% complete, ETA 01:50:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9817496.734 ops/s
[info] # Warmup Iteration   2: 32172267.265 ops/s
[info] # Warmup Iteration   3: 34214284.601 ops/s
[info] # Warmup Iteration   4: 34638583.010 ops/s
[info] # Warmup Iteration   5: 34600491.381 ops/s
[info] Iteration   1: 34647330.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34738829.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34771702.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34732437.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34751903.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34728440.729 ±(99.9%) 183915.264 ops/s [Average]
[info]   (min, avg, max) = (34647330.225, 34728440.729, 34771702.511), stdev = 47762.210
[info]   CI (99.9%): [34544525.465, 34912355.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.39% complete, ETA 01:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69219.856 ops/s
[info] # Warmup Iteration   2: 1704850.527 ops/s
[info] # Warmup Iteration   3: 1775505.484 ops/s
[info] # Warmup Iteration   4: 1830148.286 ops/s
[info] # Warmup Iteration   5: 1838290.730 ops/s
[info] Iteration   1: 1796656.871 ops/s
[info]                  ·gc.alloc.rate:                   2801.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              2454.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2334.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1807987.219 ops/s
[info]                  ·gc.alloc.rate:                   2808.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              2444.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2320.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1808205.114 ops/s
[info]                  ·gc.alloc.rate:               2836.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          2468.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2326.208 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1808733.700 ops/s
[info]                  ·gc.alloc.rate:               2836.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          2468.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2333.624 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1850026.781 ops/s
[info]                  ·gc.alloc.rate:               2899.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          2466.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2289.476 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1814321.937 ±(99.9%) 79281.732 ops/s [Average]
[info]   (min, avg, max) = (1796656.871, 1814321.937, 1850026.781), stdev = 20589.214
[info]   CI (99.9%): [1735040.205, 1893603.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2836.474 ±(99.9%) 148.311 MB/sec [Average]
[info]   (min, avg, max) = (2801.753, 2836.474, 2899.177), stdev = 38.516
[info]   CI (99.9%): [2688.163, 2984.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2460.393 ±(99.9%) 41.054 B/op [Average]
[info]   (min, avg, max) = (2444.619, 2460.393, 2468.573), stdev = 10.662
[info]   CI (99.9%): [2419.339, 2501.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2675.410 ±(99.9%) 42.789 MB/sec [Average]
[info]   (min, avg, max) = (2665.514, 2675.410, 2691.238), stdev = 11.112
[info]   CI (99.9%): [2632.621, 2718.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2320.881 ±(99.9%) 71.241 B/op [Average]
[info]   (min, avg, max) = (2289.476, 2320.881, 2334.732), stdev = 18.501
[info]   CI (99.9%): [2249.640, 2392.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 01:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47709.020 ops/s
[info] # Warmup Iteration   2: 299626.327 ops/s
[info] # Warmup Iteration   3: 300065.377 ops/s
[info] # Warmup Iteration   4: 306100.724 ops/s
[info] # Warmup Iteration   5: 312580.098 ops/s
[info] Iteration   1: 312428.577 ops/s
[info]                  ·gc.alloc.rate:                   1896.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              9554.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6764.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 312658.800 ops/s
[info]                  ·gc.alloc.rate:                   1925.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              9691.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10140.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 310327.952 ops/s
[info]                  ·gc.alloc.rate:                   1924.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              9758.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10189.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 306349.477 ops/s
[info]                  ·gc.alloc.rate:                   1884.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              9679.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10318.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308005.208 ops/s
[info]                  ·gc.alloc.rate:               1883.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          9624.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6845.495 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   309954.003 ±(99.9%) 10610.199 ops/s [Average]
[info]   (min, avg, max) = (306349.477, 309954.003, 312658.800), stdev = 2755.435
[info]   CI (99.9%): [299343.804, 320564.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1902.774 ±(99.9%) 79.710 MB/sec [Average]
[info]   (min, avg, max) = (1883.693, 1902.774, 1925.164), stdev = 20.700
[info]   CI (99.9%): [1823.064, 1982.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9661.489 ±(99.9%) 295.113 B/op [Average]
[info]   (min, avg, max) = (9554.338, 9661.489, 9758.695), stdev = 76.640
[info]   CI (99.9%): [9366.377, 9956.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.003 ±(99.9%) 1411.798 MB/sec [Average]
[info]   (min, avg, max) = (1339.817, 1743.003, 2014.406), stdev = 366.639
[info]   CI (99.9%): [331.206, 3154.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8851.846 ±(99.9%) 7199.431 B/op [Average]
[info]   (min, avg, max) = (6764.920, 8851.846, 10318.744), stdev = 1869.669
[info]   CI (99.9%): [1652.415, 16051.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 6.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.539), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.669 ±(99.9%) 30.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.669, 17.814), stdev = 7.908
[info]   CI (99.9%): [≈ 0, 34.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.85% complete, ETA 01:49:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96137.894 ops/s
[info] # Warmup Iteration   2: 476248.928 ops/s
[info] # Warmup Iteration   3: 501354.850 ops/s
[info] # Warmup Iteration   4: 501159.217 ops/s
[info] # Warmup Iteration   5: 501452.520 ops/s
[info] Iteration   1: 502628.551 ops/s
[info]                  ·gc.alloc.rate:               655.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          2053.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2084.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 503094.558 ops/s
[info]                  ·gc.alloc.rate:               649.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          2031.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2083.005 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 502360.728 ops/s
[info]                  ·gc.alloc.rate:                   644.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              2017.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2088.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 495475.474 ops/s
[info]                  ·gc.alloc.rate:               642.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          2041.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2117.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 490324.527 ops/s
[info]                  ·gc.alloc.rate:                   632.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              2029.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2141.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   498776.767 ±(99.9%) 21838.892 ops/s [Average]
[info]   (min, avg, max) = (490324.527, 498776.767, 503094.558), stdev = 5671.491
[info]   CI (99.9%): [476937.876, 520615.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   644.937 ±(99.9%) 33.082 MB/sec [Average]
[info]   (min, avg, max) = (632.527, 644.937, 655.726), stdev = 8.591
[info]   CI (99.9%): [611.856, 678.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2034.887 ±(99.9%) 51.148 B/op [Average]
[info]   (min, avg, max) = (2017.913, 2034.887, 2053.143), stdev = 13.283
[info]   CI (99.9%): [1983.740, 2086.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.413 ±(99.9%) 2.248 MB/sec [Average]
[info]   (min, avg, max) = (665.840, 666.413, 667.249), stdev = 0.584
[info]   CI (99.9%): [664.164, 668.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2102.883 ±(99.9%) 98.636 B/op [Average]
[info]   (min, avg, max) = (2083.005, 2102.883, 2141.408), stdev = 25.615
[info]   CI (99.9%): [2004.247, 2201.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.067), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.08% complete, ETA 01:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656771.846 ops/s
[info] # Warmup Iteration   2: 1249429.746 ops/s
[info] # Warmup Iteration   3: 1331612.640 ops/s
[info] # Warmup Iteration   4: 1299470.280 ops/s
[info] # Warmup Iteration   5: 1337740.289 ops/s
[info] Iteration   1: 1338835.471 ops/s
[info]                  ·gc.alloc.rate:               913.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1338508.069 ops/s
[info]                  ·gc.alloc.rate:                   929.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1092.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1579.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1337647.573 ops/s
[info]                  ·gc.alloc.rate:                   907.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1068.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1342610.746 ops/s
[info]                  ·gc.alloc.rate:               919.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 788.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1337614.470 ops/s
[info]                  ·gc.alloc.rate:               931.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          1096.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1582.905 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1339043.266 ±(99.9%) 7949.026 ops/s [Average]
[info]   (min, avg, max) = (1337614.470, 1339043.266, 1342610.746), stdev = 2064.337
[info]   CI (99.9%): [1331094.240, 1346992.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   920.290 ±(99.9%) 39.133 MB/sec [Average]
[info]   (min, avg, max) = (907.990, 920.290, 931.444), stdev = 10.163
[info]   CI (99.9%): [881.157, 959.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1081.594 ±(99.9%) 47.103 B/op [Average]
[info]   (min, avg, max) = (1068.162, 1081.594, 1096.029), stdev = 12.233
[info]   CI (99.9%): [1034.491, 1128.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.079 ±(99.9%) 1418.281 MB/sec [Average]
[info]   (min, avg, max) = (671.477, 941.079, 1345.209), stdev = 368.323
[info]   CI (99.9%): [≈ 0, 2359.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1106.262 ±(99.9%) 1670.208 B/op [Average]
[info]   (min, avg, max) = (788.307, 1106.262, 1582.905), stdev = 433.748
[info]   CI (99.9%): [≈ 0, 2776.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.817
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.31% complete, ETA 01:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10278.473 ops/s
[info] # Warmup Iteration   2: 101686.972 ops/s
[info] # Warmup Iteration   3: 110866.142 ops/s
[info] # Warmup Iteration   4: 113306.955 ops/s
[info] # Warmup Iteration   5: 113387.046 ops/s
[info] Iteration   1: 115980.227 ops/s
[info]                  ·gc.alloc.rate:                   3668.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              49768.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45315.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 113289.013 ops/s
[info]                  ·gc.alloc.rate:                   3601.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              50023.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46541.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 114346.089 ops/s
[info]                  ·gc.alloc.rate:               3660.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          50385.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4037.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55571.365 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 113447.973 ops/s
[info]                  ·gc.alloc.rate:               3607.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          50042.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3377.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46849.302 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 113309.248 ops/s
[info]                  ·gc.alloc.rate:                   3603.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              50059.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47038.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   114074.510 ±(99.9%) 4432.713 ops/s [Average]
[info]   (min, avg, max) = (113289.013, 114074.510, 115980.227), stdev = 1151.161
[info]   CI (99.9%): [109641.797, 118507.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3628.441 ±(99.9%) 128.514 MB/sec [Average]
[info]   (min, avg, max) = (3601.085, 3628.441, 3668.767), stdev = 33.375
[info]   CI (99.9%): [3499.927, 3756.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50055.636 ±(99.9%) 845.151 B/op [Average]
[info]   (min, avg, max) = (49768.105, 50055.636, 50385.453), stdev = 219.483
[info]   CI (99.9%): [49210.486, 50900.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3498.505 ±(99.9%) 1162.674 MB/sec [Average]
[info]   (min, avg, max) = (3340.536, 3498.505, 4037.584), stdev = 301.943
[info]   CI (99.9%): [2335.831, 4661.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48263.410 ±(99.9%) 15941.698 B/op [Average]
[info]   (min, avg, max) = (45315.536, 48263.410, 55571.365), stdev = 4140.008
[info]   CI (99.9%): [32321.712, 64205.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.172 ±(99.9%) 0.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.289), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.54% complete, ETA 01:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130283.801 ops/s
[info] # Warmup Iteration   2: 341414.470 ops/s
[info] # Warmup Iteration   3: 352505.274 ops/s
[info] # Warmup Iteration   4: 352158.185 ops/s
[info] # Warmup Iteration   5: 351938.318 ops/s
[info] Iteration   1: 349260.220 ops/s
[info]                  ·gc.alloc.rate:                   1229.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              5540.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6042.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 354274.396 ops/s
[info]                  ·gc.alloc.rate:               1211.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          5383.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2980.204 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 353138.068 ops/s
[info]                  ·gc.alloc.rate:                   1213.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              5405.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5982.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 351260.107 ops/s
[info]                  ·gc.alloc.rate:                   1205.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              5402.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 352943.014 ops/s
[info]                  ·gc.alloc.rate:                   1237.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              5518.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5984.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   352175.161 ±(99.9%) 7520.540 ops/s [Average]
[info]   (min, avg, max) = (349260.220, 352175.161, 354274.396), stdev = 1953.060
[info]   CI (99.9%): [344654.621, 359695.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1219.587 ±(99.9%) 51.691 MB/sec [Average]
[info]   (min, avg, max) = (1205.746, 1219.587, 1237.628), stdev = 13.424
[info]   CI (99.9%): [1167.896, 1271.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5450.207 ±(99.9%) 283.582 B/op [Average]
[info]   (min, avg, max) = (5383.612, 5450.207, 5540.925), stdev = 73.645
[info]   CI (99.9%): [5166.625, 5733.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.967 ±(99.9%) 1156.230 MB/sec [Average]
[info]   (min, avg, max) = (670.831, 1207.967, 1343.357), stdev = 300.269
[info]   CI (99.9%): [51.736, 2364.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5401.734 ±(99.9%) 5213.434 B/op [Average]
[info]   (min, avg, max) = (2980.204, 5401.734, 6042.965), stdev = 1353.912
[info]   CI (99.9%): [188.300, 10615.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.081), stdev = 1.326
[info]   CI (99.9%): [≈ 0, 5.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.300 ±(99.9%) 22.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.300, 13.805), stdev = 5.941
[info]   CI (99.9%): [≈ 0, 26.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.77% complete, ETA 01:48:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 337531.992 ops/s
[info] # Warmup Iteration   2: 854887.753 ops/s
[info] # Warmup Iteration   3: 882050.155 ops/s
[info] # Warmup Iteration   4: 861942.669 ops/s
[info] # Warmup Iteration   5: 904336.237 ops/s
[info] Iteration   1: 904097.921 ops/s
[info]                  ·gc.alloc.rate:               666.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1158.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 903827.095 ops/s
[info]                  ·gc.alloc.rate:               678.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1180.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1158.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 902190.957 ops/s
[info]                  ·gc.alloc.rate:               671.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          1172.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1162.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 904089.632 ops/s
[info]                  ·gc.alloc.rate:               671.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1160.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 880595.441 ops/s
[info]                  ·gc.alloc.rate:               651.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1192.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   898960.209 ±(99.9%) 39649.297 ops/s [Average]
[info]   (min, avg, max) = (880595.441, 898960.209, 904097.921), stdev = 10296.796
[info]   CI (99.9%): [859310.912, 938609.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   667.948 ±(99.9%) 38.529 MB/sec [Average]
[info]   (min, avg, max) = (651.625, 667.948, 678.180), stdev = 10.006
[info]   CI (99.9%): [629.419, 706.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1169.206 ±(99.9%) 30.096 B/op [Average]
[info]   (min, avg, max) = (1160.059, 1169.206, 1180.595), stdev = 7.816
[info]   CI (99.9%): [1139.110, 1199.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.320 ±(99.9%) 2.478 MB/sec [Average]
[info]   (min, avg, max) = (665.683, 666.320, 667.246), stdev = 0.643
[info]   CI (99.9%): [663.843, 668.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1166.513 ±(99.9%) 55.987 B/op [Average]
[info]   (min, avg, max) = (1158.507, 1166.513, 1192.358), stdev = 14.540
[info]   CI (99.9%): [1110.526, 1222.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.00% complete, ETA 01:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1277428.599 ops/s
[info] # Warmup Iteration   2: 2393802.630 ops/s
[info] # Warmup Iteration   3: 2458522.584 ops/s
[info] # Warmup Iteration   4: 2549781.378 ops/s
[info] # Warmup Iteration   5: 2583985.521 ops/s
[info] Iteration   1: 2581171.399 ops/s
[info]                  ·gc.alloc.rate:               1225.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 818.842 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2522395.335 ops/s
[info]                  ·gc.alloc.rate:               1191.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 419.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2576389.442 ops/s
[info]                  ·gc.alloc.rate:               1219.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 821.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2576613.228 ops/s
[info]                  ·gc.alloc.rate:                   1232.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2583929.639 ops/s
[info]                  ·gc.alloc.rate:                   1234.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2568099.809 ±(99.9%) 99140.907 ops/s [Average]
[info]   (min, avg, max) = (2522395.335, 2568099.809, 2583929.639), stdev = 25746.579
[info]   CI (99.9%): [2468958.901, 2667240.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1220.743 ±(99.9%) 66.313 MB/sec [Average]
[info]   (min, avg, max) = (1191.889, 1220.743, 1234.612), stdev = 17.221
[info]   CI (99.9%): [1154.431, 1287.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.066 ±(99.9%) 16.245 B/op [Average]
[info]   (min, avg, max) = (743.427, 748.066, 752.889), stdev = 4.219
[info]   CI (99.9%): [731.822, 764.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.891 ±(99.9%) 1157.046 MB/sec [Average]
[info]   (min, avg, max) = (672.377, 1209.891, 1345.261), stdev = 300.481
[info]   CI (99.9%): [52.846, 2366.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   740.034 ±(99.9%) 690.238 B/op [Average]
[info]   (min, avg, max) = (419.387, 740.034, 821.706), stdev = 179.253
[info]   CI (99.9%): [49.797, 1430.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.789), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.391 ±(99.9%) 2.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.704), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.24% complete, ETA 01:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1230473.287 ops/s
[info] # Warmup Iteration   2: 2853462.831 ops/s
[info] # Warmup Iteration   3: 2923537.624 ops/s
[info] # Warmup Iteration   4: 2922052.617 ops/s
[info] # Warmup Iteration   5: 2923618.681 ops/s
[info] Iteration   1: 2924556.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2924865.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2925202.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2915767.516 ops/s
[info]                  ·gc.alloc.rate:      1.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.697 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2925480.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2923174.461 ±(99.9%) 16000.053 ops/s [Average]
[info]   (min, avg, max) = (2915767.516, 2923174.461, 2925480.044), stdev = 4155.163
[info]   CI (99.9%): [2907174.408, 2939174.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.259 ±(99.9%) 2.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.259, 1.292), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.140 ±(99.9%) 1.201 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.140, 0.697), stdev = 0.312
[info]   CI (99.9%): [≈ 0, 1.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.47% complete, ETA 01:47:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132474.755 ops/s
[info] # Warmup Iteration   2: 477214.068 ops/s
[info] # Warmup Iteration   3: 485631.553 ops/s
[info] # Warmup Iteration   4: 477472.156 ops/s
[info] # Warmup Iteration   5: 467105.835 ops/s
[info] Iteration   1: 486780.018 ops/s
[info]                  ·gc.alloc.rate:                   718.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              2322.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2160.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 487552.952 ops/s
[info]                  ·gc.alloc.rate:               728.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          2351.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2157.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 480486.492 ops/s
[info]                  ·gc.alloc.rate:                   713.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              2335.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2189.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 490867.595 ops/s
[info]                  ·gc.alloc.rate:               726.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          2330.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2145.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 486906.346 ops/s
[info]                  ·gc.alloc.rate:               720.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2162.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   486518.681 ±(99.9%) 14483.317 ops/s [Average]
[info]   (min, avg, max) = (480486.492, 486518.681, 490867.595), stdev = 3761.272
[info]   CI (99.9%): [472035.363, 501001.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   721.386 ±(99.9%) 24.049 MB/sec [Average]
[info]   (min, avg, max) = (713.070, 721.386, 728.376), stdev = 6.245
[info]   CI (99.9%): [697.337, 745.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2333.580 ±(99.9%) 41.923 B/op [Average]
[info]   (min, avg, max) = (2322.984, 2333.580, 2351.262), stdev = 10.887
[info]   CI (99.9%): [2291.658, 2375.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.700 ±(99.9%) 1.604 MB/sec [Average]
[info]   (min, avg, max) = (668.267, 668.700, 669.174), stdev = 0.417
[info]   CI (99.9%): [667.096, 670.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2163.243 ±(99.9%) 62.279 B/op [Average]
[info]   (min, avg, max) = (2145.504, 2163.243, 2189.593), stdev = 16.174
[info]   CI (99.9%): [2100.964, 2225.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.70% complete, ETA 01:47:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7278.911 ops/s
[info] # Warmup Iteration   2: 15043.959 ops/s
[info] # Warmup Iteration   3: 17523.879 ops/s
[info] # Warmup Iteration   4: 17284.994 ops/s
[info] # Warmup Iteration   5: 17270.681 ops/s
[info] Iteration   1: 17278.052 ops/s
[info]                  ·gc.alloc.rate:                   1379.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              125680.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122326.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17300.304 ops/s
[info]                  ·gc.alloc.rate:                   1395.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              126925.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122201.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17513.966 ops/s
[info]                  ·gc.alloc.rate:                   1403.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              126112.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120768.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17617.397 ops/s
[info]                  ·gc.alloc.rate:                   1411.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              126123.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119913.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17676.822 ops/s
[info]                  ·gc.alloc.rate:                   1414.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              125936.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119269.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17477.308 ±(99.9%) 698.995 ops/s [Average]
[info]   (min, avg, max) = (17278.052, 17477.308, 17676.822), stdev = 181.527
[info]   CI (99.9%): [16778.314, 18176.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1400.935 ±(99.9%) 54.041 MB/sec [Average]
[info]   (min, avg, max) = (1379.789, 1400.935, 1414.490), stdev = 14.034
[info]   CI (99.9%): [1346.894, 1454.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126155.781 ±(99.9%) 1795.451 B/op [Average]
[info]   (min, avg, max) = (125680.574, 126155.781, 126925.783), stdev = 466.273
[info]   CI (99.9%): [124360.330, 127951.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.413 ±(99.9%) 6.449 MB/sec [Average]
[info]   (min, avg, max) = (1339.607, 1342.413, 1343.922), stdev = 1.675
[info]   CI (99.9%): [1335.964, 1348.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   120896.043 ±(99.9%) 5229.603 B/op [Average]
[info]   (min, avg, max) = (119269.589, 120896.043, 122326.788), stdev = 1358.111
[info]   CI (99.9%): [115666.440, 126125.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.585 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.774, 2.769), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.482 ±(99.9%) 411.887 B/op [Average]
[info]   (min, avg, max) = (1.894, 69.482, 248.795), stdev = 106.966
[info]   CI (99.9%): [≈ 0, 481.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.93% complete, ETA 01:47:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9719.084 ops/s
[info] # Warmup Iteration   2: 35995.951 ops/s
[info] # Warmup Iteration   3: 36997.728 ops/s
[info] # Warmup Iteration   4: 35204.355 ops/s
[info] # Warmup Iteration   5: 37425.918 ops/s
[info] Iteration   1: 36647.367 ops/s
[info]                  ·gc.alloc.rate:                   1017.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              43680.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57303.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 36334.439 ops/s
[info]                  ·gc.alloc.rate:                   998.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              43263.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28927.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 36405.299 ops/s
[info]                  ·gc.alloc.rate:                   1015.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              43875.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57755.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 36648.564 ops/s
[info]                  ·gc.alloc.rate:               1008.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          43322.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28693.232 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 36397.828 ops/s
[info]                  ·gc.alloc.rate:               1004.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          43452.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57839.755 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   36486.700 ±(99.9%) 576.703 ops/s [Average]
[info]   (min, avg, max) = (36334.439, 36486.700, 36648.564), stdev = 149.768
[info]   CI (99.9%): [35909.997, 37063.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1009.043 ±(99.9%) 29.290 MB/sec [Average]
[info]   (min, avg, max) = (998.792, 1009.043, 1017.567), stdev = 7.606
[info]   CI (99.9%): [979.753, 1038.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43518.924 ±(99.9%) 984.048 B/op [Average]
[info]   (min, avg, max) = (43263.503, 43518.924, 43875.141), stdev = 255.554
[info]   CI (99.9%): [42534.876, 44502.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.959 ±(99.9%) 1409.433 MB/sec [Average]
[info]   (min, avg, max) = (667.828, 1068.959, 1337.652), stdev = 366.025
[info]   CI (99.9%): [≈ 0, 2478.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46103.867 ±(99.9%) 60794.942 B/op [Average]
[info]   (min, avg, max) = (28693.232, 46103.867, 57839.755), stdev = 15788.253
[info]   CI (99.9%): [≈ 0, 106898.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.259 ±(99.9%) 7.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.259, 4.500), stdev = 1.866
[info]   CI (99.9%): [≈ 0, 8.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.16% complete, ETA 01:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19699.735 ops/s
[info] # Warmup Iteration   2: 42493.817 ops/s
[info] # Warmup Iteration   3: 44681.558 ops/s
[info] # Warmup Iteration   4: 44451.985 ops/s
[info] # Warmup Iteration   5: 44004.144 ops/s
[info] Iteration   1: 45128.349 ops/s
[info]                  ·gc.alloc.rate:               627.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          21900.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23395.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 45084.035 ops/s
[info]                  ·gc.alloc.rate:               630.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          22017.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23417.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 45066.960 ops/s
[info]                  ·gc.alloc.rate:               626.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          21868.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23450.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45186.218 ops/s
[info]                  ·gc.alloc.rate:                   625.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              21782.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23388.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44767.060 ops/s
[info]                  ·gc.alloc.rate:               618.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          21728.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23619.425 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   45046.524 ±(99.9%) 627.238 ops/s [Average]
[info]   (min, avg, max) = (44767.060, 45046.524, 45186.218), stdev = 162.892
[info]   CI (99.9%): [44419.286, 45673.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   625.694 ±(99.9%) 18.207 MB/sec [Average]
[info]   (min, avg, max) = (618.060, 625.694, 630.741), stdev = 4.728
[info]   CI (99.9%): [607.487, 643.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21859.625 ±(99.9%) 429.442 B/op [Average]
[info]   (min, avg, max) = (21728.649, 21859.625, 22017.568), stdev = 111.525
[info]   CI (99.9%): [21430.183, 22289.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.328 ±(99.9%) 1.693 MB/sec [Average]
[info]   (min, avg, max) = (670.859, 671.328, 671.842), stdev = 0.440
[info]   CI (99.9%): [669.635, 673.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23454.387 ±(99.9%) 367.298 B/op [Average]
[info]   (min, avg, max) = (23388.312, 23454.387, 23619.425), stdev = 95.386
[info]   CI (99.9%): [23087.089, 23821.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 1.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.725), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.39% complete, ETA 01:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5350.411 ops/s
[info] # Warmup Iteration   2: 27438.763 ops/s
[info] # Warmup Iteration   3: 29675.344 ops/s
[info] # Warmup Iteration   4: 30049.769 ops/s
[info] # Warmup Iteration   5: 29783.460 ops/s
[info] Iteration   1: 29920.237 ops/s
[info]                  ·gc.alloc.rate:                   1529.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              80440.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105575.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 30100.335 ops/s
[info]                  ·gc.alloc.rate:                   1509.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              78945.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70009.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30155.719 ops/s
[info]                  ·gc.alloc.rate:                   1510.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              78796.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69949.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 29900.222 ops/s
[info]                  ·gc.alloc.rate:                   1509.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              79474.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70335.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30243.353 ops/s
[info]                  ·gc.alloc.rate:                   1539.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              80106.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69401.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30063.973 ±(99.9%) 575.640 ops/s [Average]
[info]   (min, avg, max) = (29900.222, 30063.973, 30243.353), stdev = 149.492
[info]   CI (99.9%): [29488.333, 30639.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1519.663 ±(99.9%) 52.973 MB/sec [Average]
[info]   (min, avg, max) = (1509.846, 1519.663, 1539.237), stdev = 13.757
[info]   CI (99.9%): [1466.689, 1572.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79552.664 ±(99.9%) 2751.343 B/op [Average]
[info]   (min, avg, max) = (78796.022, 79552.664, 80440.746), stdev = 714.515
[info]   CI (99.9%): [76801.320, 82304.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.271 ±(99.9%) 1153.324 MB/sec [Average]
[info]   (min, avg, max) = (1333.539, 1471.271, 2007.038), stdev = 299.515
[info]   CI (99.9%): [317.947, 2624.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77054.201 ±(99.9%) 61408.748 B/op [Average]
[info]   (min, avg, max) = (69401.255, 77054.201, 105575.923), stdev = 15947.657
[info]   CI (99.9%): [15645.453, 138462.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 7.498 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.933, 4.414), stdev = 1.947
[info]   CI (99.9%): [≈ 0, 8.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48.690 ±(99.9%) 391.176 B/op [Average]
[info]   (min, avg, max) = (1.083, 48.690, 230.324), stdev = 101.587
[info]   CI (99.9%): [≈ 0, 439.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.62% complete, ETA 01:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9478.906 ops/s
[info] # Warmup Iteration   2: 23986.120 ops/s
[info] # Warmup Iteration   3: 24451.749 ops/s
[info] # Warmup Iteration   4: 24805.290 ops/s
[info] # Warmup Iteration   5: 24577.514 ops/s
[info] Iteration   1: 24838.649 ops/s
[info]                  ·gc.alloc.rate:                   1816.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              115071.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85007.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 25124.797 ops/s
[info]                  ·gc.alloc.rate:                   1824.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              114271.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126017.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25202.185 ops/s
[info]                  ·gc.alloc.rate:                   1816.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              113450.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83574.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24982.174 ops/s
[info]                  ·gc.alloc.rate:                   1813.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              114270.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126403.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25088.697 ops/s
[info]                  ·gc.alloc.rate:               1820.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          114206.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125906.009 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   25047.300 ±(99.9%) 542.810 ops/s [Average]
[info]   (min, avg, max) = (24838.649, 25047.300, 25202.185), stdev = 140.966
[info]   CI (99.9%): [24504.491, 25590.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1818.287 ±(99.9%) 15.665 MB/sec [Average]
[info]   (min, avg, max) = (1813.840, 1818.287, 1824.111), stdev = 4.068
[info]   CI (99.9%): [1802.622, 1833.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114254.059 ±(99.9%) 2209.647 B/op [Average]
[info]   (min, avg, max) = (113450.327, 114254.059, 115071.610), stdev = 573.838
[info]   CI (99.9%): [112044.412, 116463.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.026 ±(99.9%) 1409.762 MB/sec [Average]
[info]   (min, avg, max) = (1338.327, 1741.026, 2011.619), stdev = 366.111
[info]   CI (99.9%): [331.264, 3150.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   109381.800 ±(99.9%) 88222.040 B/op [Average]
[info]   (min, avg, max) = (83574.910, 109381.800, 126403.222), stdev = 22910.984
[info]   CI (99.9%): [21159.760, 197603.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.643), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.952 ±(99.9%) 390.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.952, 228.198), stdev = 101.326
[info]   CI (99.9%): [≈ 0, 437.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.85% complete, ETA 01:46:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6394.669 ops/s
[info] # Warmup Iteration   2: 21522.069 ops/s
[info] # Warmup Iteration   3: 24534.186 ops/s
[info] # Warmup Iteration   4: 24110.184 ops/s
[info] # Warmup Iteration   5: 24675.161 ops/s
[info] Iteration   1: 24659.638 ops/s
[info]                  ·gc.alloc.rate:                   1569.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              100184.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85287.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 24423.857 ops/s
[info]                  ·gc.alloc.rate:               1555.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          100246.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86197.266 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 24754.340 ops/s
[info]                  ·gc.alloc.rate:                   1600.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              101760.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127567.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 24652.495 ops/s
[info]                  ·gc.alloc.rate:                   1581.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              100949.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85184.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24880.286 ops/s
[info]                  ·gc.alloc.rate:               1581.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          100067.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84354.623 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24674.123 ±(99.9%) 645.051 ops/s [Average]
[info]   (min, avg, max) = (24423.857, 24674.123, 24880.286), stdev = 167.518
[info]   CI (99.9%): [24029.072, 25319.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1577.902 ±(99.9%) 63.813 MB/sec [Average]
[info]   (min, avg, max) = (1555.717, 1577.902, 1600.522), stdev = 16.572
[info]   CI (99.9%): [1514.089, 1641.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100641.667 ±(99.9%) 2750.396 B/op [Average]
[info]   (min, avg, max) = (100067.634, 100641.667, 101760.284), stdev = 714.269
[info]   CI (99.9%): [97891.271, 103392.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.713 ±(99.9%) 1155.327 MB/sec [Average]
[info]   (min, avg, max) = (1333.552, 1469.713, 2006.424), stdev = 300.035
[info]   CI (99.9%): [314.386, 2625.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93718.126 ±(99.9%) 72906.221 B/op [Average]
[info]   (min, avg, max) = (84354.623, 93718.126, 127567.288), stdev = 18933.514
[info]   CI (99.9%): [20811.905, 166624.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.163), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 7.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.739 ±(99.9%) 454.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.739, 264.706), stdev = 117.940
[info]   CI (99.9%): [≈ 0, 507.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.08% complete, ETA 01:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9470.566 ops/s
[info] # Warmup Iteration   2: 26534.006 ops/s
[info] # Warmup Iteration   3: 27556.534 ops/s
[info] # Warmup Iteration   4: 27795.812 ops/s
[info] # Warmup Iteration   5: 27299.852 ops/s
[info] Iteration   1: 27667.833 ops/s
[info]                  ·gc.alloc.rate:               1640.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          93316.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114660.173 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 27508.447 ops/s
[info]                  ·gc.alloc.rate:                   1627.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              93125.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76929.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27908.801 ops/s
[info]                  ·gc.alloc.rate:                   1666.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              93978.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113584.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27706.170 ops/s
[info]                  ·gc.alloc.rate:               1646.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          93510.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76133.482 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27668.380 ops/s
[info]                  ·gc.alloc.rate:               1631.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          92820.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76238.027 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27691.926 ±(99.9%) 551.454 ops/s [Average]
[info]   (min, avg, max) = (27508.447, 27691.926, 27908.801), stdev = 143.211
[info]   CI (99.9%): [27140.472, 28243.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1642.694 ±(99.9%) 58.749 MB/sec [Average]
[info]   (min, avg, max) = (1627.820, 1642.694, 1666.507), stdev = 15.257
[info]   CI (99.9%): [1583.944, 1701.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93350.323 ±(99.9%) 1670.356 B/op [Average]
[info]   (min, avg, max) = (92820.576, 93350.323, 93978.488), stdev = 433.786
[info]   CI (99.9%): [91679.966, 95020.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.135 ±(99.9%) 1419.396 MB/sec [Average]
[info]   (min, avg, max) = (1340.234, 1611.135, 2015.674), stdev = 368.613
[info]   CI (99.9%): [191.740, 3030.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91509.051 ±(99.9%) 79511.024 B/op [Average]
[info]   (min, avg, max) = (76133.482, 91509.051, 114660.173), stdev = 20648.760
[info]   CI (99.9%): [11998.027, 171020.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.769), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.133 ±(99.9%) 264.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.133, 158.403), stdev = 68.601
[info]   CI (99.9%): [≈ 0, 304.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.31% complete, ETA 01:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10742.991 ops/s
[info] # Warmup Iteration   2: 26042.806 ops/s
[info] # Warmup Iteration   3: 27599.287 ops/s
[info] # Warmup Iteration   4: 26711.741 ops/s
[info] # Warmup Iteration   5: 27154.077 ops/s
[info] Iteration   1: 27191.646 ops/s
[info]                  ·gc.alloc.rate:               1541.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          89246.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77806.529 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 27544.139 ops/s
[info]                  ·gc.alloc.rate:                   1599.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              91395.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115332.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 27928.401 ops/s
[info]                  ·gc.alloc.rate:                   1591.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              89677.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75756.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27691.873 ops/s
[info]                  ·gc.alloc.rate:                   1580.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              89810.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76285.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27335.816 ops/s
[info]                  ·gc.alloc.rate:                   1559.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              89793.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77199.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27538.375 ±(99.9%) 1117.627 ops/s [Average]
[info]   (min, avg, max) = (27191.646, 27538.375, 27928.401), stdev = 290.244
[info]   CI (99.9%): [26420.748, 28656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1574.671 ±(99.9%) 91.192 MB/sec [Average]
[info]   (min, avg, max) = (1541.946, 1574.671, 1599.785), stdev = 23.682
[info]   CI (99.9%): [1483.480, 1665.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   89984.829 ±(99.9%) 3161.915 B/op [Average]
[info]   (min, avg, max) = (89246.986, 89984.829, 91395.908), stdev = 821.139
[info]   CI (99.9%): [86822.914, 93146.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.173 ±(99.9%) 1163.692 MB/sec [Average]
[info]   (min, avg, max) = (1340.857, 1478.173, 2018.772), stdev = 302.207
[info]   CI (99.9%): [314.481, 2641.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   84476.086 ±(99.9%) 66491.491 B/op [Average]
[info]   (min, avg, max) = (75756.350, 84476.086, 115332.702), stdev = 17267.629
[info]   CI (99.9%): [17984.595, 150967.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 3.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.436), stdev = 1.031
[info]   CI (99.9%): [≈ 0, 4.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   40.298 ±(99.9%) 226.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.298, 139.170), stdev = 58.895
[info]   CI (99.9%): [≈ 0, 267.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.55% complete, ETA 01:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2333.904 ops/s
[info] # Warmup Iteration   2: 6729.084 ops/s
[info] # Warmup Iteration   3: 7482.560 ops/s
[info] # Warmup Iteration   4: 7546.386 ops/s
[info] # Warmup Iteration   5: 7592.044 ops/s
[info] Iteration   1: 7559.007 ops/s
[info]                  ·gc.alloc.rate:               1134.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          236261.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 278926.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 7587.268 ops/s
[info]                  ·gc.alloc.rate:               1115.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          231402.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138999.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 7531.844 ops/s
[info]                  ·gc.alloc.rate:                   1122.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              234554.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280065.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7486.486 ops/s
[info]                  ·gc.alloc.rate:                   1122.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              235939.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282028.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 7534.285 ops/s
[info]                  ·gc.alloc.rate:                   1116.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              233212.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140116.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 660.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7539.778 ±(99.9%) 143.539 ops/s [Average]
[info]   (min, avg, max) = (7486.486, 7539.778, 7587.268), stdev = 37.277
[info]   CI (99.9%): [7396.238, 7683.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1122.365 ±(99.9%) 29.355 MB/sec [Average]
[info]   (min, avg, max) = (1115.635, 1122.365, 1134.745), stdev = 7.623
[info]   CI (99.9%): [1093.010, 1151.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234274.293 ±(99.9%) 7742.668 B/op [Average]
[info]   (min, avg, max) = (231402.808, 234274.293, 236261.215), stdev = 2010.746
[info]   CI (99.9%): [226531.626, 242016.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.517 ±(99.9%) 1413.200 MB/sec [Average]
[info]   (min, avg, max) = (670.142, 1072.517, 1341.601), stdev = 367.004
[info]   CI (99.9%): [≈ 0, 2485.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   224027.419 ±(99.9%) 296956.930 B/op [Average]
[info]   (min, avg, max) = (138999.533, 224027.419, 282028.855), stdev = 77118.772
[info]   CI (99.9%): [≈ 0, 520984.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.164), stdev = 1.408
[info]   CI (99.9%): [≈ 0, 6.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   134.800 ±(99.9%) 1132.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.800, 660.926), stdev = 294.135
[info]   CI (99.9%): [≈ 0, 1267.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.78% complete, ETA 01:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5515.939 ops/s
[info] # Warmup Iteration   2: 16382.861 ops/s
[info] # Warmup Iteration   3: 17845.562 ops/s
[info] # Warmup Iteration   4: 18081.653 ops/s
[info] # Warmup Iteration   5: 17558.434 ops/s
[info] Iteration   1: 17841.641 ops/s
[info]                  ·gc.alloc.rate:               1633.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          144135.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177808.404 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 17614.160 ops/s
[info]                  ·gc.alloc.rate:                   1623.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              145008.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120105.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18340.426 ops/s
[info]                  ·gc.alloc.rate:                   1665.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              142951.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115231.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18209.379 ops/s
[info]                  ·gc.alloc.rate:               1685.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          145679.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173697.567 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 18295.416 ops/s
[info]                  ·gc.alloc.rate:               1678.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          144366.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115177.756 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   18060.204 ±(99.9%) 1221.976 ops/s [Average]
[info]   (min, avg, max) = (17614.160, 18060.204, 18340.426), stdev = 317.343
[info]   CI (99.9%): [16838.228, 19282.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1657.329 ±(99.9%) 105.806 MB/sec [Average]
[info]   (min, avg, max) = (1623.097, 1657.329, 1685.550), stdev = 27.478
[info]   CI (99.9%): [1551.523, 1763.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144428.072 ±(99.9%) 3932.764 B/op [Average]
[info]   (min, avg, max) = (142951.302, 144428.072, 145679.185), stdev = 1021.326
[info]   CI (99.9%): [140495.308, 148360.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.302 ±(99.9%) 1414.644 MB/sec [Average]
[info]   (min, avg, max) = (1338.893, 1610.302, 2015.734), stdev = 367.379
[info]   CI (99.9%): [195.658, 3024.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   140404.313 ±(99.9%) 124619.957 B/op [Average]
[info]   (min, avg, max) = (115177.756, 140404.313, 177808.404), stdev = 32363.407
[info]   CI (99.9%): [15784.356, 265024.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.581), stdev = 1.142
[info]   CI (99.9%): [≈ 0, 5.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.131 ±(99.9%) 391.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.131, 230.630), stdev = 101.647
[info]   CI (99.9%): [≈ 0, 457.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.01% complete, ETA 01:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13765.199 ops/s
[info] # Warmup Iteration   2: 36163.859 ops/s
[info] # Warmup Iteration   3: 41859.935 ops/s
[info] # Warmup Iteration   4: 41510.196 ops/s
[info] # Warmup Iteration   5: 43017.286 ops/s
[info] Iteration   1: 43224.314 ops/s
[info]                  ·gc.alloc.rate:               1212.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          44128.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24377.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 43011.090 ops/s
[info]                  ·gc.alloc.rate:               1217.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          44543.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49017.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 43121.654 ops/s
[info]                  ·gc.alloc.rate:                   1219.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              44497.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48919.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43166.278 ops/s
[info]                  ·gc.alloc.rate:                   1218.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              44439.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48892.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43137.019 ops/s
[info]                  ·gc.alloc.rate:                   1203.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              43921.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24473.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   43132.071 ±(99.9%) 301.043 ops/s [Average]
[info]   (min, avg, max) = (43011.090, 43132.071, 43224.314), stdev = 78.180
[info]   CI (99.9%): [42831.028, 43433.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1214.313 ±(99.9%) 24.729 MB/sec [Average]
[info]   (min, avg, max) = (1203.969, 1214.313, 1219.156), stdev = 6.422
[info]   CI (99.9%): [1189.583, 1239.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44305.967 ±(99.9%) 1036.567 B/op [Average]
[info]   (min, avg, max) = (43921.565, 44305.967, 44543.160), stdev = 269.193
[info]   CI (99.9%): [43269.401, 45342.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1072.292 ±(99.9%) 1413.225 MB/sec [Average]
[info]   (min, avg, max) = (669.640, 1072.292, 1341.060), stdev = 367.010
[info]   CI (99.9%): [≈ 0, 2485.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39135.957 ±(99.9%) 51710.358 B/op [Average]
[info]   (min, avg, max) = (24377.027, 39135.957, 49017.558), stdev = 13429.016
[info]   CI (99.9%): [≈ 0, 90846.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.164), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 6.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.213 ±(99.9%) 192.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.213, 115.370), stdev = 49.918
[info]   CI (99.9%): [≈ 0, 222.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 01:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34532.219 ops/s
[info] # Warmup Iteration   2: 58408.314 ops/s
[info] # Warmup Iteration   3: 59727.348 ops/s
[info] # Warmup Iteration   4: 60789.519 ops/s
[info] # Warmup Iteration   5: 61674.225 ops/s
[info] Iteration   1: 61361.048 ops/s
[info]                  ·gc.alloc.rate:                   832.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              21351.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34437.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 61622.501 ops/s
[info]                  ·gc.alloc.rate:               812.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          20763.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17150.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 61709.509 ops/s
[info]                  ·gc.alloc.rate:               813.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          20757.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17141.589 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 61660.094 ops/s
[info]                  ·gc.alloc.rate:                   813.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              20749.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17155.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60847.578 ops/s
[info]                  ·gc.alloc.rate:               802.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          20756.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17393.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   61440.146 ±(99.9%) 1377.084 ops/s [Average]
[info]   (min, avg, max) = (60847.578, 61440.146, 61709.509), stdev = 357.624
[info]   CI (99.9%): [60063.062, 62817.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   815.059 ±(99.9%) 41.558 MB/sec [Average]
[info]   (min, avg, max) = (802.647, 815.059, 832.468), stdev = 10.792
[info]   CI (99.9%): [773.501, 856.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20875.608 ±(99.9%) 1023.673 B/op [Average]
[info]   (min, avg, max) = (20749.243, 20875.608, 21351.075), stdev = 265.845
[info]   CI (99.9%): [19851.935, 21899.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.272 ±(99.9%) 1154.673 MB/sec [Average]
[info]   (min, avg, max) = (671.513, 806.272, 1342.686), stdev = 299.865
[info]   CI (99.9%): [≈ 0, 1960.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20655.694 ±(99.9%) 29668.331 B/op [Average]
[info]   (min, avg, max) = (17141.589, 20655.694, 34437.102), stdev = 7704.771
[info]   CI (99.9%): [≈ 0, 50324.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.426 ±(99.9%) 2.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 1.068), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.47% complete, ETA 01:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1964.230 ops/s
[info] # Warmup Iteration   2: 27742.292 ops/s
[info] # Warmup Iteration   3: 33114.899 ops/s
[info] # Warmup Iteration   4: 32691.067 ops/s
[info] # Warmup Iteration   5: 32363.255 ops/s
[info] Iteration   1: 33516.436 ops/s
[info]                  ·gc.alloc.rate:                   2197.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              103153.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94354.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33656.239 ops/s
[info]                  ·gc.alloc.rate:                   2229.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              104254.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94182.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33772.207 ops/s
[info]                  ·gc.alloc.rate:                   2211.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              103054.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93983.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33515.560 ops/s
[info]                  ·gc.alloc.rate:                   2235.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              104991.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126528.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.933 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33468.980 ops/s
[info]                  ·gc.alloc.rate:               2219.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          104350.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95228.268 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33585.884 ±(99.9%) 483.640 ops/s [Average]
[info]   (min, avg, max) = (33468.980, 33585.884, 33772.207), stdev = 125.600
[info]   CI (99.9%): [33102.244, 34069.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2218.592 ±(99.9%) 58.478 MB/sec [Average]
[info]   (min, avg, max) = (2197.223, 2218.592, 2235.805), stdev = 15.187
[info]   CI (99.9%): [2160.114, 2277.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103960.867 ±(99.9%) 3206.549 B/op [Average]
[info]   (min, avg, max) = (103054.253, 103960.867, 104991.690), stdev = 832.730
[info]   CI (99.9%): [100754.319, 107167.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.025 ±(99.9%) 1167.772 MB/sec [Average]
[info]   (min, avg, max) = (2009.784, 2152.025, 2694.433), stdev = 303.267
[info]   CI (99.9%): [984.253, 3319.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100855.290 ±(99.9%) 55293.920 B/op [Average]
[info]   (min, avg, max) = (93983.180, 100855.290, 126528.546), stdev = 14359.655
[info]   CI (99.9%): [45561.370, 156149.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.217 ±(99.9%) 1.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 0.833), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.158 ±(99.9%) 63.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.158, 39.099), stdev = 16.455
[info]   CI (99.9%): [≈ 0, 73.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.70% complete, ETA 01:44:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10380.233 ops/s
[info] # Warmup Iteration   2: 27023.773 ops/s
[info] # Warmup Iteration   3: 28121.295 ops/s
[info] # Warmup Iteration   4: 28192.943 ops/s
[info] # Warmup Iteration   5: 27804.976 ops/s
[info] Iteration   1: 28389.796 ops/s
[info]                  ·gc.alloc.rate:               1805.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          100074.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74228.279 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 28324.723 ops/s
[info]                  ·gc.alloc.rate:                   1827.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              101555.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111634.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28383.214 ops/s
[info]                  ·gc.alloc.rate:               1805.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          100084.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74090.999 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 28361.105 ops/s
[info]                  ·gc.alloc.rate:                   1842.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              102265.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111119.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28394.614 ops/s
[info]                  ·gc.alloc.rate:                   1846.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              102305.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111138.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   28370.690 ±(99.9%) 110.585 ops/s [Average]
[info]   (min, avg, max) = (28324.723, 28370.690, 28394.614), stdev = 28.719
[info]   CI (99.9%): [28260.105, 28481.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1825.372 ±(99.9%) 76.083 MB/sec [Average]
[info]   (min, avg, max) = (1805.032, 1825.372, 1846.090), stdev = 19.758
[info]   CI (99.9%): [1749.289, 1901.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101257.074 ±(99.9%) 4295.070 B/op [Average]
[info]   (min, avg, max) = (100074.416, 101257.074, 102305.236), stdev = 1115.416
[info]   CI (99.9%): [96962.004, 105552.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.436 ±(99.9%) 1409.033 MB/sec [Average]
[info]   (min, avg, max) = (1336.231, 1738.436, 2009.073), stdev = 365.921
[info]   CI (99.9%): [329.403, 3147.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96442.403 ±(99.9%) 78331.321 B/op [Average]
[info]   (min, avg, max) = (74090.999, 96442.403, 111634.905), stdev = 20342.395
[info]   CI (99.9%): [18111.082, 174773.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.851), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 7.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.260 ±(99.9%) 367.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.260, 213.988), stdev = 95.442
[info]   CI (99.9%): [≈ 0, 410.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.93% complete, ETA 01:44:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15650.419 ops/s
[info] # Warmup Iteration   2: 32406.715 ops/s
[info] # Warmup Iteration   3: 34358.257 ops/s
[info] # Warmup Iteration   4: 34196.556 ops/s
[info] # Warmup Iteration   5: 34528.959 ops/s
[info] Iteration   1: 34547.485 ops/s
[info]                  ·gc.alloc.rate:                   1542.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              70290.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61236.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34412.857 ops/s
[info]                  ·gc.alloc.rate:                   1574.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              72003.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92281.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 34695.086 ops/s
[info]                  ·gc.alloc.rate:                   1559.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              70744.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60977.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34584.549 ops/s
[info]                  ·gc.alloc.rate:                   1567.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              71327.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61080.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34736.041 ops/s
[info]                  ·gc.alloc.rate:                   1560.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              70686.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60755.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34595.204 ±(99.9%) 492.569 ops/s [Average]
[info]   (min, avg, max) = (34412.857, 34595.204, 34736.041), stdev = 127.919
[info]   CI (99.9%): [34102.635, 35087.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1560.914 ±(99.9%) 45.262 MB/sec [Average]
[info]   (min, avg, max) = (1542.963, 1560.914, 1574.560), stdev = 11.754
[info]   CI (99.9%): [1515.653, 1606.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   71010.384 ±(99.9%) 2569.862 B/op [Average]
[info]   (min, avg, max) = (70290.067, 71010.384, 72003.583), stdev = 667.385
[info]   CI (99.9%): [68440.522, 73580.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.917 ±(99.9%) 1162.557 MB/sec [Average]
[info]   (min, avg, max) = (1340.916, 1477.917, 2017.988), stdev = 301.912
[info]   CI (99.9%): [315.361, 2640.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67266.162 ±(99.9%) 53851.095 B/op [Average]
[info]   (min, avg, max) = (60755.958, 67266.162, 92281.269), stdev = 13984.958
[info]   CI (99.9%): [13415.067, 121117.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 4.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.683, 2.540), stdev = 1.079
[info]   CI (99.9%): [≈ 0, 4.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.164 ±(99.9%) 190.054 B/op [Average]
[info]   (min, avg, max) = (0.947, 31.164, 116.151), stdev = 49.357
[info]   CI (99.9%): [≈ 0, 221.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.16% complete, ETA 01:43:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19804.098 ops/s
[info] # Warmup Iteration   2: 32675.467 ops/s
[info] # Warmup Iteration   3: 34178.418 ops/s
[info] # Warmup Iteration   4: 33735.780 ops/s
[info] # Warmup Iteration   5: 34383.000 ops/s
[info] Iteration   1: 34542.071 ops/s
[info]                  ·gc.alloc.rate:                   1485.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              67658.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61309.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34892.626 ops/s
[info]                  ·gc.alloc.rate:               1497.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          67515.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60692.957 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 34247.639 ops/s
[info]                  ·gc.alloc.rate:                   1493.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              68636.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61900.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34712.254 ops/s
[info]                  ·gc.alloc.rate:                   1526.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              69230.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91395.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34757.139 ops/s
[info]                  ·gc.alloc.rate:                   1515.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              68611.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60777.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34630.346 ±(99.9%) 954.606 ops/s [Average]
[info]   (min, avg, max) = (34247.639, 34630.346, 34892.626), stdev = 247.908
[info]   CI (99.9%): [33675.740, 35584.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1503.767 ±(99.9%) 65.697 MB/sec [Average]
[info]   (min, avg, max) = (1485.327, 1503.767, 1526.842), stdev = 17.061
[info]   CI (99.9%): [1438.070, 1569.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68330.593 ±(99.9%) 2789.232 B/op [Average]
[info]   (min, avg, max) = (67515.428, 68330.593, 69230.896), stdev = 724.355
[info]   CI (99.9%): [65541.362, 71119.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1479.469 ±(99.9%) 1154.244 MB/sec [Average]
[info]   (min, avg, max) = (1342.807, 1479.469, 2015.676), stdev = 299.753
[info]   CI (99.9%): [325.225, 2633.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   67215.380 ±(99.9%) 52083.634 B/op [Average]
[info]   (min, avg, max) = (60692.957, 67215.380, 91395.886), stdev = 13525.954
[info]   CI (99.9%): [15131.746, 119299.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 2.790), stdev = 1.213
[info]   CI (99.9%): [≈ 0, 5.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   28.849 ±(99.9%) 214.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.849, 128.194), stdev = 55.745
[info]   CI (99.9%): [≈ 0, 243.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.39% complete, ETA 01:43:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63794.101 ops/s
[info] # Warmup Iteration   2: 303311.111 ops/s
[info] # Warmup Iteration   3: 318691.802 ops/s
[info] # Warmup Iteration   4: 327662.012 ops/s
[info] # Warmup Iteration   5: 336088.337 ops/s
[info] Iteration   1: 326014.505 ops/s
[info]                  ·gc.alloc.rate:                   1846.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              8915.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9731.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 332212.821 ops/s
[info]                  ·gc.alloc.rate:                   1879.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              8902.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9546.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 335600.149 ops/s
[info]                  ·gc.alloc.rate:                   1922.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              9016.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9425.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 332224.581 ops/s
[info]                  ·gc.alloc.rate:                   1864.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6343.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 337185.411 ops/s
[info]                  ·gc.alloc.rate:               1932.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          9018.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9376.361 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   332647.494 ±(99.9%) 16525.859 ops/s [Average]
[info]   (min, avg, max) = (326014.505, 332647.494, 337185.411), stdev = 4291.713
[info]   CI (99.9%): [316121.635, 349173.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1889.011 ±(99.9%) 142.442 MB/sec [Average]
[info]   (min, avg, max) = (1846.866, 1889.011, 1932.178), stdev = 36.992
[info]   CI (99.9%): [1746.568, 2031.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8937.034 ±(99.9%) 308.525 B/op [Average]
[info]   (min, avg, max) = (8832.045, 8937.034, 9018.972), stdev = 80.123
[info]   CI (99.9%): [8628.509, 9245.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.714 ±(99.9%) 1159.812 MB/sec [Average]
[info]   (min, avg, max) = (1338.941, 1877.714, 2015.867), stdev = 301.200
[info]   CI (99.9%): [717.902, 3037.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8884.654 ±(99.9%) 5496.052 B/op [Average]
[info]   (min, avg, max) = (6343.186, 8884.654, 9731.459), stdev = 1427.307
[info]   CI (99.9%): [3388.602, 14380.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.747), stdev = 1.664
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.650 ±(99.9%) 30.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.650, 17.752), stdev = 7.884
[info]   CI (99.9%): [≈ 0, 34.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.62% complete, ETA 01:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.823 ops/s
[info] # Warmup Iteration   2: 1430687.586 ops/s
[info] # Warmup Iteration   3: 1453496.673 ops/s
[info] # Warmup Iteration   4: 1506779.110 ops/s
[info] # Warmup Iteration   5: 1468472.533 ops/s
[info] Iteration   1: 1464555.616 ops/s
[info]                  ·gc.alloc.rate:               475.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          511.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 714.087 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1467375.278 ops/s
[info]                  ·gc.alloc.rate:                   482.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              517.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1463772.347 ops/s
[info]                  ·gc.alloc.rate:               482.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          518.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 714.045 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1469884.198 ops/s
[info]                  ·gc.alloc.rate:      463.284 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1464497.760 ops/s
[info]                  ·gc.alloc.rate:               487.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          523.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 714.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1466017.040 ±(99.9%) 9870.414 ops/s [Average]
[info]   (min, avg, max) = (1463772.347, 1466017.040, 1469884.198), stdev = 2563.315
[info]   CI (99.9%): [1456146.626, 1475887.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   478.248 ±(99.9%) 36.047 MB/sec [Average]
[info]   (min, avg, max) = (463.284, 478.248, 487.269), stdev = 9.361
[info]   CI (99.9%): [442.201, 514.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   513.374 ±(99.9%) 41.199 B/op [Average]
[info]   (min, avg, max) = (496.000, 513.374, 523.643), stdev = 10.699
[info]   CI (99.9%): [472.175, 554.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.714 ±(99.9%) 1144.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.714, 665.158), stdev = 297.237
[info]   CI (99.9%): [≈ 0, 1676.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   571.130 ±(99.9%) 1229.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 571.130, 714.811), stdev = 319.272
[info]   CI (99.9%): [≈ 0, 1800.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.85% complete, ETA 01:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197853.311 ops/s
[info] # Warmup Iteration   2: 649153.838 ops/s
[info] # Warmup Iteration   3: 662736.358 ops/s
[info] # Warmup Iteration   4: 646451.118 ops/s
[info] # Warmup Iteration   5: 649515.938 ops/s
[info] Iteration   1: 660715.796 ops/s
[info]                  ·gc.alloc.rate:               536.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1218.688 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 667608.073 ops/s
[info]                  ·gc.alloc.rate:                   535.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1571.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 666243.530 ops/s
[info]                  ·gc.alloc.rate:               536.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          1267.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1574.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 680625.024 ops/s
[info]                  ·gc.alloc.rate:                   541.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1542.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 684900.094 ops/s
[info]                  ·gc.alloc.rate:      529.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   672018.503 ±(99.9%) 39483.701 ops/s [Average]
[info]   (min, avg, max) = (660715.796, 672018.503, 684900.094), stdev = 10253.792
[info]   CI (99.9%): [632534.802, 711502.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   535.833 ±(99.9%) 16.819 MB/sec [Average]
[info]   (min, avg, max) = (529.168, 535.833, 541.290), stdev = 4.368
[info]   CI (99.9%): [519.014, 552.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1255.166 ±(99.9%) 92.464 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1255.166, 1278.935), stdev = 24.013
[info]   CI (99.9%): [1162.701, 1347.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.360 ±(99.9%) 1111.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.360, 667.131), stdev = 288.754
[info]   CI (99.9%): [≈ 0, 1614.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1181.409 ±(99.9%) 2607.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1181.409, 1574.502), stdev = 677.140
[info]   CI (99.9%): [≈ 0, 3788.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.393), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.09% complete, ETA 01:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015191.026 ops/s
[info] # Warmup Iteration   2: 1758317.981 ops/s
[info] # Warmup Iteration   3: 1869784.985 ops/s
[info] # Warmup Iteration   4: 1888915.488 ops/s
[info] # Warmup Iteration   5: 1881431.545 ops/s
[info] Iteration   1: 1882791.705 ops/s
[info]                  ·gc.alloc.rate:               376.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 427.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1876544.105 ops/s
[info]                  ·gc.alloc.rate:               378.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 429.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1894451.489 ops/s
[info]                  ·gc.alloc.rate:      366.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1811757.855 ops/s
[info]                  ·gc.alloc.rate:               371.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 582.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1832072.140 ops/s
[info]                  ·gc.alloc.rate:      353.886 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1859523.459 ±(99.9%) 137309.459 ops/s [Average]
[info]   (min, avg, max) = (1811757.855, 1859523.459, 1894451.489), stdev = 35658.830
[info]   CI (99.9%): [1722214.000, 1996832.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369.229 ±(99.9%) 37.998 MB/sec [Average]
[info]   (min, avg, max) = (353.886, 369.229, 378.810), stdev = 9.868
[info]   CI (99.9%): [331.231, 407.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.513 ±(99.9%) 31.883 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.513, 322.451), stdev = 8.280
[info]   CI (99.9%): [280.630, 344.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.856 ±(99.9%) 1217.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.856, 671.062), stdev = 316.107
[info]   CI (99.9%): [≈ 0, 1556.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   287.895 ±(99.9%) 1040.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 287.895, 582.724), stdev = 270.260
[info]   CI (99.9%): [≈ 0, 1328.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.32% complete, ETA 01:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9534.417 ops/s
[info] # Warmup Iteration   2: 86472.656 ops/s
[info] # Warmup Iteration   3: 95538.737 ops/s
[info] # Warmup Iteration   4: 98569.318 ops/s
[info] # Warmup Iteration   5: 101117.699 ops/s
[info] Iteration   1: 99669.894 ops/s
[info]                  ·gc.alloc.rate:                   3321.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              52450.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3333.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52645.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.986 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 100704.705 ops/s
[info]                  ·gc.alloc.rate:                   3397.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              53076.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52226.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 101498.838 ops/s
[info]                  ·gc.alloc.rate:               3423.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          53079.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52013.559 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 101746.000 ops/s
[info]                  ·gc.alloc.rate:               3431.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          53084.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52109.364 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 100620.600 ops/s
[info]                  ·gc.alloc.rate:                   3395.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              53113.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52858.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   100848.008 ±(99.9%) 3157.864 ops/s [Average]
[info]   (min, avg, max) = (99669.894, 100848.008, 101746.000), stdev = 820.087
[info]   CI (99.9%): [97690.143, 104005.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3393.924 ±(99.9%) 167.146 MB/sec [Average]
[info]   (min, avg, max) = (3321.621, 3393.924, 3431.735), stdev = 43.407
[info]   CI (99.9%): [3226.778, 3561.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52961.001 ±(99.9%) 1100.145 B/op [Average]
[info]   (min, avg, max) = (52450.579, 52961.001, 53113.254), stdev = 285.704
[info]   CI (99.9%): [51860.857, 54061.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3355.894 ±(99.9%) 70.771 MB/sec [Average]
[info]   (min, avg, max) = (3333.964, 3355.894, 3379.160), stdev = 18.379
[info]   CI (99.9%): [3285.123, 3426.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52370.768 ±(99.9%) 1401.796 B/op [Average]
[info]   (min, avg, max) = (52013.559, 52370.768, 52858.608), stdev = 364.042
[info]   CI (99.9%): [50968.972, 53772.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 1.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 0.986), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.55% complete, ETA 01:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150130.778 ops/s
[info] # Warmup Iteration   2: 337349.278 ops/s
[info] # Warmup Iteration   3: 351536.042 ops/s
[info] # Warmup Iteration   4: 351814.948 ops/s
[info] # Warmup Iteration   5: 351762.557 ops/s
[info] Iteration   1: 352377.222 ops/s
[info]                  ·gc.alloc.rate:                   1216.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5988.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 350626.469 ops/s
[info]                  ·gc.alloc.rate:               1201.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          5394.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3010.976 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 352202.954 ops/s
[info]                  ·gc.alloc.rate:                   1209.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              5406.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5996.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 352608.531 ops/s
[info]                  ·gc.alloc.rate:                   1211.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              5405.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5992.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 352694.945 ops/s
[info]                  ·gc.alloc.rate:                   1235.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              5511.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5986.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   352102.024 ±(99.9%) 3262.434 ops/s [Average]
[info]   (min, avg, max) = (350626.469, 352102.024, 352694.945), stdev = 847.244
[info]   CI (99.9%): [348839.590, 355364.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1214.881 ±(99.9%) 47.708 MB/sec [Average]
[info]   (min, avg, max) = (1201.997, 1214.881, 1235.058), stdev = 12.390
[info]   CI (99.9%): [1167.173, 1262.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5430.290 ±(99.9%) 182.698 B/op [Average]
[info]   (min, avg, max) = (5394.919, 5430.290, 5511.512), stdev = 47.446
[info]   CI (99.9%): [5247.591, 5612.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.573 ±(99.9%) 1155.337 MB/sec [Average]
[info]   (min, avg, max) = (670.850, 1207.573, 1342.631), stdev = 300.037
[info]   CI (99.9%): [52.235, 2362.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5395.221 ±(99.9%) 5132.287 B/op [Average]
[info]   (min, avg, max) = (3010.976, 5395.221, 5996.413), stdev = 1332.839
[info]   CI (99.9%): [262.934, 10527.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.019), stdev = 1.304
[info]   CI (99.9%): [≈ 0, 5.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.252 ±(99.9%) 22.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.252, 13.473), stdev = 5.819
[info]   CI (99.9%): [≈ 0, 25.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.78% complete, ETA 01:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.681 ops/s
[info] # Warmup Iteration   2: 1467036.983 ops/s
[info] # Warmup Iteration   3: 1581580.795 ops/s
[info] # Warmup Iteration   4: 1580255.251 ops/s
[info] # Warmup Iteration   5: 1600803.060 ops/s
[info] Iteration   1: 1608686.667 ops/s
[info]                  ·gc.alloc.rate:                   762.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1584276.125 ops/s
[info]                  ·gc.alloc.rate:                   771.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              765.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1323.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1602632.931 ops/s
[info]                  ·gc.alloc.rate:               758.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1597782.909 ops/s
[info]                  ·gc.alloc.rate:               759.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 656.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1547183.336 ops/s
[info]                  ·gc.alloc.rate:                   730.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1588112.394 ±(99.9%) 94665.758 ops/s [Average]
[info]   (min, avg, max) = (1547183.336, 1588112.394, 1608686.667), stdev = 24584.397
[info]   CI (99.9%): [1493446.636, 1682778.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   756.247 ±(99.9%) 58.441 MB/sec [Average]
[info]   (min, avg, max) = (730.666, 756.247, 771.083), stdev = 15.177
[info]   CI (99.9%): [697.806, 814.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   749.316 ±(99.9%) 35.706 B/op [Average]
[info]   (min, avg, max) = (743.253, 749.316, 765.653), stdev = 9.273
[info]   CI (99.9%): [713.611, 785.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.091 ±(99.9%) 1146.906 MB/sec [Average]
[info]   (min, avg, max) = (666.128, 800.091, 1332.896), stdev = 297.848
[info]   CI (99.9%): [≈ 0, 1946.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   793.179 ±(99.9%) 1142.332 B/op [Average]
[info]   (min, avg, max) = (651.724, 793.179, 1323.510), stdev = 296.660
[info]   CI (99.9%): [≈ 0, 1935.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.01% complete, ETA 01:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413872.604 ops/s
[info] # Warmup Iteration   2: 987956.951 ops/s
[info] # Warmup Iteration   3: 1017587.399 ops/s
[info] # Warmup Iteration   4: 1013033.290 ops/s
[info] # Warmup Iteration   5: 1014127.022 ops/s
[info] Iteration   1: 1021434.540 ops/s
[info]                  ·gc.alloc.rate:               735.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          1133.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1020878.272 ops/s
[info]                  ·gc.alloc.rate:               744.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          1148.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1030.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1022281.188 ops/s
[info]                  ·gc.alloc.rate:               739.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          1139.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1029.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1026102.652 ops/s
[info]                  ·gc.alloc.rate:               742.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          1138.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1026.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1024273.972 ops/s
[info]                  ·gc.alloc.rate:               739.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          1136.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1022994.125 ±(99.9%) 8329.854 ops/s [Average]
[info]   (min, avg, max) = (1020878.272, 1022994.125, 1026102.652), stdev = 2163.237
[info]   CI (99.9%): [1014664.271, 1031323.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   740.536 ±(99.9%) 12.888 MB/sec [Average]
[info]   (min, avg, max) = (735.867, 740.536, 744.847), stdev = 3.347
[info]   CI (99.9%): [727.648, 753.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1139.273 ±(99.9%) 21.225 B/op [Average]
[info]   (min, avg, max) = (1133.686, 1139.273, 1148.354), stdev = 5.512
[info]   CI (99.9%): [1118.048, 1160.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.620 ±(99.9%) 2.003 MB/sec [Average]
[info]   (min, avg, max) = (667.907, 668.620, 669.134), stdev = 0.520
[info]   CI (99.9%): [666.617, 670.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1028.632 ±(99.9%) 5.994 B/op [Average]
[info]   (min, avg, max) = (1026.325, 1028.632, 1030.575), stdev = 1.557
[info]   CI (99.9%): [1022.638, 1034.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1458390.087 ops/s
[info] # Warmup Iteration   2: 2645892.102 ops/s
[info] # Warmup Iteration   3: 2786869.192 ops/s
[info] # Warmup Iteration   4: 2786504.657 ops/s
[info] # Warmup Iteration   5: 2714648.540 ops/s
[info] Iteration   1: 2789592.556 ops/s
[info]                  ·gc.alloc.rate:                   1319.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2776996.058 ops/s
[info]                  ·gc.alloc.rate:               1310.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 380.936 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2794115.141 ops/s
[info]                  ·gc.alloc.rate:               1319.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.581 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2795093.381 ops/s
[info]                  ·gc.alloc.rate:                   1346.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2746803.731 ops/s
[info]                  ·gc.alloc.rate:               1310.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 769.444 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2780520.174 ±(99.9%) 77701.174 ops/s [Average]
[info]   (min, avg, max) = (2746803.731, 2780520.174, 2795093.381), stdev = 20178.748
[info]   CI (99.9%): [2702818.999, 2858221.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1321.442 ±(99.9%) 56.242 MB/sec [Average]
[info]   (min, avg, max) = (1310.654, 1321.442, 1346.345), stdev = 14.606
[info]   CI (99.9%): [1265.200, 1377.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.998 ±(99.9%) 25.108 B/op [Average]
[info]   (min, avg, max) = (742.988, 747.998, 758.111), stdev = 6.520
[info]   CI (99.9%): [722.891, 773.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.809 ±(99.9%) 1157.401 MB/sec [Average]
[info]   (min, avg, max) = (672.131, 1209.809, 1345.546), stdev = 300.573
[info]   CI (99.9%): [52.409, 2367.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   684.740 ±(99.9%) 654.251 B/op [Average]
[info]   (min, avg, max) = (380.936, 684.740, 769.444), stdev = 169.907
[info]   CI (99.9%): [30.490, 1338.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.102), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 5.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 2.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.746), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:41:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1984405.890 ops/s
[info] # Warmup Iteration   2: 3225034.076 ops/s
[info] # Warmup Iteration   3: 3249801.812 ops/s
[info] # Warmup Iteration   4: 3247575.583 ops/s
[info] # Warmup Iteration   5: 3248671.191 ops/s
[info] Iteration   1: 3248494.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3248436.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3247601.042 ops/s
[info]                  ·gc.alloc.rate:      0.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.242 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3250780.172 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3251267.223 ops/s
[info]                  ·gc.alloc.rate:      0.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.142 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3249315.888 ±(99.9%) 6191.207 ops/s [Average]
[info]   (min, avg, max) = (3247601.042, 3249315.888, 3251267.223), stdev = 1607.837
[info]   CI (99.9%): [3243124.681, 3255507.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.159 ±(99.9%) 0.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.159, 0.499), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.077 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.077, 0.242), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.70% complete, ETA 01:41:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155506.228 ops/s
[info] # Warmup Iteration   2: 502825.081 ops/s
[info] # Warmup Iteration   3: 559648.036 ops/s
[info] # Warmup Iteration   4: 557340.483 ops/s
[info] # Warmup Iteration   5: 556248.093 ops/s
[info] Iteration   1: 557868.983 ops/s
[info]                  ·gc.alloc.rate:               617.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          1741.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1885.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 567276.545 ops/s
[info]                  ·gc.alloc.rate:               627.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          1740.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1854.678 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 609204.268 ops/s
[info]                  ·gc.alloc.rate:                   685.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              1769.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 608512.248 ops/s
[info]                  ·gc.alloc.rate:               678.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          1754.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1729.780 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 608921.192 ops/s
[info]                  ·gc.alloc.rate:               677.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          1751.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1730.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   590356.647 ±(99.9%) 98505.019 ops/s [Average]
[info]   (min, avg, max) = (557868.983, 590356.647, 609204.268), stdev = 25581.441
[info]   CI (99.9%): [491851.628, 688861.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.164 ±(99.9%) 123.682 MB/sec [Average]
[info]   (min, avg, max) = (617.358, 657.164, 685.112), stdev = 32.120
[info]   CI (99.9%): [533.482, 780.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1751.660 ±(99.9%) 45.804 B/op [Average]
[info]   (min, avg, max) = (1740.517, 1751.660, 1769.957), stdev = 11.895
[info]   CI (99.9%): [1705.856, 1797.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.808 ±(99.9%) 1.534 MB/sec [Average]
[info]   (min, avg, max) = (668.457, 668.808, 669.459), stdev = 0.398
[info]   CI (99.9%): [667.274, 670.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1785.738 ±(99.9%) 300.393 B/op [Average]
[info]   (min, avg, max) = (1727.850, 1785.738, 1885.972), stdev = 78.011
[info]   CI (99.9%): [1485.346, 2086.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.93% complete, ETA 01:40:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51071.286 ops/s
[info] # Warmup Iteration   2: 142282.315 ops/s
[info] # Warmup Iteration   3: 155310.337 ops/s
[info] # Warmup Iteration   4: 159619.478 ops/s
[info] # Warmup Iteration   5: 158335.204 ops/s
[info] Iteration   1: 160908.520 ops/s
[info]                  ·gc.alloc.rate:                   2012.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              19689.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13148.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 159376.596 ops/s
[info]                  ·gc.alloc.rate:                   2020.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              19951.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19885.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 157096.559 ops/s
[info]                  ·gc.alloc.rate:                   1990.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              19945.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20120.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 160118.486 ops/s
[info]                  ·gc.alloc.rate:               2016.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          19816.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19741.828 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 160067.063 ops/s
[info]                  ·gc.alloc.rate:               2042.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          20083.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19764.371 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   159513.445 ±(99.9%) 5606.247 ops/s [Average]
[info]   (min, avg, max) = (157096.559, 159513.445, 160908.520), stdev = 1455.925
[info]   CI (99.9%): [153907.198, 165119.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2016.580 ±(99.9%) 71.134 MB/sec [Average]
[info]   (min, avg, max) = (1990.859, 2016.580, 2042.580), stdev = 18.473
[info]   CI (99.9%): [1945.446, 2087.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19897.304 ±(99.9%) 576.357 B/op [Average]
[info]   (min, avg, max) = (19689.392, 19897.304, 20083.534), stdev = 149.678
[info]   CI (99.9%): [19320.947, 20473.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1876.988 ±(99.9%) 1146.745 MB/sec [Average]
[info]   (min, avg, max) = (1344.271, 1876.988, 2013.738), stdev = 297.806
[info]   CI (99.9%): [730.243, 3023.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18532.238 ±(99.9%) 11603.356 B/op [Average]
[info]   (min, avg, max) = (13148.493, 18532.238, 20120.519), stdev = 3013.355
[info]   CI (99.9%): [6928.882, 30135.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 4.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 2.831), stdev = 1.203
[info]   CI (99.9%): [≈ 0, 5.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.682 ±(99.9%) 45.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.682, 27.691), stdev = 11.763
[info]   CI (99.9%): [≈ 0, 52.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.16% complete, ETA 01:40:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146980.959 ops/s
[info] # Warmup Iteration   2: 406425.024 ops/s
[info] # Warmup Iteration   3: 454043.781 ops/s
[info] # Warmup Iteration   4: 454546.591 ops/s
[info] # Warmup Iteration   5: 453148.145 ops/s
[info] Iteration   1: 452984.390 ops/s
[info]                  ·gc.alloc.rate:               377.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          1312.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1777.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 451787.657 ops/s
[info]                  ·gc.alloc.rate:               380.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          1325.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1782.172 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 455551.163 ops/s
[info]                  ·gc.alloc.rate:      365.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 436125.727 ops/s
[info]                  ·gc.alloc.rate:                   368.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2403.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 455984.272 ops/s
[info]                  ·gc.alloc.rate:      366.256 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   450486.642 ±(99.9%) 31638.644 ops/s [Average]
[info]   (min, avg, max) = (436125.727, 450486.642, 455984.272), stdev = 8216.455
[info]   CI (99.9%): [418847.997, 482125.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.647 ±(99.9%) 26.481 MB/sec [Average]
[info]   (min, avg, max) = (365.863, 371.647, 380.382), stdev = 6.877
[info]   CI (99.9%): [345.166, 398.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1298.693 ±(99.9%) 124.026 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1298.693, 1328.018), stdev = 32.209
[info]   CI (99.9%): [1174.667, 1422.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.871 ±(99.9%) 1212.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.871, 666.138), stdev = 314.818
[info]   CI (99.9%): [≈ 0, 1550.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1192.723 ±(99.9%) 4305.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1192.723, 2403.916), stdev = 1118.214
[info]   CI (99.9%): [≈ 0, 5498.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.39% complete, ETA 01:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696581.093 ops/s
[info] # Warmup Iteration   2: 1132051.247 ops/s
[info] # Warmup Iteration   3: 1245953.658 ops/s
[info] # Warmup Iteration   4: 1241026.974 ops/s
[info] # Warmup Iteration   5: 1246863.609 ops/s
[info] Iteration   1: 1243565.885 ops/s
[info]                  ·gc.alloc.rate:               254.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1246848.365 ops/s
[info]                  ·gc.alloc.rate:      240.834 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1239513.013 ops/s
[info]                  ·gc.alloc.rate:               248.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 649.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1246489.698 ops/s
[info]                  ·gc.alloc.rate:      240.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1246166.499 ops/s
[info]                  ·gc.alloc.rate:      240.704 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1244516.692 ±(99.9%) 11867.257 ops/s [Average]
[info]   (min, avg, max) = (1239513.013, 1244516.692, 1246848.365), stdev = 3081.889
[info]   CI (99.9%): [1232649.435, 1256383.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   245.196 ±(99.9%) 24.546 MB/sec [Average]
[info]   (min, avg, max) = (240.704, 245.196, 254.717), stdev = 6.375
[info]   CI (99.9%): [220.649, 269.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.050 ±(99.9%) 33.103 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.050, 322.374), stdev = 8.597
[info]   CI (99.9%): [276.947, 343.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.690 ±(99.9%) 1079.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.690, 511.855), stdev = 280.284
[info]   CI (99.9%): [≈ 0, 1283.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   259.419 ±(99.9%) 1367.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 259.419, 649.612), stdev = 355.225
[info]   CI (99.9%): [≈ 0, 1627.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.63% complete, ETA 01:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7228.742 ops/s
[info] # Warmup Iteration   2: 68871.228 ops/s
[info] # Warmup Iteration   3: 81202.212 ops/s
[info] # Warmup Iteration   4: 86459.836 ops/s
[info] # Warmup Iteration   5: 86652.905 ops/s
[info] Iteration   1: 88697.524 ops/s
[info]                  ·gc.alloc.rate:               3535.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          62727.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59180.175 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 88725.818 ops/s
[info]                  ·gc.alloc.rate:                   3563.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              63215.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59326.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.739 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 88603.784 ops/s
[info]                  ·gc.alloc.rate:               3561.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          63243.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59657.115 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 88518.983 ops/s
[info]                  ·gc.alloc.rate:               3557.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          63251.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3370.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59934.702 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 88585.956 ops/s
[info]                  ·gc.alloc.rate:                   3561.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              63257.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60080.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.740 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   88626.413 ±(99.9%) 325.762 ops/s [Average]
[info]   (min, avg, max) = (88518.983, 88626.413, 88725.818), stdev = 84.599
[info]   CI (99.9%): [88300.651, 88952.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3555.935 ±(99.9%) 44.990 MB/sec [Average]
[info]   (min, avg, max) = (3535.454, 3555.935, 3563.988), stdev = 11.684
[info]   CI (99.9%): [3510.945, 3600.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63138.934 ±(99.9%) 887.825 B/op [Average]
[info]   (min, avg, max) = (62727.493, 63138.934, 63257.152), stdev = 230.565
[info]   CI (99.9%): [62251.109, 64026.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.640 ±(99.9%) 73.165 MB/sec [Average]
[info]   (min, avg, max) = (3335.519, 3358.640, 3382.420), stdev = 19.001
[info]   CI (99.9%): [3285.474, 3431.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59635.940 ±(99.9%) 1479.851 B/op [Average]
[info]   (min, avg, max) = (59180.175, 59635.940, 60080.769), stdev = 384.313
[info]   CI (99.9%): [58156.089, 61115.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.296 ±(99.9%) 1.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.296, 0.740), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:39:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70123.365 ops/s
[info] # Warmup Iteration   2: 294042.759 ops/s
[info] # Warmup Iteration   3: 295976.022 ops/s
[info] # Warmup Iteration   4: 298216.694 ops/s
[info] # Warmup Iteration   5: 296457.658 ops/s
[info] Iteration   1: 302683.941 ops/s
[info]                  ·gc.alloc.rate:                   1697.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10465.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 301018.230 ops/s
[info]                  ·gc.alloc.rate:                   1684.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              8804.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7019.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 298407.323 ops/s
[info]                  ·gc.alloc.rate:                   1696.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              8949.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10610.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 304564.749 ops/s
[info]                  ·gc.alloc.rate:                   1716.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              8869.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6912.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 310439.996 ops/s
[info]                  ·gc.alloc.rate:               1749.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          8869.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10173.841 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   303422.848 ±(99.9%) 17437.505 ops/s [Average]
[info]   (min, avg, max) = (298407.323, 303422.848, 310439.996), stdev = 4528.465
[info]   CI (99.9%): [285985.343, 320860.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1708.767 ±(99.9%) 98.321 MB/sec [Average]
[info]   (min, avg, max) = (1684.028, 1708.767, 1749.517), stdev = 25.534
[info]   CI (99.9%): [1610.447, 1807.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8863.422 ±(99.9%) 214.462 B/op [Average]
[info]   (min, avg, max) = (8804.450, 8863.422, 8949.132), stdev = 55.695
[info]   CI (99.9%): [8648.960, 9077.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.347 ±(99.9%) 1413.739 MB/sec [Average]
[info]   (min, avg, max) = (1337.654, 1742.347, 2012.695), stdev = 367.144
[info]   CI (99.9%): [328.608, 3156.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9036.519 ±(99.9%) 7304.386 B/op [Average]
[info]   (min, avg, max) = (6912.364, 9036.519, 10610.770), stdev = 1896.926
[info]   CI (99.9%): [1732.133, 16340.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.206), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 6.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.879 ±(99.9%) 28.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.879, 16.762), stdev = 7.273
[info]   CI (99.9%): [≈ 0, 31.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.09% complete, ETA 01:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520981.645 ops/s
[info] # Warmup Iteration   2: 1746028.384 ops/s
[info] # Warmup Iteration   3: 1862541.958 ops/s
[info] # Warmup Iteration   4: 1889982.110 ops/s
[info] # Warmup Iteration   5: 1921244.732 ops/s
[info] Iteration   1: 1890801.053 ops/s
[info]                  ·gc.alloc.rate:               1015.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1111.798 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1929312.856 ops/s
[info]                  ·gc.alloc.rate:               1008.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          822.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1892178.021 ops/s
[info]                  ·gc.alloc.rate:               1003.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          834.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1112.601 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1609723.849 ops/s
[info]                  ·gc.alloc.rate:               852.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          833.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654.250 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1936218.439 ops/s
[info]                  ·gc.alloc.rate:               1007.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          819.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 544.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1851646.844 ±(99.9%) 526873.521 ops/s [Average]
[info]   (min, avg, max) = (1609723.849, 1851646.844, 1936218.439), stdev = 136827.380
[info]   CI (99.9%): [1324773.323, 2378520.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   977.519 ±(99.9%) 269.611 MB/sec [Average]
[info]   (min, avg, max) = (852.496, 977.519, 1015.246), stdev = 70.017
[info]   CI (99.9%): [707.908, 1247.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   830.947 ±(99.9%) 39.625 B/op [Average]
[info]   (min, avg, max) = (819.021, 830.947, 845.042), stdev = 10.290
[info]   CI (99.9%): [791.322, 870.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.226 ±(99.9%) 1408.731 MB/sec [Average]
[info]   (min, avg, max) = (668.516, 936.226, 1338.240), stdev = 365.843
[info]   CI (99.9%): [≈ 0, 2344.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   793.632 ±(99.9%) 1132.963 B/op [Average]
[info]   (min, avg, max) = (544.177, 793.632, 1112.601), stdev = 294.227
[info]   CI (99.9%): [≈ 0, 1926.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.32% complete, ETA 01:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1626729.047 ops/s
[info] # Warmup Iteration   2: 2805540.077 ops/s
[info] # Warmup Iteration   3: 2708830.441 ops/s
[info] # Warmup Iteration   4: 2695490.783 ops/s
[info] # Warmup Iteration   5: 2766321.474 ops/s
[info] Iteration   1: 2762532.189 ops/s
[info]                  ·gc.alloc.rate:               768.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 382.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2767043.277 ops/s
[info]                  ·gc.alloc.rate:               768.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381.929 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2758112.315 ops/s
[info]                  ·gc.alloc.rate:                   781.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2747767.782 ops/s
[info]                  ·gc.alloc.rate:               756.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2685527.855 ops/s
[info]                  ·gc.alloc.rate:               738.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 393.899 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2744196.684 ±(99.9%) 129249.011 ops/s [Average]
[info]   (min, avg, max) = (2685527.855, 2744196.684, 2767043.277), stdev = 33565.558
[info]   CI (99.9%): [2614947.673, 2873445.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   762.611 ±(99.9%) 60.789 MB/sec [Average]
[info]   (min, avg, max) = (738.993, 762.611, 781.111), stdev = 15.787
[info]   CI (99.9%): [701.822, 823.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.265 ±(99.9%) 19.784 B/op [Average]
[info]   (min, avg, max) = (433.075, 437.265, 445.705), stdev = 5.138
[info]   CI (99.9%): [417.481, 457.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.037 ±(99.9%) 1156.647 MB/sec [Average]
[info]   (min, avg, max) = (670.871, 806.037, 1343.368), stdev = 300.377
[info]   CI (99.9%): [≈ 0, 1962.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   461.863 ±(99.9%) 656.089 B/op [Average]
[info]   (min, avg, max) = (381.929, 461.863, 766.531), stdev = 170.384
[info]   CI (99.9%): [≈ 0, 1117.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.55% complete, ETA 01:39:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1974539.583 ops/s
[info] # Warmup Iteration   2: 3031438.725 ops/s
[info] # Warmup Iteration   3: 3109598.183 ops/s
[info] # Warmup Iteration   4: 3065237.822 ops/s
[info] # Warmup Iteration   5: 3109699.737 ops/s
[info] Iteration   1: 3109327.362 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3109387.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3105937.044 ops/s
[info]                  ·gc.alloc.rate:      1.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.585 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3109329.965 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3118397.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3110475.903 ±(99.9%) 17976.134 ops/s [Average]
[info]   (min, avg, max) = (3105937.044, 3110475.903, 3118397.733), stdev = 4668.345
[info]   CI (99.9%): [3092499.769, 3128452.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.231 ±(99.9%) 1.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.231, 1.154), stdev = 0.516
[info]   CI (99.9%): [≈ 0, 2.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.117 ±(99.9%) 1.006 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.117, 0.585), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.78% complete, ETA 01:38:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7702.593 ops/s
[info] # Warmup Iteration   2: 42197.143 ops/s
[info] # Warmup Iteration   3: 46795.437 ops/s
[info] # Warmup Iteration   4: 47564.770 ops/s
[info] # Warmup Iteration   5: 47207.729 ops/s
[info] Iteration   1: 46632.706 ops/s
[info]                  ·gc.alloc.rate:                   2095.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              70710.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67907.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 47781.608 ops/s
[info]                  ·gc.alloc.rate:                   2171.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              71523.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66066.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 44528.077 ops/s
[info]                  ·gc.alloc.rate:               2001.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          70746.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70799.776 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 47406.627 ops/s
[info]                  ·gc.alloc.rate:               2155.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          71563.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66557.473 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 48242.970 ops/s
[info]                  ·gc.alloc.rate:               2192.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          71519.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65484.390 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   46918.398 ±(99.9%) 5624.197 ops/s [Average]
[info]   (min, avg, max) = (44528.077, 46918.398, 48242.970), stdev = 1460.586
[info]   CI (99.9%): [41294.201, 52542.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2123.318 ±(99.9%) 296.238 MB/sec [Average]
[info]   (min, avg, max) = (2001.646, 2123.318, 2192.285), stdev = 76.932
[info]   CI (99.9%): [1827.080, 2419.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71212.578 ±(99.9%) 1703.502 B/op [Average]
[info]   (min, avg, max) = (70710.947, 71212.578, 71563.192), stdev = 442.394
[info]   CI (99.9%): [69509.075, 72916.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2006.721 ±(99.9%) 13.938 MB/sec [Average]
[info]   (min, avg, max) = (2003.165, 2006.721, 2012.619), stdev = 3.620
[info]   CI (99.9%): [1992.783, 2020.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67363.249 ±(99.9%) 8160.896 B/op [Average]
[info]   (min, avg, max) = (65484.390, 67363.249, 70799.776), stdev = 2119.359
[info]   CI (99.9%): [59202.352, 75524.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.914 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.040), stdev = 1.795
[info]   CI (99.9%): [≈ 0, 7.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.946 ±(99.9%) 233.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.946, 136.299), stdev = 60.590
[info]   CI (99.9%): [≈ 0, 261.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.01% complete, ETA 01:38:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72390.954 ops/s
[info] # Warmup Iteration   2: 232135.632 ops/s
[info] # Warmup Iteration   3: 230094.226 ops/s
[info] # Warmup Iteration   4: 239162.475 ops/s
[info] # Warmup Iteration   5: 243244.475 ops/s
[info] Iteration   1: 244948.015 ops/s
[info]                  ·gc.alloc.rate:                   2690.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              17289.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17231.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 246119.291 ops/s
[info]                  ·gc.alloc.rate:                   2690.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              17207.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17132.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 244515.761 ops/s
[info]                  ·gc.alloc.rate:               2700.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          17380.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17270.532 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 246163.582 ops/s
[info]                  ·gc.alloc.rate:               2718.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          17380.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17193.611 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 246410.797 ops/s
[info]                  ·gc.alloc.rate:               2720.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          17377.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17223.251 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   245631.489 ±(99.9%) 3244.827 ops/s [Average]
[info]   (min, avg, max) = (244515.761, 245631.489, 246410.797), stdev = 842.671
[info]   CI (99.9%): [242386.662, 248876.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2704.314 ±(99.9%) 56.018 MB/sec [Average]
[info]   (min, avg, max) = (2690.882, 2704.314, 2720.725), stdev = 14.548
[info]   CI (99.9%): [2648.296, 2760.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17327.298 ±(99.9%) 297.901 B/op [Average]
[info]   (min, avg, max) = (17207.627, 17327.298, 17380.735), stdev = 77.364
[info]   CI (99.9%): [17029.397, 17625.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2686.044 ±(99.9%) 26.784 MB/sec [Average]
[info]   (min, avg, max) = (2679.211, 2686.044, 2696.561), stdev = 6.956
[info]   CI (99.9%): [2659.259, 2712.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17210.311 ±(99.9%) 197.151 B/op [Average]
[info]   (min, avg, max) = (17132.996, 17210.311, 17270.532), stdev = 51.199
[info]   CI (99.9%): [17013.161, 17407.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.479), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.695 ±(99.9%) 5.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.076), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 5.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.24% complete, ETA 01:38:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72520.483 ops/s
[info] # Warmup Iteration   2: 362966.940 ops/s
[info] # Warmup Iteration   3: 379500.138 ops/s
[info] # Warmup Iteration   4: 377887.148 ops/s
[info] # Warmup Iteration   5: 379752.916 ops/s
[info] Iteration   1: 377471.605 ops/s
[info]                  ·gc.alloc.rate:                   1963.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              8187.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8375.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 386351.225 ops/s
[info]                  ·gc.alloc.rate:                   1995.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8172.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 387736.264 ops/s
[info]                  ·gc.alloc.rate:                   2001.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              8123.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8128.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 389580.282 ops/s
[info]                  ·gc.alloc.rate:                   2012.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              8131.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8092.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 375167.010 ops/s
[info]                  ·gc.alloc.rate:               1927.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          8084.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5608.778 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   383261.277 ±(99.9%) 24995.140 ops/s [Average]
[info]   (min, avg, max) = (375167.010, 383261.277, 389580.282), stdev = 6491.159
[info]   CI (99.9%): [358266.137, 408256.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1980.205 ±(99.9%) 134.110 MB/sec [Average]
[info]   (min, avg, max) = (1927.101, 1980.205, 2012.859), stdev = 34.828
[info]   CI (99.9%): [1846.095, 2114.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8131.005 ±(99.9%) 141.205 B/op [Average]
[info]   (min, avg, max) = (8084.564, 8131.005, 8187.190), stdev = 36.670
[info]   CI (99.9%): [7989.800, 8272.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.639 ±(99.9%) 1150.998 MB/sec [Average]
[info]   (min, avg, max) = (1336.953, 1871.639, 2008.920), stdev = 298.910
[info]   CI (99.9%): [720.641, 3022.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7675.318 ±(99.9%) 4468.393 B/op [Average]
[info]   (min, avg, max) = (5608.778, 7675.318, 8375.487), stdev = 1160.427
[info]   CI (99.9%): [3206.926, 12143.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.622), stdev = 1.579
[info]   CI (99.9%): [≈ 0, 6.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.342 ±(99.9%) 25.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.342, 15.103), stdev = 6.588
[info]   CI (99.9%): [≈ 0, 28.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.47% complete, ETA 01:38:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1181385.716 ops/s
[info] # Warmup Iteration   2: 2271658.273 ops/s
[info] # Warmup Iteration   3: 2257914.290 ops/s
[info] # Warmup Iteration   4: 2232633.017 ops/s
[info] # Warmup Iteration   5: 2101418.104 ops/s
[info] Iteration   1: 2209344.662 ops/s
[info]                  ·gc.alloc.rate:               786.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.846 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2259223.088 ops/s
[info]                  ·gc.alloc.rate:                   817.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              569.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2282590.046 ops/s
[info]                  ·gc.alloc.rate:                   805.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2288265.321 ops/s
[info]                  ·gc.alloc.rate:               808.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2286952.593 ops/s
[info]                  ·gc.alloc.rate:               815.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.775 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2265275.142 ±(99.9%) 128624.075 ops/s [Average]
[info]   (min, avg, max) = (2209344.662, 2265275.142, 2288265.321), stdev = 33403.264
[info]   CI (99.9%): [2136651.067, 2393899.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   806.765 ±(99.9%) 47.178 MB/sec [Average]
[info]   (min, avg, max) = (786.648, 806.765, 817.738), stdev = 12.252
[info]   CI (99.9%): [759.587, 853.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   560.487 ±(99.9%) 21.550 B/op [Average]
[info]   (min, avg, max) = (555.675, 560.487, 569.492), stdev = 5.596
[info]   CI (99.9%): [538.937, 582.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.204 ±(99.9%) 1156.309 MB/sec [Average]
[info]   (min, avg, max) = (670.815, 806.204, 1343.377), stdev = 300.290
[info]   CI (99.9%): [≈ 0, 1962.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   560.385 ±(99.9%) 807.979 B/op [Average]
[info]   (min, avg, max) = (462.295, 560.385, 935.559), stdev = 209.830
[info]   CI (99.9%): [≈ 0, 1368.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.70% complete, ETA 01:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6869.596 ops/s
[info] # Warmup Iteration   2: 73620.541 ops/s
[info] # Warmup Iteration   3: 86873.426 ops/s
[info] # Warmup Iteration   4: 88853.792 ops/s
[info] # Warmup Iteration   5: 88987.768 ops/s
[info] Iteration   1: 88871.082 ops/s
[info]                  ·gc.alloc.rate:                   3501.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              62018.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59557.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 89085.861 ops/s
[info]                  ·gc.alloc.rate:                   3525.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              62274.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59602.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 88880.980 ops/s
[info]                  ·gc.alloc.rate:               3535.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          62546.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4058.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71793.332 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 86996.197 ops/s
[info]                  ·gc.alloc.rate:               3419.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          61861.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49085.153 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 86891.165 ops/s
[info]                  ·gc.alloc.rate:               3443.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          62372.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61514.850 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   88145.057 ±(99.9%) 4238.303 ops/s [Average]
[info]   (min, avg, max) = (86891.165, 88145.057, 89085.861), stdev = 1100.674
[info]   CI (99.9%): [83906.754, 92383.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3485.275 ±(99.9%) 196.567 MB/sec [Average]
[info]   (min, avg, max) = (3419.934, 3485.275, 3535.479), stdev = 51.048
[info]   CI (99.9%): [3288.708, 3681.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62215.083 ±(99.9%) 1057.686 B/op [Average]
[info]   (min, avg, max) = (61861.935, 62215.083, 62546.890), stdev = 274.678
[info]   CI (99.9%): [61157.398, 63272.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3381.012 ±(99.9%) 1831.134 MB/sec [Average]
[info]   (min, avg, max) = (2713.591, 3381.012, 4058.137), stdev = 475.540
[info]   CI (99.9%): [1549.879, 5212.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60310.705 ±(99.9%) 31067.698 B/op [Average]
[info]   (min, avg, max) = (49085.153, 60310.705, 71793.332), stdev = 8068.183
[info]   CI (99.9%): [29243.007, 91378.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.442 ±(99.9%) 3.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 1.843), stdev = 0.799
[info]   CI (99.9%): [≈ 0, 3.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.94% complete, ETA 01:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99669.918 ops/s
[info] # Warmup Iteration   2: 243556.919 ops/s
[info] # Warmup Iteration   3: 267322.559 ops/s
[info] # Warmup Iteration   4: 259869.969 ops/s
[info] # Warmup Iteration   5: 261754.399 ops/s
[info] Iteration   1: 263502.076 ops/s
[info]                  ·gc.alloc.rate:                   2154.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              12868.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16034.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 266291.512 ops/s
[info]                  ·gc.alloc.rate:                   2149.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              12705.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11874.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 267096.838 ops/s
[info]                  ·gc.alloc.rate:               2153.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          12690.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11834.944 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 261453.647 ops/s
[info]                  ·gc.alloc.rate:               2126.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          12800.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12098.321 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 266850.681 ops/s
[info]                  ·gc.alloc.rate:                   2168.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11874.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   265038.951 ±(99.9%) 9491.381 ops/s [Average]
[info]   (min, avg, max) = (261453.647, 265038.951, 267096.838), stdev = 2464.881
[info]   CI (99.9%): [255547.570, 274530.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2150.660 ±(99.9%) 59.084 MB/sec [Average]
[info]   (min, avg, max) = (2126.463, 2150.660, 2168.853), stdev = 15.344
[info]   CI (99.9%): [2091.577, 2209.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12771.600 ±(99.9%) 282.353 B/op [Average]
[info]   (min, avg, max) = (12690.706, 12771.600, 12868.104), stdev = 73.326
[info]   CI (99.9%): [12489.248, 13053.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2145.055 ±(99.9%) 1161.449 MB/sec [Average]
[info]   (min, avg, max) = (2008.584, 2145.055, 2684.608), stdev = 301.625
[info]   CI (99.9%): [983.606, 3306.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12743.436 ±(99.9%) 7095.779 B/op [Average]
[info]   (min, avg, max) = (11834.944, 12743.436, 16034.611), stdev = 1842.751
[info]   CI (99.9%): [5647.657, 19839.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.560), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 6.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.302 ±(99.9%) 36.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.302, 21.262), stdev = 9.481
[info]   CI (99.9%): [≈ 0, 40.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.17% complete, ETA 01:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567445.050 ops/s
[info] # Warmup Iteration   2: 1483549.276 ops/s
[info] # Warmup Iteration   3: 1499470.104 ops/s
[info] # Warmup Iteration   4: 1501168.805 ops/s
[info] # Warmup Iteration   5: 1504740.209 ops/s
[info] Iteration   1: 1498112.617 ops/s
[info]                  ·gc.alloc.rate:                   897.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1499110.778 ops/s
[info]                  ·gc.alloc.rate:                   912.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1508735.758 ops/s
[info]                  ·gc.alloc.rate:               897.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1497109.347 ops/s
[info]                  ·gc.alloc.rate:               889.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 703.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1509804.422 ops/s
[info]                  ·gc.alloc.rate:               896.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1502574.584 ±(99.9%) 23737.474 ops/s [Average]
[info]   (min, avg, max) = (1497109.347, 1502574.584, 1509804.422), stdev = 6164.547
[info]   CI (99.9%): [1478837.110, 1526312.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   898.740 ±(99.9%) 32.575 MB/sec [Average]
[info]   (min, avg, max) = (889.482, 898.740, 912.637), stdev = 8.460
[info]   CI (99.9%): [866.165, 931.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   941.390 ±(99.9%) 37.964 B/op [Average]
[info]   (min, avg, max) = (934.951, 941.390, 958.144), stdev = 9.859
[info]   CI (99.9%): [903.426, 979.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.833 ±(99.9%) 1151.199 MB/sec [Average]
[info]   (min, avg, max) = (668.460, 802.833, 1337.633), stdev = 298.963
[info]   CI (99.9%): [≈ 0, 1954.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   841.252 ±(99.9%) 1212.114 B/op [Average]
[info]   (min, avg, max) = (697.902, 841.252, 1404.332), stdev = 314.782
[info]   CI (99.9%): [≈ 0, 2053.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.022), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.40% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1374927.506 ops/s
[info] # Warmup Iteration   2: 2784218.663 ops/s
[info] # Warmup Iteration   3: 2764224.487 ops/s
[info] # Warmup Iteration   4: 2826102.459 ops/s
[info] # Warmup Iteration   5: 2851299.029 ops/s
[info] Iteration   1: 2863286.305 ops/s
[info]                  ·gc.alloc.rate:               991.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2864638.944 ops/s
[info]                  ·gc.alloc.rate:               991.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2850069.763 ops/s
[info]                  ·gc.alloc.rate:                   1001.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2860231.753 ops/s
[info]                  ·gc.alloc.rate:               998.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2807012.208 ops/s
[info]                  ·gc.alloc.rate:                   996.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2849047.795 ±(99.9%) 93113.455 ops/s [Average]
[info]   (min, avg, max) = (2807012.208, 2849047.795, 2864638.944), stdev = 24181.269
[info]   CI (99.9%): [2755934.339, 2942161.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   995.855 ±(99.9%) 17.380 MB/sec [Average]
[info]   (min, avg, max) = (991.012, 995.855, 1001.721), stdev = 4.514
[info]   CI (99.9%): [978.475, 1013.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.156 ±(99.9%) 22.966 B/op [Average]
[info]   (min, avg, max) = (544.479, 550.156, 558.783), stdev = 5.964
[info]   CI (99.9%): [527.190, 573.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.793 ±(99.9%) 1418.817 MB/sec [Average]
[info]   (min, avg, max) = (671.203, 940.793, 1344.911), stdev = 368.462
[info]   CI (99.9%): [≈ 0, 2359.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   520.811 ±(99.9%) 799.122 B/op [Average]
[info]   (min, avg, max) = (368.915, 520.811, 754.075), stdev = 207.529
[info]   CI (99.9%): [≈ 0, 1319.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.63% complete, ETA 01:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1896396.377 ops/s
[info] # Warmup Iteration   2: 2580530.864 ops/s
[info] # Warmup Iteration   3: 3168274.070 ops/s
[info] # Warmup Iteration   4: 3178696.254 ops/s
[info] # Warmup Iteration   5: 3176753.557 ops/s
[info] Iteration   1: 3177936.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3139452.719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3169723.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3169144.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3179817.554 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3167215.031 ±(99.9%) 62522.335 ops/s [Average]
[info]   (min, avg, max) = (3139452.719, 3167215.031, 3179817.554), stdev = 16236.852
[info]   CI (99.9%): [3104692.696, 3229737.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.86% complete, ETA 01:36:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102690.507 ops/s
[info] # Warmup Iteration   2: 385690.619 ops/s
[info] # Warmup Iteration   3: 396576.603 ops/s
[info] # Warmup Iteration   4: 397686.106 ops/s
[info] # Warmup Iteration   5: 386474.948 ops/s
[info] Iteration   1: 402244.913 ops/s
[info]                  ·gc.alloc.rate:                   2570.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              10057.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10452.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 403368.388 ops/s
[info]                  ·gc.alloc.rate:                   2575.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              10047.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7814.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 384807.248 ops/s
[info]                  ·gc.alloc.rate:               2500.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          10225.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10937.367 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 390819.527 ops/s
[info]                  ·gc.alloc.rate:                   2510.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              10109.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8096.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 392364.025 ops/s
[info]                  ·gc.alloc.rate:                   2547.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              10220.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10781.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   394720.820 ±(99.9%) 30469.148 ops/s [Average]
[info]   (min, avg, max) = (384807.248, 394720.820, 403368.388), stdev = 7912.741
[info]   CI (99.9%): [364251.673, 425189.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2540.941 ±(99.9%) 131.276 MB/sec [Average]
[info]   (min, avg, max) = (2500.223, 2540.941, 2575.186), stdev = 34.092
[info]   CI (99.9%): [2409.666, 2672.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10132.170 ±(99.9%) 332.566 B/op [Average]
[info]   (min, avg, max) = (10047.888, 10132.170, 10225.555), stdev = 86.366
[info]   CI (99.9%): [9799.604, 10464.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2409.438 ±(99.9%) 1415.280 MB/sec [Average]
[info]   (min, avg, max) = (2002.770, 2409.438, 2687.842), stdev = 367.544
[info]   CI (99.9%): [994.158, 3824.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9616.471 ±(99.9%) 5890.039 B/op [Average]
[info]   (min, avg, max) = (7814.429, 9616.471, 10937.367), stdev = 1529.624
[info]   CI (99.9%): [3726.432, 15506.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 1.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.671), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.09% complete, ETA 01:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8496.693 ops/s
[info] # Warmup Iteration   2: 21463.726 ops/s
[info] # Warmup Iteration   3: 25677.479 ops/s
[info] # Warmup Iteration   4: 26009.779 ops/s
[info] # Warmup Iteration   5: 25732.134 ops/s
[info] Iteration   1: 25657.449 ops/s
[info]                  ·gc.alloc.rate:               1657.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          101693.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123650.324 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 25773.273 ops/s
[info]                  ·gc.alloc.rate:                   1647.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              100587.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82092.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25809.566 ops/s
[info]                  ·gc.alloc.rate:                   1665.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              101567.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122800.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26198.135 ops/s
[info]                  ·gc.alloc.rate:                   1682.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              101102.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80438.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26218.859 ops/s
[info]                  ·gc.alloc.rate:                   1687.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              101304.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80373.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25931.456 ±(99.9%) 997.972 ops/s [Average]
[info]   (min, avg, max) = (25657.449, 25931.456, 26218.859), stdev = 259.170
[info]   CI (99.9%): [24933.484, 26929.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1668.274 ±(99.9%) 65.185 MB/sec [Average]
[info]   (min, avg, max) = (1647.258, 1668.274, 1687.602), stdev = 16.928
[info]   CI (99.9%): [1603.089, 1733.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101250.991 ±(99.9%) 1679.673 B/op [Average]
[info]   (min, avg, max) = (100587.546, 101250.991, 101693.834), stdev = 436.206
[info]   CI (99.9%): [99571.318, 102930.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.400 ±(99.9%) 1421.740 MB/sec [Average]
[info]   (min, avg, max) = (1338.926, 1610.400, 2015.806), stdev = 369.221
[info]   CI (99.9%): [188.660, 3032.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97871.048 ±(99.9%) 89170.889 B/op [Average]
[info]   (min, avg, max) = (80373.632, 97871.048, 123650.324), stdev = 23157.397
[info]   CI (99.9%): [8700.159, 187041.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 2.582), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 5.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.249 ±(99.9%) 265.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.249, 157.636), stdev = 68.828
[info]   CI (99.9%): [≈ 0, 312.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.32% complete, ETA 01:35:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.830 ops/s
[info] # Warmup Iteration   2: 88488.756 ops/s
[info] # Warmup Iteration   3: 99462.218 ops/s
[info] # Warmup Iteration   4: 98192.793 ops/s
[info] # Warmup Iteration   5: 98303.575 ops/s
[info] Iteration   1: 100962.894 ops/s
[info]                  ·gc.alloc.rate:               987.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          15386.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20788.556 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 101171.644 ops/s
[info]                  ·gc.alloc.rate:               975.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          15173.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10377.991 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 100527.301 ops/s
[info]                  ·gc.alloc.rate:                   993.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              15555.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20894.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 100737.215 ops/s
[info]                  ·gc.alloc.rate:               974.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          15220.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10428.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 100498.546 ops/s
[info]                  ·gc.alloc.rate:                   995.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              15586.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20926.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100779.520 ±(99.9%) 1108.923 ops/s [Average]
[info]   (min, avg, max) = (100498.546, 100779.520, 101171.644), stdev = 287.984
[info]   CI (99.9%): [99670.597, 101888.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   985.163 ±(99.9%) 38.182 MB/sec [Average]
[info]   (min, avg, max) = (974.180, 985.163, 995.348), stdev = 9.916
[info]   CI (99.9%): [946.982, 1023.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15384.374 ±(99.9%) 724.898 B/op [Average]
[info]   (min, avg, max) = (15173.077, 15384.374, 15586.004), stdev = 188.254
[info]   CI (99.9%): [14659.476, 16109.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.898 ±(99.9%) 1408.012 MB/sec [Average]
[info]   (min, avg, max) = (667.212, 1067.898, 1336.424), stdev = 365.656
[info]   CI (99.9%): [≈ 0, 2475.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16683.319 ±(99.9%) 22076.844 B/op [Average]
[info]   (min, avg, max) = (10377.991, 16683.319, 20926.870), stdev = 5733.286
[info]   CI (99.9%): [≈ 0, 38760.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.296 ±(99.9%) 1.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.296, 0.939), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.55% complete, ETA 01:35:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21156.512 ops/s
[info] # Warmup Iteration   2: 61209.286 ops/s
[info] # Warmup Iteration   3: 65179.221 ops/s
[info] # Warmup Iteration   4: 65806.593 ops/s
[info] # Warmup Iteration   5: 67707.401 ops/s
[info] Iteration   1: 68583.751 ops/s
[info]                  ·gc.alloc.rate:               1217.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          27935.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15363.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 68021.238 ops/s
[info]                  ·gc.alloc.rate:                   1223.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              28316.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30997.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 67283.894 ops/s
[info]                  ·gc.alloc.rate:               1217.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          28482.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31351.942 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 68918.215 ops/s
[info]                  ·gc.alloc.rate:                   1246.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              28466.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30622.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69223.638 ops/s
[info]                  ·gc.alloc.rate:                   1251.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              28462.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30457.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   68406.147 ±(99.9%) 2963.779 ops/s [Average]
[info]   (min, avg, max) = (67283.894, 68406.147, 69223.638), stdev = 769.684
[info]   CI (99.9%): [65442.368, 71369.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1231.532 ±(99.9%) 63.257 MB/sec [Average]
[info]   (min, avg, max) = (1217.687, 1231.532, 1251.856), stdev = 16.428
[info]   CI (99.9%): [1168.275, 1294.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28332.507 ±(99.9%) 891.854 B/op [Average]
[info]   (min, avg, max) = (27935.897, 28332.507, 28482.093), stdev = 231.612
[info]   CI (99.9%): [27440.653, 29224.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1206.083 ±(99.9%) 1154.655 MB/sec [Average]
[info]   (min, avg, max) = (669.677, 1206.083, 1340.948), stdev = 299.860
[info]   CI (99.9%): [51.428, 2360.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27758.561 ±(99.9%) 26714.391 B/op [Average]
[info]   (min, avg, max) = (15363.583, 27758.561, 31351.942), stdev = 6937.642
[info]   CI (99.9%): [1044.171, 54472.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.164), stdev = 1.367
[info]   CI (99.9%): [≈ 0, 6.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.429 ±(99.9%) 120.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.429, 72.258), stdev = 31.224
[info]   CI (99.9%): [≈ 0, 138.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.78% complete, ETA 01:35:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54691.619 ops/s
[info] # Warmup Iteration   2: 138553.054 ops/s
[info] # Warmup Iteration   3: 135032.198 ops/s
[info] # Warmup Iteration   4: 138782.324 ops/s
[info] # Warmup Iteration   5: 140130.848 ops/s
[info] Iteration   1: 139705.898 ops/s
[info]                  ·gc.alloc.rate:                   984.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15136.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 140135.851 ops/s
[info]                  ·gc.alloc.rate:               960.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          10781.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7548.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 137107.095 ops/s
[info]                  ·gc.alloc.rate:                   938.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              10768.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7715.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 138383.732 ops/s
[info]                  ·gc.alloc.rate:                   972.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              11055.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15304.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 139761.820 ops/s
[info]                  ·gc.alloc.rate:                   953.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              10738.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7576.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   139018.879 ±(99.9%) 4843.979 ops/s [Average]
[info]   (min, avg, max) = (137107.095, 139018.879, 140135.851), stdev = 1257.966
[info]   CI (99.9%): [134174.900, 143862.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   961.728 ±(99.9%) 68.320 MB/sec [Average]
[info]   (min, avg, max) = (938.148, 961.728, 984.673), stdev = 17.742
[info]   CI (99.9%): [893.408, 1030.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10886.627 ±(99.9%) 656.366 B/op [Average]
[info]   (min, avg, max) = (10738.781, 10886.627, 11088.571), stdev = 170.456
[info]   CI (99.9%): [10230.261, 11542.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.386 ±(99.9%) 1418.335 MB/sec [Average]
[info]   (min, avg, max) = (672.121, 941.386, 1345.624), stdev = 368.337
[info]   CI (99.9%): [≈ 0, 2359.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10656.202 ±(99.9%) 16046.982 B/op [Average]
[info]   (min, avg, max) = (7548.502, 10656.202, 15304.140), stdev = 4167.350
[info]   CI (99.9%): [≈ 0, 26703.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.331 ±(99.9%) 0.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 0.478), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 1.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.01% complete, ETA 01:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1703.219 ops/s
[info] # Warmup Iteration   2: 31100.725 ops/s
[info] # Warmup Iteration   3: 36317.068 ops/s
[info] # Warmup Iteration   4: 36831.443 ops/s
[info] # Warmup Iteration   5: 36554.284 ops/s
[info] Iteration   1: 36713.785 ops/s
[info]                  ·gc.alloc.rate:               1829.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          78432.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85570.358 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 36364.119 ops/s
[info]                  ·gc.alloc.rate:                   1807.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              78197.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86564.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37266.131 ops/s
[info]                  ·gc.alloc.rate:                   1862.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              78634.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56464.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37217.343 ops/s
[info]                  ·gc.alloc.rate:               1860.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          78674.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85001.023 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 37206.241 ops/s
[info]                  ·gc.alloc.rate:               1860.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          78690.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85192.926 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   36953.524 ±(99.9%) 1535.513 ops/s [Average]
[info]   (min, avg, max) = (36364.119, 36953.524, 37266.131), stdev = 398.768
[info]   CI (99.9%): [35418.011, 38489.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1844.002 ±(99.9%) 94.981 MB/sec [Average]
[info]   (min, avg, max) = (1807.231, 1844.002, 1862.028), stdev = 24.666
[info]   CI (99.9%): [1749.021, 1938.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78525.655 ±(99.9%) 811.734 B/op [Average]
[info]   (min, avg, max) = (78197.068, 78525.655, 78690.841), stdev = 210.805
[info]   CI (99.9%): [77713.921, 79337.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.660 ±(99.9%) 1151.097 MB/sec [Average]
[info]   (min, avg, max) = (1337.063, 1871.660, 2014.065), stdev = 298.936
[info]   CI (99.9%): [720.562, 3022.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79758.673 ±(99.9%) 50195.979 B/op [Average]
[info]   (min, avg, max) = (56464.598, 79758.673, 86564.461), stdev = 13035.736
[info]   CI (99.9%): [29562.694, 129954.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.536 ±(99.9%) 3.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 1.802), stdev = 0.803
[info]   CI (99.9%): [≈ 0, 3.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.24% complete, ETA 01:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12042.839 ops/s
[info] # Warmup Iteration   2: 31104.040 ops/s
[info] # Warmup Iteration   3: 32453.293 ops/s
[info] # Warmup Iteration   4: 29931.585 ops/s
[info] # Warmup Iteration   5: 32174.137 ops/s
[info] Iteration   1: 32479.727 ops/s
[info]                  ·gc.alloc.rate:      518.076 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32359.571 ops/s
[info]                  ·gc.alloc.rate:               531.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          25844.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32479.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32258.131 ops/s
[info]                  ·gc.alloc.rate:               532.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          25992.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32581.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 32216.741 ops/s
[info]                  ·gc.alloc.rate:                   539.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              26353.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32656.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 32090.490 ops/s
[info]                  ·gc.alloc.rate:      511.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32280.932 ±(99.9%) 566.620 ops/s [Average]
[info]   (min, avg, max) = (32090.490, 32280.932, 32479.727), stdev = 147.149
[info]   CI (99.9%): [31714.312, 32847.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   526.734 ±(99.9%) 43.576 MB/sec [Average]
[info]   (min, avg, max) = (511.988, 526.734, 539.457), stdev = 11.317
[info]   CI (99.9%): [483.158, 570.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25679.591 ±(99.9%) 2145.015 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25679.591, 26353.171), stdev = 557.054
[info]   CI (99.9%): [23534.576, 27824.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   400.821 ±(99.9%) 1408.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.821, 668.480), stdev = 365.898
[info]   CI (99.9%): [≈ 0, 1809.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19543.343 ±(99.9%) 68698.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19543.343, 32656.136), stdev = 17840.660
[info]   CI (99.9%): [≈ 0, 88241.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.017), stdev = 0.455
[info]   CI (99.9%): [≈ 0, 1.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.48% complete, ETA 01:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13389.344 ops/s
[info] # Warmup Iteration   2: 31347.286 ops/s
[info] # Warmup Iteration   3: 32350.117 ops/s
[info] # Warmup Iteration   4: 32351.401 ops/s
[info] # Warmup Iteration   5: 32477.528 ops/s
[info] Iteration   1: 32595.626 ops/s
[info]                  ·gc.alloc.rate:      397.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32541.870 ops/s
[info]                  ·gc.alloc.rate:               411.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          19905.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24742.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32598.093 ops/s
[info]                  ·gc.alloc.rate:                   418.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              20205.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32226.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32740.639 ops/s
[info]                  ·gc.alloc.rate:      399.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32581.616 ops/s
[info]                  ·gc.alloc.rate:                   415.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              20050.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32243.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32611.569 ±(99.9%) 291.036 ops/s [Average]
[info]   (min, avg, max) = (32541.870, 32611.569, 32740.639), stdev = 75.581
[info]   CI (99.9%): [32320.532, 32902.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   408.565 ±(99.9%) 35.798 MB/sec [Average]
[info]   (min, avg, max) = (397.812, 408.565, 418.541), stdev = 9.297
[info]   CI (99.9%): [372.767, 444.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19715.539 ±(99.9%) 1830.210 B/op [Average]
[info]   (min, avg, max) = (19208.013, 19715.539, 20205.441), stdev = 475.300
[info]   CI (99.9%): [17885.329, 21545.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.350 ±(99.9%) 1321.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.350, 667.544), stdev = 343.115
[info]   CI (99.9%): [≈ 0, 1690.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17842.446 ±(99.9%) 63814.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17842.446, 32243.085), stdev = 16572.526
[info]   CI (99.9%): [≈ 0, 81657.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.603 ±(99.9%) 3.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 2.011), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 4.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.71% complete, ETA 01:34:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18068.354 ops/s
[info] # Warmup Iteration   2: 32529.515 ops/s
[info] # Warmup Iteration   3: 34405.380 ops/s
[info] # Warmup Iteration   4: 33242.130 ops/s
[info] # Warmup Iteration   5: 34419.638 ops/s
[info] Iteration   1: 34598.375 ops/s
[info]                  ·gc.alloc.rate:      415.381 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32630.042 ops/s
[info]                  ·gc.alloc.rate:               409.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          19770.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24675.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 34418.306 ops/s
[info]                  ·gc.alloc.rate:               427.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          19534.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30657.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34578.986 ops/s
[info]                  ·gc.alloc.rate:      415.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34449.669 ops/s
[info]                  ·gc.alloc.rate:               431.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          19722.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30629.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34135.076 ±(99.9%) 3253.748 ops/s [Average]
[info]   (min, avg, max) = (32630.042, 34135.076, 34598.375), stdev = 844.988
[info]   CI (99.9%): [30881.328, 37388.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.918 ±(99.9%) 35.509 MB/sec [Average]
[info]   (min, avg, max) = (409.931, 419.918, 431.896), stdev = 9.222
[info]   CI (99.9%): [384.409, 455.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19363.940 ±(99.9%) 1679.326 B/op [Average]
[info]   (min, avg, max) = (18896.012, 19363.940, 19770.199), stdev = 436.116
[info]   CI (99.9%): [17684.614, 21043.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.575 ±(99.9%) 1326.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.575, 670.737), stdev = 344.457
[info]   CI (99.9%): [≈ 0, 1696.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17192.471 ±(99.9%) 61157.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17192.471, 30657.712), stdev = 15882.505
[info]   CI (99.9%): [≈ 0, 78350.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.94% complete, ETA 01:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19656.412 ops/s
[info] # Warmup Iteration   2: 31915.254 ops/s
[info] # Warmup Iteration   3: 34792.697 ops/s
[info] # Warmup Iteration   4: 34603.345 ops/s
[info] # Warmup Iteration   5: 34576.195 ops/s
[info] Iteration   1: 35174.589 ops/s
[info]                  ·gc.alloc.rate:      313.464 MB/sec
[info]                  ·gc.alloc.rate.norm: 14024.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34801.535 ops/s
[info]                  ·gc.alloc.rate:               323.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          14647.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23136.334 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 34964.034 ops/s
[info]                  ·gc.alloc.rate:                   323.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              14561.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23028.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 35251.137 ops/s
[info]                  ·gc.alloc.rate:      314.256 MB/sec
[info]                  ·gc.alloc.rate.norm: 14024.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35043.526 ops/s
[info]                  ·gc.alloc.rate:               333.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          14964.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30126.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   35046.964 ±(99.9%) 680.975 ops/s [Average]
[info]   (min, avg, max) = (34801.535, 35046.964, 35251.137), stdev = 176.847
[info]   CI (99.9%): [34365.989, 35727.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   321.680 ±(99.9%) 31.380 MB/sec [Average]
[info]   (min, avg, max) = (313.464, 321.680, 333.292), stdev = 8.149
[info]   CI (99.9%): [290.300, 353.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14444.258 ±(99.9%) 1586.310 B/op [Average]
[info]   (min, avg, max) = (14024.012, 14444.258, 14964.563), stdev = 411.960
[info]   CI (99.9%): [12857.948, 16030.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338.839 ±(99.9%) 1217.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.839, 670.989), stdev = 316.087
[info]   CI (99.9%): [≈ 0, 1555.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   15258.336 ±(99.9%) 54766.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15258.336, 30126.852), stdev = 14222.733
[info]   CI (99.9%): [≈ 0, 70025.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.562 ±(99.9%) 4.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.811), stdev = 1.257
[info]   CI (99.9%): [≈ 0, 5.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.17% complete, ETA 01:33:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2585.890 ops/s
[info] # Warmup Iteration   2: 14614.941 ops/s
[info] # Warmup Iteration   3: 15627.257 ops/s
[info] # Warmup Iteration   4: 16009.680 ops/s
[info] # Warmup Iteration   5: 15046.853 ops/s
[info] Iteration   1: 15256.664 ops/s
[info]                  ·gc.alloc.rate:                   1121.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              115736.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138355.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15675.591 ops/s
[info]                  ·gc.alloc.rate:               1135.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          113952.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67345.879 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15183.015 ops/s
[info]                  ·gc.alloc.rate:                   1145.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              118698.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139211.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14964.166 ops/s
[info]                  ·gc.alloc.rate:               1110.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          116760.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141248.778 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 15914.044 ops/s
[info]                  ·gc.alloc.rate:                   1151.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              113874.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66470.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325.271 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15398.696 ±(99.9%) 1488.564 ops/s [Average]
[info]   (min, avg, max) = (14964.166, 15398.696, 15914.044), stdev = 386.575
[info]   CI (99.9%): [13910.132, 16887.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1132.835 ±(99.9%) 65.219 MB/sec [Average]
[info]   (min, avg, max) = (1110.182, 1132.835, 1151.636), stdev = 16.937
[info]   CI (99.9%): [1067.615, 1198.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115804.474 ±(99.9%) 7808.711 B/op [Average]
[info]   (min, avg, max) = (113874.143, 115804.474, 118698.426), stdev = 2027.897
[info]   CI (99.9%): [107995.763, 123613.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1074.119 ±(99.9%) 1415.211 MB/sec [Average]
[info]   (min, avg, max) = (670.798, 1074.119, 1343.328), stdev = 367.526
[info]   CI (99.9%): [≈ 0, 2489.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110526.531 ±(99.9%) 153382.389 B/op [Average]
[info]   (min, avg, max) = (66470.640, 110526.531, 141248.778), stdev = 39832.919
[info]   CI (99.9%): [≈ 0, 263908.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.290), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.345 ±(99.9%) 557.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.345, 325.271), stdev = 144.755
[info]   CI (99.9%): [≈ 0, 623.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.40% complete, ETA 01:33:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4621.949 ops/s
[info] # Warmup Iteration   2: 13509.744 ops/s
[info] # Warmup Iteration   3: 15783.534 ops/s
[info] # Warmup Iteration   4: 15850.577 ops/s
[info] # Warmup Iteration   5: 15828.725 ops/s
[info] Iteration   1: 15870.949 ops/s
[info]                  ·gc.alloc.rate:                   1037.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              102893.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132517.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15566.074 ops/s
[info]                  ·gc.alloc.rate:               1001.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          101298.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67619.648 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15650.016 ops/s
[info]                  ·gc.alloc.rate:                   1066.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              107261.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134547.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 15921.755 ops/s
[info]                  ·gc.alloc.rate:               1024.558 MB/sec
[info]                  ·gc.alloc.rate.norm:          101280.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66140.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15877.134 ops/s
[info]                  ·gc.alloc.rate:               1031.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          102256.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132780.451 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15777.186 ±(99.9%) 610.122 ops/s [Average]
[info]   (min, avg, max) = (15566.074, 15777.186, 15921.755), stdev = 158.447
[info]   CI (99.9%): [15167.064, 16387.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1032.468 ±(99.9%) 90.158 MB/sec [Average]
[info]   (min, avg, max) = (1001.911, 1032.468, 1066.668), stdev = 23.414
[info]   CI (99.9%): [942.309, 1122.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102998.357 ±(99.9%) 9544.687 B/op [Average]
[info]   (min, avg, max) = (101280.712, 102998.357, 107261.717), stdev = 2478.725
[info]   CI (99.9%): [93453.671, 112543.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.351 ±(99.9%) 1411.012 MB/sec [Average]
[info]   (min, avg, max) = (668.803, 1070.351, 1339.552), stdev = 366.435
[info]   CI (99.9%): [≈ 0, 2481.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   106721.032 ±(99.9%) 140092.509 B/op [Average]
[info]   (min, avg, max) = (66140.948, 106721.032, 134547.045), stdev = 36381.580
[info]   CI (99.9%): [≈ 0, 246813.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.244 ±(99.9%) 7.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.244, 4.129), stdev = 1.850
[info]   CI (99.9%): [≈ 0, 8.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.63% complete, ETA 01:33:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62926.087 ops/s
[info] # Warmup Iteration   2: 100317.367 ops/s
[info] # Warmup Iteration   3: 108957.596 ops/s
[info] # Warmup Iteration   4: 102560.500 ops/s
[info] # Warmup Iteration   5: 106546.028 ops/s
[info] Iteration   1: 108410.781 ops/s
[info]                  ·gc.alloc.rate:                   291.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7427.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105670.554 ops/s
[info]                  ·gc.alloc.rate:               290.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          4330.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7619.946 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 106364.251 ops/s
[info]                  ·gc.alloc.rate:      276.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106648.548 ops/s
[info]                  ·gc.alloc.rate:                   291.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              4305.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7549.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 109177.073 ops/s
[info]                  ·gc.alloc.rate:      284.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   107254.242 ±(99.9%) 5679.497 ops/s [Average]
[info]   (min, avg, max) = (105670.554, 107254.242, 109177.073), stdev = 1474.947
[info]   CI (99.9%): [101574.745, 112933.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   287.114 ±(99.9%) 25.234 MB/sec [Average]
[info]   (min, avg, max) = (276.865, 287.114, 291.951), stdev = 6.553
[info]   CI (99.9%): [261.881, 312.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4213.370 ±(99.9%) 432.490 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4213.370, 4330.714), stdev = 112.316
[info]   CI (99.9%): [3780.880, 4645.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.961 ±(99.9%) 1079.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.961, 511.619), stdev = 280.216
[info]   CI (99.9%): [≈ 0, 1385.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4519.397 ±(99.9%) 15888.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4519.397, 7619.946), stdev = 4126.203
[info]   CI (99.9%): [≈ 0, 20407.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 1.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 0.614), stdev = 0.334
[info]   CI (99.9%): [≈ 0, 1.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.86% complete, ETA 01:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 836.392 ops/s
[info] # Warmup Iteration   2: 11124.733 ops/s
[info] # Warmup Iteration   3: 13885.611 ops/s
[info] # Warmup Iteration   4: 13854.851 ops/s
[info] # Warmup Iteration   5: 13405.281 ops/s
[info] Iteration   1: 13941.312 ops/s
[info]                  ·gc.alloc.rate:               1362.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          153779.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150172.567 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13960.045 ops/s
[info]                  ·gc.alloc.rate:                   1351.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              152337.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149968.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13967.038 ops/s
[info]                  ·gc.alloc.rate:               1355.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          152776.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150043.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 13902.542 ops/s
[info]                  ·gc.alloc.rate:               1366.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          154640.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150922.254 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13565.848 ops/s
[info]                  ·gc.alloc.rate:               1320.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          153234.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154941.033 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13867.357 ±(99.9%) 656.143 ops/s [Average]
[info]   (min, avg, max) = (13565.848, 13867.357, 13967.038), stdev = 170.398
[info]   CI (99.9%): [13211.214, 14523.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1351.236 ±(99.9%) 68.947 MB/sec [Average]
[info]   (min, avg, max) = (1320.848, 1351.236, 1366.006), stdev = 17.905
[info]   CI (99.9%): [1282.288, 1420.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153353.631 ±(99.9%) 3454.677 B/op [Average]
[info]   (min, avg, max) = (152337.124, 153353.631, 154640.873), stdev = 897.169
[info]   CI (99.9%): [149898.954, 156808.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1332.164 ±(99.9%) 8.646 MB/sec [Average]
[info]   (min, avg, max) = (1330.214, 1332.164, 1335.560), stdev = 2.245
[info]   CI (99.9%): [1323.518, 1340.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151209.454 ±(99.9%) 8164.619 B/op [Average]
[info]   (min, avg, max) = (149968.221, 151209.454, 154941.033), stdev = 2120.326
[info]   CI (99.9%): [143044.835, 159374.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.469 ±(99.9%) 4.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.347), stdev = 1.050
[info]   CI (99.9%): [≈ 0, 4.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.09% complete, ETA 01:32:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15654.981 ops/s
[info] # Warmup Iteration   2: 43000.164 ops/s
[info] # Warmup Iteration   3: 44074.611 ops/s
[info] # Warmup Iteration   4: 44737.981 ops/s
[info] # Warmup Iteration   5: 42773.423 ops/s
[info] Iteration   1: 45312.814 ops/s
[info]                  ·gc.alloc.rate:               1161.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          40311.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46586.668 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 45254.685 ops/s
[info]                  ·gc.alloc.rate:                   1153.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              40097.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46681.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45424.571 ops/s
[info]                  ·gc.alloc.rate:               1149.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          39819.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23264.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45472.120 ops/s
[info]                  ·gc.alloc.rate:               1152.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          39889.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46479.392 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 45385.753 ops/s
[info]                  ·gc.alloc.rate:                   1162.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              40300.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46615.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45369.989 ±(99.9%) 334.709 ops/s [Average]
[info]   (min, avg, max) = (45254.685, 45369.989, 45472.120), stdev = 86.923
[info]   CI (99.9%): [45035.279, 45704.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1155.666 ±(99.9%) 21.619 MB/sec [Average]
[info]   (min, avg, max) = (1149.376, 1155.666, 1162.156), stdev = 5.614
[info]   CI (99.9%): [1134.047, 1177.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40083.826 ±(99.9%) 874.906 B/op [Average]
[info]   (min, avg, max) = (39819.981, 40083.826, 40311.895), stdev = 227.210
[info]   CI (99.9%): [39208.920, 40958.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.614 ±(99.9%) 1156.139 MB/sec [Average]
[info]   (min, avg, max) = (671.521, 1208.614, 1344.278), stdev = 300.246
[info]   CI (99.9%): [52.475, 2364.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41925.527 ±(99.9%) 40169.684 B/op [Average]
[info]   (min, avg, max) = (23264.761, 41925.527, 46681.115), stdev = 10431.939
[info]   CI (99.9%): [1755.843, 82095.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.393), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.967 ±(99.9%) 201.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.967, 117.665), stdev = 52.387
[info]   CI (99.9%): [≈ 0, 225.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.32% complete, ETA 01:32:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15568.360 ops/s
[info] # Warmup Iteration   2: 62005.820 ops/s
[info] # Warmup Iteration   3: 63648.204 ops/s
[info] # Warmup Iteration   4: 64551.539 ops/s
[info] # Warmup Iteration   5: 64080.711 ops/s
[info] Iteration   1: 59575.927 ops/s
[info]                  ·gc.alloc.rate:                   1053.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              27831.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35319.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 64623.967 ops/s
[info]                  ·gc.alloc.rate:               1120.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          27286.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16288.181 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 64026.170 ops/s
[info]                  ·gc.alloc.rate:               1149.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          28258.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32897.465 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 63437.709 ops/s
[info]                  ·gc.alloc.rate:                   1125.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              27913.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33217.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 64359.773 ops/s
[info]                  ·gc.alloc.rate:                   1126.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              27553.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16387.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   63204.709 ±(99.9%) 7995.446 ops/s [Average]
[info]   (min, avg, max) = (59575.927, 63204.709, 64623.967), stdev = 2076.392
[info]   CI (99.9%): [55209.264, 71200.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1115.119 ±(99.9%) 139.614 MB/sec [Average]
[info]   (min, avg, max) = (1053.537, 1115.119, 1149.805), stdev = 36.257
[info]   CI (99.9%): [975.505, 1254.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27768.758 ±(99.9%) 1420.365 B/op [Average]
[info]   (min, avg, max) = (27286.270, 27768.758, 28258.589), stdev = 368.864
[info]   CI (99.9%): [26348.393, 29189.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.675 ±(99.9%) 1410.338 MB/sec [Average]
[info]   (min, avg, max) = (668.804, 1070.675, 1338.925), stdev = 366.260
[info]   CI (99.9%): [≈ 0, 2481.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26822.055 ±(99.9%) 37028.254 B/op [Average]
[info]   (min, avg, max) = (16288.181, 26822.055, 35319.751), stdev = 9616.120
[info]   CI (99.9%): [≈ 0, 63850.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.734 ±(99.9%) 6.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.734, 3.608), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 6.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.969 ±(99.9%) 151.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.969, 88.228), stdev = 39.279
[info]   CI (99.9%): [≈ 0, 169.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.55% complete, ETA 01:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95231.215 ops/s
[info] # Warmup Iteration   2: 169796.958 ops/s
[info] # Warmup Iteration   3: 178381.571 ops/s
[info] # Warmup Iteration   4: 176833.712 ops/s
[info] # Warmup Iteration   5: 177434.944 ops/s
[info] Iteration   1: 176869.296 ops/s
[info]                  ·gc.alloc.rate:               293.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          2611.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4552.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 177115.770 ops/s
[info]                  ·gc.alloc.rate:               298.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          2655.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4546.235 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 177598.715 ops/s
[info]                  ·gc.alloc.rate:      281.659 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 171583.946 ops/s
[info]                  ·gc.alloc.rate:               293.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          2694.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4692.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 177906.970 ops/s
[info]                  ·gc.alloc.rate:      282.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   176214.939 ±(99.9%) 10089.787 ops/s [Average]
[info]   (min, avg, max) = (171583.946, 176214.939, 177906.970), stdev = 2620.286
[info]   CI (99.9%): [166125.153, 186304.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   290.026 ±(99.9%) 29.674 MB/sec [Average]
[info]   (min, avg, max) = (281.659, 290.026, 298.876), stdev = 7.706
[info]   CI (99.9%): [260.351, 319.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2590.846 ±(99.9%) 352.074 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2590.846, 2694.930), stdev = 91.432
[info]   CI (99.9%): [2238.772, 2942.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.014 ±(99.9%) 1079.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.014, 511.796), stdev = 280.264
[info]   CI (99.9%): [≈ 0, 1386.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2758.247 ±(99.9%) 9698.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2758.247, 4692.599), stdev = 2518.604
[info]   CI (99.9%): [≈ 0, 12456.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.79% complete, ETA 01:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74011.319 ops/s
[info] # Warmup Iteration   2: 176901.093 ops/s
[info] # Warmup Iteration   3: 185639.173 ops/s
[info] # Warmup Iteration   4: 185798.483 ops/s
[info] # Warmup Iteration   5: 185614.646 ops/s
[info] Iteration   1: 185393.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185523.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185675.961 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185704.800 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185449.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   185549.564 ±(99.9%) 527.338 ops/s [Average]
[info]   (min, avg, max) = (185393.711, 185549.564, 185704.800), stdev = 136.948
[info]   CI (99.9%): [185022.226, 186076.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.02% complete, ETA 01:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23975.261 ops/s
[info] # Warmup Iteration   2: 54987.102 ops/s
[info] # Warmup Iteration   3: 56676.809 ops/s
[info] # Warmup Iteration   4: 57793.283 ops/s
[info] # Warmup Iteration   5: 57820.636 ops/s
[info] Iteration   1: 57102.660 ops/s
[info]                  ·gc.alloc.rate:                   1115.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              30737.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36941.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 57833.228 ops/s
[info]                  ·gc.alloc.rate:                   1132.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              30828.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36492.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 58192.451 ops/s
[info]                  ·gc.alloc.rate:               1123.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          30386.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18141.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 58007.260 ops/s
[info]                  ·gc.alloc.rate:               1121.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          30424.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36400.856 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 58116.066 ops/s
[info]                  ·gc.alloc.rate:                   1109.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              30039.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18183.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   57850.333 ±(99.9%) 1691.208 ops/s [Average]
[info]   (min, avg, max) = (57102.660, 57850.333, 58192.451), stdev = 439.201
[info]   CI (99.9%): [56159.125, 59541.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1120.450 ±(99.9%) 34.339 MB/sec [Average]
[info]   (min, avg, max) = (1109.221, 1120.450, 1132.850), stdev = 8.918
[info]   CI (99.9%): [1086.111, 1154.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30483.186 ±(99.9%) 1208.055 B/op [Average]
[info]   (min, avg, max) = (30039.006, 30483.186, 30828.372), stdev = 313.728
[info]   CI (99.9%): [29275.130, 31691.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.052 ±(99.9%) 1412.812 MB/sec [Average]
[info]   (min, avg, max) = (670.809, 1073.052, 1341.695), stdev = 366.903
[info]   CI (99.9%): [≈ 0, 2485.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29232.196 ±(99.9%) 38918.391 B/op [Average]
[info]   (min, avg, max) = (18141.952, 29232.196, 36941.602), stdev = 10106.983
[info]   CI (99.9%): [≈ 0, 68150.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.656 ±(99.9%) 5.415 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 3.171), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.767 ±(99.9%) 146.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.767, 85.869), stdev = 38.082
[info]   CI (99.9%): [≈ 0, 164.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.25% complete, ETA 01:31:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20273.496 ops/s
[info] # Warmup Iteration   2: 82728.079 ops/s
[info] # Warmup Iteration   3: 89343.638 ops/s
[info] # Warmup Iteration   4: 90036.816 ops/s
[info] # Warmup Iteration   5: 91631.741 ops/s
[info] Iteration   1: 92841.462 ops/s
[info]                  ·gc.alloc.rate:                   2404.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              40763.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45441.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.285 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 92367.137 ops/s
[info]                  ·gc.alloc.rate:                   2354.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              40115.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34152.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 91272.911 ops/s
[info]                  ·gc.alloc.rate:               2327.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          40138.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34562.759 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 93143.082 ops/s
[info]                  ·gc.alloc.rate:               2413.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          40780.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45238.384 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 92624.829 ops/s
[info]                  ·gc.alloc.rate:               2374.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          40353.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34199.831 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   92449.884 ±(99.9%) 2761.058 ops/s [Average]
[info]   (min, avg, max) = (91272.911, 92449.884, 93143.082), stdev = 717.038
[info]   CI (99.9%): [89688.826, 95210.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2375.041 ±(99.9%) 136.184 MB/sec [Average]
[info]   (min, avg, max) = (2327.902, 2375.041, 2413.418), stdev = 35.367
[info]   CI (99.9%): [2238.857, 2511.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   40430.401 ±(99.9%) 1253.771 B/op [Average]
[info]   (min, avg, max) = (40115.124, 40430.401, 40780.587), stdev = 325.600
[info]   CI (99.9%): [39176.630, 41684.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.886 ±(99.9%) 1416.796 MB/sec [Average]
[info]   (min, avg, max) = (2004.385, 2275.886, 2680.611), stdev = 367.937
[info]   CI (99.9%): [859.090, 3692.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38718.866 ±(99.9%) 23282.802 B/op [Average]
[info]   (min, avg, max) = (34152.354, 38718.866, 45441.004), stdev = 6046.470
[info]   CI (99.9%): [15436.065, 62001.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.851), stdev = 1.701
[info]   CI (99.9%): [≈ 0, 7.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.766 ±(99.9%) 111.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.766, 65.285), stdev = 28.841
[info]   CI (99.9%): [≈ 0, 124.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.48% complete, ETA 01:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33175.020 ops/s
[info] # Warmup Iteration   2: 120013.797 ops/s
[info] # Warmup Iteration   3: 123711.291 ops/s
[info] # Warmup Iteration   4: 125694.442 ops/s
[info] # Warmup Iteration   5: 123753.390 ops/s
[info] Iteration   1: 125287.579 ops/s
[info]                  ·gc.alloc.rate:               1776.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          22314.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25225.706 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 125313.251 ops/s
[info]                  ·gc.alloc.rate:                   1761.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              22123.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16824.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 122572.741 ops/s
[info]                  ·gc.alloc.rate:                   1762.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              22636.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25721.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 126616.685 ops/s
[info]                  ·gc.alloc.rate:                   1789.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              22245.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16577.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 125053.337 ops/s
[info]                  ·gc.alloc.rate:               1784.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          22459.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25183.865 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   124968.719 ±(99.9%) 5673.671 ops/s [Average]
[info]   (min, avg, max) = (122572.741, 124968.719, 126616.685), stdev = 1473.434
[info]   CI (99.9%): [119295.048, 130642.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1775.046 ±(99.9%) 48.266 MB/sec [Average]
[info]   (min, avg, max) = (1761.728, 1775.046, 1789.638), stdev = 12.535
[info]   CI (99.9%): [1726.780, 1823.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22355.843 ±(99.9%) 763.696 B/op [Average]
[info]   (min, avg, max) = (22123.512, 22355.843, 22636.405), stdev = 198.329
[info]   CI (99.9%): [21592.147, 23119.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.152 ±(99.9%) 1407.688 MB/sec [Average]
[info]   (min, avg, max) = (1333.625, 1737.152, 2008.042), stdev = 365.572
[info]   CI (99.9%): [329.464, 3144.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21906.578 ±(99.9%) 18319.841 B/op [Average]
[info]   (min, avg, max) = (16577.033, 21906.578, 25721.483), stdev = 4757.605
[info]   CI (99.9%): [3586.737, 40226.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.226), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.880 ±(99.9%) 90.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.880, 53.074), stdev = 23.591
[info]   CI (99.9%): [≈ 0, 101.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.71% complete, ETA 01:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67137.264 ops/s
[info] # Warmup Iteration   2: 150040.370 ops/s
[info] # Warmup Iteration   3: 163481.755 ops/s
[info] # Warmup Iteration   4: 163806.262 ops/s
[info] # Warmup Iteration   5: 148920.770 ops/s
[info] Iteration   1: 163202.496 ops/s
[info]                  ·gc.alloc.rate:               1528.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          14733.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12964.021 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 163287.091 ops/s
[info]                  ·gc.alloc.rate:                   1541.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              14852.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12962.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 163913.005 ops/s
[info]                  ·gc.alloc.rate:                   1533.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              14721.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12919.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 162171.986 ops/s
[info]                  ·gc.alloc.rate:                   1529.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              14845.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13033.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165872.281 ops/s
[info]                  ·gc.alloc.rate:                   1577.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              14969.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19094.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   163689.372 ±(99.9%) 5278.487 ops/s [Average]
[info]   (min, avg, max) = (162171.986, 163689.372, 165872.281), stdev = 1370.806
[info]   CI (99.9%): [158410.884, 168967.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1542.145 ±(99.9%) 78.881 MB/sec [Average]
[info]   (min, avg, max) = (1528.138, 1542.145, 1577.599), stdev = 20.485
[info]   CI (99.9%): [1463.263, 1621.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14824.272 ±(99.9%) 390.741 B/op [Average]
[info]   (min, avg, max) = (14721.059, 14824.272, 14969.556), stdev = 101.474
[info]   CI (99.9%): [14433.531, 15215.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.271 ±(99.9%) 1149.487 MB/sec [Average]
[info]   (min, avg, max) = (1342.932, 1478.271, 2012.272), stdev = 298.518
[info]   CI (99.9%): [328.784, 2627.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14194.703 ±(99.9%) 10547.467 B/op [Average]
[info]   (min, avg, max) = (12919.484, 14194.703, 19094.092), stdev = 2739.144
[info]   CI (99.9%): [3647.236, 24742.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.061), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.996 ±(99.9%) 50.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.996, 29.381), stdev = 13.073
[info]   CI (99.9%): [≈ 0, 56.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.94% complete, ETA 01:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3711.735 ops/s
[info] # Warmup Iteration   2: 40677.727 ops/s
[info] # Warmup Iteration   3: 53613.164 ops/s
[info] # Warmup Iteration   4: 53111.524 ops/s
[info] # Warmup Iteration   5: 52860.368 ops/s
[info] Iteration   1: 52729.187 ops/s
[info]                  ·gc.alloc.rate:                   2818.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              84091.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80054.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 53734.127 ops/s
[info]                  ·gc.alloc.rate:                   2858.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              83713.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78789.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 54404.784 ops/s
[info]                  ·gc.alloc.rate:               2934.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          84877.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78038.089 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 54322.658 ops/s
[info]                  ·gc.alloc.rate:               2958.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          85679.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97911.995 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 54390.429 ops/s
[info]                  ·gc.alloc.rate:               2934.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          84905.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78410.455 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   53916.237 ±(99.9%) 2770.703 ops/s [Average]
[info]   (min, avg, max) = (52729.187, 53916.237, 54404.784), stdev = 719.543
[info]   CI (99.9%): [51145.534, 56686.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2900.806 ±(99.9%) 229.259 MB/sec [Average]
[info]   (min, avg, max) = (2818.541, 2900.806, 2958.740), stdev = 59.538
[info]   CI (99.9%): [2671.546, 3130.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84653.762 ±(99.9%) 2961.444 B/op [Average]
[info]   (min, avg, max) = (83713.975, 84653.762, 85679.756), stdev = 769.078
[info]   CI (99.9%): [81692.318, 87615.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2832.416 ±(99.9%) 1181.803 MB/sec [Average]
[info]   (min, avg, max) = (2683.246, 2832.416, 3381.151), stdev = 306.911
[info]   CI (99.9%): [1650.613, 4014.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82640.980 ±(99.9%) 33001.706 B/op [Average]
[info]   (min, avg, max) = (78038.089, 82640.980, 97911.995), stdev = 8570.438
[info]   CI (99.9%): [49639.274, 115642.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 1.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 0.621), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.17% complete, ETA 01:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71819.163 ops/s
[info] # Warmup Iteration   2: 171111.715 ops/s
[info] # Warmup Iteration   3: 181247.008 ops/s
[info] # Warmup Iteration   4: 181407.001 ops/s
[info] # Warmup Iteration   5: 183784.738 ops/s
[info] Iteration   1: 182226.876 ops/s
[info]                  ·gc.alloc.rate:                   1217.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              10517.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11581.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 182348.546 ops/s
[info]                  ·gc.alloc.rate:               1199.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          10354.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5789.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 182930.502 ops/s
[info]                  ·gc.alloc.rate:                   1225.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              10540.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11548.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 183123.056 ops/s
[info]                  ·gc.alloc.rate:                   1215.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              10446.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11542.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184216.509 ops/s
[info]                  ·gc.alloc.rate:                   1234.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              10545.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11462.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   182969.098 ±(99.9%) 3054.658 ops/s [Average]
[info]   (min, avg, max) = (182226.876, 182969.098, 184216.509), stdev = 793.285
[info]   CI (99.9%): [179914.439, 186023.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1218.463 ±(99.9%) 49.376 MB/sec [Average]
[info]   (min, avg, max) = (1199.687, 1218.463, 1234.299), stdev = 12.823
[info]   CI (99.9%): [1169.087, 1267.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10480.999 ±(99.9%) 312.132 B/op [Average]
[info]   (min, avg, max) = (10354.613, 10480.999, 10545.734), stdev = 81.060
[info]   CI (99.9%): [10168.866, 10793.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.704 ±(99.9%) 1155.777 MB/sec [Average]
[info]   (min, avg, max) = (670.778, 1207.704, 1342.967), stdev = 300.152
[info]   CI (99.9%): [51.928, 2363.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10384.840 ±(99.9%) 9893.143 B/op [Average]
[info]   (min, avg, max) = (5789.553, 10384.840, 11581.612), stdev = 2569.218
[info]   CI (99.9%): [491.697, 20277.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.081), stdev = 1.337
[info]   CI (99.9%): [≈ 0, 5.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.044 ±(99.9%) 44.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.044, 26.480), stdev = 11.488
[info]   CI (99.9%): [≈ 0, 50.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.40% complete, ETA 01:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178337.870 ops/s
[info] # Warmup Iteration   2: 520492.500 ops/s
[info] # Warmup Iteration   3: 504926.309 ops/s
[info] # Warmup Iteration   4: 529839.424 ops/s
[info] # Warmup Iteration   5: 531067.118 ops/s
[info] Iteration   1: 536965.678 ops/s
[info]                  ·gc.alloc.rate:      543.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 535712.827 ops/s
[info]                  ·gc.alloc.rate:               556.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          1635.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1959.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 535246.546 ops/s
[info]                  ·gc.alloc.rate:                   558.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1643.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1961.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 535259.389 ops/s
[info]                  ·gc.alloc.rate:               562.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          1653.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1963.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 533064.359 ops/s
[info]                  ·gc.alloc.rate:               559.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          1651.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1971.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   535249.760 ±(99.9%) 5423.425 ops/s [Average]
[info]   (min, avg, max) = (533064.359, 535249.760, 536965.678), stdev = 1408.446
[info]   CI (99.9%): [529826.335, 540673.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556.090 ±(99.9%) 28.903 MB/sec [Average]
[info]   (min, avg, max) = (543.160, 556.090, 562.240), stdev = 7.506
[info]   CI (99.9%): [527.187, 584.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1635.128 ±(99.9%) 96.951 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1635.128, 1653.230), stdev = 25.178
[info]   CI (99.9%): [1538.176, 1732.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.007 ±(99.9%) 1149.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.007, 667.942), stdev = 298.519
[info]   CI (99.9%): [≈ 0, 1683.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1571.413 ±(99.9%) 3382.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1571.413, 1971.732), stdev = 878.458
[info]   CI (99.9%): [≈ 0, 4954.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.63% complete, ETA 01:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423082.123 ops/s
[info] # Warmup Iteration   2: 711095.093 ops/s
[info] # Warmup Iteration   3: 689659.122 ops/s
[info] # Warmup Iteration   4: 721463.137 ops/s
[info] # Warmup Iteration   5: 722249.707 ops/s
[info] Iteration   1: 726076.578 ops/s
[info]                  ·gc.alloc.rate:               582.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1453.339 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 711948.666 ops/s
[info]                  ·gc.alloc.rate:      552.708 MB/sec
[info]                  ·gc.alloc.rate.norm: 1221.805 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 701782.722 ops/s
[info]                  ·gc.alloc.rate:               554.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1503.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 711641.697 ops/s
[info]                  ·gc.alloc.rate:               568.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 702028.731 ops/s
[info]                  ·gc.alloc.rate:                   569.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1275.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1504.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   710695.679 ±(99.9%) 38196.844 ops/s [Average]
[info]   (min, avg, max) = (701782.722, 710695.679, 726076.578), stdev = 9919.599
[info]   CI (99.9%): [672498.834, 748892.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.630 ±(99.9%) 47.495 MB/sec [Average]
[info]   (min, avg, max) = (552.708, 565.630, 582.986), stdev = 12.334
[info]   CI (99.9%): [518.135, 613.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1252.565 ±(99.9%) 79.521 B/op [Average]
[info]   (min, avg, max) = (1221.805, 1252.565, 1275.805), stdev = 20.651
[info]   CI (99.9%): [1173.044, 1332.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.657 ±(99.9%) 1155.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.657, 671.171), stdev = 300.000
[info]   CI (99.9%): [≈ 0, 1691.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1189.163 ±(99.9%) 2561.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1189.163, 1504.601), stdev = 665.087
[info]   CI (99.9%): [≈ 0, 3750.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.86% complete, ETA 01:29:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453430.358 ops/s
[info] # Warmup Iteration   2: 764921.689 ops/s
[info] # Warmup Iteration   3: 753076.049 ops/s
[info] # Warmup Iteration   4: 778224.880 ops/s
[info] # Warmup Iteration   5: 778188.573 ops/s
[info] Iteration   1: 777908.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 777392.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 682178.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777974.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777728.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   758636.579 ±(99.9%) 164584.975 ops/s [Average]
[info]   (min, avg, max) = (682178.082, 758636.579, 777974.616), stdev = 42742.195
[info]   CI (99.9%): [594051.603, 923221.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:29:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82942.217 ops/s
[info] # Warmup Iteration   2: 319257.312 ops/s
[info] # Warmup Iteration   3: 310553.481 ops/s
[info] # Warmup Iteration   4: 320396.966 ops/s
[info] # Warmup Iteration   5: 333456.749 ops/s
[info] Iteration   1: 325328.018 ops/s
[info]                  ·gc.alloc.rate:                   920.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              4452.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3206.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 323909.652 ops/s
[info]                  ·gc.alloc.rate:               910.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          4424.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3223.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 321022.844 ops/s
[info]                  ·gc.alloc.rate:                   928.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              4553.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6510.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 324507.851 ops/s
[info]                  ·gc.alloc.rate:               907.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          4403.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3222.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 324579.258 ops/s
[info]                  ·gc.alloc.rate:               908.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          4406.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3225.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   323869.525 ±(99.9%) 6427.112 ops/s [Average]
[info]   (min, avg, max) = (321022.844, 323869.525, 325328.018), stdev = 1669.101
[info]   CI (99.9%): [317442.412, 330296.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   915.406 ±(99.9%) 35.142 MB/sec [Average]
[info]   (min, avg, max) = (907.917, 915.406, 928.860), stdev = 9.126
[info]   CI (99.9%): [880.264, 950.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4448.094 ±(99.9%) 239.883 B/op [Average]
[info]   (min, avg, max) = (4403.264, 4448.094, 4553.826), stdev = 62.297
[info]   CI (99.9%): [4208.211, 4687.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   796.873 ±(99.9%) 1143.321 MB/sec [Average]
[info]   (min, avg, max) = (663.109, 796.873, 1328.013), stdev = 296.917
[info]   CI (99.9%): [≈ 0, 1940.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3877.811 ±(99.9%) 5667.598 B/op [Average]
[info]   (min, avg, max) = (3206.507, 3877.811, 6510.714), stdev = 1471.857
[info]   CI (99.9%): [≈ 0, 9545.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.204), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.33% complete, ETA 01:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14128.505 ops/s
[info] # Warmup Iteration   2: 34217.655 ops/s
[info] # Warmup Iteration   3: 36886.566 ops/s
[info] # Warmup Iteration   4: 37065.979 ops/s
[info] # Warmup Iteration   5: 38370.652 ops/s
[info] Iteration   1: 38507.807 ops/s
[info]                  ·gc.alloc.rate:                   1959.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              80069.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82428.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 38665.887 ops/s
[info]                  ·gc.alloc.rate:                   1978.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              80544.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81983.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38773.446 ops/s
[info]                  ·gc.alloc.rate:                   1982.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              80486.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81522.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37806.108 ops/s
[info]                  ·gc.alloc.rate:               1935.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          80590.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83609.876 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 38474.996 ops/s
[info]                  ·gc.alloc.rate:               1955.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          79986.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54793.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38445.649 ±(99.9%) 1453.196 ops/s [Average]
[info]   (min, avg, max) = (37806.108, 38445.649, 38773.446), stdev = 377.390
[info]   CI (99.9%): [36992.453, 39898.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1962.412 ±(99.9%) 73.380 MB/sec [Average]
[info]   (min, avg, max) = (1935.863, 1962.412, 1982.894), stdev = 19.057
[info]   CI (99.9%): [1889.031, 2035.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80335.472 ±(99.9%) 1096.893 B/op [Average]
[info]   (min, avg, max) = (79986.079, 80335.472, 80590.834), stdev = 284.860
[info]   CI (99.9%): [79238.579, 81432.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.458 ±(99.9%) 1157.958 MB/sec [Average]
[info]   (min, avg, max) = (1339.557, 1877.458, 2016.787), stdev = 300.718
[info]   CI (99.9%): [719.500, 3035.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76867.617 ±(99.9%) 47609.254 B/op [Average]
[info]   (min, avg, max) = (54793.845, 76867.617, 83609.876), stdev = 12363.972
[info]   CI (99.9%): [29258.363, 124476.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 2.706), stdev = 1.158
[info]   CI (99.9%): [≈ 0, 5.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.778 ±(99.9%) 182.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.778, 110.608), stdev = 47.315
[info]   CI (99.9%): [≈ 0, 213.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.56% complete, ETA 01:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.716 ops/s
[info] # Warmup Iteration   2: 276476.263 ops/s
[info] # Warmup Iteration   3: 285983.829 ops/s
[info] # Warmup Iteration   4: 298206.139 ops/s
[info] # Warmup Iteration   5: 298989.887 ops/s
[info] Iteration   1: 300606.419 ops/s
[info]                  ·gc.alloc.rate:      311.830 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.575 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 298491.097 ops/s
[info]                  ·gc.alloc.rate:               324.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          1708.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2697.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 300125.946 ops/s
[info]                  ·gc.alloc.rate:      311.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296693.603 ops/s
[info]                  ·gc.alloc.rate:               329.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          1748.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3533.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 299194.756 ops/s
[info]                  ·gc.alloc.rate:      310.970 MB/sec
[info]                  ·gc.alloc.rate.norm: 1635.826 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   299022.364 ±(99.9%) 5922.428 ops/s [Average]
[info]   (min, avg, max) = (296693.603, 299022.364, 300606.419), stdev = 1538.036
[info]   CI (99.9%): [293099.936, 304944.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   317.550 ±(99.9%) 33.531 MB/sec [Average]
[info]   (min, avg, max) = (310.970, 317.550, 329.581), stdev = 8.708
[info]   CI (99.9%): [284.020, 351.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1671.465 ±(99.9%) 207.593 B/op [Average]
[info]   (min, avg, max) = (1632.002, 1671.465, 1748.317), stdev = 53.911
[info]   CI (99.9%): [1463.872, 1879.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.579 ±(99.9%) 1259.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.579, 666.181), stdev = 327.170
[info]   CI (99.9%): [≈ 0, 1495.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1246.297 ±(99.9%) 6669.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1246.297, 3533.867), stdev = 1731.984
[info]   CI (99.9%): [≈ 0, 7915.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.79% complete, ETA 01:28:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35116.432 ops/s
[info] # Warmup Iteration   2: 100183.510 ops/s
[info] # Warmup Iteration   3: 111918.509 ops/s
[info] # Warmup Iteration   4: 115906.992 ops/s
[info] # Warmup Iteration   5: 116152.631 ops/s
[info] Iteration   1: 115954.325 ops/s
[info]                  ·gc.alloc.rate:                   1394.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              18918.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18165.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 114084.928 ops/s
[info]                  ·gc.alloc.rate:               1356.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          18715.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18475.794 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 112421.323 ops/s
[info]                  ·gc.alloc.rate:                   1349.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18759.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 109091.960 ops/s
[info]                  ·gc.alloc.rate:                   1304.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              18817.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9668.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 112723.694 ops/s
[info]                  ·gc.alloc.rate:                   1356.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              18941.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18676.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   112855.246 ±(99.9%) 9719.411 ops/s [Average]
[info]   (min, avg, max) = (109091.960, 112855.246, 115954.325), stdev = 2524.100
[info]   CI (99.9%): [103135.835, 122574.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1352.379 ±(99.9%) 123.256 MB/sec [Average]
[info]   (min, avg, max) = (1304.333, 1352.379, 1394.129), stdev = 32.009
[info]   CI (99.9%): [1229.123, 1475.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18857.716 ±(99.9%) 354.048 B/op [Average]
[info]   (min, avg, max) = (18715.759, 18857.716, 18941.020), stdev = 91.945
[info]   CI (99.9%): [18503.668, 19211.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.222 ±(99.9%) 1151.796 MB/sec [Average]
[info]   (min, avg, max) = (670.146, 1205.222, 1339.948), stdev = 299.118
[info]   CI (99.9%): [53.426, 2357.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16749.006 ±(99.9%) 15267.439 B/op [Average]
[info]   (min, avg, max) = (9668.192, 16749.006, 18759.044), stdev = 3964.906
[info]   CI (99.9%): [1481.567, 32016.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.331), stdev = 1.415
[info]   CI (99.9%): [≈ 0, 6.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.576 ±(99.9%) 76.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.576, 46.629), stdev = 19.793
[info]   CI (99.9%): [≈ 0, 87.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.800, 7.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.02% complete, ETA 01:28:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288587.006 ops/s
[info] # Warmup Iteration   2: 451818.763 ops/s
[info] # Warmup Iteration   3: 468304.367 ops/s
[info] # Warmup Iteration   4: 464652.980 ops/s
[info] # Warmup Iteration   5: 474083.247 ops/s
[info] Iteration   1: 485047.203 ops/s
[info]                  ·gc.alloc.rate:      315.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483280.818 ops/s
[info]                  ·gc.alloc.rate:               326.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1666.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 481153.034 ops/s
[info]                  ·gc.alloc.rate:                   325.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              1065.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1673.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 483508.523 ops/s
[info]                  ·gc.alloc.rate:      314.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 481258.667 ops/s
[info]                  ·gc.alloc.rate:               328.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          1072.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2192.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   482849.649 ±(99.9%) 6344.509 ops/s [Average]
[info]   (min, avg, max) = (481153.034, 482849.649, 485047.203), stdev = 1647.649
[info]   CI (99.9%): [476505.140, 489194.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   322.215 ±(99.9%) 25.187 MB/sec [Average]
[info]   (min, avg, max) = (314.585, 322.215, 328.054), stdev = 6.541
[info]   CI (99.9%): [297.028, 347.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1050.205 ±(99.9%) 92.801 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1050.205, 1072.434), stdev = 24.100
[info]   CI (99.9%): [957.404, 1143.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.794 ±(99.9%) 1216.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.794, 670.736), stdev = 316.023
[info]   CI (99.9%): [≈ 0, 1555.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1106.465 ±(99.9%) 3975.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1106.465, 2192.685), stdev = 1032.372
[info]   CI (99.9%): [≈ 0, 5081.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.25% complete, ETA 01:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3962.270 ops/s
[info] # Warmup Iteration   2: 37070.815 ops/s
[info] # Warmup Iteration   3: 40649.213 ops/s
[info] # Warmup Iteration   4: 40730.628 ops/s
[info] # Warmup Iteration   5: 40781.827 ops/s
[info] Iteration   1: 40286.149 ops/s
[info]                  ·gc.alloc.rate:                   1990.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              77758.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78487.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 40641.371 ops/s
[info]                  ·gc.alloc.rate:                   2007.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              77704.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77699.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40488.406 ops/s
[info]                  ·gc.alloc.rate:                   2010.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              78133.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77759.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40865.106 ops/s
[info]                  ·gc.alloc.rate:                   2027.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              78074.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77040.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41774.935 ops/s
[info]                  ·gc.alloc.rate:               2087.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          78641.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75471.876 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   40811.193 ±(99.9%) 2229.060 ops/s [Average]
[info]   (min, avg, max) = (40286.149, 40811.193, 41774.935), stdev = 578.880
[info]   CI (99.9%): [38582.134, 43040.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2024.593 ±(99.9%) 144.268 MB/sec [Average]
[info]   (min, avg, max) = (1990.675, 2024.593, 2087.460), stdev = 37.466
[info]   CI (99.9%): [1880.324, 2168.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78062.523 ±(99.9%) 1442.366 B/op [Average]
[info]   (min, avg, max) = (77704.284, 78062.523, 78641.836), stdev = 374.578
[info]   CI (99.9%): [76620.157, 79504.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.176 ±(99.9%) 14.844 MB/sec [Average]
[info]   (min, avg, max) = (2000.378, 2004.176, 2009.333), stdev = 3.855
[info]   CI (99.9%): [1989.332, 2019.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77291.727 ±(99.9%) 4386.255 B/op [Average]
[info]   (min, avg, max) = (75471.876, 77291.727, 78487.708), stdev = 1139.096
[info]   CI (99.9%): [72905.472, 81677.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 6.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 3.768), stdev = 1.627
[info]   CI (99.9%): [≈ 0, 7.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.404 ±(99.9%) 244.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.404, 147.197), stdev = 63.550
[info]   CI (99.9%): [≈ 0, 280.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.48% complete, ETA 01:27:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18298.044 ops/s
[info] # Warmup Iteration   2: 73758.717 ops/s
[info] # Warmup Iteration   3: 73406.536 ops/s
[info] # Warmup Iteration   4: 74002.180 ops/s
[info] # Warmup Iteration   5: 75392.483 ops/s
[info] Iteration   1: 75890.794 ops/s
[info]                  ·gc.alloc.rate:                   624.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              12942.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13869.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 75713.708 ops/s
[info]                  ·gc.alloc.rate:               625.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          13010.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13902.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 75764.743 ops/s
[info]                  ·gc.alloc.rate:               624.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          12973.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13907.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 70231.464 ops/s
[info]                  ·gc.alloc.rate:      556.558 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75617.394 ops/s
[info]                  ·gc.alloc.rate:                   620.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              12911.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13934.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   74643.621 ±(99.9%) 9505.087 ops/s [Average]
[info]   (min, avg, max) = (70231.464, 74643.621, 75890.794), stdev = 2468.441
[info]   CI (99.9%): [65138.533, 84148.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   610.357 ±(99.9%) 116.084 MB/sec [Average]
[info]   (min, avg, max) = (556.558, 610.357, 625.997), stdev = 30.147
[info]   CI (99.9%): [494.273, 726.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12862.070 ±(99.9%) 851.487 B/op [Average]
[info]   (min, avg, max) = (12472.006, 12862.070, 13010.587), stdev = 221.128
[info]   CI (99.9%): [12010.584, 13713.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.391 ±(99.9%) 1152.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.391, 669.589), stdev = 299.293
[info]   CI (99.9%): [≈ 0, 1687.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11122.789 ±(99.9%) 23942.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11122.789, 13934.611), stdev = 6217.871
[info]   CI (99.9%): [≈ 0, 35065.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.346 ±(99.9%) 1.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 0.867), stdev = 0.474
[info]   CI (99.9%): [≈ 0, 2.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.851 ops/s
[info] # Warmup Iteration   2: 82071.569 ops/s
[info] # Warmup Iteration   3: 86486.949 ops/s
[info] # Warmup Iteration   4: 87479.341 ops/s
[info] # Warmup Iteration   5: 87449.276 ops/s
[info] Iteration   1: 87487.855 ops/s
[info]                  ·gc.alloc.rate:                   510.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              9177.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11983.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87765.886 ops/s
[info]                  ·gc.alloc.rate:      496.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 8908.508 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87439.294 ops/s
[info]                  ·gc.alloc.rate:               515.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          9270.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11990.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 87276.592 ops/s
[info]                  ·gc.alloc.rate:                   507.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              9154.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12018.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87487.915 ops/s
[info]                  ·gc.alloc.rate:               519.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          9344.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11989.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   87491.508 ±(99.9%) 678.590 ops/s [Average]
[info]   (min, avg, max) = (87276.592, 87491.508, 87765.886), stdev = 176.228
[info]   CI (99.9%): [86812.919, 88170.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   509.831 ±(99.9%) 33.091 MB/sec [Average]
[info]   (min, avg, max) = (496.801, 509.831, 519.454), stdev = 8.594
[info]   CI (99.9%): [476.740, 542.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9171.058 ±(99.9%) 636.685 B/op [Average]
[info]   (min, avg, max) = (8908.508, 9171.058, 9344.727), stdev = 165.345
[info]   CI (99.9%): [8534.373, 9807.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.071 ±(99.9%) 1147.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.071, 666.491), stdev = 297.996
[info]   CI (99.9%): [≈ 0, 1680.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9596.489 ±(99.9%) 20657.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9596.489, 12018.838), stdev = 5364.618
[info]   CI (99.9%): [≈ 0, 30253.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.211), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:27:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33674.077 ops/s
[info] # Warmup Iteration   2: 76865.729 ops/s
[info] # Warmup Iteration   3: 73817.426 ops/s
[info] # Warmup Iteration   4: 78590.927 ops/s
[info] # Warmup Iteration   5: 78742.413 ops/s
[info] Iteration   1: 78476.835 ops/s
[info]                  ·gc.alloc.rate:               476.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          9551.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10260.118 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 78400.073 ops/s
[info]                  ·gc.alloc.rate:               483.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          9701.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13399.392 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 78833.197 ops/s
[info]                  ·gc.alloc.rate:      464.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 9281.116 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78777.858 ops/s
[info]                  ·gc.alloc.rate:               478.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          9557.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13334.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 78591.524 ops/s
[info]                  ·gc.alloc.rate:                   488.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              9778.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13379.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   78615.898 ±(99.9%) 720.295 ops/s [Average]
[info]   (min, avg, max) = (78400.073, 78615.898, 78833.197), stdev = 187.058
[info]   CI (99.9%): [77895.603, 79336.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   478.254 ±(99.9%) 33.726 MB/sec [Average]
[info]   (min, avg, max) = (464.926, 478.254, 488.274), stdev = 8.759
[info]   CI (99.9%): [444.527, 511.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9573.843 ±(99.9%) 731.449 B/op [Average]
[info]   (min, avg, max) = (9281.116, 9573.843, 9778.048), stdev = 189.955
[info]   CI (99.9%): [8842.395, 10305.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.978 ±(99.9%) 1113.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.978, 668.131), stdev = 289.185
[info]   CI (99.9%): [≈ 0, 1616.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10074.856 ±(99.9%) 22298.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10074.856, 13399.392), stdev = 5790.954
[info]   CI (99.9%): [≈ 0, 32373.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 1.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.834), stdev = 0.373
[info]   CI (99.9%): [≈ 0, 1.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.17% complete, ETA 01:26:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47025.455 ops/s
[info] # Warmup Iteration   2: 85758.800 ops/s
[info] # Warmup Iteration   3: 84342.911 ops/s
[info] # Warmup Iteration   4: 87376.661 ops/s
[info] # Warmup Iteration   5: 87641.950 ops/s
[info] Iteration   1: 86621.200 ops/s
[info]                  ·gc.alloc.rate:               513.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          9339.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9295.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 87408.746 ops/s
[info]                  ·gc.alloc.rate:               512.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          9233.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12072.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 87587.901 ops/s
[info]                  ·gc.alloc.rate:                   510.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              9163.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12047.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87739.614 ops/s
[info]                  ·gc.alloc.rate:      495.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87600.592 ops/s
[info]                  ·gc.alloc.rate:               519.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          9330.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12057.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   87391.611 ±(99.9%) 1718.974 ops/s [Average]
[info]   (min, avg, max) = (86621.200, 87391.611, 87739.614), stdev = 446.412
[info]   CI (99.9%): [85672.636, 89110.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   510.431 ±(99.9%) 33.822 MB/sec [Average]
[info]   (min, avg, max) = (495.953, 510.431, 519.401), stdev = 8.783
[info]   CI (99.9%): [476.609, 544.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9192.672 ±(99.9%) 696.839 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9192.672, 9339.198), stdev = 180.967
[info]   CI (99.9%): [8495.833, 9889.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.745 ±(99.9%) 1118.431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.745, 671.209), stdev = 290.453
[info]   CI (99.9%): [≈ 0, 1623.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9094.566 ±(99.9%) 20111.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9094.566, 12072.520), stdev = 5222.978
[info]   CI (99.9%): [≈ 0, 29206.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.40% complete, ETA 01:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49484.280 ops/s
[info] # Warmup Iteration   2: 84911.637 ops/s
[info] # Warmup Iteration   3: 85689.428 ops/s
[info] # Warmup Iteration   4: 87791.195 ops/s
[info] # Warmup Iteration   5: 86422.581 ops/s
[info] Iteration   1: 87528.656 ops/s
[info]                  ·gc.alloc.rate:               441.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          7941.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9199.296 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 88181.147 ops/s
[info]                  ·gc.alloc.rate:      429.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87972.420 ops/s
[info]                  ·gc.alloc.rate:               449.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          8050.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12000.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87893.773 ops/s
[info]                  ·gc.alloc.rate:                   444.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              7956.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12011.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88300.239 ops/s
[info]                  ·gc.alloc.rate:      429.535 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87975.247 ±(99.9%) 1145.694 ops/s [Average]
[info]   (min, avg, max) = (87528.656, 87975.247, 88300.239), stdev = 297.533
[info]   CI (99.9%): [86829.553, 89120.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   438.930 ±(99.9%) 35.689 MB/sec [Average]
[info]   (min, avg, max) = (429.110, 438.930, 449.986), stdev = 9.268
[info]   CI (99.9%): [403.240, 474.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7852.023 ±(99.9%) 707.712 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7852.023, 8050.660), stdev = 183.790
[info]   CI (99.9%): [7144.312, 8559.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.649 ±(99.9%) 1326.675 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.649, 670.800), stdev = 344.533
[info]   CI (99.9%): [≈ 0, 1697.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6642.344 ±(99.9%) 23762.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6642.344, 12011.740), stdev = 6170.933
[info]   CI (99.9%): [≈ 0, 30404.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.149 ±(99.9%) 1.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.149, 0.746), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 1.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.64% complete, ETA 01:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1273.203 ops/s
[info] # Warmup Iteration   2: 8134.337 ops/s
[info] # Warmup Iteration   3: 10211.447 ops/s
[info] # Warmup Iteration   4: 10219.266 ops/s
[info] # Warmup Iteration   5: 10228.318 ops/s
[info] Iteration   1: 10211.354 ops/s
[info]                  ·gc.alloc.rate:                   1684.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              259543.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206881.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10249.275 ops/s
[info]                  ·gc.alloc.rate:                   1690.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              259484.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309325.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 514.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 10166.811 ops/s
[info]                  ·gc.alloc.rate:                   1674.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              259244.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207673.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10196.254 ops/s
[info]                  ·gc.alloc.rate:                   1691.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              261125.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309904.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10242.414 ops/s
[info]                  ·gc.alloc.rate:               1673.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          257172.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205538.911 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10213.221 ±(99.9%) 130.544 ops/s [Average]
[info]   (min, avg, max) = (10166.811, 10213.221, 10249.275), stdev = 33.902
[info]   CI (99.9%): [10082.677, 10343.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.820 ±(99.9%) 32.276 MB/sec [Average]
[info]   (min, avg, max) = (1673.623, 1682.820, 1691.656), stdev = 8.382
[info]   CI (99.9%): [1650.544, 1715.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   259313.944 ±(99.9%) 5430.439 B/op [Average]
[info]   (min, avg, max) = (257172.006, 259313.944, 261125.254), stdev = 1410.268
[info]   CI (99.9%): [253883.504, 264744.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.771 ±(99.9%) 1414.491 MB/sec [Average]
[info]   (min, avg, max) = (1337.605, 1608.771, 2014.648), stdev = 367.339
[info]   CI (99.9%): [194.280, 3023.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   247864.787 ±(99.9%) 217082.036 B/op [Average]
[info]   (min, avg, max) = (205538.911, 247864.787, 309904.693), stdev = 56375.515
[info]   CI (99.9%): [30782.751, 464946.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.352), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.112 ±(99.9%) 846.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.112, 514.647), stdev = 219.919
[info]   CI (99.9%): [≈ 0, 972.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.87% complete, ETA 01:26:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1351.303 ops/s
[info] # Warmup Iteration   2: 8441.067 ops/s
[info] # Warmup Iteration   3: 9783.470 ops/s
[info] # Warmup Iteration   4: 9677.288 ops/s
[info] # Warmup Iteration   5: 9643.861 ops/s
[info] Iteration   1: 9602.359 ops/s
[info]                  ·gc.alloc.rate:               1471.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          241158.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219290.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 9696.345 ops/s
[info]                  ·gc.alloc.rate:                   1496.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              242885.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217272.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9754.325 ops/s
[info]                  ·gc.alloc.rate:                   1529.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              246828.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324126.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 655.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9920.962 ops/s
[info]                  ·gc.alloc.rate:                   1542.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              244670.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211976.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9927.125 ops/s
[info]                  ·gc.alloc.rate:               1543.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          244686.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211426.040 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9780.223 ±(99.9%) 547.041 ops/s [Average]
[info]   (min, avg, max) = (9602.359, 9780.223, 9927.125), stdev = 142.065
[info]   CI (99.9%): [9233.183, 10327.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1516.646 ±(99.9%) 121.957 MB/sec [Average]
[info]   (min, avg, max) = (1471.301, 1516.646, 1543.343), stdev = 31.672
[info]   CI (99.9%): [1394.689, 1638.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   244045.748 ±(99.9%) 8219.067 B/op [Average]
[info]   (min, avg, max) = (241158.736, 244045.748, 246828.062), stdev = 2134.466
[info]   CI (99.9%): [235826.681, 252264.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.046 ±(99.9%) 1157.856 MB/sec [Average]
[info]   (min, avg, max) = (1333.557, 1471.046, 2008.928), stdev = 300.691
[info]   CI (99.9%): [313.190, 2628.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   236818.558 ±(99.9%) 188385.647 B/op [Average]
[info]   (min, avg, max) = (211426.040, 236818.558, 324126.803), stdev = 48923.154
[info]   CI (99.9%): [48432.911, 425204.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 6.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 4.061), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   147.575 ±(99.9%) 1100.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.575, 655.244), stdev = 285.808
[info]   CI (99.9%): [≈ 0, 1248.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.194
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84051.534 ops/s
[info] # Warmup Iteration   2: 147564.833 ops/s
[info] # Warmup Iteration   3: 149802.162 ops/s
[info] # Warmup Iteration   4: 150294.476 ops/s
[info] # Warmup Iteration   5: 151032.373 ops/s
[info] Iteration   1: 150357.317 ops/s
[info]                  ·gc.alloc.rate:               401.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          4203.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5354.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 151757.928 ops/s
[info]                  ·gc.alloc.rate:               407.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          4225.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5305.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 152038.269 ops/s
[info]                  ·gc.alloc.rate:               414.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          4293.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6947.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 152442.144 ops/s
[info]                  ·gc.alloc.rate:      396.737 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 152162.777 ops/s
[info]                  ·gc.alloc.rate:                   419.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              4340.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6941.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   151751.687 ±(99.9%) 3147.276 ops/s [Average]
[info]   (min, avg, max) = (150357.317, 151751.687, 152442.144), stdev = 817.338
[info]   CI (99.9%): [148604.411, 154898.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   408.066 ±(99.9%) 36.125 MB/sec [Average]
[info]   (min, avg, max) = (396.737, 408.066, 419.705), stdev = 9.382
[info]   CI (99.9%): [371.941, 444.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4232.015 ±(99.9%) 360.503 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4232.015, 4340.970), stdev = 93.621
[info]   CI (99.9%): [3871.513, 4592.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.124 ±(99.9%) 1063.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.124, 671.216), stdev = 276.259
[info]   CI (99.9%): [≈ 0, 1536.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4910.125 ±(99.9%) 11017.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4910.125, 6947.843), stdev = 2861.144
[info]   CI (99.9%): [≈ 0, 15927.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.215), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.33% complete, ETA 01:25:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 722.580 ops/s
[info] # Warmup Iteration   2: 5274.712 ops/s
[info] # Warmup Iteration   3: 5674.133 ops/s
[info] # Warmup Iteration   4: 5841.824 ops/s
[info] # Warmup Iteration   5: 5822.263 ops/s
[info] Iteration   1: 5748.905 ops/s
[info]                  ·gc.alloc.rate:                   1510.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              412873.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547169.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 5833.567 ops/s
[info]                  ·gc.alloc.rate:               1505.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          406210.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361206.129 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 5828.590 ops/s
[info]                  ·gc.alloc.rate:                   1516.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              409516.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361875.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1135.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5832.928 ops/s
[info]                  ·gc.alloc.rate:                   1529.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              412591.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360487.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5844.610 ops/s
[info]                  ·gc.alloc.rate:                   1533.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              412970.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359091.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5817.720 ±(99.9%) 149.868 ops/s [Average]
[info]   (min, avg, max) = (5748.905, 5817.720, 5844.610), stdev = 38.920
[info]   CI (99.9%): [5667.852, 5967.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1519.200 ±(99.9%) 45.946 MB/sec [Average]
[info]   (min, avg, max) = (1505.754, 1519.200, 1533.652), stdev = 11.932
[info]   CI (99.9%): [1473.254, 1565.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   410832.687 ±(99.9%) 11378.481 B/op [Average]
[info]   (min, avg, max) = (406210.646, 410832.687, 412970.838), stdev = 2954.955
[info]   CI (99.9%): [399454.206, 422211.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.179 ±(99.9%) 1144.908 MB/sec [Average]
[info]   (min, avg, max) = (1333.560, 1470.179, 2002.037), stdev = 297.329
[info]   CI (99.9%): [325.270, 2615.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   397966.119 ±(99.9%) 321197.186 B/op [Average]
[info]   (min, avg, max) = (359091.542, 397966.119, 547169.984), stdev = 83413.889
[info]   CI (99.9%): [76768.933, 719163.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 7.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 4.205), stdev = 1.834
[info]   CI (99.9%): [≈ 0, 8.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   254.035 ±(99.9%) 1906.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 254.035, 1135.358), stdev = 495.084
[info]   CI (99.9%): [≈ 0, 2160.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.56% complete, ETA 01:25:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7264.209 ops/s
[info] # Warmup Iteration   2: 19093.875 ops/s
[info] # Warmup Iteration   3: 20034.142 ops/s
[info] # Warmup Iteration   4: 20037.044 ops/s
[info] # Warmup Iteration   5: 20126.473 ops/s
[info] Iteration   1: 20109.710 ops/s
[info]                  ·gc.alloc.rate:                   1550.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              121374.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104941.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20190.539 ops/s
[info]                  ·gc.alloc.rate:                   1588.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              123785.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156884.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 20466.863 ops/s
[info]                  ·gc.alloc.rate:                   1586.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              121976.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103090.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20410.685 ops/s
[info]                  ·gc.alloc.rate:               1580.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          121860.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103193.357 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20339.965 ops/s
[info]                  ·gc.alloc.rate:               1574.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          121854.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103445.342 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20303.552 ±(99.9%) 577.020 ops/s [Average]
[info]   (min, avg, max) = (20109.710, 20303.552, 20466.863), stdev = 149.850
[info]   CI (99.9%): [19726.532, 20880.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1576.255 ±(99.9%) 58.418 MB/sec [Average]
[info]   (min, avg, max) = (1550.796, 1576.255, 1588.033), stdev = 15.171
[info]   CI (99.9%): [1517.837, 1634.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122170.303 ±(99.9%) 3588.344 B/op [Average]
[info]   (min, avg, max) = (121374.845, 122170.303, 123785.102), stdev = 931.881
[info]   CI (99.9%): [118581.959, 125758.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.032 ±(99.9%) 1159.449 MB/sec [Average]
[info]   (min, avg, max) = (1336.957, 1474.032, 2012.657), stdev = 301.105
[info]   CI (99.9%): [314.584, 2633.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114310.809 ±(99.9%) 91687.075 B/op [Average]
[info]   (min, avg, max) = (103090.337, 114310.809, 156884.000), stdev = 23810.842
[info]   CI (99.9%): [22623.734, 205997.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 2.956), stdev = 1.276
[info]   CI (99.9%): [≈ 0, 5.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60.500 ±(99.9%) 382.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.500, 230.406), stdev = 99.417
[info]   CI (99.9%): [≈ 0, 443.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.79% complete, ETA 01:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10166.610 ops/s
[info] # Warmup Iteration   2: 22706.534 ops/s
[info] # Warmup Iteration   3: 23096.845 ops/s
[info] # Warmup Iteration   4: 23371.287 ops/s
[info] # Warmup Iteration   5: 23330.807 ops/s
[info] Iteration   1: 23232.117 ops/s
[info]                  ·gc.alloc.rate:                   1592.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              107851.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136154.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 23419.377 ops/s
[info]                  ·gc.alloc.rate:                   1580.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              106236.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90119.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23500.275 ops/s
[info]                  ·gc.alloc.rate:                   1585.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              106153.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89719.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23240.536 ops/s
[info]                  ·gc.alloc.rate:                   1597.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              108180.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135780.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23481.777 ops/s
[info]                  ·gc.alloc.rate:               1580.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          105920.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89561.588 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23374.816 ±(99.9%) 500.436 ops/s [Average]
[info]   (min, avg, max) = (23232.117, 23374.816, 23500.275), stdev = 129.962
[info]   CI (99.9%): [22874.380, 23875.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1587.215 ±(99.9%) 28.427 MB/sec [Average]
[info]   (min, avg, max) = (1580.568, 1587.215, 1597.470), stdev = 7.382
[info]   CI (99.9%): [1558.788, 1615.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106868.666 ±(99.9%) 4081.990 B/op [Average]
[info]   (min, avg, max) = (105920.833, 106868.666, 108180.062), stdev = 1060.080
[info]   CI (99.9%): [102786.676, 110950.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.421 ±(99.9%) 1409.747 MB/sec [Average]
[info]   (min, avg, max) = (1336.452, 1606.421, 2009.888), stdev = 366.107
[info]   CI (99.9%): [196.674, 3016.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   108267.233 ±(99.9%) 97374.828 B/op [Average]
[info]   (min, avg, max) = (89561.588, 108267.233, 136154.671), stdev = 25287.933
[info]   CI (99.9%): [10892.405, 205642.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.801 ±(99.9%) 5.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.171), stdev = 1.367
[info]   CI (99.9%): [≈ 0, 6.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.781 ±(99.9%) 353.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.781, 213.103), stdev = 91.872
[info]   CI (99.9%): [≈ 0, 407.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.02% complete, ETA 01:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75868.053 ops/s
[info] # Warmup Iteration   2: 128186.082 ops/s
[info] # Warmup Iteration   3: 130567.459 ops/s
[info] # Warmup Iteration   4: 134316.931 ops/s
[info] # Warmup Iteration   5: 134615.476 ops/s
[info] Iteration   1: 134908.514 ops/s
[info]                  ·gc.alloc.rate:      298.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134342.979 ops/s
[info]                  ·gc.alloc.rate:               311.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          3649.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5993.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 134795.612 ops/s
[info]                  ·gc.alloc.rate:      298.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 134052.364 ops/s
[info]                  ·gc.alloc.rate:                   312.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6006.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 134785.556 ops/s
[info]                  ·gc.alloc.rate:      298.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134577.005 ±(99.9%) 1403.238 ops/s [Average]
[info]   (min, avg, max) = (134052.364, 134577.005, 134908.514), stdev = 364.417
[info]   CI (99.9%): [133173.767, 135980.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   303.598 ±(99.9%) 28.887 MB/sec [Average]
[info]   (min, avg, max) = (298.021, 303.598, 312.118), stdev = 7.502
[info]   CI (99.9%): [274.711, 332.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3550.769 ±(99.9%) 373.688 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3550.769, 3664.444), stdev = 97.046
[info]   CI (99.9%): [3177.081, 3924.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.599), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1283.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2399.998 ±(99.9%) 12654.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2399.998, 6006.432), stdev = 3286.336
[info]   CI (99.9%): [≈ 0, 15054.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.244), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.25% complete, ETA 01:24:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96293.863 ops/s
[info] # Warmup Iteration   2: 137926.984 ops/s
[info] # Warmup Iteration   3: 140158.121 ops/s
[info] # Warmup Iteration   4: 140267.346 ops/s
[info] # Warmup Iteration   5: 140728.723 ops/s
[info] Iteration   1: 140675.343 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140728.471 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 140754.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140684.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140328.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   140634.249 ±(99.9%) 669.797 ops/s [Average]
[info]   (min, avg, max) = (140328.572, 140634.249, 140754.853), stdev = 173.944
[info]   CI (99.9%): [139964.452, 141304.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.48% complete, ETA 01:24:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9490.486 ops/s
[info] # Warmup Iteration   2: 21328.929 ops/s
[info] # Warmup Iteration   3: 23190.142 ops/s
[info] # Warmup Iteration   4: 23301.582 ops/s
[info] # Warmup Iteration   5: 22938.134 ops/s
[info] Iteration   1: 22127.555 ops/s
[info]                  ·gc.alloc.rate:                   1557.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              110763.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143041.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 23185.104 ops/s
[info]                  ·gc.alloc.rate:                   1597.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              108457.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91093.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23243.412 ops/s
[info]                  ·gc.alloc.rate:                   1597.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              108178.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90771.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23146.411 ops/s
[info]                  ·gc.alloc.rate:                   1631.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              110919.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136382.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23427.437 ops/s
[info]                  ·gc.alloc.rate:                   1620.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              108875.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89760.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23025.984 ±(99.9%) 1977.968 ops/s [Average]
[info]   (min, avg, max) = (22127.555, 23025.984, 23427.437), stdev = 513.672
[info]   CI (99.9%): [21048.016, 25003.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1600.966 ±(99.9%) 109.550 MB/sec [Average]
[info]   (min, avg, max) = (1557.330, 1600.966, 1631.302), stdev = 28.450
[info]   CI (99.9%): [1491.416, 1710.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109438.978 ±(99.9%) 5025.882 B/op [Average]
[info]   (min, avg, max) = (108178.538, 109438.978, 110919.082), stdev = 1305.206
[info]   CI (99.9%): [104413.096, 114464.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.140 ±(99.9%) 1410.797 MB/sec [Average]
[info]   (min, avg, max) = (1336.208, 1607.140, 2011.153), stdev = 366.379
[info]   CI (99.9%): [196.344, 3017.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110209.861 ±(99.9%) 104117.379 B/op [Average]
[info]   (min, avg, max) = (89760.325, 110209.861, 143041.478), stdev = 27038.953
[info]   CI (99.9%): [6092.482, 214327.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.175 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.123), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 5.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.373 ±(99.9%) 351.216 B/op [Average]
[info]   (min, avg, max) = (1.398, 55.373, 211.963), stdev = 91.210
[info]   CI (99.9%): [≈ 0, 406.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:23:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37813.979 ops/s
[info] # Warmup Iteration   2: 109361.670 ops/s
[info] # Warmup Iteration   3: 118475.265 ops/s
[info] # Warmup Iteration   4: 122916.531 ops/s
[info] # Warmup Iteration   5: 124613.852 ops/s
[info] Iteration   1: 124446.631 ops/s
[info]                  ·gc.alloc.rate:               1758.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          22243.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17001.112 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 121870.548 ops/s
[info]                  ·gc.alloc.rate:                   1739.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              22463.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26057.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 124619.681 ops/s
[info]                  ·gc.alloc.rate:               1800.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          22742.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25407.787 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 125446.969 ops/s
[info]                  ·gc.alloc.rate:                   1772.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              22235.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16815.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 124516.991 ops/s
[info]                  ·gc.alloc.rate:               1773.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          22410.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25410.941 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124180.164 ±(99.9%) 5207.900 ops/s [Average]
[info]   (min, avg, max) = (121870.548, 124180.164, 125446.969), stdev = 1352.475
[info]   CI (99.9%): [118972.264, 129388.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1768.928 ±(99.9%) 86.641 MB/sec [Average]
[info]   (min, avg, max) = (1739.473, 1768.928, 1800.990), stdev = 22.500
[info]   CI (99.9%): [1682.287, 1855.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22419.183 ±(99.9%) 795.551 B/op [Average]
[info]   (min, avg, max) = (22235.655, 22419.183, 22742.096), stdev = 206.602
[info]   CI (99.9%): [21623.632, 23214.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744.972 ±(99.9%) 1415.600 MB/sec [Average]
[info]   (min, avg, max) = (1340.241, 1744.972, 2017.743), stdev = 367.627
[info]   CI (99.9%): [329.372, 3160.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22138.583 ±(99.9%) 18415.187 B/op [Average]
[info]   (min, avg, max) = (16815.460, 22138.583, 26057.616), stdev = 4782.366
[info]   CI (99.9%): [3723.396, 40553.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.476), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.710 ±(99.9%) 75.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.710, 44.895), stdev = 19.733
[info]   CI (99.9%): [≈ 0, 85.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.94% complete, ETA 01:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.693 ops/s
[info] # Warmup Iteration   2: 518261.476 ops/s
[info] # Warmup Iteration   3: 526626.855 ops/s
[info] # Warmup Iteration   4: 561797.472 ops/s
[info] # Warmup Iteration   5: 565998.345 ops/s
[info] Iteration   1: 564286.185 ops/s
[info]                  ·gc.alloc.rate:               597.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          1666.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 565600.183 ops/s
[info]                  ·gc.alloc.rate:               609.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          1696.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1851.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 565276.923 ops/s
[info]                  ·gc.alloc.rate:                   609.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1696.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 566383.576 ops/s
[info]                  ·gc.alloc.rate:                   600.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1668.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1850.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 565018.939 ops/s
[info]                  ·gc.alloc.rate:               604.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          1684.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   565313.161 ±(99.9%) 2964.451 ops/s [Average]
[info]   (min, avg, max) = (564286.185, 565313.161, 566383.576), stdev = 769.859
[info]   CI (99.9%): [562348.710, 568277.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   604.422 ±(99.9%) 20.728 MB/sec [Average]
[info]   (min, avg, max) = (597.427, 604.422, 609.666), stdev = 5.383
[info]   CI (99.9%): [583.694, 625.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1682.484 ±(99.9%) 55.832 B/op [Average]
[info]   (min, avg, max) = (1666.247, 1682.484, 1696.568), stdev = 14.499
[info]   CI (99.9%): [1626.652, 1738.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.905 ±(99.9%) 1.544 MB/sec [Average]
[info]   (min, avg, max) = (665.491, 665.905, 666.461), stdev = 0.401
[info]   CI (99.9%): [664.361, 667.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1853.635 ±(99.9%) 10.412 B/op [Average]
[info]   (min, avg, max) = (1850.139, 1853.635, 1856.404), stdev = 2.704
[info]   CI (99.9%): [1843.223, 1864.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.101), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.18% complete, ETA 01:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119100.264 ops/s
[info] # Warmup Iteration   2: 331855.640 ops/s
[info] # Warmup Iteration   3: 349844.465 ops/s
[info] # Warmup Iteration   4: 350247.952 ops/s
[info] # Warmup Iteration   5: 345232.933 ops/s
[info] Iteration   1: 350933.147 ops/s
[info]                  ·gc.alloc.rate:                   497.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              2232.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2294.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 351332.103 ops/s
[info]                  ·gc.alloc.rate:               502.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          2251.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2985.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 350406.593 ops/s
[info]                  ·gc.alloc.rate:                   503.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              2261.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2993.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 351420.551 ops/s
[info]                  ·gc.alloc.rate:      487.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 350803.055 ops/s
[info]                  ·gc.alloc.rate:               511.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          2296.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2992.951 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   350979.090 ±(99.9%) 1588.079 ops/s [Average]
[info]   (min, avg, max) = (350406.593, 350979.090, 351420.551), stdev = 412.419
[info]   CI (99.9%): [349391.011, 352567.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   500.789 ±(99.9%) 34.220 MB/sec [Average]
[info]   (min, avg, max) = (487.682, 500.789, 511.870), stdev = 8.887
[info]   CI (99.9%): [466.569, 535.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2245.399 ±(99.9%) 159.238 B/op [Average]
[info]   (min, avg, max) = (2184.001, 2245.399, 2296.421), stdev = 41.354
[info]   CI (99.9%): [2086.161, 2404.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.406 ±(99.9%) 1111.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.406, 667.125), stdev = 288.781
[info]   CI (99.9%): [≈ 0, 1614.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2253.308 ±(99.9%) 4987.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2253.308, 2993.487), stdev = 1295.215
[info]   CI (99.9%): [≈ 0, 7240.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.093), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.41% complete, ETA 01:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313320.889 ops/s
[info] # Warmup Iteration   2: 705384.296 ops/s
[info] # Warmup Iteration   3: 755590.112 ops/s
[info] # Warmup Iteration   4: 763941.178 ops/s
[info] # Warmup Iteration   5: 753836.434 ops/s
[info] Iteration   1: 762995.067 ops/s
[info]                  ·gc.alloc.rate:               513.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          1059.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1055.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 767018.970 ops/s
[info]                  ·gc.alloc.rate:               517.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          1062.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1375.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 764536.621 ops/s
[info]                  ·gc.alloc.rate:               517.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1380.236 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 751181.276 ops/s
[info]                  ·gc.alloc.rate:      488.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 750264.159 ops/s
[info]                  ·gc.alloc.rate:               508.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          1066.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1407.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   759199.218 ±(99.9%) 30330.240 ops/s [Average]
[info]   (min, avg, max) = (750264.159, 759199.218, 767018.970), stdev = 7876.667
[info]   CI (99.9%): [728868.979, 789529.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   509.248 ±(99.9%) 46.429 MB/sec [Average]
[info]   (min, avg, max) = (488.771, 509.248, 517.760), stdev = 12.058
[info]   CI (99.9%): [462.819, 555.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.516 ±(99.9%) 68.485 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.516, 1066.410), stdev = 17.785
[info]   CI (99.9%): [987.031, 1124.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.807 ±(99.9%) 1118.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.807, 671.182), stdev = 290.495
[info]   CI (99.9%): [≈ 0, 1623.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1043.848 ±(99.9%) 2314.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1043.848, 1407.934), stdev = 601.173
[info]   CI (99.9%): [≈ 0, 3358.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.64% complete, ETA 01:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5578.795 ops/s
[info] # Warmup Iteration   2: 68220.176 ops/s
[info] # Warmup Iteration   3: 73985.875 ops/s
[info] # Warmup Iteration   4: 74968.133 ops/s
[info] # Warmup Iteration   5: 75361.419 ops/s
[info] Iteration   1: 74242.354 ops/s
[info]                  ·gc.alloc.rate:                   3063.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              64933.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70685.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75580.841 ops/s
[info]                  ·gc.alloc.rate:                   3119.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              64951.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55622.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 74099.258 ops/s
[info]                  ·gc.alloc.rate:               3087.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          65577.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3349.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71147.813 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 74464.783 ops/s
[info]                  ·gc.alloc.rate:                   3075.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              64998.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56851.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 75610.477 ops/s
[info]                  ·gc.alloc.rate:               3122.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          64994.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56169.010 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   74799.543 ±(99.9%) 2843.330 ops/s [Average]
[info]   (min, avg, max) = (74099.258, 74799.543, 75610.477), stdev = 738.404
[info]   CI (99.9%): [71956.212, 77642.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3093.591 ±(99.9%) 101.460 MB/sec [Average]
[info]   (min, avg, max) = (3063.044, 3093.591, 3122.410), stdev = 26.349
[info]   CI (99.9%): [2992.130, 3195.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65090.917 ±(99.9%) 1051.965 B/op [Average]
[info]   (min, avg, max) = (64933.026, 65090.917, 65577.048), stdev = 273.192
[info]   CI (99.9%): [64038.952, 66142.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.822 ±(99.9%) 1383.106 MB/sec [Average]
[info]   (min, avg, max) = (2671.238, 2948.822, 3349.773), stdev = 359.188
[info]   CI (99.9%): [1565.715, 4331.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62095.437 ±(99.9%) 31060.368 B/op [Average]
[info]   (min, avg, max) = (55622.591, 62095.437, 71147.813), stdev = 8066.279
[info]   CI (99.9%): [31035.069, 93155.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.616 ±(99.9%) 3.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.207), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 4.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.87% complete, ETA 01:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70533.676 ops/s
[info] # Warmup Iteration   2: 192131.484 ops/s
[info] # Warmup Iteration   3: 195337.487 ops/s
[info] # Warmup Iteration   4: 201458.277 ops/s
[info] # Warmup Iteration   5: 200533.434 ops/s
[info] Iteration   1: 198763.133 ops/s
[info]                  ·gc.alloc.rate:                   1445.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              11445.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10623.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 202595.542 ops/s
[info]                  ·gc.alloc.rate:                   1483.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              11525.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15643.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 202169.632 ops/s
[info]                  ·gc.alloc.rate:                   1478.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              11507.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10454.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 199433.884 ops/s
[info]                  ·gc.alloc.rate:                   1457.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              11502.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10576.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 200154.174 ops/s
[info]                  ·gc.alloc.rate:                   1476.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              11601.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10528.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   200623.273 ±(99.9%) 6493.758 ops/s [Average]
[info]   (min, avg, max) = (198763.133, 200623.273, 202595.542), stdev = 1686.408
[info]   CI (99.9%): [194129.515, 207117.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1468.201 ±(99.9%) 61.898 MB/sec [Average]
[info]   (min, avg, max) = (1445.463, 1468.201, 1483.663), stdev = 16.075
[info]   CI (99.9%): [1406.303, 1530.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11516.575 ±(99.9%) 216.377 B/op [Average]
[info]   (min, avg, max) = (11445.669, 11516.575, 11601.636), stdev = 56.192
[info]   CI (99.9%): [11300.198, 11732.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.629 ±(99.9%) 1158.436 MB/sec [Average]
[info]   (min, avg, max) = (1339.476, 1475.629, 2013.786), stdev = 300.842
[info]   CI (99.9%): [317.193, 2634.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11565.343 ±(99.9%) 8782.703 B/op [Average]
[info]   (min, avg, max) = (10454.335, 11565.343, 15643.900), stdev = 2280.840
[info]   CI (99.9%): [2782.640, 20348.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.547 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.716, 3.289), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.580 ±(99.9%) 43.169 B/op [Average]
[info]   (min, avg, max) = (0.162, 5.580, 25.604), stdev = 11.211
[info]   CI (99.9%): [≈ 0, 48.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.776 ops/s
[info] # Warmup Iteration   2: 586764.417 ops/s
[info] # Warmup Iteration   3: 636395.533 ops/s
[info] # Warmup Iteration   4: 656660.486 ops/s
[info] # Warmup Iteration   5: 656225.708 ops/s
[info] Iteration   1: 655595.388 ops/s
[info]                  ·gc.alloc.rate:      356.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 652948.418 ops/s
[info]                  ·gc.alloc.rate:                   368.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 657684.233 ops/s
[info]                  ·gc.alloc.rate:                   370.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              887.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1594.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 659658.454 ops/s
[info]                  ·gc.alloc.rate:      358.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 657496.405 ops/s
[info]                  ·gc.alloc.rate:               382.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          915.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1594.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   656676.580 ±(99.9%) 9750.424 ops/s [Average]
[info]   (min, avg, max) = (652948.418, 656676.580, 659658.454), stdev = 2532.154
[info]   CI (99.9%): [646926.156, 666427.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   367.438 ±(99.9%) 39.761 MB/sec [Average]
[info]   (min, avg, max) = (356.583, 367.438, 382.291), stdev = 10.326
[info]   CI (99.9%): [327.677, 407.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   880.596 ±(99.9%) 96.441 B/op [Average]
[info]   (min, avg, max) = (856.001, 880.596, 915.100), stdev = 25.045
[info]   CI (99.9%): [784.155, 977.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.825 ±(99.9%) 1319.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.825, 666.230), stdev = 342.542
[info]   CI (99.9%): [≈ 0, 1687.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   884.400 ±(99.9%) 3160.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 884.400, 1594.574), stdev = 820.697
[info]   CI (99.9%): [≈ 0, 4044.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.33% complete, ETA 01:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282848.982 ops/s
[info] # Warmup Iteration   2: 632216.222 ops/s
[info] # Warmup Iteration   3: 629416.772 ops/s
[info] # Warmup Iteration   4: 623762.788 ops/s
[info] # Warmup Iteration   5: 645015.093 ops/s
[info] Iteration   1: 645035.536 ops/s
[info]                  ·gc.alloc.rate:               498.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          1216.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1248.314 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 643650.168 ops/s
[info]                  ·gc.alloc.rate:               501.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          1226.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1632.946 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 648565.180 ops/s
[info]                  ·gc.alloc.rate:      481.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 647693.954 ops/s
[info]                  ·gc.alloc.rate:                   495.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1622.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 655034.328 ops/s
[info]                  ·gc.alloc.rate:               510.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          1226.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1606.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   647995.833 ±(99.9%) 16960.749 ops/s [Average]
[info]   (min, avg, max) = (643650.168, 647995.833, 655034.328), stdev = 4404.653
[info]   CI (99.9%): [631035.084, 664956.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   497.569 ±(99.9%) 40.575 MB/sec [Average]
[info]   (min, avg, max) = (481.434, 497.569, 510.319), stdev = 10.537
[info]   CI (99.9%): [456.995, 538.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1208.419 ±(99.9%) 93.671 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1208.419, 1226.834), stdev = 24.326
[info]   CI (99.9%): [1114.749, 1302.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503.151 ±(99.9%) 1114.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.151, 668.456), stdev = 289.315
[info]   CI (99.9%): [≈ 0, 1617.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1222.013 ±(99.9%) 2702.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1222.013, 1632.946), stdev = 701.952
[info]   CI (99.9%): [≈ 0, 3924.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.56% complete, ETA 01:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608833.892 ops/s
[info] # Warmup Iteration   2: 940746.398 ops/s
[info] # Warmup Iteration   3: 1100281.415 ops/s
[info] # Warmup Iteration   4: 1117854.891 ops/s
[info] # Warmup Iteration   5: 1088794.645 ops/s
[info] Iteration   1: 1102603.778 ops/s
[info]                  ·gc.alloc.rate:               622.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          888.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 956.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1106099.365 ops/s
[info]                  ·gc.alloc.rate:               614.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 953.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1116758.486 ops/s
[info]                  ·gc.alloc.rate:                   631.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1120655.429 ops/s
[info]                  ·gc.alloc.rate:               629.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 941.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1119988.027 ops/s
[info]                  ·gc.alloc.rate:               627.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          881.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1113221.017 ±(99.9%) 32044.916 ops/s [Average]
[info]   (min, avg, max) = (1102603.778, 1113221.017, 1120655.429), stdev = 8321.963
[info]   CI (99.9%): [1081176.101, 1145265.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   625.255 ±(99.9%) 25.798 MB/sec [Average]
[info]   (min, avg, max) = (614.930, 625.255, 631.936), stdev = 6.700
[info]   CI (99.9%): [599.458, 651.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   883.874 ±(99.9%) 24.359 B/op [Average]
[info]   (min, avg, max) = (874.643, 883.874, 890.569), stdev = 6.326
[info]   CI (99.9%): [859.515, 908.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.542 ±(99.9%) 1.570 MB/sec [Average]
[info]   (min, avg, max) = (670.128, 670.542, 671.223), stdev = 0.408
[info]   CI (99.9%): [668.972, 672.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   947.934 ±(99.9%) 25.724 B/op [Average]
[info]   (min, avg, max) = (941.629, 947.934, 956.566), stdev = 6.680
[info]   CI (99.9%): [922.211, 973.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.79% complete, ETA 01:21:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745088.271 ops/s
[info] # Warmup Iteration   2: 1120001.522 ops/s
[info] # Warmup Iteration   3: 1185861.033 ops/s
[info] # Warmup Iteration   4: 1185223.391 ops/s
[info] # Warmup Iteration   5: 1186330.666 ops/s
[info] Iteration   1: 1193627.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1195643.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1195297.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1190038.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1192723.744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1193466.299 ±(99.9%) 8699.791 ops/s [Average]
[info]   (min, avg, max) = (1190038.950, 1193466.299, 1195643.384), stdev = 2259.308
[info]   CI (99.9%): [1184766.508, 1202166.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.02% complete, ETA 01:21:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7707.199 ops/s
[info] # Warmup Iteration   2: 32151.997 ops/s
[info] # Warmup Iteration   3: 34061.679 ops/s
[info] # Warmup Iteration   4: 34375.964 ops/s
[info] # Warmup Iteration   5: 34001.860 ops/s
[info] Iteration   1: 34494.640 ops/s
[info]                  ·gc.alloc.rate:                   1957.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              89303.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91851.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34689.556 ops/s
[info]                  ·gc.alloc.rate:                   1979.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              89796.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91214.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35069.516 ops/s
[info]                  ·gc.alloc.rate:               2001.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          89804.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89959.946 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 35118.849 ops/s
[info]                  ·gc.alloc.rate:               2004.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          89783.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89709.283 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 35164.565 ops/s
[info]                  ·gc.alloc.rate:               1993.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          89219.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59867.518 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34907.425 ±(99.9%) 1147.066 ops/s [Average]
[info]   (min, avg, max) = (34494.640, 34907.425, 35164.565), stdev = 297.889
[info]   CI (99.9%): [33760.359, 36054.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1987.181 ±(99.9%) 74.336 MB/sec [Average]
[info]   (min, avg, max) = (1957.284, 1987.181, 2004.344), stdev = 19.305
[info]   CI (99.9%): [1912.845, 2061.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89581.442 ±(99.9%) 1130.880 B/op [Average]
[info]   (min, avg, max) = (89219.221, 89581.442, 89804.169), stdev = 293.686
[info]   CI (99.9%): [88450.562, 90712.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873.775 ±(99.9%) 1153.611 MB/sec [Average]
[info]   (min, avg, max) = (1337.908, 1873.775, 2013.130), stdev = 299.589
[info]   CI (99.9%): [720.165, 3027.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84520.655 ±(99.9%) 53176.587 B/op [Average]
[info]   (min, avg, max) = (59867.518, 84520.655, 91851.841), stdev = 13809.791
[info]   CI (99.9%): [31344.069, 137697.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.164), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 6.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.375 ±(99.9%) 240.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.375, 144.373), stdev = 62.581
[info]   CI (99.9%): [≈ 0, 278.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.25% complete, ETA 01:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32130.733 ops/s
[info] # Warmup Iteration   2: 124742.468 ops/s
[info] # Warmup Iteration   3: 127331.196 ops/s
[info] # Warmup Iteration   4: 131718.326 ops/s
[info] # Warmup Iteration   5: 131557.081 ops/s
[info] Iteration   1: 129964.762 ops/s
[info]                  ·gc.alloc.rate:                   1660.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              20109.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24349.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 131531.647 ops/s
[info]                  ·gc.alloc.rate:                   1662.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              19897.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16049.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 131864.027 ops/s
[info]                  ·gc.alloc.rate:                   1693.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              20206.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23988.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 132114.543 ops/s
[info]                  ·gc.alloc.rate:                   1695.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              20201.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15919.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 131372.523 ops/s
[info]                  ·gc.alloc.rate:               1699.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          20362.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24017.181 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   131369.500 ±(99.9%) 3221.239 ops/s [Average]
[info]   (min, avg, max) = (129964.762, 131369.500, 132114.543), stdev = 836.545
[info]   CI (99.9%): [128148.262, 134590.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.408 ±(99.9%) 73.225 MB/sec [Average]
[info]   (min, avg, max) = (1660.614, 1682.408, 1699.764), stdev = 19.016
[info]   CI (99.9%): [1609.183, 1755.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20155.725 ±(99.9%) 656.804 B/op [Average]
[info]   (min, avg, max) = (19897.542, 20155.725, 20362.919), stdev = 170.570
[info]   CI (99.9%): [19498.921, 20812.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1740.595 ±(99.9%) 1412.443 MB/sec [Average]
[info]   (min, avg, max) = (1336.251, 1740.595, 2010.721), stdev = 366.807
[info]   CI (99.9%): [328.152, 3153.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20864.781 ±(99.9%) 17164.779 B/op [Average]
[info]   (min, avg, max) = (15919.138, 20864.781, 24349.750), stdev = 4457.639
[info]   CI (99.9%): [3700.003, 38029.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.268), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.363 ±(99.9%) 64.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.363, 39.108), stdev = 16.815
[info]   CI (99.9%): [≈ 0, 74.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.48% complete, ETA 01:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57255.496 ops/s
[info] # Warmup Iteration   2: 193244.872 ops/s
[info] # Warmup Iteration   3: 199169.259 ops/s
[info] # Warmup Iteration   4: 205155.181 ops/s
[info] # Warmup Iteration   5: 205291.664 ops/s
[info] Iteration   1: 204321.655 ops/s
[info]                  ·gc.alloc.rate:               1246.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          9596.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10292.934 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 204834.220 ops/s
[info]                  ·gc.alloc.rate:                   1244.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              9560.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10272.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 206826.870 ops/s
[info]                  ·gc.alloc.rate:               1240.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          9440.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5091.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 205278.583 ops/s
[info]                  ·gc.alloc.rate:                   1256.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              9635.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10263.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 206269.335 ops/s
[info]                  ·gc.alloc.rate:                   1275.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              9735.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10201.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   205506.132 ±(99.9%) 3961.234 ops/s [Average]
[info]   (min, avg, max) = (204321.655, 205506.132, 206826.870), stdev = 1028.720
[info]   CI (99.9%): [201544.899, 209467.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1252.912 ±(99.9%) 54.593 MB/sec [Average]
[info]   (min, avg, max) = (1240.801, 1252.912, 1275.951), stdev = 14.178
[info]   CI (99.9%): [1198.319, 1307.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9593.756 ±(99.9%) 415.299 B/op [Average]
[info]   (min, avg, max) = (9440.523, 9593.756, 9735.819), stdev = 107.852
[info]   CI (99.9%): [9178.457, 10009.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.794 ±(99.9%) 1150.666 MB/sec [Average]
[info]   (min, avg, max) = (669.243, 1203.794, 1338.705), stdev = 298.824
[info]   CI (99.9%): [53.128, 2354.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9224.269 ±(99.9%) 8896.271 B/op [Average]
[info]   (min, avg, max) = (5091.873, 9224.269, 10292.934), stdev = 2310.333
[info]   CI (99.9%): [327.998, 18120.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 6.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 3.643), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.508 ±(99.9%) 46.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.508, 27.931), stdev = 12.126
[info]   CI (99.9%): [≈ 0, 53.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:20:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125126.528 ops/s
[info] # Warmup Iteration   2: 243552.991 ops/s
[info] # Warmup Iteration   3: 249129.231 ops/s
[info] # Warmup Iteration   4: 251570.275 ops/s
[info] # Warmup Iteration   5: 247690.351 ops/s
[info] Iteration   1: 244974.622 ops/s
[info]                  ·gc.alloc.rate:               1328.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          8536.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8638.630 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 254639.920 ops/s
[info]                  ·gc.alloc.rate:                   1362.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              8421.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8315.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 257383.772 ops/s
[info]                  ·gc.alloc.rate:                   1379.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              8435.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8232.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 257869.672 ops/s
[info]                  ·gc.alloc.rate:                   1394.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              8513.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8212.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 252969.487 ops/s
[info]                  ·gc.alloc.rate:                   1369.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              8518.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8358.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   253567.494 ±(99.9%) 20047.205 ops/s [Average]
[info]   (min, avg, max) = (244974.622, 253567.494, 257869.672), stdev = 5206.195
[info]   CI (99.9%): [233520.290, 273614.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1367.007 ±(99.9%) 94.775 MB/sec [Average]
[info]   (min, avg, max) = (1328.761, 1367.007, 1394.804), stdev = 24.613
[info]   CI (99.9%): [1272.232, 1461.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8484.986 ±(99.9%) 202.880 B/op [Average]
[info]   (min, avg, max) = (8421.223, 8484.986, 8536.716), stdev = 52.687
[info]   CI (99.9%): [8282.106, 8687.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.140 ±(99.9%) 4.467 MB/sec [Average]
[info]   (min, avg, max) = (1343.507, 1345.140, 1346.626), stdev = 1.160
[info]   CI (99.9%): [1340.672, 1349.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8351.597 ±(99.9%) 659.170 B/op [Average]
[info]   (min, avg, max) = (8212.646, 8351.597, 8638.630), stdev = 171.184
[info]   CI (99.9%): [7692.427, 9010.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.603), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 4.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.819 ±(99.9%) 26.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.819, 15.912), stdev = 6.859
[info]   CI (99.9%): [≈ 0, 30.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.95% complete, ETA 01:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4386.232 ops/s
[info] # Warmup Iteration   2: 56057.271 ops/s
[info] # Warmup Iteration   3: 66492.484 ops/s
[info] # Warmup Iteration   4: 68023.332 ops/s
[info] # Warmup Iteration   5: 66886.913 ops/s
[info] Iteration   1: 67434.674 ops/s
[info]                  ·gc.alloc.rate:                   2700.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              63034.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62343.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 68863.386 ops/s
[info]                  ·gc.alloc.rate:                   2747.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              62788.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61297.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68458.213 ops/s
[info]                  ·gc.alloc.rate:                   2772.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              63740.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61896.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68430.684 ops/s
[info]                  ·gc.alloc.rate:               2772.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          63757.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62104.074 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 67726.218 ops/s
[info]                  ·gc.alloc.rate:               2744.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          63792.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2706.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62903.414 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   68182.635 ±(99.9%) 2252.426 ops/s [Average]
[info]   (min, avg, max) = (67434.674, 68182.635, 68863.386), stdev = 584.948
[info]   CI (99.9%): [65930.209, 70435.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2747.636 ±(99.9%) 112.525 MB/sec [Average]
[info]   (min, avg, max) = (2700.922, 2747.636, 2772.637), stdev = 29.222
[info]   CI (99.9%): [2635.112, 2860.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63422.994 ±(99.9%) 1828.866 B/op [Average]
[info]   (min, avg, max) = (62788.913, 63422.994, 63792.504), stdev = 474.951
[info]   CI (99.9%): [61594.127, 65251.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2690.581 ±(99.9%) 54.427 MB/sec [Average]
[info]   (min, avg, max) = (2671.277, 2690.581, 2706.708), stdev = 14.135
[info]   CI (99.9%): [2636.154, 2745.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62108.974 ±(99.9%) 2269.357 B/op [Average]
[info]   (min, avg, max) = (61297.618, 62108.974, 62903.414), stdev = 589.345
[info]   CI (99.9%): [59839.617, 64378.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.385 ±(99.9%) 1.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 0.972), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.18% complete, ETA 01:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67414.267 ops/s
[info] # Warmup Iteration   2: 168468.391 ops/s
[info] # Warmup Iteration   3: 178969.546 ops/s
[info] # Warmup Iteration   4: 177590.824 ops/s
[info] # Warmup Iteration   5: 179882.117 ops/s
[info] Iteration   1: 180826.212 ops/s
[info]                  ·gc.alloc.rate:               1190.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          10358.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5832.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 176291.822 ops/s
[info]                  ·gc.alloc.rate:                   1183.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              10568.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11971.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 176150.464 ops/s
[info]                  ·gc.alloc.rate:               1169.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          10451.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11989.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 179632.153 ops/s
[info]                  ·gc.alloc.rate:                   1192.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              10449.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11763.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 181633.384 ops/s
[info]                  ·gc.alloc.rate:                   1203.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              10429.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5818.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   178906.807 ±(99.9%) 9832.353 ops/s [Average]
[info]   (min, avg, max) = (176150.464, 178906.807, 181633.384), stdev = 2553.431
[info]   CI (99.9%): [169074.454, 188739.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1187.989 ±(99.9%) 47.854 MB/sec [Average]
[info]   (min, avg, max) = (1169.773, 1187.989, 1203.556), stdev = 12.428
[info]   CI (99.9%): [1140.134, 1235.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10451.405 ±(99.9%) 291.544 B/op [Average]
[info]   (min, avg, max) = (10358.132, 10451.405, 10568.592), stdev = 75.713
[info]   CI (99.9%): [10159.861, 10742.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.436 ±(99.9%) 1415.384 MB/sec [Average]
[info]   (min, avg, max) = (670.135, 1073.436, 1342.634), stdev = 367.571
[info]   CI (99.9%): [≈ 0, 2488.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9475.144 ±(99.9%) 12833.694 B/op [Average]
[info]   (min, avg, max) = (5818.143, 9475.144, 11989.558), stdev = 3332.870
[info]   CI (99.9%): [≈ 0, 22308.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.060), stdev = 1.326
[info]   CI (99.9%): [≈ 0, 5.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.266 ±(99.9%) 44.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.266, 26.811), stdev = 11.618
[info]   CI (99.9%): [≈ 0, 51.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 7.000), stdev = 2.510
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.41% complete, ETA 01:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280558.925 ops/s
[info] # Warmup Iteration   2: 634275.015 ops/s
[info] # Warmup Iteration   3: 716278.925 ops/s
[info] # Warmup Iteration   4: 708230.054 ops/s
[info] # Warmup Iteration   5: 716270.931 ops/s
[info] Iteration   1: 719931.391 ops/s
[info]                  ·gc.alloc.rate:               753.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          1646.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1457.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 720167.170 ops/s
[info]                  ·gc.alloc.rate:               751.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          1641.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1458.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 715226.219 ops/s
[info]                  ·gc.alloc.rate:               751.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          1653.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1468.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 720374.981 ops/s
[info]                  ·gc.alloc.rate:               745.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1460.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 723821.588 ops/s
[info]                  ·gc.alloc.rate:               747.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          1624.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1453.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   719904.270 ±(99.9%) 11793.435 ops/s [Average]
[info]   (min, avg, max) = (715226.219, 719904.270, 723821.588), stdev = 3062.718
[info]   CI (99.9%): [708110.834, 731697.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   749.753 ±(99.9%) 12.129 MB/sec [Average]
[info]   (min, avg, max) = (745.735, 749.753, 753.158), stdev = 3.150
[info]   CI (99.9%): [737.623, 761.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1639.173 ±(99.9%) 46.171 B/op [Average]
[info]   (min, avg, max) = (1624.618, 1639.173, 1653.435), stdev = 11.990
[info]   CI (99.9%): [1593.002, 1685.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.737 ±(99.9%) 2.811 MB/sec [Average]
[info]   (min, avg, max) = (666.782, 667.737, 668.477), stdev = 0.730
[info]   CI (99.9%): [664.926, 670.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1459.849 ±(99.9%) 21.511 B/op [Average]
[info]   (min, avg, max) = (1453.551, 1459.849, 1468.740), stdev = 5.586
[info]   CI (99.9%): [1438.337, 1481.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.64% complete, ETA 01:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422283.895 ops/s
[info] # Warmup Iteration   2: 613308.298 ops/s
[info] # Warmup Iteration   3: 707537.167 ops/s
[info] # Warmup Iteration   4: 694839.287 ops/s
[info] # Warmup Iteration   5: 697042.098 ops/s
[info] Iteration   1: 709629.321 ops/s
[info]                  ·gc.alloc.rate:               564.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1487.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 710543.845 ops/s
[info]                  ·gc.alloc.rate:      545.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702071.342 ops/s
[info]                  ·gc.alloc.rate:               554.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1503.751 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 706630.429 ops/s
[info]                  ·gc.alloc.rate:                   565.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              1259.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1495.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 711507.268 ops/s
[info]                  ·gc.alloc.rate:               566.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1485.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   708076.441 ±(99.9%) 14716.094 ops/s [Average]
[info]   (min, avg, max) = (702071.342, 708076.441, 711507.268), stdev = 3821.723
[info]   CI (99.9%): [693360.347, 722792.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   559.445 ±(99.9%) 35.202 MB/sec [Average]
[info]   (min, avg, max) = (545.372, 559.445, 566.346), stdev = 9.142
[info]   CI (99.9%): [524.242, 594.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1243.522 ±(99.9%) 79.485 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1243.522, 1259.924), stdev = 20.642
[info]   CI (99.9%): [1164.037, 1323.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.912 ±(99.9%) 1155.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.912, 671.475), stdev = 300.143
[info]   CI (99.9%): [≈ 0, 1692.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1194.491 ±(99.9%) 2571.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1194.491, 1503.751), stdev = 667.780
[info]   CI (99.9%): [≈ 0, 3765.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.87% complete, ETA 01:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491047.493 ops/s
[info] # Warmup Iteration   2: 723706.658 ops/s
[info] # Warmup Iteration   3: 775825.357 ops/s
[info] # Warmup Iteration   4: 773240.096 ops/s
[info] # Warmup Iteration   5: 776922.420 ops/s
[info] Iteration   1: 777571.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 777340.359 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 778577.581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775039.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 774471.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   776600.161 ±(99.9%) 6770.921 ops/s [Average]
[info]   (min, avg, max) = (774471.436, 776600.161, 778577.581), stdev = 1758.387
[info]   CI (99.9%): [769829.240, 783371.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.10% complete, ETA 01:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105123.902 ops/s
[info] # Warmup Iteration   2: 339019.860 ops/s
[info] # Warmup Iteration   3: 349937.865 ops/s
[info] # Warmup Iteration   4: 351563.226 ops/s
[info] # Warmup Iteration   5: 339107.745 ops/s
[info] Iteration   1: 341686.461 ops/s
[info]                  ·gc.alloc.rate:                   984.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              4533.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6146.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 349346.410 ops/s
[info]                  ·gc.alloc.rate:               975.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          4394.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3008.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 342345.453 ops/s
[info]                  ·gc.alloc.rate:                   971.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              4462.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6143.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 347288.543 ops/s
[info]                  ·gc.alloc.rate:               978.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          4434.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3029.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 352344.674 ops/s
[info]                  ·gc.alloc.rate:                   980.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              4381.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2988.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   346602.308 ±(99.9%) 17568.197 ops/s [Average]
[info]   (min, avg, max) = (341686.461, 346602.308, 352344.674), stdev = 4562.405
[info]   CI (99.9%): [329034.111, 364170.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   978.124 ±(99.9%) 19.546 MB/sec [Average]
[info]   (min, avg, max) = (971.070, 978.124, 984.331), stdev = 5.076
[info]   CI (99.9%): [958.578, 997.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4441.278 ±(99.9%) 233.653 B/op [Average]
[info]   (min, avg, max) = (4381.638, 4441.278, 4533.634), stdev = 60.679
[info]   CI (99.9%): [4207.625, 4674.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   935.394 ±(99.9%) 1407.019 MB/sec [Average]
[info]   (min, avg, max) = (667.868, 935.394, 1336.878), stdev = 365.398
[info]   CI (99.9%): [≈ 0, 2342.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4263.240 ±(99.9%) 6613.765 B/op [Average]
[info]   (min, avg, max) = (2988.723, 4263.240, 6146.235), stdev = 1717.574
[info]   CI (99.9%): [≈ 0, 10877.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.287), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1907.293 ops/s
[info] # Warmup Iteration   2: 10032.115 ops/s
[info] # Warmup Iteration   3: 10959.872 ops/s
[info] # Warmup Iteration   4: 11063.514 ops/s
[info] # Warmup Iteration   5: 11061.389 ops/s
[info] Iteration   1: 11068.525 ops/s
[info]                  ·gc.alloc.rate:               1397.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          198738.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190942.933 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10920.419 ops/s
[info]                  ·gc.alloc.rate:               1407.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          202811.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193578.092 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 10654.371 ops/s
[info]                  ·gc.alloc.rate:                   1353.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              199925.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198526.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10729.551 ops/s
[info]                  ·gc.alloc.rate:                   1360.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              199499.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196876.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10735.189 ops/s
[info]                  ·gc.alloc.rate:               1361.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          199623.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196376.079 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10821.611 ±(99.9%) 651.894 ops/s [Average]
[info]   (min, avg, max) = (10654.371, 10821.611, 11068.525), stdev = 169.295
[info]   CI (99.9%): [10169.717, 11473.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1376.068 ±(99.9%) 94.689 MB/sec [Average]
[info]   (min, avg, max) = (1353.427, 1376.068, 1407.326), stdev = 24.590
[info]   CI (99.9%): [1281.379, 1470.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   200119.591 ±(99.9%) 6034.127 B/op [Average]
[info]   (min, avg, max) = (198738.958, 200119.591, 202811.636), stdev = 1567.044
[info]   CI (99.9%): [194085.464, 206153.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.388 ±(99.9%) 6.599 MB/sec [Average]
[info]   (min, avg, max) = (1339.516, 1342.388, 1343.962), stdev = 1.714
[info]   CI (99.9%): [1335.789, 1348.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   195260.128 ±(99.9%) 11551.528 B/op [Average]
[info]   (min, avg, max) = (190942.933, 195260.128, 198526.847), stdev = 2999.895
[info]   CI (99.9%): [183708.600, 206811.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 5.383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.227), stdev = 1.398
[info]   CI (99.9%): [≈ 0, 6.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   116.090 ±(99.9%) 795.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.090, 476.637), stdev = 206.504
[info]   CI (99.9%): [≈ 0, 911.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.56% complete, ETA 01:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1604.242 ops/s
[info] # Warmup Iteration   2: 9713.502 ops/s
[info] # Warmup Iteration   3: 10569.871 ops/s
[info] # Warmup Iteration   4: 10929.808 ops/s
[info] # Warmup Iteration   5: 10946.618 ops/s
[info] Iteration   1: 10937.944 ops/s
[info]                  ·gc.alloc.rate:               1275.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          183587.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192270.883 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 10862.069 ops/s
[info]                  ·gc.alloc.rate:                   1272.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              184301.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193694.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10788.170 ops/s
[info]                  ·gc.alloc.rate:                   1248.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              182183.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97617.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10927.158 ops/s
[info]                  ·gc.alloc.rate:                   1290.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              185910.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192800.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10766.954 ops/s
[info]                  ·gc.alloc.rate:                   1260.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              184267.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195421.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10856.459 ±(99.9%) 300.401 ops/s [Average]
[info]   (min, avg, max) = (10766.954, 10856.459, 10937.944), stdev = 78.013
[info]   CI (99.9%): [10556.058, 11156.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1269.657 ±(99.9%) 61.095 MB/sec [Average]
[info]   (min, avg, max) = (1248.852, 1269.657, 1290.821), stdev = 15.866
[info]   CI (99.9%): [1208.563, 1330.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   184050.101 ±(99.9%) 5190.906 B/op [Average]
[info]   (min, avg, max) = (182183.462, 184050.101, 185910.242), stdev = 1348.062
[info]   CI (99.9%): [178859.196, 189241.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.584 ±(99.9%) 1150.390 MB/sec [Average]
[info]   (min, avg, max) = (669.161, 1203.584, 1338.660), stdev = 298.753
[info]   CI (99.9%): [53.193, 2353.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   174360.936 ±(99.9%) 165259.853 B/op [Average]
[info]   (min, avg, max) = (97617.664, 174360.936, 195421.305), stdev = 42917.459
[info]   CI (99.9%): [9101.082, 339620.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.896 ±(99.9%) 6.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.896, 3.687), stdev = 1.594
[info]   CI (99.9%): [≈ 0, 7.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   129.457 ±(99.9%) 884.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 129.457, 531.009), stdev = 229.597
[info]   CI (99.9%): [≈ 0, 1013.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.79% complete, ETA 01:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143005.368 ops/s
[info] # Warmup Iteration   2: 260806.848 ops/s
[info] # Warmup Iteration   3: 269220.307 ops/s
[info] # Warmup Iteration   4: 277985.065 ops/s
[info] # Warmup Iteration   5: 272950.399 ops/s
[info] Iteration   1: 276788.231 ops/s
[info]                  ·gc.alloc.rate:                   1853.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              10541.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11483.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 279367.397 ops/s
[info]                  ·gc.alloc.rate:                   1856.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              10460.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7580.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 277308.687 ops/s
[info]                  ·gc.alloc.rate:                   1869.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              10611.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11436.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 276495.846 ops/s
[info]                  ·gc.alloc.rate:                   1877.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              10684.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11467.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 279524.053 ops/s
[info]                  ·gc.alloc.rate:               1872.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          10540.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7565.516 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   277896.843 ±(99.9%) 5562.842 ops/s [Average]
[info]   (min, avg, max) = (276495.846, 277896.843, 279524.053), stdev = 1444.652
[info]   CI (99.9%): [272334.001, 283459.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1865.982 ±(99.9%) 38.735 MB/sec [Average]
[info]   (min, avg, max) = (1853.994, 1865.982, 1877.227), stdev = 10.059
[info]   CI (99.9%): [1827.247, 1904.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10567.739 ±(99.9%) 325.574 B/op [Average]
[info]   (min, avg, max) = (10460.003, 10567.739, 10684.722), stdev = 84.551
[info]   CI (99.9%): [10242.165, 10893.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.757 ±(99.9%) 1416.886 MB/sec [Average]
[info]   (min, avg, max) = (1343.682, 1747.757, 2019.670), stdev = 367.961
[info]   CI (99.9%): [330.871, 3164.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9906.641 ±(99.9%) 8203.414 B/op [Average]
[info]   (min, avg, max) = (7565.516, 9906.641, 11483.980), stdev = 2130.401
[info]   CI (99.9%): [1703.226, 18110.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 2.477), stdev = 1.049
[info]   CI (99.9%): [≈ 0, 4.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.570 ±(99.9%) 22.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.570, 14.085), stdev = 5.964
[info]   CI (99.9%): [≈ 0, 26.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.03% complete, ETA 01:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972.422 ops/s
[info] # Warmup Iteration   2: 7248.398 ops/s
[info] # Warmup Iteration   3: 8041.417 ops/s
[info] # Warmup Iteration   4: 8177.825 ops/s
[info] # Warmup Iteration   5: 8482.857 ops/s
[info] Iteration   1: 8467.008 ops/s
[info]                  ·gc.alloc.rate:                   1512.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              281191.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247379.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8157.763 ops/s
[info]                  ·gc.alloc.rate:                   1464.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              282590.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256906.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8267.731 ops/s
[info]                  ·gc.alloc.rate:                   1494.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              284504.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253712.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8220.513 ops/s
[info]                  ·gc.alloc.rate:               1487.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          284759.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 255576.053 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8205.473 ops/s
[info]                  ·gc.alloc.rate:                   1498.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              287334.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384848.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8263.698 ±(99.9%) 462.994 ops/s [Average]
[info]   (min, avg, max) = (8157.763, 8263.698, 8467.008), stdev = 120.238
[info]   CI (99.9%): [7800.704, 8726.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1491.534 ±(99.9%) 67.747 MB/sec [Average]
[info]   (min, avg, max) = (1464.747, 1491.534, 1512.777), stdev = 17.594
[info]   CI (99.9%): [1423.786, 1559.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284076.117 ±(99.9%) 8988.799 B/op [Average]
[info]   (min, avg, max) = (281191.388, 284076.117, 287334.508), stdev = 2334.362
[info]   CI (99.9%): [275087.318, 293064.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.367 ±(99.9%) 1160.480 MB/sec [Average]
[info]   (min, avg, max) = (1330.871, 1467.367, 2006.472), stdev = 301.373
[info]   CI (99.9%): [306.887, 2627.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   279684.566 ±(99.9%) 226809.591 B/op [Average]
[info]   (min, avg, max) = (247379.248, 279684.566, 384848.343), stdev = 58901.731
[info]   CI (99.9%): [52874.975, 506494.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.250), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.517 ±(99.9%) 75.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.517, 47.906), stdev = 19.495
[info]   CI (99.9%): [≈ 0, 88.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.26% complete, ETA 01:17:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5575.748 ops/s
[info] # Warmup Iteration   2: 25188.399 ops/s
[info] # Warmup Iteration   3: 25759.699 ops/s
[info] # Warmup Iteration   4: 25854.579 ops/s
[info] # Warmup Iteration   5: 24960.124 ops/s
[info] Iteration   1: 24728.873 ops/s
[info]                  ·gc.alloc.rate:                   1301.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              82820.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85342.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 25008.904 ops/s
[info]                  ·gc.alloc.rate:                   1311.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              82552.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84426.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25468.650 ops/s
[info]                  ·gc.alloc.rate:               1340.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          82804.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82987.054 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 25927.243 ops/s
[info]                  ·gc.alloc.rate:                   1352.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              82110.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81524.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25667.391 ops/s
[info]                  ·gc.alloc.rate:                   1350.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              82835.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82183.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25360.212 ±(99.9%) 1876.224 ops/s [Average]
[info]   (min, avg, max) = (24728.873, 25360.212, 25927.243), stdev = 487.249
[info]   CI (99.9%): [23483.988, 27236.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1331.378 ±(99.9%) 90.220 MB/sec [Average]
[info]   (min, avg, max) = (1301.385, 1331.378, 1352.693), stdev = 23.430
[info]   CI (99.9%): [1241.158, 1421.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82624.768 ±(99.9%) 1193.681 B/op [Average]
[info]   (min, avg, max) = (82110.742, 82624.768, 82835.567), stdev = 309.995
[info]   CI (99.9%): [81431.087, 83818.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.791 ±(99.9%) 4.688 MB/sec [Average]
[info]   (min, avg, max) = (1340.306, 1341.791, 1343.035), stdev = 1.217
[info]   CI (99.9%): [1337.103, 1346.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   83292.781 ±(99.9%) 6069.351 B/op [Average]
[info]   (min, avg, max) = (81524.459, 83292.781, 85342.801), stdev = 1576.191
[info]   CI (99.9%): [77223.430, 89362.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.706), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.281 ±(99.9%) 384.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.281, 224.940), stdev = 99.883
[info]   CI (99.9%): [≈ 0, 430.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.49% complete, ETA 01:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12497.505 ops/s
[info] # Warmup Iteration   2: 31976.295 ops/s
[info] # Warmup Iteration   3: 33493.931 ops/s
[info] # Warmup Iteration   4: 33398.274 ops/s
[info] # Warmup Iteration   5: 33686.944 ops/s
[info] Iteration   1: 33120.521 ops/s
[info]                  ·gc.alloc.rate:               1369.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          65096.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63654.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 33522.899 ops/s
[info]                  ·gc.alloc.rate:                   1406.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              66040.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62924.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 32772.379 ops/s
[info]                  ·gc.alloc.rate:                   1365.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              65568.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64396.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33320.308 ops/s
[info]                  ·gc.alloc.rate:                   1388.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              65568.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63276.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33174.325 ops/s
[info]                  ·gc.alloc.rate:               1376.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          65279.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63426.523 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   33182.086 ±(99.9%) 1066.720 ops/s [Average]
[info]   (min, avg, max) = (32772.379, 33182.086, 33522.899), stdev = 277.024
[info]   CI (99.9%): [32115.366, 34248.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1381.325 ±(99.9%) 63.657 MB/sec [Average]
[info]   (min, avg, max) = (1365.374, 1381.325, 1406.634), stdev = 16.531
[info]   CI (99.9%): [1317.668, 1444.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65510.522 ±(99.9%) 1378.087 B/op [Average]
[info]   (min, avg, max) = (65096.620, 65510.522, 66040.396), stdev = 357.885
[info]   CI (99.9%): [64132.435, 66888.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.585 ±(99.9%) 5.029 MB/sec [Average]
[info]   (min, avg, max) = (1337.478, 1339.585, 1340.969), stdev = 1.306
[info]   CI (99.9%): [1334.556, 1344.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63535.692 ±(99.9%) 2115.655 B/op [Average]
[info]   (min, avg, max) = (62924.568, 63535.692, 64396.348), stdev = 549.429
[info]   CI (99.9%): [61420.037, 65651.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 5.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.150), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 6.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.120 ±(99.9%) 251.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.120, 151.276), stdev = 65.365
[info]   CI (99.9%): [≈ 0, 289.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.72% complete, ETA 01:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301998.214 ops/s
[info] # Warmup Iteration   2: 619454.412 ops/s
[info] # Warmup Iteration   3: 634586.604 ops/s
[info] # Warmup Iteration   4: 638072.526 ops/s
[info] # Warmup Iteration   5: 637746.006 ops/s
[info] Iteration   1: 640546.469 ops/s
[info]                  ·gc.alloc.rate:               1190.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          2922.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3294.045 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 636965.103 ops/s
[info]                  ·gc.alloc.rate:               1164.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          2877.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1660.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 626472.901 ops/s
[info]                  ·gc.alloc.rate:                   1180.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              2965.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3378.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 621719.846 ops/s
[info]                  ·gc.alloc.rate:                   1166.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              2953.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3405.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 634151.098 ops/s
[info]                  ·gc.alloc.rate:                   1164.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              2891.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   631971.084 ±(99.9%) 29736.584 ops/s [Average]
[info]   (min, avg, max) = (621719.846, 631971.084, 640546.469), stdev = 7722.496
[info]   CI (99.9%): [602234.500, 661707.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1173.396 ±(99.9%) 44.530 MB/sec [Average]
[info]   (min, avg, max) = (1164.484, 1173.396, 1190.314), stdev = 11.564
[info]   CI (99.9%): [1128.867, 1217.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2921.969 ±(99.9%) 146.704 B/op [Average]
[info]   (min, avg, max) = (2877.327, 2921.969, 2965.607), stdev = 38.099
[info]   CI (99.9%): [2775.264, 3068.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.345 ±(99.9%) 1416.193 MB/sec [Average]
[info]   (min, avg, max) = (672.130, 1075.345, 1345.277), stdev = 367.781
[info]   CI (99.9%): [≈ 0, 2491.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2681.642 ±(99.9%) 3576.094 B/op [Average]
[info]   (min, avg, max) = (1660.770, 2681.642, 3405.552), stdev = 928.700
[info]   CI (99.9%): [≈ 0, 6257.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.667 ±(99.9%) 4.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 2.812), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.682 ±(99.9%) 11.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.682, 7.120), stdev = 3.085
[info]   CI (99.9%): [≈ 0, 13.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.95% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471493.166 ops/s
[info] # Warmup Iteration   2: 760341.557 ops/s
[info] # Warmup Iteration   3: 772402.287 ops/s
[info] # Warmup Iteration   4: 778989.835 ops/s
[info] # Warmup Iteration   5: 779346.941 ops/s
[info] Iteration   1: 776580.051 ops/s
[info]                  ·gc.alloc.rate:      0.302 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.612 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 778959.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 779162.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 778901.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779457.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   778612.350 ±(99.9%) 4453.902 ops/s [Average]
[info]   (min, avg, max) = (776580.051, 778612.350, 779457.155), stdev = 1156.664
[info]   CI (99.9%): [774158.447, 783066.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.061 ±(99.9%) 0.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.302), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.123 ±(99.9%) 1.052 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.123, 0.612), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.18% complete, ETA 01:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9274.194 ops/s
[info] # Warmup Iteration   2: 25912.498 ops/s
[info] # Warmup Iteration   3: 27453.502 ops/s
[info] # Warmup Iteration   4: 27439.350 ops/s
[info] # Warmup Iteration   5: 27736.968 ops/s
[info] Iteration   1: 28009.950 ops/s
[info]                  ·gc.alloc.rate:                   1278.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              71847.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75307.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28135.976 ops/s
[info]                  ·gc.alloc.rate:               1277.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          71431.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75007.409 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 28801.129 ops/s
[info]                  ·gc.alloc.rate:                   1300.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              71074.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73309.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 28663.617 ops/s
[info]                  ·gc.alloc.rate:                   1293.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              70994.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73699.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27465.740 ops/s
[info]                  ·gc.alloc.rate:                   1237.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              70903.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38361.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   28215.283 ±(99.9%) 2068.699 ops/s [Average]
[info]   (min, avg, max) = (27465.740, 28215.283, 28801.129), stdev = 537.235
[info]   CI (99.9%): [26146.583, 30283.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1277.417 ±(99.9%) 94.099 MB/sec [Average]
[info]   (min, avg, max) = (1237.493, 1277.417, 1300.852), stdev = 24.437
[info]   CI (99.9%): [1183.318, 1371.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71250.371 ±(99.9%) 1498.169 B/op [Average]
[info]   (min, avg, max) = (70903.689, 71250.371, 71847.229), stdev = 389.070
[info]   CI (99.9%): [69752.203, 72748.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.957 ±(99.9%) 1156.871 MB/sec [Average]
[info]   (min, avg, max) = (669.523, 1206.957, 1342.287), stdev = 300.436
[info]   CI (99.9%): [50.086, 2363.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67136.941 ±(99.9%) 62027.392 B/op [Average]
[info]   (min, avg, max) = (38361.140, 67136.941, 75307.332), stdev = 16108.317
[info]   CI (99.9%): [5109.549, 129164.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.893), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44.149 ±(99.9%) 365.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.149, 213.737), stdev = 94.819
[info]   CI (99.9%): [≈ 0, 409.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.41% complete, ETA 01:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3809.663 ops/s
[info] # Warmup Iteration   2: 28055.883 ops/s
[info] # Warmup Iteration   3: 33405.364 ops/s
[info] # Warmup Iteration   4: 33216.914 ops/s
[info] # Warmup Iteration   5: 32651.362 ops/s
[info] Iteration   1: 33539.880 ops/s
[info]                  ·gc.alloc.rate:                   1769.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              83045.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94526.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 33667.617 ops/s
[info]                  ·gc.alloc.rate:                   1799.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              84092.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94198.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 33885.009 ops/s
[info]                  ·gc.alloc.rate:                   1783.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              82826.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62250.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33810.695 ops/s
[info]                  ·gc.alloc.rate:                   1817.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              84615.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93396.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33909.877 ops/s
[info]                  ·gc.alloc.rate:               1783.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          82792.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62081.042 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   33762.615 ±(99.9%) 601.532 ops/s [Average]
[info]   (min, avg, max) = (33539.880, 33762.615, 33909.877), stdev = 156.216
[info]   CI (99.9%): [33161.084, 34364.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1790.776 ±(99.9%) 70.531 MB/sec [Average]
[info]   (min, avg, max) = (1769.711, 1790.776, 1817.769), stdev = 18.317
[info]   CI (99.9%): [1720.245, 1861.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83474.479 ±(99.9%) 3195.687 B/op [Average]
[info]   (min, avg, max) = (82792.107, 83474.479, 84615.907), stdev = 829.910
[info]   CI (99.9%): [80278.791, 86670.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.817 ±(99.9%) 1419.474 MB/sec [Average]
[info]   (min, avg, max) = (1337.570, 1742.817, 2015.256), stdev = 368.633
[info]   CI (99.9%): [323.343, 3162.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81290.708 ±(99.9%) 67245.694 B/op [Average]
[info]   (min, avg, max) = (62081.042, 81290.708, 94526.571), stdev = 17463.493
[info]   CI (99.9%): [14045.014, 148536.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.831), stdev = 1.699
[info]   CI (99.9%): [≈ 0, 7.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36.974 ±(99.9%) 305.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.974, 179.055), stdev = 79.439
[info]   CI (99.9%): [≈ 0, 342.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.64% complete, ETA 01:15:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3888.488 ops/s
[info] # Warmup Iteration   2: 32303.541 ops/s
[info] # Warmup Iteration   3: 34706.114 ops/s
[info] # Warmup Iteration   4: 34942.736 ops/s
[info] # Warmup Iteration   5: 34943.637 ops/s
[info] Iteration   1: 34835.089 ops/s
[info]                  ·gc.alloc.rate:                   1556.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              70320.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90634.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 34328.098 ops/s
[info]                  ·gc.alloc.rate:               1520.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          69691.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61386.316 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 34360.791 ops/s
[info]                  ·gc.alloc.rate:                   1528.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              70029.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61357.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35071.914 ops/s
[info]                  ·gc.alloc.rate:               1550.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          69547.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59963.039 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34518.797 ops/s
[info]                  ·gc.alloc.rate:                   1550.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              70685.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91202.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   34622.938 ±(99.9%) 1237.436 ops/s [Average]
[info]   (min, avg, max) = (34328.098, 34622.938, 35071.914), stdev = 321.358
[info]   CI (99.9%): [33385.501, 35860.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1541.202 ±(99.9%) 60.719 MB/sec [Average]
[info]   (min, avg, max) = (1520.026, 1541.202, 1556.411), stdev = 15.769
[info]   CI (99.9%): [1480.483, 1601.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   70054.741 ±(99.9%) 1782.724 B/op [Average]
[info]   (min, avg, max) = (69547.482, 70054.741, 70685.069), stdev = 462.968
[info]   CI (99.9%): [68272.017, 71837.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.327 ±(99.9%) 1402.642 MB/sec [Average]
[info]   (min, avg, max) = (1336.404, 1604.327, 2006.029), stdev = 364.262
[info]   CI (99.9%): [201.685, 3006.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72908.884 ±(99.9%) 63350.144 B/op [Average]
[info]   (min, avg, max) = (59963.039, 72908.884, 91202.970), stdev = 16451.831
[info]   CI (99.9%): [9558.740, 136259.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.353), stdev = 1.940
[info]   CI (99.9%): [≈ 0, 8.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.441 ±(99.9%) 342.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.441, 199.376), stdev = 88.851
[info]   CI (99.9%): [≈ 0, 382.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.87% complete, ETA 01:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263392.106 ops/s
[info] # Warmup Iteration   2: 467050.867 ops/s
[info] # Warmup Iteration   3: 478836.956 ops/s
[info] # Warmup Iteration   4: 454792.215 ops/s
[info] # Warmup Iteration   5: 483891.990 ops/s
[info] Iteration   1: 488635.044 ops/s
[info]                  ·gc.alloc.rate:               1303.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          4199.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4329.740 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 485916.902 ops/s
[info]                  ·gc.alloc.rate:                   1318.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              4269.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4358.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 487515.419 ops/s
[info]                  ·gc.alloc.rate:               1309.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          4226.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4343.924 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 482702.652 ops/s
[info]                  ·gc.alloc.rate:                   1308.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              4267.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4391.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 488249.751 ops/s
[info]                  ·gc.alloc.rate:                   1308.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4333.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   486603.954 ±(99.9%) 9304.892 ops/s [Average]
[info]   (min, avg, max) = (482702.652, 486603.954, 488635.044), stdev = 2416.451
[info]   CI (99.9%): [477299.062, 495908.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1309.656 ±(99.9%) 20.094 MB/sec [Average]
[info]   (min, avg, max) = (1303.882, 1309.656, 1318.183), stdev = 5.218
[info]   CI (99.9%): [1289.562, 1329.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4235.995 ±(99.9%) 119.710 B/op [Average]
[info]   (min, avg, max) = (4199.734, 4235.995, 4269.617), stdev = 31.088
[info]   CI (99.9%): [4116.285, 4355.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.333 ±(99.9%) 4.280 MB/sec [Average]
[info]   (min, avg, max) = (1344.245, 1345.333, 1346.949), stdev = 1.111
[info]   CI (99.9%): [1341.053, 1349.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4351.378 ±(99.9%) 96.509 B/op [Average]
[info]   (min, avg, max) = (4329.740, 4351.378, 4391.609), stdev = 25.063
[info]   CI (99.9%): [4254.869, 4447.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.852), stdev = 1.262
[info]   CI (99.9%): [≈ 0, 5.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.940 ±(99.9%) 15.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.940, 9.299), stdev = 4.116
[info]   CI (99.9%): [≈ 0, 17.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.10% complete, ETA 01:15:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1800.352 ops/s
[info] # Warmup Iteration   2: 16901.671 ops/s
[info] # Warmup Iteration   3: 18912.390 ops/s
[info] # Warmup Iteration   4: 19041.932 ops/s
[info] # Warmup Iteration   5: 18982.668 ops/s
[info] Iteration   1: 19102.354 ops/s
[info]                  ·gc.alloc.rate:                   1895.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              156204.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110203.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18642.053 ops/s
[info]                  ·gc.alloc.rate:                   1892.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              159693.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169382.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 19178.427 ops/s
[info]                  ·gc.alloc.rate:                   1949.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              159984.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164103.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 19235.783 ops/s
[info]                  ·gc.alloc.rate:                   1945.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              159186.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163507.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19258.456 ops/s
[info]                  ·gc.alloc.rate:                   1961.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              160296.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163475.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   19083.415 ±(99.9%) 978.022 ops/s [Average]
[info]   (min, avg, max) = (18642.053, 19083.415, 19258.456), stdev = 253.989
[info]   CI (99.9%): [18105.393, 20061.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1928.947 ±(99.9%) 124.999 MB/sec [Average]
[info]   (min, avg, max) = (1892.140, 1928.947, 1961.485), stdev = 32.462
[info]   CI (99.9%): [1803.947, 2053.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159073.146 ±(99.9%) 6371.811 B/op [Average]
[info]   (min, avg, max) = (156204.651, 159073.146, 160296.348), stdev = 1654.739
[info]   CI (99.9%): [152701.335, 165444.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.626 ±(99.9%) 1143.290 MB/sec [Average]
[info]   (min, avg, max) = (1337.532, 1868.626, 2006.939), stdev = 296.909
[info]   CI (99.9%): [725.336, 3011.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   154134.553 ±(99.9%) 95044.855 B/op [Average]
[info]   (min, avg, max) = (110203.109, 154134.553, 169382.758), stdev = 24682.847
[info]   CI (99.9%): [59089.698, 249179.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.947 ±(99.9%) 7.873 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.947, 4.604), stdev = 2.045
[info]   CI (99.9%): [≈ 0, 8.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79.835 ±(99.9%) 664.633 B/op [Average]
[info]   (min, avg, max) = (0.372, 79.835, 388.565), stdev = 172.603
[info]   CI (99.9%): [≈ 0, 744.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.33% complete, ETA 01:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12480.990 ops/s
[info] # Warmup Iteration   2: 53287.176 ops/s
[info] # Warmup Iteration   3: 54018.654 ops/s
[info] # Warmup Iteration   4: 55681.502 ops/s
[info] # Warmup Iteration   5: 55155.323 ops/s
[info] Iteration   1: 55387.850 ops/s
[info]                  ·gc.alloc.rate:                   1705.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              48451.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57164.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 55682.336 ops/s
[info]                  ·gc.alloc.rate:                   1699.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              48036.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37937.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 55762.812 ops/s
[info]                  ·gc.alloc.rate:                   1714.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              48387.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56740.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 54820.346 ops/s
[info]                  ·gc.alloc.rate:               1684.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          48368.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38401.952 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 54403.097 ops/s
[info]                  ·gc.alloc.rate:                   1685.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              48737.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58055.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   55211.288 ±(99.9%) 2247.971 ops/s [Average]
[info]   (min, avg, max) = (54403.097, 55211.288, 55762.812), stdev = 583.791
[info]   CI (99.9%): [52963.317, 57459.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1697.737 ±(99.9%) 49.695 MB/sec [Average]
[info]   (min, avg, max) = (1684.693, 1697.737, 1714.404), stdev = 12.906
[info]   CI (99.9%): [1648.042, 1747.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48396.212 ±(99.9%) 961.561 B/op [Average]
[info]   (min, avg, max) = (48036.529, 48396.212, 48737.112), stdev = 249.714
[info]   CI (99.9%): [47434.650, 49357.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.804 ±(99.9%) 1412.829 MB/sec [Average]
[info]   (min, avg, max) = (1337.549, 1741.804, 2011.706), stdev = 366.907
[info]   CI (99.9%): [328.975, 3154.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49660.111 ±(99.9%) 40435.669 B/op [Average]
[info]   (min, avg, max) = (37937.993, 49660.111, 58055.084), stdev = 10501.015
[info]   CI (99.9%): [9224.442, 90095.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.331), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.948 ±(99.9%) 158.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.948, 94.139), stdev = 41.046
[info]   CI (99.9%): [≈ 0, 179.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.57% complete, ETA 01:14:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26365.965 ops/s
[info] # Warmup Iteration   2: 150362.895 ops/s
[info] # Warmup Iteration   3: 152821.679 ops/s
[info] # Warmup Iteration   4: 154155.723 ops/s
[info] # Warmup Iteration   5: 157683.818 ops/s
[info] Iteration   1: 155560.553 ops/s
[info]                  ·gc.alloc.rate:                   1878.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              18993.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20332.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 158449.798 ops/s
[info]                  ·gc.alloc.rate:                   1923.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              19104.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19962.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 158592.463 ops/s
[info]                  ·gc.alloc.rate:                   1926.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              19111.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19898.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 160727.770 ops/s
[info]                  ·gc.alloc.rate:               1964.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          19224.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19628.021 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 160761.272 ops/s
[info]                  ·gc.alloc.rate:               1938.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          18976.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13092.037 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   158818.371 ±(99.9%) 8218.425 ops/s [Average]
[info]   (min, avg, max) = (155560.553, 158818.371, 160761.272), stdev = 2134.299
[info]   CI (99.9%): [150599.947, 167036.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1926.291 ±(99.9%) 120.399 MB/sec [Average]
[info]   (min, avg, max) = (1878.107, 1926.291, 1964.056), stdev = 31.267
[info]   CI (99.9%): [1805.891, 2046.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19081.965 ±(99.9%) 388.290 B/op [Average]
[info]   (min, avg, max) = (18976.319, 19081.965, 19224.241), stdev = 100.838
[info]   CI (99.9%): [18693.675, 19470.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.946 ±(99.9%) 1154.514 MB/sec [Average]
[info]   (min, avg, max) = (1337.623, 1873.946, 2010.570), stdev = 299.824
[info]   CI (99.9%): [719.431, 3028.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18582.827 ±(99.9%) 11858.926 B/op [Average]
[info]   (min, avg, max) = (13092.037, 18582.827, 20332.760), stdev = 3079.725
[info]   CI (99.9%): [6723.901, 30441.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.773 ±(99.9%) 6.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.800), stdev = 1.693
[info]   CI (99.9%): [≈ 0, 7.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.673 ±(99.9%) 64.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.673, 37.736), stdev = 16.807
[info]   CI (99.9%): [≈ 0, 72.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.80% complete, ETA 01:14:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579104.851 ops/s
[info] # Warmup Iteration   2: 1112645.379 ops/s
[info] # Warmup Iteration   3: 1182959.241 ops/s
[info] # Warmup Iteration   4: 1183024.845 ops/s
[info] # Warmup Iteration   5: 1186320.356 ops/s
[info] Iteration   1: 1190772.344 ops/s
[info]                  ·gc.alloc.rate:                   1291.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              1707.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     888.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1189979.202 ops/s
[info]                  ·gc.alloc.rate:                   1317.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1777.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1190962.981 ops/s
[info]                  ·gc.alloc.rate:                   1318.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1741.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1778.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1179963.582 ops/s
[info]                  ·gc.alloc.rate:                   1317.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              1756.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1794.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1183123.925 ops/s
[info]                  ·gc.alloc.rate:               1309.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          1741.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1786.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1186960.407 ±(99.9%) 19571.988 ops/s [Average]
[info]   (min, avg, max) = (1179963.582, 1186960.407, 1190962.981), stdev = 5082.783
[info]   CI (99.9%): [1167388.419, 1206532.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1310.698 ±(99.9%) 43.786 MB/sec [Average]
[info]   (min, avg, max) = (1291.481, 1310.698, 1318.214), stdev = 11.371
[info]   CI (99.9%): [1266.912, 1354.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1737.814 ±(99.9%) 70.935 B/op [Average]
[info]   (min, avg, max) = (1707.009, 1737.814, 1756.814), stdev = 18.422
[info]   CI (99.9%): [1666.879, 1808.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.236 ±(99.9%) 1158.330 MB/sec [Average]
[info]   (min, avg, max) = (672.127, 1210.236, 1346.211), stdev = 300.815
[info]   CI (99.9%): [51.905, 2368.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1605.154 ±(99.9%) 1543.141 B/op [Average]
[info]   (min, avg, max) = (888.380, 1605.154, 1794.783), stdev = 400.749
[info]   CI (99.9%): [62.014, 3148.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.437), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.939 ±(99.9%) 7.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.939, 4.584), stdev = 2.038
[info]   CI (99.9%): [≈ 0, 8.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.03% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 697673.107 ops/s
[info] # Warmup Iteration   2: 1353064.600 ops/s
[info] # Warmup Iteration   3: 1390441.292 ops/s
[info] # Warmup Iteration   4: 1391006.395 ops/s
[info] # Warmup Iteration   5: 1390390.444 ops/s
[info] Iteration   1: 1390238.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1391148.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1391287.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1391311.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1390765.724 ops/s
[info]                  ·gc.alloc.rate:      0.087 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1390950.247 ±(99.9%) 1747.912 ops/s [Average]
[info]   (min, avg, max) = (1390238.348, 1390950.247, 1391311.593), stdev = 453.927
[info]   CI (99.9%): [1389202.336, 1392698.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.018 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.018, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.26% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25794.626 ops/s
[info] # Warmup Iteration   2: 63061.836 ops/s
[info] # Warmup Iteration   3: 67028.627 ops/s
[info] # Warmup Iteration   4: 69076.339 ops/s
[info] # Warmup Iteration   5: 69499.215 ops/s
[info] Iteration   1: 69590.332 ops/s
[info]                  ·gc.alloc.rate:               1748.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          39546.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30198.856 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 68805.196 ops/s
[info]                  ·gc.alloc.rate:                   1767.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              40421.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45873.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 69268.453 ops/s
[info]                  ·gc.alloc.rate:                   1754.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              39844.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30437.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 67513.445 ops/s
[info]                  ·gc.alloc.rate:               1708.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          39835.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46958.813 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 67687.571 ops/s
[info]                  ·gc.alloc.rate:                   1701.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              39555.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31278.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   68573.000 ±(99.9%) 3591.215 ops/s [Average]
[info]   (min, avg, max) = (67513.445, 68573.000, 69590.332), stdev = 932.627
[info]   CI (99.9%): [64981.784, 72164.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1735.988 ±(99.9%) 112.467 MB/sec [Average]
[info]   (min, avg, max) = (1701.184, 1735.988, 1767.082), stdev = 29.207
[info]   CI (99.9%): [1623.521, 1848.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39840.783 ±(99.9%) 1368.438 B/op [Average]
[info]   (min, avg, max) = (39546.783, 39840.783, 40421.340), stdev = 355.379
[info]   CI (99.9%): [38472.345, 41209.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1608.075 ±(99.9%) 1412.536 MB/sec [Average]
[info]   (min, avg, max) = (1335.234, 1608.075, 2014.338), stdev = 366.831
[info]   CI (99.9%): [195.538, 3020.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36949.490 ±(99.9%) 33345.215 B/op [Average]
[info]   (min, avg, max) = (30198.856, 36949.490, 46958.813), stdev = 8659.646
[info]   CI (99.9%): [3604.276, 70294.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.479 ±(99.9%) 1.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.479, 0.968), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.49% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1981.037 ops/s
[info] # Warmup Iteration   2: 14875.232 ops/s
[info] # Warmup Iteration   3: 17068.641 ops/s
[info] # Warmup Iteration   4: 17276.929 ops/s
[info] # Warmup Iteration   5: 17631.999 ops/s
[info] Iteration   1: 17662.113 ops/s
[info]                  ·gc.alloc.rate:               1542.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          137409.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119578.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17524.910 ops/s
[info]                  ·gc.alloc.rate:                   1554.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              139611.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180874.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 17817.903 ops/s
[info]                  ·gc.alloc.rate:                   1565.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              138305.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118620.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17941.067 ops/s
[info]                  ·gc.alloc.rate:                   1565.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              137259.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117573.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17956.418 ops/s
[info]                  ·gc.alloc.rate:                   1577.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              138212.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117221.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17780.482 ±(99.9%) 713.850 ops/s [Average]
[info]   (min, avg, max) = (17524.910, 17780.482, 17956.418), stdev = 185.385
[info]   CI (99.9%): [17066.632, 18494.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1561.034 ±(99.9%) 51.209 MB/sec [Average]
[info]   (min, avg, max) = (1542.049, 1561.034, 1577.322), stdev = 13.299
[info]   CI (99.9%): [1509.825, 1612.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138159.749 ±(99.9%) 3604.023 B/op [Average]
[info]   (min, avg, max) = (137259.522, 138159.749, 139611.417), stdev = 935.953
[info]   CI (99.9%): [134555.726, 141763.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.528 ±(99.9%) 1159.493 MB/sec [Average]
[info]   (min, avg, max) = (1337.772, 1475.528, 2014.171), stdev = 301.117
[info]   CI (99.9%): [316.035, 2635.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   130773.709 ±(99.9%) 107904.599 B/op [Average]
[info]   (min, avg, max) = (117221.947, 130773.709, 180874.574), stdev = 28022.482
[info]   CI (99.9%): [22869.110, 238678.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.789), stdev = 1.685
[info]   CI (99.9%): [≈ 0, 7.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.408 ±(99.9%) 573.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.408, 334.649), stdev = 148.839
[info]   CI (99.9%): [≈ 0, 641.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.72% complete, ETA 01:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2748.798 ops/s
[info] # Warmup Iteration   2: 16836.224 ops/s
[info] # Warmup Iteration   3: 18040.280 ops/s
[info] # Warmup Iteration   4: 17674.953 ops/s
[info] # Warmup Iteration   5: 18147.797 ops/s
[info] Iteration   1: 18090.977 ops/s
[info]                  ·gc.alloc.rate:                   1447.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              125877.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116395.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17740.366 ops/s
[info]                  ·gc.alloc.rate:               1446.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          128363.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118750.759 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 18110.569 ops/s
[info]                  ·gc.alloc.rate:                   1455.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              126400.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116411.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 17716.483 ops/s
[info]                  ·gc.alloc.rate:                   1412.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              125489.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118888.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18235.108 ops/s
[info]                  ·gc.alloc.rate:               1464.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          126422.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115205.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17978.701 ±(99.9%) 905.723 ops/s [Average]
[info]   (min, avg, max) = (17716.483, 17978.701, 18235.108), stdev = 235.213
[info]   CI (99.9%): [17072.978, 18884.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1445.416 ±(99.9%) 75.500 MB/sec [Average]
[info]   (min, avg, max) = (1412.824, 1445.416, 1464.827), stdev = 19.607
[info]   CI (99.9%): [1369.916, 1520.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   126510.736 ±(99.9%) 4261.246 B/op [Average]
[info]   (min, avg, max) = (125489.672, 126510.736, 128363.957), stdev = 1106.632
[info]   CI (99.9%): [122249.491, 130771.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.085 ±(99.9%) 7.422 MB/sec [Average]
[info]   (min, avg, max) = (1334.852, 1338.085, 1340.045), stdev = 1.927
[info]   CI (99.9%): [1330.663, 1345.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   117130.518 ±(99.9%) 6232.441 B/op [Average]
[info]   (min, avg, max) = (115205.389, 117130.518, 118888.717), stdev = 1618.545
[info]   CI (99.9%): [110898.077, 123362.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.892 ±(99.9%) 6.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.892, 3.646), stdev = 1.574
[info]   CI (99.9%): [≈ 0, 6.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   77.762 ±(99.9%) 526.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.762, 316.764), stdev = 136.748
[info]   CI (99.9%): [≈ 0, 604.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:13:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335831.467 ops/s
[info] # Warmup Iteration   2: 666181.204 ops/s
[info] # Warmup Iteration   3: 660434.682 ops/s
[info] # Warmup Iteration   4: 678774.581 ops/s
[info] # Warmup Iteration   5: 667353.945 ops/s
[info] Iteration   1: 681392.910 ops/s
[info]                  ·gc.alloc.rate:                   1814.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3109.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 664481.116 ops/s
[info]                  ·gc.alloc.rate:                   1796.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              4255.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4782.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 680541.333 ops/s
[info]                  ·gc.alloc.rate:                   1850.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4279.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4660.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 666418.356 ops/s
[info]                  ·gc.alloc.rate:                   1774.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3171.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 682952.561 ops/s
[info]                  ·gc.alloc.rate:                   1858.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4643.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   675157.255 ±(99.9%) 34386.637 ops/s [Average]
[info]   (min, avg, max) = (664481.116, 675157.255, 682952.561), stdev = 8930.100
[info]   CI (99.9%): [640770.618, 709543.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1818.697 ±(99.9%) 136.767 MB/sec [Average]
[info]   (min, avg, max) = (1774.238, 1818.697, 1858.156), stdev = 35.518
[info]   CI (99.9%): [1681.930, 1955.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4238.984 ±(99.9%) 175.904 B/op [Average]
[info]   (min, avg, max) = (4190.148, 4238.984, 4280.299), stdev = 45.682
[info]   CI (99.9%): [4063.080, 4414.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.935 ±(99.9%) 1417.536 MB/sec [Average]
[info]   (min, avg, max) = (1342.978, 1747.935, 2019.240), stdev = 368.130
[info]   CI (99.9%): [330.399, 3165.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4073.580 ±(99.9%) 3286.797 B/op [Average]
[info]   (min, avg, max) = (3109.725, 4073.580, 4782.463), stdev = 853.571
[info]   CI (99.9%): [786.783, 7360.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.904 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.616, 2.894), stdev = 1.274
[info]   CI (99.9%): [≈ 0, 5.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.457 ±(99.9%) 11.620 B/op [Average]
[info]   (min, avg, max) = (0.048, 1.457, 6.854), stdev = 3.018
[info]   CI (99.9%): [≈ 0, 13.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020.240 ops/s
[info] # Warmup Iteration   2: 9464.458 ops/s
[info] # Warmup Iteration   3: 12414.592 ops/s
[info] # Warmup Iteration   4: 12323.357 ops/s
[info] # Warmup Iteration   5: 12440.107 ops/s
[info] Iteration   1: 12534.734 ops/s
[info]                  ·gc.alloc.rate:                   1727.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              216847.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251877.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 12560.919 ops/s
[info]                  ·gc.alloc.rate:                   1721.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              215740.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167723.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 12582.876 ops/s
[info]                  ·gc.alloc.rate:                   1742.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              217868.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250708.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12635.104 ops/s
[info]                  ·gc.alloc.rate:               1746.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          217528.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165940.180 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 12507.863 ops/s
[info]                  ·gc.alloc.rate:               1746.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          219800.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 251498.984 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12564.299 ±(99.9%) 186.954 ops/s [Average]
[info]   (min, avg, max) = (12507.863, 12564.299, 12635.104), stdev = 48.551
[info]   CI (99.9%): [12377.345, 12751.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1737.015 ±(99.9%) 45.230 MB/sec [Average]
[info]   (min, avg, max) = (1721.818, 1737.015, 1746.898), stdev = 11.746
[info]   CI (99.9%): [1691.786, 1782.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217557.198 ±(99.9%) 5755.043 B/op [Average]
[info]   (min, avg, max) = (215740.179, 217557.198, 219800.453), stdev = 1494.566
[info]   CI (99.9%): [211802.154, 223312.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1736.233 ±(99.9%) 1408.479 MB/sec [Average]
[info]   (min, avg, max) = (1332.524, 1736.233, 2006.109), stdev = 365.778
[info]   CI (99.9%): [327.754, 3144.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   217549.737 ±(99.9%) 178304.046 B/op [Average]
[info]   (min, avg, max) = (165940.180, 217549.737, 251877.373), stdev = 46304.994
[info]   CI (99.9%): [39245.691, 395853.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 3.955), stdev = 1.716
[info]   CI (99.9%): [≈ 0, 7.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115.262 ±(99.9%) 827.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.262, 495.576), stdev = 214.998
[info]   CI (99.9%): [≈ 0, 943.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:12:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12190.976 ops/s
[info] # Warmup Iteration   2: 43493.220 ops/s
[info] # Warmup Iteration   3: 42721.868 ops/s
[info] # Warmup Iteration   4: 44819.574 ops/s
[info] # Warmup Iteration   5: 45292.476 ops/s
[info] Iteration   1: 45160.444 ops/s
[info]                  ·gc.alloc.rate:                   1741.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              60690.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46799.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 45391.564 ops/s
[info]                  ·gc.alloc.rate:                   1797.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              62321.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69892.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 45403.804 ops/s
[info]                  ·gc.alloc.rate:                   1802.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              62453.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69664.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44223.395 ops/s
[info]                  ·gc.alloc.rate:                   1715.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              61057.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47652.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44224.176 ops/s
[info]                  ·gc.alloc.rate:               1743.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          62051.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71476.038 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44880.677 ±(99.9%) 2339.047 ops/s [Average]
[info]   (min, avg, max) = (44223.395, 44880.677, 45403.804), stdev = 607.443
[info]   CI (99.9%): [42541.630, 47219.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1760.180 ±(99.9%) 146.224 MB/sec [Average]
[info]   (min, avg, max) = (1715.699, 1760.180, 1802.091), stdev = 37.974
[info]   CI (99.9%): [1613.956, 1906.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61714.932 ±(99.9%) 3049.247 B/op [Average]
[info]   (min, avg, max) = (60690.777, 61714.932, 62453.818), stdev = 791.880
[info]   CI (99.9%): [58665.685, 64764.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1743.395 ±(99.9%) 1414.658 MB/sec [Average]
[info]   (min, avg, max) = (1339.035, 1743.395, 2016.216), stdev = 367.382
[info]   CI (99.9%): [328.737, 3158.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61097.192 ±(99.9%) 48846.497 B/op [Average]
[info]   (min, avg, max) = (46799.407, 61097.192, 71476.038), stdev = 12685.280
[info]   CI (99.9%): [12250.695, 109943.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.477), stdev = 1.522
[info]   CI (99.9%): [≈ 0, 6.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.313 ±(99.9%) 203.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.313, 120.540), stdev = 52.749
[info]   CI (99.9%): [≈ 0, 229.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.64% complete, ETA 01:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13356.616 ops/s
[info] # Warmup Iteration   2: 54324.065 ops/s
[info] # Warmup Iteration   3: 56064.740 ops/s
[info] # Warmup Iteration   4: 56436.958 ops/s
[info] # Warmup Iteration   5: 54244.940 ops/s
[info] Iteration   1: 54451.406 ops/s
[info]                  ·gc.alloc.rate:                   1660.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              48010.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38700.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 54804.781 ops/s
[info]                  ·gc.alloc.rate:                   1709.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              49080.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57724.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 53968.539 ops/s
[info]                  ·gc.alloc.rate:               1645.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          47973.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39008.830 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 56920.288 ops/s
[info]                  ·gc.alloc.rate:                   1746.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              48284.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36947.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 56649.962 ops/s
[info]                  ·gc.alloc.rate:                   1766.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              49072.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55686.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   55358.995 ±(99.9%) 5154.857 ops/s [Average]
[info]   (min, avg, max) = (53968.539, 55358.995, 56920.288), stdev = 1338.700
[info]   CI (99.9%): [50204.138, 60513.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1705.599 ±(99.9%) 201.701 MB/sec [Average]
[info]   (min, avg, max) = (1645.395, 1705.599, 1766.364), stdev = 52.381
[info]   CI (99.9%): [1503.898, 1907.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48484.243 ±(99.9%) 2133.007 B/op [Average]
[info]   (min, avg, max) = (47973.825, 48484.243, 49080.550), stdev = 553.935
[info]   CI (99.9%): [46351.235, 50617.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605.513 ±(99.9%) 1412.264 MB/sec [Average]
[info]   (min, avg, max) = (1336.244, 1605.513, 2010.103), stdev = 366.760
[info]   CI (99.9%): [193.249, 3017.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45613.851 ±(99.9%) 39205.863 B/op [Average]
[info]   (min, avg, max) = (36947.891, 45613.851, 57724.957), stdev = 10181.638
[info]   CI (99.9%): [6407.988, 84819.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 6.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.770), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.125 ±(99.9%) 185.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.125, 108.267), stdev = 48.157
[info]   CI (99.9%): [≈ 0, 207.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:12:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 758744.534 ops/s
[info] # Warmup Iteration   2: 1187295.032 ops/s
[info] # Warmup Iteration   3: 1351436.278 ops/s
[info] # Warmup Iteration   4: 1362677.657 ops/s
[info] # Warmup Iteration   5: 1353008.235 ops/s
[info] Iteration   1: 1356058.872 ops/s
[info]                  ·gc.alloc.rate:                   1266.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              1469.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1560.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1355384.102 ops/s
[info]                  ·gc.alloc.rate:                   1273.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              1478.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1560.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1359101.388 ops/s
[info]                  ·gc.alloc.rate:               1277.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          1478.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1558.293 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1339383.605 ops/s
[info]                  ·gc.alloc.rate:                   1270.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              1493.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1321346.375 ops/s
[info]                  ·gc.alloc.rate:                   1235.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1471.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     799.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1346254.868 ±(99.9%) 61252.530 ops/s [Average]
[info]   (min, avg, max) = (1321346.375, 1346254.868, 1359101.388), stdev = 15907.088
[info]   CI (99.9%): [1285002.338, 1407507.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1264.487 ±(99.9%) 64.984 MB/sec [Average]
[info]   (min, avg, max) = (1235.159, 1264.487, 1277.053), stdev = 16.876
[info]   CI (99.9%): [1199.503, 1329.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1478.227 ±(99.9%) 35.778 B/op [Average]
[info]   (min, avg, max) = (1469.490, 1478.227, 1493.094), stdev = 9.292
[info]   CI (99.9%): [1442.448, 1514.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.320 ±(99.9%) 1160.008 MB/sec [Average]
[info]   (min, avg, max) = (671.428, 1210.320, 1345.992), stdev = 301.251
[info]   CI (99.9%): [50.311, 2370.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1412.096 ±(99.9%) 1318.486 B/op [Average]
[info]   (min, avg, max) = (799.807, 1412.096, 1581.191), stdev = 342.407
[info]   CI (99.9%): [93.610, 2730.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.692 ±(99.9%) 5.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.692, 3.354), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.812 ±(99.9%) 6.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.941), stdev = 1.749
[info]   CI (99.9%): [≈ 0, 7.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.11% complete, ETA 01:11:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 906529.591 ops/s
[info] # Warmup Iteration   2: 1553327.681 ops/s
[info] # Warmup Iteration   3: 1568472.845 ops/s
[info] # Warmup Iteration   4: 1569345.412 ops/s
[info] # Warmup Iteration   5: 1568972.377 ops/s
[info] Iteration   1: 1564738.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1564951.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1563396.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1565334.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1564370.941 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1564558.307 ±(99.9%) 2839.554 ops/s [Average]
[info]   (min, avg, max) = (1563396.155, 1564558.307, 1565334.391), stdev = 737.423
[info]   CI (99.9%): [1561718.753, 1567397.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.34% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1602.986 ops/s
[info] # Warmup Iteration   2: 3661.820 ops/s
[info] # Warmup Iteration   3: 3618.551 ops/s
[info] # Warmup Iteration   4: 3741.457 ops/s
[info] # Warmup Iteration   5: 3742.275 ops/s
[info] Iteration   1: 3765.006 ops/s
[info]                  ·gc.alloc.rate:      508.217 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.164 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3754.072 ops/s
[info]                  ·gc.alloc.rate:               506.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280225.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3755.595 ops/s
[info]                  ·gc.alloc.rate:                   518.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              217081.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280076.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3759.542 ops/s
[info]                  ·gc.alloc.rate:               520.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          217901.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280057.057 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3769.842 ops/s
[info]                  ·gc.alloc.rate:      508.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3760.811 ±(99.9%) 25.352 ops/s [Average]
[info]   (min, avg, max) = (3754.072, 3760.811, 3769.842), stdev = 6.584
[info]   CI (99.9%): [3735.459, 3786.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   512.512 ±(99.9%) 24.333 MB/sec [Average]
[info]   (min, avg, max) = (506.775, 512.512, 520.567), stdev = 6.319
[info]   CI (99.9%): [488.179, 536.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214465.607 ±(99.9%) 10695.996 B/op [Average]
[info]   (min, avg, max) = (212448.115, 214465.607, 217901.905), stdev = 2777.716
[info]   CI (99.9%): [203769.611, 225161.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   401.180 ±(99.9%) 1410.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.180, 669.055), stdev = 366.225
[info]   CI (99.9%): [≈ 0, 1811.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   168071.698 ±(99.9%) 590795.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168071.698, 280225.304), stdev = 153427.781
[info]   CI (99.9%): [≈ 0, 758867.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.744 ±(99.9%) 15.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.744, 8.722), stdev = 3.901
[info]   CI (99.9%): [≈ 0, 16.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.57% complete, ETA 01:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34114.301 ops/s
[info] # Warmup Iteration   2: 112251.274 ops/s
[info] # Warmup Iteration   3: 119837.828 ops/s
[info] # Warmup Iteration   4: 123317.136 ops/s
[info] # Warmup Iteration   5: 124882.007 ops/s
[info] Iteration   1: 125201.091 ops/s
[info]                  ·gc.alloc.rate:                   1990.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              25014.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25347.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 126065.423 ops/s
[info]                  ·gc.alloc.rate:                   2002.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              24995.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25140.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 124718.390 ops/s
[info]                  ·gc.alloc.rate:                   1995.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              25171.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25344.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126381.497 ops/s
[info]                  ·gc.alloc.rate:               2007.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          24997.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25010.930 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 126285.543 ops/s
[info]                  ·gc.alloc.rate:               2019.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          25167.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25062.552 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   125730.389 ±(99.9%) 2822.212 ops/s [Average]
[info]   (min, avg, max) = (124718.390, 125730.389, 126381.497), stdev = 732.919
[info]   CI (99.9%): [122908.177, 128552.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2002.878 ±(99.9%) 44.169 MB/sec [Average]
[info]   (min, avg, max) = (1990.190, 2002.878, 2019.763), stdev = 11.471
[info]   CI (99.9%): [1958.708, 2047.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25069.315 ±(99.9%) 352.929 B/op [Average]
[info]   (min, avg, max) = (24995.341, 25069.315, 25171.258), stdev = 91.654
[info]   CI (99.9%): [24716.386, 25422.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.771 ±(99.9%) 13.268 MB/sec [Average]
[info]   (min, avg, max) = (2008.338, 2011.771, 2016.650), stdev = 3.446
[info]   CI (99.9%): [1998.503, 2025.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25181.181 ±(99.9%) 606.300 B/op [Average]
[info]   (min, avg, max) = (25010.930, 25181.181, 25347.300), stdev = 157.454
[info]   CI (99.9%): [24574.881, 25787.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 4.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 2.727), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 5.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.199 ±(99.9%) 56.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.199, 34.280), stdev = 14.602
[info]   CI (99.9%): [≈ 0, 65.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 38.80% complete, ETA 01:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.792 ops/s
[info] # Warmup Iteration   2: 333777.601 ops/s
[info] # Warmup Iteration   3: 375682.533 ops/s
[info] # Warmup Iteration   4: 381153.848 ops/s
[info] # Warmup Iteration   5: 377323.523 ops/s
[info] Iteration   1: 372406.036 ops/s
[info]                  ·gc.alloc.rate:               775.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          3272.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5608.348 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 373773.765 ops/s
[info]                  ·gc.alloc.rate:               774.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          3259.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2804.984 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 373849.303 ops/s
[info]                  ·gc.alloc.rate:                   768.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              3235.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2807.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 373900.741 ops/s
[info]                  ·gc.alloc.rate:               766.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          3225.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2806.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 374041.667 ops/s
[info]                  ·gc.alloc.rate:                   763.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              3213.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2807.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   373594.302 ±(99.9%) 2585.420 ops/s [Average]
[info]   (min, avg, max) = (372406.036, 373594.302, 374041.667), stdev = 671.425
[info]   CI (99.9%): [371008.883, 376179.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   769.713 ±(99.9%) 18.888 MB/sec [Average]
[info]   (min, avg, max) = (763.782, 769.713, 775.284), stdev = 4.905
[info]   CI (99.9%): [750.825, 788.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3241.175 ±(99.9%) 93.131 B/op [Average]
[info]   (min, avg, max) = (3213.265, 3241.175, 3272.092), stdev = 24.186
[info]   CI (99.9%): [3148.044, 3334.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.270 ±(99.9%) 1139.926 MB/sec [Average]
[info]   (min, avg, max) = (666.204, 799.270, 1328.833), stdev = 296.035
[info]   CI (99.9%): [≈ 0, 1939.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3366.894 ±(99.9%) 4824.902 B/op [Average]
[info]   (min, avg, max) = (2804.984, 3366.894, 5608.348), stdev = 1253.012
[info]   CI (99.9%): [≈ 0, 8191.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.175), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.03% complete, ETA 01:10:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93744.389 ops/s
[info] # Warmup Iteration   2: 249946.228 ops/s
[info] # Warmup Iteration   3: 257750.344 ops/s
[info] # Warmup Iteration   4: 260608.802 ops/s
[info] # Warmup Iteration   5: 253407.381 ops/s
[info] Iteration   1: 254989.723 ops/s
[info]                  ·gc.alloc.rate:               573.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          3540.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4113.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 256371.148 ops/s
[info]                  ·gc.alloc.rate:               581.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          3570.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4091.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 257433.782 ops/s
[info]                  ·gc.alloc.rate:      565.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 255564.132 ops/s
[info]                  ·gc.alloc.rate:                   587.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              3615.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4108.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 256621.240 ops/s
[info]                  ·gc.alloc.rate:               582.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          3575.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4091.579 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   256196.005 ±(99.9%) 3652.012 ops/s [Average]
[info]   (min, avg, max) = (254989.723, 256196.005, 257433.782), stdev = 948.416
[info]   CI (99.9%): [252543.993, 259848.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   578.142 ±(99.9%) 33.327 MB/sec [Average]
[info]   (min, avg, max) = (565.324, 578.142, 587.106), stdev = 8.655
[info]   CI (99.9%): [544.815, 611.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3551.499 ±(99.9%) 229.771 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3551.499, 3615.611), stdev = 59.671
[info]   CI (99.9%): [3321.728, 3781.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.470 ±(99.9%) 1148.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.470, 667.138), stdev = 298.219
[info]   CI (99.9%): [≈ 0, 1681.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3280.958 ±(99.9%) 7062.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3280.958, 4113.377), stdev = 1834.138
[info]   CI (99.9%): [≈ 0, 10343.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.385), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.26% complete, ETA 01:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333984.705 ops/s
[info] # Warmup Iteration   2: 498802.166 ops/s
[info] # Warmup Iteration   3: 508925.793 ops/s
[info] # Warmup Iteration   4: 512411.688 ops/s
[info] # Warmup Iteration   5: 519010.922 ops/s
[info] Iteration   1: 509663.999 ops/s
[info]                  ·gc.alloc.rate:               675.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          2083.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2069.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 519191.161 ops/s
[info]                  ·gc.alloc.rate:      654.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 515441.102 ops/s
[info]                  ·gc.alloc.rate:               668.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          2040.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 518720.198 ops/s
[info]                  ·gc.alloc.rate:                   668.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              2029.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2037.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 519404.356 ops/s
[info]                  ·gc.alloc.rate:               671.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          2033.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2036.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   516484.163 ±(99.9%) 15929.969 ops/s [Average]
[info]   (min, avg, max) = (509663.999, 516484.163, 519404.356), stdev = 4136.962
[info]   CI (99.9%): [500554.194, 532414.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   667.615 ±(99.9%) 29.809 MB/sec [Average]
[info]   (min, avg, max) = (654.594, 667.615, 675.036), stdev = 7.741
[info]   CI (99.9%): [637.805, 697.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2034.260 ±(99.9%) 136.424 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2034.260, 2083.571), stdev = 35.429
[info]   CI (99.9%): [1897.835, 2170.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.143 ±(99.9%) 1156.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.143, 672.081), stdev = 300.272
[info]   CI (99.9%): [≈ 0, 1693.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1638.779 ±(99.9%) 3527.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1638.779, 2069.689), stdev = 916.203
[info]   CI (99.9%): [≈ 0, 5166.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.49% complete, ETA 01:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3707.331 ops/s
[info] # Warmup Iteration   2: 64136.139 ops/s
[info] # Warmup Iteration   3: 69895.192 ops/s
[info] # Warmup Iteration   4: 72602.143 ops/s
[info] # Warmup Iteration   5: 73112.025 ops/s
[info] Iteration   1: 73825.026 ops/s
[info]                  ·gc.alloc.rate:                   3082.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              65708.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56859.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.219 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 73897.646 ops/s
[info]                  ·gc.alloc.rate:                   3111.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              66269.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71101.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 73634.214 ops/s
[info]                  ·gc.alloc.rate:               3102.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          66312.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57258.349 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 73415.162 ops/s
[info]                  ·gc.alloc.rate:               3121.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          66913.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72047.204 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 73539.862 ops/s
[info]                  ·gc.alloc.rate:               3100.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          66351.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57739.399 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   73662.382 ±(99.9%) 767.053 ops/s [Average]
[info]   (min, avg, max) = (73415.162, 73662.382, 73897.646), stdev = 199.201
[info]   CI (99.9%): [72895.329, 74429.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3103.613 ±(99.9%) 55.853 MB/sec [Average]
[info]   (min, avg, max) = (3082.281, 3103.613, 3121.298), stdev = 14.505
[info]   CI (99.9%): [3047.759, 3159.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66311.079 ±(99.9%) 1644.221 B/op [Average]
[info]   (min, avg, max) = (65708.546, 66311.079, 66913.472), stdev = 426.999
[info]   CI (99.9%): [64666.858, 67955.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.653 ±(99.9%) 1410.271 MB/sec [Average]
[info]   (min, avg, max) = (2667.182, 2948.653, 3360.770), stdev = 366.243
[info]   CI (99.9%): [1538.382, 4358.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63001.087 ±(99.9%) 30186.862 B/op [Average]
[info]   (min, avg, max) = (56859.403, 63001.087, 72047.204), stdev = 7839.432
[info]   CI (99.9%): [32814.225, 93187.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.887 ±(99.9%) 4.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 2.219), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.72% complete, ETA 01:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35118.596 ops/s
[info] # Warmup Iteration   2: 131552.547 ops/s
[info] # Warmup Iteration   3: 134124.619 ops/s
[info] # Warmup Iteration   4: 136581.035 ops/s
[info] # Warmup Iteration   5: 136415.477 ops/s
[info] Iteration   1: 137472.981 ops/s
[info]                  ·gc.alloc.rate:               1188.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          13608.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7672.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 136403.011 ops/s
[info]                  ·gc.alloc.rate:                   1196.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              13796.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15471.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 136788.201 ops/s
[info]                  ·gc.alloc.rate:               1219.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          14031.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15439.734 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 136456.427 ops/s
[info]                  ·gc.alloc.rate:                   1192.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              13748.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15485.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.935 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 137276.122 ops/s
[info]                  ·gc.alloc.rate:                   1197.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              13728.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7698.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   136879.348 ±(99.9%) 1850.610 ops/s [Average]
[info]   (min, avg, max) = (136403.011, 136879.348, 137472.981), stdev = 480.598
[info]   CI (99.9%): [135028.738, 138729.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1198.744 ±(99.9%) 46.659 MB/sec [Average]
[info]   (min, avg, max) = (1188.636, 1198.744, 1219.517), stdev = 12.117
[info]   CI (99.9%): [1152.085, 1245.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13782.637 ±(99.9%) 598.406 B/op [Average]
[info]   (min, avg, max) = (13608.146, 13782.637, 14031.440), stdev = 155.404
[info]   CI (99.9%): [13184.231, 14381.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.511 ±(99.9%) 1415.676 MB/sec [Average]
[info]   (min, avg, max) = (670.138, 1073.511, 1342.552), stdev = 367.647
[info]   CI (99.9%): [≈ 0, 2489.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12353.472 ±(99.9%) 16409.362 B/op [Average]
[info]   (min, avg, max) = (7672.098, 12353.472, 15485.089), stdev = 4261.459
[info]   CI (99.9%): [≈ 0, 28762.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.289), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.495 ±(99.9%) 63.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.495, 37.935), stdev = 16.545
[info]   CI (99.9%): [≈ 0, 72.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.95% complete, ETA 01:09:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.693 ops/s
[info] # Warmup Iteration   2: 201574.776 ops/s
[info] # Warmup Iteration   3: 206074.507 ops/s
[info] # Warmup Iteration   4: 209278.933 ops/s
[info] # Warmup Iteration   5: 209200.788 ops/s
[info] Iteration   1: 206408.593 ops/s
[info]                  ·gc.alloc.rate:                   170.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1302.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3901.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 207063.081 ops/s
[info]                  ·gc.alloc.rate:      162.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.486 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 207271.251 ops/s
[info]                  ·gc.alloc.rate:      162.337 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.617 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 205706.409 ops/s
[info]                  ·gc.alloc.rate:                   172.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1319.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3914.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 207245.249 ops/s
[info]                  ·gc.alloc.rate:      162.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   206738.916 ±(99.9%) 2597.415 ops/s [Average]
[info]   (min, avg, max) = (205706.409, 206738.916, 207271.251), stdev = 674.540
[info]   CI (99.9%): [204141.502, 209336.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   165.973 ±(99.9%) 19.830 MB/sec [Average]
[info]   (min, avg, max) = (162.149, 165.973, 172.390), stdev = 5.150
[info]   CI (99.9%): [146.143, 185.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1263.631 ±(99.9%) 166.452 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1263.631, 1319.011), stdev = 43.227
[info]   CI (99.9%): [1097.179, 1430.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.643 ±(99.9%) 1079.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.643, 511.635), stdev = 280.219
[info]   CI (99.9%): [≈ 0, 1283.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1563.057 ±(99.9%) 8241.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1563.057, 3914.252), stdev = 2140.310
[info]   CI (99.9%): [≈ 0, 9804.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.368 ±(99.9%) 3.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.829), stdev = 0.817
[info]   CI (99.9%): [≈ 0, 3.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.802 ±(99.9%) 23.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.802, 13.943), stdev = 6.228
[info]   CI (99.9%): [≈ 0, 26.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.18% complete, ETA 01:09:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204462.812 ops/s
[info] # Warmup Iteration   2: 415157.803 ops/s
[info] # Warmup Iteration   3: 422747.695 ops/s
[info] # Warmup Iteration   4: 424948.933 ops/s
[info] # Warmup Iteration   5: 422599.890 ops/s
[info] Iteration   1: 402299.498 ops/s
[info]                  ·gc.alloc.rate:               412.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          1613.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2001.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 426895.512 ops/s
[info]                  ·gc.alloc.rate:      425.299 MB/sec
[info]                  ·gc.alloc.rate.norm: 1567.361 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 427376.079 ops/s
[info]                  ·gc.alloc.rate:               442.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          1631.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2455.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 428723.806 ops/s
[info]                  ·gc.alloc.rate:      420.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 424842.197 ops/s
[info]                  ·gc.alloc.rate:               432.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          1600.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2470.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   422027.418 ±(99.9%) 42803.762 ops/s [Average]
[info]   (min, avg, max) = (402299.498, 422027.418, 428723.806), stdev = 11116.001
[info]   CI (99.9%): [379223.656, 464831.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   426.713 ±(99.9%) 44.351 MB/sec [Average]
[info]   (min, avg, max) = (412.624, 426.713, 442.957), stdev = 11.518
[info]   CI (99.9%): [382.362, 471.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1591.399 ±(99.9%) 136.087 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1591.399, 1631.286), stdev = 35.341
[info]   CI (99.9%): [1455.312, 1727.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.086 ±(99.9%) 1320.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.086, 666.812), stdev = 342.817
[info]   CI (99.9%): [≈ 0, 1689.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1385.492 ±(99.9%) 4923.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1385.492, 2470.245), stdev = 1278.737
[info]   CI (99.9%): [≈ 0, 6309.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.42% complete, ETA 01:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267924.787 ops/s
[info] # Warmup Iteration   2: 442167.398 ops/s
[info] # Warmup Iteration   3: 471129.221 ops/s
[info] # Warmup Iteration   4: 470499.396 ops/s
[info] # Warmup Iteration   5: 472260.239 ops/s
[info] Iteration   1: 469707.530 ops/s
[info]                  ·gc.alloc.rate:               379.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          1272.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1714.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 468558.463 ops/s
[info]                  ·gc.alloc.rate:               380.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          1276.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1718.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 473652.875 ops/s
[info]                  ·gc.alloc.rate:      370.920 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 471679.403 ops/s
[info]                  ·gc.alloc.rate:               389.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          1298.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2237.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 471955.001 ops/s
[info]                  ·gc.alloc.rate:      369.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   471110.654 ±(99.9%) 7696.887 ops/s [Average]
[info]   (min, avg, max) = (468558.463, 471110.654, 473652.875), stdev = 1998.857
[info]   CI (99.9%): [463413.768, 478807.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   377.917 ±(99.9%) 31.001 MB/sec [Average]
[info]   (min, avg, max) = (369.452, 377.917, 389.336), stdev = 8.051
[info]   CI (99.9%): [346.916, 408.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1262.442 ±(99.9%) 113.773 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1262.442, 1298.935), stdev = 29.547
[info]   CI (99.9%): [1148.668, 1376.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.748 ±(99.9%) 1216.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.748, 670.555), stdev = 315.969
[info]   CI (99.9%): [≈ 0, 1555.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1133.959 ±(99.9%) 4069.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1133.959, 2237.161), stdev = 1056.773
[info]   CI (99.9%): [≈ 0, 5203.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.65% complete, ETA 01:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 319902.101 ops/s
[info] # Warmup Iteration   2: 492137.063 ops/s
[info] # Warmup Iteration   3: 501928.092 ops/s
[info] # Warmup Iteration   4: 501993.388 ops/s
[info] # Warmup Iteration   5: 502115.787 ops/s
[info] Iteration   1: 502207.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 501863.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502079.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 502059.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 501963.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   502034.731 ±(99.9%) 498.389 ops/s [Average]
[info]   (min, avg, max) = (501863.348, 502034.731, 502207.905), stdev = 129.430
[info]   CI (99.9%): [501536.341, 502533.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.88% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5144.264 ops/s
[info] # Warmup Iteration   2: 27589.103 ops/s
[info] # Warmup Iteration   3: 28092.985 ops/s
[info] # Warmup Iteration   4: 28993.166 ops/s
[info] # Warmup Iteration   5: 28553.791 ops/s
[info] Iteration   1: 28932.661 ops/s
[info]                  ·gc.alloc.rate:                   1566.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              85189.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72907.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28970.056 ops/s
[info]                  ·gc.alloc.rate:               1590.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          86423.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72848.438 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 29016.153 ops/s
[info]                  ·gc.alloc.rate:                   1594.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              86496.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109041.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.815 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 29137.964 ops/s
[info]                  ·gc.alloc.rate:                   1600.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              86440.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72212.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29170.614 ops/s
[info]                  ·gc.alloc.rate:                   1589.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              85753.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72056.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   29045.490 ±(99.9%) 401.506 ops/s [Average]
[info]   (min, avg, max) = (28932.661, 29045.490, 29170.614), stdev = 104.270
[info]   CI (99.9%): [28643.983, 29446.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1588.291 ±(99.9%) 50.560 MB/sec [Average]
[info]   (min, avg, max) = (1566.056, 1588.291, 1600.357), stdev = 13.130
[info]   CI (99.9%): [1537.731, 1638.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86060.682 ±(99.9%) 2211.913 B/op [Average]
[info]   (min, avg, max) = (85189.426, 86060.682, 86496.278), stdev = 574.427
[info]   CI (99.9%): [83848.769, 88272.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.836 ±(99.9%) 1157.248 MB/sec [Average]
[info]   (min, avg, max) = (1335.580, 1472.836, 2010.432), stdev = 300.534
[info]   CI (99.9%): [315.588, 2630.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79813.398 ±(99.9%) 62932.385 B/op [Average]
[info]   (min, avg, max) = (72056.582, 79813.398, 109041.498), stdev = 16343.340
[info]   CI (99.9%): [16881.014, 142745.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.163), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 7.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47.187 ±(99.9%) 384.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.187, 225.815), stdev = 99.879
[info]   CI (99.9%): [≈ 0, 431.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.11% complete, ETA 01:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186.344 ops/s
[info] # Warmup Iteration   2: 6997.016 ops/s
[info] # Warmup Iteration   3: 8304.762 ops/s
[info] # Warmup Iteration   4: 8500.931 ops/s
[info] # Warmup Iteration   5: 8539.855 ops/s
[info] Iteration   1: 8488.310 ops/s
[info]                  ·gc.alloc.rate:               1233.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          228649.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 248619.963 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 8533.947 ops/s
[info]                  ·gc.alloc.rate:               1231.643 MB/sec
[info]                  ·gc.alloc.rate.norm:          227054.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 247403.007 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 8518.855 ops/s
[info]                  ·gc.alloc.rate:                   1224.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              226092.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247961.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8414.230 ops/s
[info]                  ·gc.alloc.rate:                   1222.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              228623.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251149.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 657.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8504.642 ops/s
[info]                  ·gc.alloc.rate:                   1218.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              225589.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124261.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.637 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8491.997 ±(99.9%) 179.606 ops/s [Average]
[info]   (min, avg, max) = (8414.230, 8491.997, 8533.947), stdev = 46.643
[info]   CI (99.9%): [8312.391, 8671.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1226.158 ±(99.9%) 23.722 MB/sec [Average]
[info]   (min, avg, max) = (1218.998, 1226.158, 1233.432), stdev = 6.161
[info]   CI (99.9%): [1202.436, 1249.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   227201.968 ±(99.9%) 5435.407 B/op [Average]
[info]   (min, avg, max) = (225589.253, 227201.968, 228649.264), stdev = 1411.558
[info]   CI (99.9%): [221766.561, 232637.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.045 ±(99.9%) 1155.043 MB/sec [Average]
[info]   (min, avg, max) = (671.460, 1208.045, 1342.824), stdev = 299.961
[info]   CI (99.9%): [53.001, 2363.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   223879.115 ±(99.9%) 214506.301 B/op [Average]
[info]   (min, avg, max) = (124261.064, 223879.115, 251149.960), stdev = 55706.605
[info]   CI (99.9%): [9372.814, 438385.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.778 ±(99.9%) 5.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.778, 3.518), stdev = 1.538
[info]   CI (99.9%): [≈ 0, 6.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   145.452 ±(99.9%) 1107.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.452, 657.929), stdev = 287.641
[info]   CI (99.9%): [≈ 0, 1253.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.34% complete, ETA 01:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036.328 ops/s
[info] # Warmup Iteration   2: 7588.164 ops/s
[info] # Warmup Iteration   3: 7995.796 ops/s
[info] # Warmup Iteration   4: 8464.673 ops/s
[info] # Warmup Iteration   5: 8431.921 ops/s
[info] Iteration   1: 8302.777 ops/s
[info]                  ·gc.alloc.rate:                   1122.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              212723.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253274.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8225.889 ops/s
[info]                  ·gc.alloc.rate:               1085.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          207620.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127886.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8334.849 ops/s
[info]                  ·gc.alloc.rate:                   1124.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              212303.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252584.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8419.197 ops/s
[info]                  ·gc.alloc.rate:               1120.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          209341.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125141.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8441.355 ops/s
[info]                  ·gc.alloc.rate:                   1132.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              211217.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249693.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 745.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8344.813 ±(99.9%) 338.235 ops/s [Average]
[info]   (min, avg, max) = (8225.889, 8344.813, 8441.355), stdev = 87.838
[info]   CI (99.9%): [8006.579, 8683.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1116.998 ±(99.9%) 70.909 MB/sec [Average]
[info]   (min, avg, max) = (1085.219, 1116.998, 1132.913), stdev = 18.415
[info]   CI (99.9%): [1046.090, 1187.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   210641.085 ±(99.9%) 8224.332 B/op [Average]
[info]   (min, avg, max) = (207620.237, 210641.085, 212723.002), stdev = 2135.833
[info]   CI (99.9%): [202416.753, 218865.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.280 ±(99.9%) 1410.544 MB/sec [Average]
[info]   (min, avg, max) = (668.453, 1070.280, 1339.290), stdev = 366.314
[info]   CI (99.9%): [≈ 0, 2480.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   201715.930 ±(99.9%) 264422.773 B/op [Average]
[info]   (min, avg, max) = (125141.774, 201715.930, 253274.348), stdev = 68669.754
[info]   CI (99.9%): [≈ 0, 466138.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.811 ±(99.9%) 6.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.811, 3.999), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   151.307 ±(99.9%) 1279.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.307, 745.578), stdev = 332.221
[info]   CI (99.9%): [≈ 0, 1430.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67915.767 ops/s
[info] # Warmup Iteration   2: 161140.340 ops/s
[info] # Warmup Iteration   3: 174220.941 ops/s
[info] # Warmup Iteration   4: 174817.481 ops/s
[info] # Warmup Iteration   5: 174455.585 ops/s
[info] Iteration   1: 175490.836 ops/s
[info]                  ·gc.alloc.rate:               1739.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          15595.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12064.924 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 176088.748 ops/s
[info]                  ·gc.alloc.rate:                   1740.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              15554.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12032.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 176292.431 ops/s
[info]                  ·gc.alloc.rate:                   1757.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              15693.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17995.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 174539.991 ops/s
[info]                  ·gc.alloc.rate:               1723.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          15539.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12106.416 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 174456.345 ops/s
[info]                  ·gc.alloc.rate:                   1730.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              15613.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18170.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   175373.670 ±(99.9%) 3281.921 ops/s [Average]
[info]   (min, avg, max) = (174456.345, 175373.670, 176292.431), stdev = 852.305
[info]   CI (99.9%): [172091.749, 178655.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1738.427 ±(99.9%) 49.468 MB/sec [Average]
[info]   (min, avg, max) = (1723.795, 1738.427, 1757.944), stdev = 12.847
[info]   CI (99.9%): [1688.959, 1787.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15599.576 ±(99.9%) 233.280 B/op [Average]
[info]   (min, avg, max) = (15539.904, 15599.576, 15693.918), stdev = 60.582
[info]   CI (99.9%): [15366.296, 15832.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.945 ±(99.9%) 1413.118 MB/sec [Average]
[info]   (min, avg, max) = (1342.928, 1612.945, 2015.793), stdev = 366.982
[info]   CI (99.9%): [199.827, 3026.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14474.162 ±(99.9%) 12689.349 B/op [Average]
[info]   (min, avg, max) = (12032.820, 14474.162, 18170.806), stdev = 3295.384
[info]   CI (99.9%): [1784.813, 27163.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.606 ±(99.9%) 5.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 2.988), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.415 ±(99.9%) 45.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.415, 26.700), stdev = 11.899
[info]   CI (99.9%): [≈ 0, 51.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.80% complete, ETA 01:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640.407 ops/s
[info] # Warmup Iteration   2: 6078.185 ops/s
[info] # Warmup Iteration   3: 7232.716 ops/s
[info] # Warmup Iteration   4: 7517.051 ops/s
[info] # Warmup Iteration   5: 7543.243 ops/s
[info] Iteration   1: 7524.147 ops/s
[info]                  ·gc.alloc.rate:               1292.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          270413.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 279490.228 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 7468.089 ops/s
[info]                  ·gc.alloc.rate:               1257.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          264973.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140933.106 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 7529.551 ops/s
[info]                  ·gc.alloc.rate:                   1281.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              267844.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279615.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7474.840 ops/s
[info]                  ·gc.alloc.rate:                   1284.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              270297.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281812.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7535.397 ops/s
[info]                  ·gc.alloc.rate:                   1294.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              270398.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279221.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7506.405 ±(99.9%) 124.113 ops/s [Average]
[info]   (min, avg, max) = (7468.089, 7506.405, 7535.397), stdev = 32.232
[info]   CI (99.9%): [7382.292, 7630.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1282.147 ±(99.9%) 57.081 MB/sec [Average]
[info]   (min, avg, max) = (1257.530, 1282.147, 1294.550), stdev = 14.824
[info]   CI (99.9%): [1225.066, 1339.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   268785.550 ±(99.9%) 9224.734 B/op [Average]
[info]   (min, avg, max) = (264973.287, 268785.550, 270413.078), stdev = 2395.634
[info]   CI (99.9%): [259560.816, 278010.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1203.744 ±(99.9%) 1151.406 MB/sec [Average]
[info]   (min, avg, max) = (668.851, 1203.744, 1339.060), stdev = 299.017
[info]   CI (99.9%): [52.338, 2355.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   252214.619 ±(99.9%) 239575.073 B/op [Average]
[info]   (min, avg, max) = (140933.106, 252214.619, 281812.689), stdev = 62216.886
[info]   CI (99.9%): [12639.545, 491789.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.123), stdev = 1.804
[info]   CI (99.9%): [≈ 0, 7.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   190.071 ±(99.9%) 1462.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 190.071, 867.736), stdev = 379.766
[info]   CI (99.9%): [≈ 0, 1652.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.03% complete, ETA 01:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6741.432 ops/s
[info] # Warmup Iteration   2: 20174.444 ops/s
[info] # Warmup Iteration   3: 21017.064 ops/s
[info] # Warmup Iteration   4: 21383.674 ops/s
[info] # Warmup Iteration   5: 20988.922 ops/s
[info] Iteration   1: 20850.951 ops/s
[info]                  ·gc.alloc.rate:                   1180.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              89138.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50606.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20727.008 ops/s
[info]                  ·gc.alloc.rate:                   1188.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              90206.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101847.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 21052.735 ops/s
[info]                  ·gc.alloc.rate:               1191.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          89080.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100320.875 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 21421.262 ops/s
[info]                  ·gc.alloc.rate:                   1209.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              88877.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98642.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21596.453 ops/s
[info]                  ·gc.alloc.rate:                   1218.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              88752.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48933.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21129.682 ±(99.9%) 1426.107 ops/s [Average]
[info]   (min, avg, max) = (20727.008, 21129.682, 21596.453), stdev = 370.355
[info]   CI (99.9%): [19703.575, 22555.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1197.675 ±(99.9%) 60.065 MB/sec [Average]
[info]   (min, avg, max) = (1180.875, 1197.675, 1218.083), stdev = 15.599
[info]   CI (99.9%): [1137.610, 1257.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89211.147 ±(99.9%) 2223.598 B/op [Average]
[info]   (min, avg, max) = (88752.971, 89211.147, 90206.265), stdev = 577.461
[info]   CI (99.9%): [86987.549, 91434.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.603 ±(99.9%) 1415.216 MB/sec [Average]
[info]   (min, avg, max) = (670.410, 1073.603, 1342.629), stdev = 367.527
[info]   CI (99.9%): [≈ 0, 2488.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80070.108 ±(99.9%) 106623.415 B/op [Average]
[info]   (min, avg, max) = (48933.547, 80070.108, 101847.939), stdev = 27689.762
[info]   CI (99.9%): [≈ 0, 186693.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 5.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.123), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 5.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55.942 ±(99.9%) 379.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.942, 229.414), stdev = 98.664
[info]   CI (99.9%): [≈ 0, 435.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.26% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5055.217 ops/s
[info] # Warmup Iteration   2: 22299.649 ops/s
[info] # Warmup Iteration   3: 23268.171 ops/s
[info] # Warmup Iteration   4: 23813.773 ops/s
[info] # Warmup Iteration   5: 22955.065 ops/s
[info] Iteration   1: 23146.793 ops/s
[info]                  ·gc.alloc.rate:                   1014.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              68997.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45453.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23811.225 ops/s
[info]                  ·gc.alloc.rate:                   1059.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              70049.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88416.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23899.248 ops/s
[info]                  ·gc.alloc.rate:               1045.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          68805.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44087.306 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 23782.094 ops/s
[info]                  ·gc.alloc.rate:                   1065.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              70525.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88626.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 23936.028 ops/s
[info]                  ·gc.alloc.rate:               1058.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          69596.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44041.068 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23715.077 ±(99.9%) 1246.890 ops/s [Average]
[info]   (min, avg, max) = (23146.793, 23715.077, 23936.028), stdev = 323.813
[info]   CI (99.9%): [22468.187, 24961.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1048.765 ±(99.9%) 78.706 MB/sec [Average]
[info]   (min, avg, max) = (1014.788, 1048.765, 1065.724), stdev = 20.440
[info]   CI (99.9%): [970.059, 1127.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69594.843 ±(99.9%) 2757.559 B/op [Average]
[info]   (min, avg, max) = (68805.755, 69594.843, 70525.324), stdev = 716.129
[info]   CI (99.9%): [66837.284, 72352.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.974 ±(99.9%) 1411.334 MB/sec [Average]
[info]   (min, avg, max) = (668.509, 936.974, 1339.257), stdev = 366.519
[info]   CI (99.9%): [≈ 0, 2348.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62124.899 ±(99.9%) 92813.457 B/op [Average]
[info]   (min, avg, max) = (44041.068, 62124.899, 88626.647), stdev = 24103.360
[info]   CI (99.9%): [≈ 0, 154938.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.897 ±(99.9%) 3.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.897, 2.123), stdev = 0.969
[info]   CI (99.9%): [≈ 0, 4.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.49% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224772.057 ops/s
[info] # Warmup Iteration   2: 338964.477 ops/s
[info] # Warmup Iteration   3: 360627.340 ops/s
[info] # Warmup Iteration   4: 368291.496 ops/s
[info] # Warmup Iteration   5: 369088.379 ops/s
[info] Iteration   1: 373241.425 ops/s
[info]                  ·gc.alloc.rate:               871.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          3673.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2831.431 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 370022.833 ops/s
[info]                  ·gc.alloc.rate:               859.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          3655.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2855.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 377954.196 ops/s
[info]                  ·gc.alloc.rate:                   889.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              3700.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5597.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 379694.922 ops/s
[info]                  ·gc.alloc.rate:               875.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          3629.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2785.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 378899.812 ops/s
[info]                  ·gc.alloc.rate:                   884.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3674.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2791.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   375962.638 ±(99.9%) 16017.188 ops/s [Average]
[info]   (min, avg, max) = (370022.833, 375962.638, 379694.922), stdev = 4159.613
[info]   CI (99.9%): [359945.450, 391979.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   876.098 ±(99.9%) 44.737 MB/sec [Average]
[info]   (min, avg, max) = (859.579, 876.098, 889.136), stdev = 11.618
[info]   CI (99.9%): [831.361, 920.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3666.825 ±(99.9%) 100.760 B/op [Average]
[info]   (min, avg, max) = (3629.923, 3666.825, 3700.608), stdev = 26.167
[info]   CI (99.9%): [3566.066, 3767.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.494 ±(99.9%) 1159.099 MB/sec [Average]
[info]   (min, avg, max) = (671.466, 806.494, 1344.964), stdev = 301.014
[info]   CI (99.9%): [≈ 0, 1965.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3372.625 ±(99.9%) 4791.087 B/op [Average]
[info]   (min, avg, max) = (2785.990, 3372.625, 5597.776), stdev = 1244.230
[info]   CI (99.9%): [≈ 0, 8163.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.173), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.73% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160731.835 ops/s
[info] # Warmup Iteration   2: 415428.034 ops/s
[info] # Warmup Iteration   3: 429330.407 ops/s
[info] # Warmup Iteration   4: 428907.566 ops/s
[info] # Warmup Iteration   5: 429614.639 ops/s
[info] Iteration   1: 429696.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 429010.660 ops/s
[info]                  ·gc.alloc.rate:      1.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.747 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 429037.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 429411.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 428742.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   429179.724 ±(99.9%) 1440.607 ops/s [Average]
[info]   (min, avg, max) = (428742.988, 429179.724, 429696.068), stdev = 374.121
[info]   CI (99.9%): [427739.117, 430620.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.205 ±(99.9%) 1.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.205, 1.022), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 1.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.750 ±(99.9%) 6.451 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.750, 3.747), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.96% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8809.107 ops/s
[info] # Warmup Iteration   2: 21994.828 ops/s
[info] # Warmup Iteration   3: 24218.713 ops/s
[info] # Warmup Iteration   4: 24693.804 ops/s
[info] # Warmup Iteration   5: 24332.757 ops/s
[info] Iteration   1: 24635.884 ops/s
[info]                  ·gc.alloc.rate:               1170.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          74764.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42789.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 24664.929 ops/s
[info]                  ·gc.alloc.rate:                   1198.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              76437.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85500.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24762.585 ops/s
[info]                  ·gc.alloc.rate:                   1186.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              75419.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85207.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 24719.614 ops/s
[info]                  ·gc.alloc.rate:                   1197.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              76235.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85395.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 24576.015 ops/s
[info]                  ·gc.alloc.rate:                   1174.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              75242.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42956.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24671.806 ±(99.9%) 279.272 ops/s [Average]
[info]   (min, avg, max) = (24576.015, 24671.806, 24762.585), stdev = 72.526
[info]   CI (99.9%): [24392.534, 24951.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1185.492 ±(99.9%) 48.827 MB/sec [Average]
[info]   (min, avg, max) = (1170.312, 1185.492, 1198.066), stdev = 12.680
[info]   CI (99.9%): [1136.665, 1234.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75620.063 ±(99.9%) 2696.595 B/op [Average]
[info]   (min, avg, max) = (74764.947, 75620.063, 76437.828), stdev = 700.297
[info]   CI (99.9%): [72923.468, 78316.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.547 ±(99.9%) 1414.002 MB/sec [Average]
[info]   (min, avg, max) = (669.800, 1072.547, 1341.244), stdev = 367.212
[info]   CI (99.9%): [≈ 0, 2486.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68369.987 ±(99.9%) 89625.825 B/op [Average]
[info]   (min, avg, max) = (42789.901, 68369.987, 85500.451), stdev = 23275.542
[info]   CI (99.9%): [≈ 0, 157995.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.250), stdev = 1.398
[info]   CI (99.9%): [≈ 0, 6.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   53.639 ±(99.9%) 342.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.639, 206.895), stdev = 89.042
[info]   CI (99.9%): [≈ 0, 396.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.19% complete, ETA 01:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2035.102 ops/s
[info] # Warmup Iteration   2: 11702.738 ops/s
[info] # Warmup Iteration   3: 14038.229 ops/s
[info] # Warmup Iteration   4: 13052.374 ops/s
[info] # Warmup Iteration   5: 13973.435 ops/s
[info] Iteration   1: 13541.744 ops/s
[info]                  ·gc.alloc.rate:               1331.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          154777.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155834.883 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 13973.562 ops/s
[info]                  ·gc.alloc.rate:               1355.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          152628.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151104.183 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 14001.869 ops/s
[info]                  ·gc.alloc.rate:                   1368.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              153756.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150941.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13758.807 ops/s
[info]                  ·gc.alloc.rate:                   1348.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              154211.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153606.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 14074.760 ops/s
[info]                  ·gc.alloc.rate:                   1382.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              154560.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149871.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13870.148 ±(99.9%) 839.574 ops/s [Average]
[info]   (min, avg, max) = (13541.744, 13870.148, 14074.760), stdev = 218.035
[info]   CI (99.9%): [13030.574, 14709.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1357.236 ±(99.9%) 73.953 MB/sec [Average]
[info]   (min, avg, max) = (1331.706, 1357.236, 1382.211), stdev = 19.205
[info]   CI (99.9%): [1283.282, 1431.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   153986.787 ±(99.9%) 3280.805 B/op [Average]
[info]   (min, avg, max) = (152628.083, 153986.787, 154777.190), stdev = 852.015
[info]   CI (99.9%): [150705.982, 157267.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.892 ±(99.9%) 5.119 MB/sec [Average]
[info]   (min, avg, max) = (1340.275, 1341.892, 1343.180), stdev = 1.329
[info]   CI (99.9%): [1336.773, 1347.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   152271.483 ±(99.9%) 9308.315 B/op [Average]
[info]   (min, avg, max) = (149871.060, 152271.483, 155834.883), stdev = 2417.340
[info]   CI (99.9%): [142963.167, 161579.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.685), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 7.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   89.881 ±(99.9%) 714.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.881, 421.446), stdev = 185.599
[info]   CI (99.9%): [≈ 0, 804.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.42% complete, ETA 01:05:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1787.260 ops/s
[info] # Warmup Iteration   2: 12064.161 ops/s
[info] # Warmup Iteration   3: 13643.755 ops/s
[info] # Warmup Iteration   4: 13995.665 ops/s
[info] # Warmup Iteration   5: 13985.299 ops/s
[info] Iteration   1: 13891.742 ops/s
[info]                  ·gc.alloc.rate:               1242.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          140712.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75696.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13973.781 ops/s
[info]                  ·gc.alloc.rate:                   1258.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              141697.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150530.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13994.975 ops/s
[info]                  ·gc.alloc.rate:               1258.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          141471.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150390.535 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 13684.260 ops/s
[info]                  ·gc.alloc.rate:                   1238.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              142386.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153911.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 14071.634 ops/s
[info]                  ·gc.alloc.rate:                   1258.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              140754.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149530.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13923.278 ±(99.9%) 570.574 ops/s [Average]
[info]   (min, avg, max) = (13684.260, 13923.278, 14071.634), stdev = 148.176
[info]   CI (99.9%): [13352.705, 14493.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1251.142 ±(99.9%) 39.065 MB/sec [Average]
[info]   (min, avg, max) = (1238.243, 1251.142, 1258.513), stdev = 10.145
[info]   CI (99.9%): [1212.077, 1290.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   141404.472 ±(99.9%) 2691.653 B/op [Average]
[info]   (min, avg, max) = (140712.579, 141404.472, 142386.098), stdev = 699.014
[info]   CI (99.9%): [138712.819, 144096.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.666 ±(99.9%) 1152.772 MB/sec [Average]
[info]   (min, avg, max) = (668.135, 1203.666, 1338.474), stdev = 299.371
[info]   CI (99.9%): [50.894, 2356.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   136011.904 ±(99.9%) 129994.027 B/op [Average]
[info]   (min, avg, max) = (75696.108, 136011.904, 153911.681), stdev = 33759.036
[info]   CI (99.9%): [6017.877, 266005.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 6.413 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 3.831), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   101.144 ±(99.9%) 737.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.144, 440.514), stdev = 191.611
[info]   CI (99.9%): [≈ 0, 838.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.65% complete, ETA 01:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102182.615 ops/s
[info] # Warmup Iteration   2: 282937.685 ops/s
[info] # Warmup Iteration   3: 284193.817 ops/s
[info] # Warmup Iteration   4: 285744.562 ops/s
[info] # Warmup Iteration   5: 281740.123 ops/s
[info] Iteration   1: 282788.822 ops/s
[info]                  ·gc.alloc.rate:                   1672.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              9307.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7485.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 281376.483 ops/s
[info]                  ·gc.alloc.rate:                   1694.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              9475.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11289.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 295431.812 ops/s
[info]                  ·gc.alloc.rate:                   1760.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              9379.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7161.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 293929.162 ops/s
[info]                  ·gc.alloc.rate:                   1766.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              9460.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10786.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 295420.506 ops/s
[info]                  ·gc.alloc.rate:                   1748.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              9316.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7154.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   289789.357 ±(99.9%) 27260.076 ops/s [Average]
[info]   (min, avg, max) = (281376.483, 289789.357, 295431.812), stdev = 7079.355
[info]   CI (99.9%): [262529.281, 317049.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1728.533 ±(99.9%) 163.966 MB/sec [Average]
[info]   (min, avg, max) = (1672.378, 1728.533, 1766.889), stdev = 42.581
[info]   CI (99.9%): [1564.567, 1892.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9387.983 ±(99.9%) 301.374 B/op [Average]
[info]   (min, avg, max) = (9307.680, 9387.983, 9475.269), stdev = 78.266
[info]   CI (99.9%): [9086.610, 9689.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.002 ±(99.9%) 1418.061 MB/sec [Average]
[info]   (min, avg, max) = (1342.968, 1613.002, 2018.452), stdev = 368.266
[info]   CI (99.9%): [194.941, 3031.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8775.500 ±(99.9%) 7999.110 B/op [Average]
[info]   (min, avg, max) = (7154.681, 8775.500, 11289.955), stdev = 2077.343
[info]   CI (99.9%): [776.390, 16774.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 5.010 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.608, 2.935), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.397 ±(99.9%) 28.030 B/op [Average]
[info]   (min, avg, max) = (0.111, 3.397, 16.418), stdev = 7.279
[info]   CI (99.9%): [≈ 0, 31.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.88% complete, ETA 01:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679.621 ops/s
[info] # Warmup Iteration   2: 9603.594 ops/s
[info] # Warmup Iteration   3: 12530.676 ops/s
[info] # Warmup Iteration   4: 12388.464 ops/s
[info] # Warmup Iteration   5: 12241.762 ops/s
[info] Iteration   1: 11650.825 ops/s
[info]                  ·gc.alloc.rate:               1442.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          194764.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180236.654 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 12543.209 ops/s
[info]                  ·gc.alloc.rate:                   1559.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              195617.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251716.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12593.639 ops/s
[info]                  ·gc.alloc.rate:                   1559.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              194885.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167409.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12562.730 ops/s
[info]                  ·gc.alloc.rate:                   1570.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              196762.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168142.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12568.926 ops/s
[info]                  ·gc.alloc.rate:               1569.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          196467.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168159.193 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12383.866 ±(99.9%) 1579.449 ops/s [Average]
[info]   (min, avg, max) = (11650.825, 12383.866, 12593.639), stdev = 410.178
[info]   CI (99.9%): [10804.417, 13963.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1540.116 ±(99.9%) 211.344 MB/sec [Average]
[info]   (min, avg, max) = (1442.401, 1540.116, 1570.688), stdev = 54.885
[info]   CI (99.9%): [1328.772, 1751.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   195699.333 ±(99.9%) 3477.583 B/op [Average]
[info]   (min, avg, max) = (194764.665, 195699.333, 196762.161), stdev = 903.117
[info]   CI (99.9%): [192221.751, 199176.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.143 ±(99.9%) 1147.499 MB/sec [Average]
[info]   (min, avg, max) = (1334.808, 1473.143, 2006.194), stdev = 298.002
[info]   CI (99.9%): [325.645, 2620.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   187132.892 ±(99.9%) 140539.099 B/op [Average]
[info]   (min, avg, max) = (167409.204, 187132.892, 251716.750), stdev = 36497.558
[info]   CI (99.9%): [46593.793, 327671.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.729), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.642 ±(99.9%) 157.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.642, 91.051), stdev = 40.774
[info]   CI (99.9%): [≈ 0, 185.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.11% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10781.392 ops/s
[info] # Warmup Iteration   2: 31934.661 ops/s
[info] # Warmup Iteration   3: 32962.540 ops/s
[info] # Warmup Iteration   4: 33659.830 ops/s
[info] # Warmup Iteration   5: 32188.615 ops/s
[info] Iteration   1: 33400.771 ops/s
[info]                  ·gc.alloc.rate:               1432.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          67494.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63217.149 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 33768.899 ops/s
[info]                  ·gc.alloc.rate:               1457.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          67927.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62557.532 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 33173.994 ops/s
[info]                  ·gc.alloc.rate:                   1432.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              67981.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63712.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33696.266 ops/s
[info]                  ·gc.alloc.rate:                   1467.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              68550.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62660.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 33737.192 ops/s
[info]                  ·gc.alloc.rate:                   1493.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              69669.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93663.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33555.425 ±(99.9%) 996.443 ops/s [Average]
[info]   (min, avg, max) = (33173.994, 33555.425, 33768.899), stdev = 258.773
[info]   CI (99.9%): [32558.982, 34551.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1456.820 ±(99.9%) 98.694 MB/sec [Average]
[info]   (min, avg, max) = (1432.399, 1456.820, 1493.489), stdev = 25.630
[info]   CI (99.9%): [1358.126, 1555.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68324.737 ±(99.9%) 3236.276 B/op [Average]
[info]   (min, avg, max) = (67494.378, 68324.737, 69669.826), stdev = 840.451
[info]   CI (99.9%): [65088.461, 71561.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.272 ±(99.9%) 1146.401 MB/sec [Average]
[info]   (min, avg, max) = (1341.591, 1475.272, 2007.843), stdev = 297.717
[info]   CI (99.9%): [328.871, 2621.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69162.306 ±(99.9%) 52771.832 B/op [Average]
[info]   (min, avg, max) = (62557.532, 69162.306, 93663.922), stdev = 13704.677
[info]   CI (99.9%): [16390.475, 121934.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 4.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 2.977), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.246 ±(99.9%) 234.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.246, 141.229), stdev = 60.891
[info]   CI (99.9%): [≈ 0, 269.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.34% complete, ETA 01:04:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17801.362 ops/s
[info] # Warmup Iteration   2: 75645.171 ops/s
[info] # Warmup Iteration   3: 74328.095 ops/s
[info] # Warmup Iteration   4: 80264.630 ops/s
[info] # Warmup Iteration   5: 80314.009 ops/s
[info] Iteration   1: 80164.378 ops/s
[info]                  ·gc.alloc.rate:                   2016.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              39587.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39457.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 78821.732 ops/s
[info]                  ·gc.alloc.rate:                   1968.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              39295.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40090.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 79852.815 ops/s
[info]                  ·gc.alloc.rate:               2008.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          39578.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39506.232 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 80394.727 ops/s
[info]                  ·gc.alloc.rate:               2036.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          39867.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39239.932 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 80722.355 ops/s
[info]                  ·gc.alloc.rate:               2044.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          39852.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39150.006 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   79991.201 ±(99.9%) 2799.485 ops/s [Average]
[info]   (min, avg, max) = (78821.732, 79991.201, 80722.355), stdev = 727.017
[info]   CI (99.9%): [77191.716, 82790.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2014.732 ±(99.9%) 114.077 MB/sec [Average]
[info]   (min, avg, max) = (1968.586, 2014.732, 2044.085), stdev = 29.625
[info]   CI (99.9%): [1900.655, 2128.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39636.335 ±(99.9%) 907.462 B/op [Average]
[info]   (min, avg, max) = (39295.645, 39636.335, 39867.489), stdev = 235.665
[info]   CI (99.9%): [38728.874, 40543.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.026 ±(99.9%) 9.457 MB/sec [Average]
[info]   (min, avg, max) = (2004.416, 2007.026, 2009.800), stdev = 2.456
[info]   CI (99.9%): [1997.568, 2016.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39488.943 ±(99.9%) 1415.541 B/op [Average]
[info]   (min, avg, max) = (39150.006, 39488.943, 40090.930), stdev = 367.611
[info]   CI (99.9%): [38073.402, 40904.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.372), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.821 ±(99.9%) 111.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.821, 66.210), stdev = 28.930
[info]   CI (99.9%): [≈ 0, 126.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.57% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386583.423 ops/s
[info] # Warmup Iteration   2: 593780.068 ops/s
[info] # Warmup Iteration   3: 587646.153 ops/s
[info] # Warmup Iteration   4: 566197.173 ops/s
[info] # Warmup Iteration   5: 618841.607 ops/s
[info] Iteration   1: 620179.027 ops/s
[info]                  ·gc.alloc.rate:               873.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          2216.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1704.040 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 619495.591 ops/s
[info]                  ·gc.alloc.rate:               868.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1705.912 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 616929.078 ops/s
[info]                  ·gc.alloc.rate:                   879.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2242.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3427.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 631187.284 ops/s
[info]                  ·gc.alloc.rate:               881.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          2198.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1675.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 633765.110 ops/s
[info]                  ·gc.alloc.rate:               895.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1669.196 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   624311.218 ±(99.9%) 29288.799 ops/s [Average]
[info]   (min, avg, max) = (616929.078, 624311.218, 633765.110), stdev = 7606.208
[info]   CI (99.9%): [595022.419, 653600.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   879.924 ±(99.9%) 39.752 MB/sec [Average]
[info]   (min, avg, max) = (868.739, 879.924, 895.952), stdev = 10.324
[info]   CI (99.9%): [840.172, 919.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2217.773 ±(99.9%) 65.036 B/op [Average]
[info]   (min, avg, max) = (2198.999, 2217.773, 2242.445), stdev = 16.890
[info]   CI (99.9%): [2152.737, 2282.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.402 ±(99.9%) 1157.796 MB/sec [Average]
[info]   (min, avg, max) = (671.655, 806.402, 1344.267), stdev = 300.676
[info]   CI (99.9%): [≈ 0, 1964.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2036.587 ±(99.9%) 2995.456 B/op [Average]
[info]   (min, avg, max) = (1669.196, 2036.587, 3427.846), stdev = 777.910
[info]   CI (99.9%): [≈ 0, 5032.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.80% complete, ETA 01:04:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 454241.813 ops/s
[info] # Warmup Iteration   2: 683283.472 ops/s
[info] # Warmup Iteration   3: 717348.409 ops/s
[info] # Warmup Iteration   4: 585259.459 ops/s
[info] # Warmup Iteration   5: 718754.971 ops/s
[info] Iteration   1: 719667.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 720767.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 725681.336 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 719916.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 722563.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   721719.372 ±(99.9%) 9583.436 ops/s [Average]
[info]   (min, avg, max) = (719667.742, 721719.372, 725681.336), stdev = 2488.788
[info]   CI (99.9%): [712135.936, 731302.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.011 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.025 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.03% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26319.798 ops/s
[info] # Warmup Iteration   2: 73022.051 ops/s
[info] # Warmup Iteration   3: 73569.467 ops/s
[info] # Warmup Iteration   4: 75924.346 ops/s
[info] # Warmup Iteration   5: 76030.470 ops/s
[info] Iteration   1: 75842.810 ops/s
[info]                  ·gc.alloc.rate:                   2191.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              45471.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41663.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 75291.746 ops/s
[info]                  ·gc.alloc.rate:                   2188.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              45740.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41871.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 76229.242 ops/s
[info]                  ·gc.alloc.rate:                   2189.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              45207.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41315.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 74654.467 ops/s
[info]                  ·gc.alloc.rate:                   2198.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              46357.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56333.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 73169.850 ops/s
[info]                  ·gc.alloc.rate:               2131.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          45833.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43206.495 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   75037.623 ±(99.9%) 4624.079 ops/s [Average]
[info]   (min, avg, max) = (73169.850, 75037.623, 76229.242), stdev = 1200.859
[info]   CI (99.9%): [70413.544, 79661.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2179.953 ±(99.9%) 105.050 MB/sec [Average]
[info]   (min, avg, max) = (2131.727, 2179.953, 2198.996), stdev = 27.281
[info]   CI (99.9%): [2074.903, 2285.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45722.142 ±(99.9%) 1660.068 B/op [Average]
[info]   (min, avg, max) = (45207.672, 45722.142, 46357.205), stdev = 431.114
[info]   CI (99.9%): [44062.074, 47382.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.731 ±(99.9%) 1148.469 MB/sec [Average]
[info]   (min, avg, max) = (2001.120, 2138.731, 2672.229), stdev = 298.254
[info]   CI (99.9%): [990.262, 3287.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   44877.946 ±(99.9%) 24812.718 B/op [Average]
[info]   (min, avg, max) = (41315.333, 44877.946, 56333.453), stdev = 6443.784
[info]   CI (99.9%): [20065.227, 69690.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 6.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.101), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 7.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.804 ±(99.9%) 144.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.804, 85.099), stdev = 37.628
[info]   CI (99.9%): [≈ 0, 162.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.27% complete, ETA 01:03:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2782.926 ops/s
[info] # Warmup Iteration   2: 15048.972 ops/s
[info] # Warmup Iteration   3: 16537.979 ops/s
[info] # Warmup Iteration   4: 16653.906 ops/s
[info] # Warmup Iteration   5: 16535.173 ops/s
[info] Iteration   1: 16007.695 ops/s
[info]                  ·gc.alloc.rate:               853.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          83961.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131800.587 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 16010.126 ops/s
[info]                  ·gc.alloc.rate:               844.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          83007.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65904.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16035.244 ops/s
[info]                  ·gc.alloc.rate:               859.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          84327.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65838.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16651.573 ops/s
[info]                  ·gc.alloc.rate:                   881.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              83296.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63403.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16643.311 ops/s
[info]                  ·gc.alloc.rate:                   886.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              83800.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126930.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16269.590 ±(99.9%) 1328.901 ops/s [Average]
[info]   (min, avg, max) = (16007.695, 16269.590, 16651.573), stdev = 345.111
[info]   CI (99.9%): [14940.689, 17598.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   865.000 ±(99.9%) 69.205 MB/sec [Average]
[info]   (min, avg, max) = (844.420, 865.000, 886.161), stdev = 17.972
[info]   CI (99.9%): [795.795, 934.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83678.602 ±(99.9%) 2031.233 B/op [Average]
[info]   (min, avg, max) = (83007.021, 83678.602, 84327.562), stdev = 527.505
[info]   CI (99.9%): [81647.369, 85709.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   938.965 ±(99.9%) 1414.603 MB/sec [Average]
[info]   (min, avg, max) = (670.437, 938.965, 1342.251), stdev = 367.368
[info]   CI (99.9%): [≈ 0, 2353.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   90775.334 ±(99.9%) 135866.950 B/op [Average]
[info]   (min, avg, max) = (63403.148, 90775.334, 131800.587), stdev = 35284.215
[info]   CI (99.9%): [≈ 0, 226642.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.787 ±(99.9%) 4.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 1.969), stdev = 1.078
[info]   CI (99.9%): [≈ 0, 4.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.50% complete, ETA 01:03:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3692.697 ops/s
[info] # Warmup Iteration   2: 14969.120 ops/s
[info] # Warmup Iteration   3: 16920.725 ops/s
[info] # Warmup Iteration   4: 16760.446 ops/s
[info] # Warmup Iteration   5: 16916.128 ops/s
[info] Iteration   1: 16930.639 ops/s
[info]                  ·gc.alloc.rate:               741.564 MB/sec
[info]                  ·gc.alloc.rate.norm:          68935.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62014.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16816.318 ops/s
[info]                  ·gc.alloc.rate:               745.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          69747.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62500.591 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16828.489 ops/s
[info]                  ·gc.alloc.rate:                   740.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              69201.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62452.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16858.494 ops/s
[info]                  ·gc.alloc.rate:                   737.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              68883.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62407.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16926.686 ops/s
[info]                  ·gc.alloc.rate:               739.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          68745.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62156.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16872.125 ±(99.9%) 207.409 ops/s [Average]
[info]   (min, avg, max) = (16816.318, 16872.125, 16930.639), stdev = 53.863
[info]   CI (99.9%): [16664.717, 17079.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   740.829 ±(99.9%) 10.830 MB/sec [Average]
[info]   (min, avg, max) = (737.854, 740.829, 745.249), stdev = 2.813
[info]   CI (99.9%): [729.999, 751.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69102.578 ±(99.9%) 1527.581 B/op [Average]
[info]   (min, avg, max) = (68745.392, 69102.578, 69747.554), stdev = 396.708
[info]   CI (99.9%): [67574.997, 70630.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.969 ±(99.9%) 2.165 MB/sec [Average]
[info]   (min, avg, max) = (667.113, 667.969, 668.483), stdev = 0.562
[info]   CI (99.9%): [665.803, 670.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62306.129 ±(99.9%) 810.016 B/op [Average]
[info]   (min, avg, max) = (62014.224, 62306.129, 62500.591), stdev = 210.359
[info]   CI (99.9%): [61496.114, 63116.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.778 ±(99.9%) 4.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.778, 1.947), stdev = 1.065
[info]   CI (99.9%): [≈ 0, 4.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.73% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70513.862 ops/s
[info] # Warmup Iteration   2: 115212.437 ops/s
[info] # Warmup Iteration   3: 120263.300 ops/s
[info] # Warmup Iteration   4: 122274.630 ops/s
[info] # Warmup Iteration   5: 121926.411 ops/s
[info] Iteration   1: 121869.530 ops/s
[info]                  ·gc.alloc.rate:      306.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 121571.253 ops/s
[info]                  ·gc.alloc.rate:               319.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          4138.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6623.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 121586.744 ops/s
[info]                  ·gc.alloc.rate:                   316.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              4100.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6622.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 121661.311 ops/s
[info]                  ·gc.alloc.rate:      305.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 121671.711 ops/s
[info]                  ·gc.alloc.rate:      305.537 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   121672.110 ±(99.9%) 457.849 ops/s [Average]
[info]   (min, avg, max) = (121571.253, 121672.110, 121869.530), stdev = 118.902
[info]   CI (99.9%): [121214.261, 122129.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   310.760 ±(99.9%) 26.941 MB/sec [Average]
[info]   (min, avg, max) = (305.516, 310.760, 319.828), stdev = 6.996
[info]   CI (99.9%): [283.819, 337.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4019.152 ±(99.9%) 357.765 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4019.152, 4138.752), stdev = 92.911
[info]   CI (99.9%): [3661.386, 4376.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.687 ±(99.9%) 1079.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.687, 511.816), stdev = 280.280
[info]   CI (99.9%): [≈ 0, 1283.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2649.078 ±(99.9%) 13967.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2649.078, 6623.184), stdev = 3627.399
[info]   CI (99.9%): [≈ 0, 16616.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.269), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.96% complete, ETA 01:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1385.090 ops/s
[info] # Warmup Iteration   2: 12505.581 ops/s
[info] # Warmup Iteration   3: 14472.712 ops/s
[info] # Warmup Iteration   4: 14677.386 ops/s
[info] # Warmup Iteration   5: 14716.460 ops/s
[info] Iteration   1: 14603.445 ops/s
[info]                  ·gc.alloc.rate:               1137.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          122646.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143796.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 14977.610 ops/s
[info]                  ·gc.alloc.rate:                   1145.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              120343.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70138.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14798.730 ops/s
[info]                  ·gc.alloc.rate:                   1148.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              122165.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142114.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14126.222 ops/s
[info]                  ·gc.alloc.rate:               1122.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          125045.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148948.406 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 15176.212 ops/s
[info]                  ·gc.alloc.rate:                   1158.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              120132.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69352.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14736.444 ±(99.9%) 1546.857 ops/s [Average]
[info]   (min, avg, max) = (14126.222, 14736.444, 15176.212), stdev = 401.714
[info]   CI (99.9%): [13189.587, 16283.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1142.552 ±(99.9%) 51.999 MB/sec [Average]
[info]   (min, avg, max) = (1122.284, 1142.552, 1158.425), stdev = 13.504
[info]   CI (99.9%): [1090.553, 1194.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122066.520 ±(99.9%) 7683.945 B/op [Average]
[info]   (min, avg, max) = (120132.121, 122066.520, 125045.026), stdev = 1995.496
[info]   CI (99.9%): [114382.575, 129750.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.733 ±(99.9%) 1408.160 MB/sec [Average]
[info]   (min, avg, max) = (667.511, 1068.733, 1336.818), stdev = 365.695
[info]   CI (99.9%): [≈ 0, 2476.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114870.226 ±(99.9%) 158919.613 B/op [Average]
[info]   (min, avg, max) = (69352.457, 114870.226, 148948.406), stdev = 41270.919
[info]   CI (99.9%): [≈ 0, 273789.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 7.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 4.101), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 7.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85.930 ±(99.9%) 730.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.930, 425.250), stdev = 189.689
[info]   CI (99.9%): [≈ 0, 816.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.19% complete, ETA 01:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15125.845 ops/s
[info] # Warmup Iteration   2: 43659.406 ops/s
[info] # Warmup Iteration   3: 47637.403 ops/s
[info] # Warmup Iteration   4: 47552.545 ops/s
[info] # Warmup Iteration   5: 48040.474 ops/s
[info] Iteration   1: 48118.525 ops/s
[info]                  ·gc.alloc.rate:                   1470.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              48106.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43903.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 47927.719 ops/s
[info]                  ·gc.alloc.rate:               1488.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          48882.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66151.246 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 48149.563 ops/s
[info]                  ·gc.alloc.rate:                   1492.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              48784.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43920.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 48242.178 ops/s
[info]                  ·gc.alloc.rate:                   1483.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              48386.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43725.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 48046.647 ops/s
[info]                  ·gc.alloc.rate:                   1489.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              48786.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43859.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   48096.926 ±(99.9%) 453.551 ops/s [Average]
[info]   (min, avg, max) = (47927.719, 48096.926, 48242.178), stdev = 117.786
[info]   CI (99.9%): [47643.375, 48550.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484.918 ±(99.9%) 32.961 MB/sec [Average]
[info]   (min, avg, max) = (1470.832, 1484.918, 1492.537), stdev = 8.560
[info]   CI (99.9%): [1451.957, 1517.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48589.299 ±(99.9%) 1273.125 B/op [Average]
[info]   (min, avg, max) = (48106.590, 48589.299, 48882.307), stdev = 330.627
[info]   CI (99.9%): [47316.174, 49862.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.970 ±(99.9%) 1159.141 MB/sec [Average]
[info]   (min, avg, max) = (1339.018, 1475.970, 2014.451), stdev = 301.025
[info]   CI (99.9%): [316.830, 2635.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48312.064 ±(99.9%) 38401.305 B/op [Average]
[info]   (min, avg, max) = (43725.982, 48312.064, 66151.246), stdev = 9972.697
[info]   CI (99.9%): [9910.759, 86713.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.643), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 6.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.633 ±(99.9%) 203.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.633, 119.082), stdev = 52.804
[info]   CI (99.9%): [≈ 0, 227.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.42% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34508.971 ops/s
[info] # Warmup Iteration   2: 70434.827 ops/s
[info] # Warmup Iteration   3: 73484.275 ops/s
[info] # Warmup Iteration   4: 73055.191 ops/s
[info] # Warmup Iteration   5: 74138.213 ops/s
[info] Iteration   1: 67629.934 ops/s
[info]                  ·gc.alloc.rate:                   1436.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              33433.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31159.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69319.663 ops/s
[info]                  ·gc.alloc.rate:               1470.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          33378.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30431.649 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 74242.376 ops/s
[info]                  ·gc.alloc.rate:                   1598.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              33884.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42606.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.815 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 74585.257 ops/s
[info]                  ·gc.alloc.rate:                   1578.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              33306.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28212.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75857.711 ops/s
[info]                  ·gc.alloc.rate:                   1605.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              33304.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27725.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   72326.989 ±(99.9%) 13929.118 ops/s [Average]
[info]   (min, avg, max) = (67629.934, 72326.989, 75857.711), stdev = 3617.348
[info]   CI (99.9%): [58397.871, 86256.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1537.974 ±(99.9%) 303.096 MB/sec [Average]
[info]   (min, avg, max) = (1436.626, 1537.974, 1605.735), stdev = 78.713
[info]   CI (99.9%): [1234.878, 1841.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33461.390 ±(99.9%) 934.370 B/op [Average]
[info]   (min, avg, max) = (33304.174, 33461.390, 33884.641), stdev = 242.653
[info]   CI (99.9%): [32527.020, 34395.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.685 ±(99.9%) 1156.443 MB/sec [Average]
[info]   (min, avg, max) = (1336.777, 1472.685, 2009.916), stdev = 300.324
[info]   CI (99.9%): [316.243, 2629.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32027.368 ±(99.9%) 23444.422 B/op [Average]
[info]   (min, avg, max) = (27725.772, 32027.368, 42606.785), stdev = 6088.442
[info]   CI (99.9%): [8582.946, 55471.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.780 ±(99.9%) 6.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.671), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 7.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.525 ±(99.9%) 132.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.525, 77.815), stdev = 34.297
[info]   CI (99.9%): [≈ 0, 148.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.65% complete, ETA 01:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163189.867 ops/s
[info] # Warmup Iteration   2: 284570.549 ops/s
[info] # Warmup Iteration   3: 300319.917 ops/s
[info] # Warmup Iteration   4: 300973.827 ops/s
[info] # Warmup Iteration   5: 301731.044 ops/s
[info] Iteration   1: 300125.895 ops/s
[info]                  ·gc.alloc.rate:                   600.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              3146.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3514.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 300819.701 ops/s
[info]                  ·gc.alloc.rate:               599.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          3133.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3499.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 297028.613 ops/s
[info]                  ·gc.alloc.rate:                   595.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              3153.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3543.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 300594.760 ops/s
[info]                  ·gc.alloc.rate:               601.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          3151.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3498.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 300453.119 ops/s
[info]                  ·gc.alloc.rate:                   593.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              3110.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3499.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   299804.418 ±(99.9%) 6053.200 ops/s [Average]
[info]   (min, avg, max) = (297028.613, 299804.418, 300819.701), stdev = 1571.997
[info]   CI (99.9%): [293751.217, 305857.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   597.998 ±(99.9%) 12.979 MB/sec [Average]
[info]   (min, avg, max) = (593.874, 597.998, 601.854), stdev = 3.370
[info]   CI (99.9%): [585.020, 610.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3139.046 ±(99.9%) 67.689 B/op [Average]
[info]   (min, avg, max) = (3110.929, 3139.046, 3153.424), stdev = 17.579
[info]   CI (99.9%): [3071.357, 3206.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.858 ±(99.9%) 3.223 MB/sec [Average]
[info]   (min, avg, max) = (668.119, 668.858, 670.151), stdev = 0.837
[info]   CI (99.9%): [665.635, 672.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3511.048 ±(99.9%) 74.735 B/op [Average]
[info]   (min, avg, max) = (3498.090, 3511.048, 3543.691), stdev = 19.408
[info]   CI (99.9%): [3436.313, 3585.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.083), stdev = 1.368
[info]   CI (99.9%): [≈ 0, 5.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.343 ±(99.9%) 27.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.343, 16.168), stdev = 7.172
[info]   CI (99.9%): [≈ 0, 30.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 46.88% complete, ETA 01:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202694.368 ops/s
[info] # Warmup Iteration   2: 356615.600 ops/s
[info] # Warmup Iteration   3: 335117.965 ops/s
[info] # Warmup Iteration   4: 363838.662 ops/s
[info] # Warmup Iteration   5: 357052.251 ops/s
[info] Iteration   1: 364174.654 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 329418.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 364046.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 308878.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 354409.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   344185.786 ±(99.9%) 93595.326 ops/s [Average]
[info]   (min, avg, max) = (308878.623, 344185.786, 364174.654), stdev = 24306.409
[info]   CI (99.9%): [250590.459, 437781.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.11% complete, ETA 01:01:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23388.726 ops/s
[info] # Warmup Iteration   2: 61016.403 ops/s
[info] # Warmup Iteration   3: 65925.822 ops/s
[info] # Warmup Iteration   4: 67823.143 ops/s
[info] # Warmup Iteration   5: 67775.709 ops/s
[info] Iteration   1: 67924.490 ops/s
[info]                  ·gc.alloc.rate:               1560.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          36156.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31086.984 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 67950.447 ops/s
[info]                  ·gc.alloc.rate:                   1558.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              36106.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31074.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 61885.714 ops/s
[info]                  ·gc.alloc.rate:                   1437.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              36554.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34154.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68305.531 ops/s
[info]                  ·gc.alloc.rate:                   1582.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              36444.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46260.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 68426.955 ops/s
[info]                  ·gc.alloc.rate:                   1570.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              36103.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30763.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66898.627 ±(99.9%) 10823.526 ops/s [Average]
[info]   (min, avg, max) = (61885.714, 66898.627, 68426.955), stdev = 2810.835
[info]   CI (99.9%): [56075.101, 77722.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1541.794 ±(99.9%) 227.657 MB/sec [Average]
[info]   (min, avg, max) = (1437.362, 1541.794, 1582.285), stdev = 59.122
[info]   CI (99.9%): [1314.137, 1769.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36273.163 ±(99.9%) 814.185 B/op [Average]
[info]   (min, avg, max) = (36103.500, 36273.163, 36554.997), stdev = 211.441
[info]   CI (99.9%): [35458.978, 37087.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.504 ±(99.9%) 1149.411 MB/sec [Average]
[info]   (min, avg, max) = (1337.823, 1474.504, 2008.463), stdev = 298.498
[info]   CI (99.9%): [325.094, 2623.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34668.063 ±(99.9%) 25514.852 B/op [Average]
[info]   (min, avg, max) = (30763.867, 34668.063, 46260.254), stdev = 6626.126
[info]   CI (99.9%): [9153.211, 60182.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.789), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.943 ±(99.9%) 164.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.943, 96.356), stdev = 42.719
[info]   CI (99.9%): [≈ 0, 184.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.34% complete, ETA 01:01:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38630.258 ops/s
[info] # Warmup Iteration   2: 130840.446 ops/s
[info] # Warmup Iteration   3: 139068.453 ops/s
[info] # Warmup Iteration   4: 144313.319 ops/s
[info] # Warmup Iteration   5: 143129.487 ops/s
[info] Iteration   1: 145263.288 ops/s
[info]                  ·gc.alloc.rate:               1882.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          20386.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14550.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 146101.088 ops/s
[info]                  ·gc.alloc.rate:                   1918.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              20670.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21692.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 147175.677 ops/s
[info]                  ·gc.alloc.rate:                   1932.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              20669.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21485.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 146108.376 ops/s
[info]                  ·gc.alloc.rate:                   1919.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              20673.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21616.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 146647.833 ops/s
[info]                  ·gc.alloc.rate:               1913.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          20531.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14369.147 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   146259.252 ±(99.9%) 2743.536 ops/s [Average]
[info]   (min, avg, max) = (145263.288, 146259.252, 147175.677), stdev = 712.488
[info]   CI (99.9%): [143515.717, 149002.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1913.284 ±(99.9%) 72.195 MB/sec [Average]
[info]   (min, avg, max) = (1882.371, 1913.284, 1932.851), stdev = 18.749
[info]   CI (99.9%): [1841.088, 1985.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20586.201 ±(99.9%) 488.769 B/op [Average]
[info]   (min, avg, max) = (20386.696, 20586.201, 20673.556), stdev = 126.932
[info]   CI (99.9%): [20097.432, 21074.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.421 ±(99.9%) 1410.551 MB/sec [Average]
[info]   (min, avg, max) = (1338.860, 1742.421, 2013.909), stdev = 366.316
[info]   CI (99.9%): [331.870, 3152.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18742.723 ±(99.9%) 15060.562 B/op [Average]
[info]   (min, avg, max) = (14369.147, 18742.723, 21692.993), stdev = 3911.180
[info]   CI (99.9%): [3682.161, 33803.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.664), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 7.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.161 ±(99.9%) 67.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.161, 39.468), stdev = 17.507
[info]   CI (99.9%): [≈ 0, 75.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.58% complete, ETA 01:00:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.829 ops/s
[info] # Warmup Iteration   2: 761058.885 ops/s
[info] # Warmup Iteration   3: 821988.682 ops/s
[info] # Warmup Iteration   4: 846592.755 ops/s
[info] # Warmup Iteration   5: 846354.659 ops/s
[info] Iteration   1: 853977.033 ops/s
[info]                  ·gc.alloc.rate:      473.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 849970.547 ops/s
[info]                  ·gc.alloc.rate:               487.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 856772.076 ops/s
[info]                  ·gc.alloc.rate:                   490.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 856403.358 ops/s
[info]                  ·gc.alloc.rate:               491.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1224.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 853651.645 ops/s
[info]                  ·gc.alloc.rate:      472.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   854154.932 ±(99.9%) 10492.366 ops/s [Average]
[info]   (min, avg, max) = (849970.547, 854154.932, 856772.076), stdev = 2724.834
[info]   CI (99.9%): [843662.565, 864647.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   483.294 ±(99.9%) 36.356 MB/sec [Average]
[info]   (min, avg, max) = (472.967, 483.294, 491.485), stdev = 9.442
[info]   CI (99.9%): [446.938, 519.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   890.448 ±(99.9%) 64.888 B/op [Average]
[info]   (min, avg, max) = (872.001, 890.448, 903.328), stdev = 16.851
[info]   CI (99.9%): [825.560, 955.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.599 ±(99.9%) 1404.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.599, 666.199), stdev = 364.782
[info]   CI (99.9%): [≈ 0, 1804.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   736.029 ±(99.9%) 2587.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 736.029, 1232.847), stdev = 671.910
[info]   CI (99.9%): [≈ 0, 3323.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.81% complete, ETA 01:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141835.823 ops/s
[info] # Warmup Iteration   2: 364069.256 ops/s
[info] # Warmup Iteration   3: 378628.087 ops/s
[info] # Warmup Iteration   4: 381615.317 ops/s
[info] # Warmup Iteration   5: 383495.980 ops/s
[info] Iteration   1: 381894.041 ops/s
[info]                  ·gc.alloc.rate:               406.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          1675.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2108.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 380877.909 ops/s
[info]                  ·gc.alloc.rate:               400.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1656.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2114.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 384636.377 ops/s
[info]                  ·gc.alloc.rate:      405.657 MB/sec
[info]                  ·gc.alloc.rate.norm: 1659.836 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 395524.823 ops/s
[info]                  ·gc.alloc.rate:                   404.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2650.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 395149.938 ops/s
[info]                  ·gc.alloc.rate:                   424.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1689.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2653.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   387616.618 ±(99.9%) 27655.730 ops/s [Average]
[info]   (min, avg, max) = (380877.909, 387616.618, 395524.823), stdev = 7182.105
[info]   CI (99.9%): [359960.888, 415272.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   408.277 ±(99.9%) 35.321 MB/sec [Average]
[info]   (min, avg, max) = (400.896, 408.277, 424.232), stdev = 9.173
[info]   CI (99.9%): [372.956, 443.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1657.890 ±(99.9%) 118.872 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1657.890, 1689.727), stdev = 30.871
[info]   CI (99.9%): [1539.018, 1776.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.098 ±(99.9%) 1056.830 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.098, 666.171), stdev = 274.455
[info]   CI (99.9%): [≈ 0, 1527.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1905.297 ±(99.9%) 4231.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1905.297, 2653.373), stdev = 1098.889
[info]   CI (99.9%): [≈ 0, 6136.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.04% complete, ETA 01:00:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631045.783 ops/s
[info] # Warmup Iteration   2: 1111825.767 ops/s
[info] # Warmup Iteration   3: 1111301.766 ops/s
[info] # Warmup Iteration   4: 1156963.494 ops/s
[info] # Warmup Iteration   5: 1161154.794 ops/s
[info] Iteration   1: 1135401.773 ops/s
[info]                  ·gc.alloc.rate:               408.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          566.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 709.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1154338.960 ops/s
[info]                  ·gc.alloc.rate:               411.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1158572.307 ops/s
[info]                  ·gc.alloc.rate:                   425.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              578.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1163413.339 ops/s
[info]                  ·gc.alloc.rate:      402.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1155961.736 ops/s
[info]                  ·gc.alloc.rate:               425.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          579.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 913.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1153537.623 ±(99.9%) 41217.422 ops/s [Average]
[info]   (min, avg, max) = (1135401.773, 1153537.623, 1163413.339), stdev = 10704.034
[info]   CI (99.9%): [1112320.201, 1194755.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.735 ±(99.9%) 40.640 MB/sec [Average]
[info]   (min, avg, max) = (402.112, 414.735, 425.690), stdev = 10.554
[info]   CI (99.9%): [374.095, 455.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   565.866 ±(99.9%) 55.919 B/op [Average]
[info]   (min, avg, max) = (544.000, 565.866, 579.583), stdev = 14.522
[info]   CI (99.9%): [509.946, 621.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.985 ±(99.9%) 1063.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.985, 670.897), stdev = 276.131
[info]   CI (99.9%): [≈ 0, 1536.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   646.258 ±(99.9%) 1448.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 646.258, 913.321), stdev = 376.095
[info]   CI (99.9%): [≈ 0, 2094.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.27% complete, ETA 01:00:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8964.582 ops/s
[info] # Warmup Iteration   2: 75521.795 ops/s
[info] # Warmup Iteration   3: 81201.431 ops/s
[info] # Warmup Iteration   4: 79803.910 ops/s
[info] # Warmup Iteration   5: 84101.104 ops/s
[info] Iteration   1: 84394.764 ops/s
[info]                  ·gc.alloc.rate:                   3279.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              61165.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62203.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 84459.116 ops/s
[info]                  ·gc.alloc.rate:                   3312.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              61726.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62297.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.715 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 84390.134 ops/s
[info]                  ·gc.alloc.rate:               3284.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          61244.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50027.433 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 84494.260 ops/s
[info]                  ·gc.alloc.rate:               3315.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          61754.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62681.281 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 84303.753 ops/s
[info]                  ·gc.alloc.rate:               3309.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          61779.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3377.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63055.083 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   84408.405 ±(99.9%) 281.746 ops/s [Average]
[info]   (min, avg, max) = (84303.753, 84408.405, 84494.260), stdev = 73.168
[info]   CI (99.9%): [84126.660, 84690.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3300.221 ±(99.9%) 64.889 MB/sec [Average]
[info]   (min, avg, max) = (3279.947, 3300.221, 3315.319), stdev = 16.851
[info]   CI (99.9%): [3235.332, 3365.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61534.134 ±(99.9%) 1164.229 B/op [Average]
[info]   (min, avg, max) = (61165.776, 61534.134, 61779.271), stdev = 302.346
[info]   CI (99.9%): [60369.905, 62698.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3220.801 ±(99.9%) 1160.422 MB/sec [Average]
[info]   (min, avg, max) = (2682.553, 3220.801, 3377.603), stdev = 301.358
[info]   CI (99.9%): [2060.380, 4381.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60052.971 ±(99.9%) 21619.834 B/op [Average]
[info]   (min, avg, max) = (50027.433, 60052.971, 63055.083), stdev = 5614.602
[info]   CI (99.9%): [38433.136, 81672.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.009 ±(99.9%) 5.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.009, 2.715), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.50% complete, ETA 00:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103063.323 ops/s
[info] # Warmup Iteration   2: 263981.349 ops/s
[info] # Warmup Iteration   3: 269596.368 ops/s
[info] # Warmup Iteration   4: 274387.520 ops/s
[info] # Warmup Iteration   5: 266638.476 ops/s
[info] Iteration   1: 270823.029 ops/s
[info]                  ·gc.alloc.rate:               1635.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          9502.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7802.688 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 273046.534 ops/s
[info]                  ·gc.alloc.rate:                   1648.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              9503.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7742.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 274159.500 ops/s
[info]                  ·gc.alloc.rate:                   1667.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              9570.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11550.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 272559.926 ops/s
[info]                  ·gc.alloc.rate:                   1657.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              9573.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7731.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273875.780 ops/s
[info]                  ·gc.alloc.rate:               1680.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          9656.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11541.828 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   272892.954 ±(99.9%) 5089.980 ops/s [Average]
[info]   (min, avg, max) = (270823.029, 272892.954, 274159.500), stdev = 1321.852
[info]   CI (99.9%): [267802.974, 277982.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1657.816 ±(99.9%) 66.471 MB/sec [Average]
[info]   (min, avg, max) = (1635.159, 1657.816, 1680.381), stdev = 17.262
[info]   CI (99.9%): [1591.345, 1724.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9561.193 ±(99.9%) 244.695 B/op [Average]
[info]   (min, avg, max) = (9502.692, 9561.193, 9656.700), stdev = 63.547
[info]   CI (99.9%): [9316.498, 9805.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.044 ±(99.9%) 1410.142 MB/sec [Average]
[info]   (min, avg, max) = (1338.940, 1609.044, 2011.984), stdev = 366.209
[info]   CI (99.9%): [198.902, 3019.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9273.907 ±(99.9%) 7988.558 B/op [Average]
[info]   (min, avg, max) = (7731.443, 9273.907, 11550.822), stdev = 2074.603
[info]   CI (99.9%): [1285.350, 17262.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 4.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 2.956), stdev = 1.274
[info]   CI (99.9%): [≈ 0, 5.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.125 ±(99.9%) 28.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.125, 17.039), stdev = 7.345
[info]   CI (99.9%): [≈ 0, 32.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.73% complete, ETA 00:59:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.840 ops/s
[info] # Warmup Iteration   2: 1126301.914 ops/s
[info] # Warmup Iteration   3: 1228787.643 ops/s
[info] # Warmup Iteration   4: 1249939.344 ops/s
[info] # Warmup Iteration   5: 1258231.530 ops/s
[info] Iteration   1: 1193843.138 ops/s
[info]                  ·gc.alloc.rate:               419.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 674.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1247348.729 ops/s
[info]                  ·gc.alloc.rate:               443.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1255395.750 ops/s
[info]                  ·gc.alloc.rate:      427.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1251022.096 ops/s
[info]                  ·gc.alloc.rate:               448.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 838.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1246755.115 ops/s
[info]                  ·gc.alloc.rate:                   443.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1238872.966 ±(99.9%) 97836.975 ops/s [Average]
[info]   (min, avg, max) = (1193843.138, 1238872.966, 1255395.750), stdev = 25407.952
[info]   CI (99.9%): [1141035.991, 1336709.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   436.396 ±(99.9%) 48.038 MB/sec [Average]
[info]   (min, avg, max) = (419.072, 436.396, 448.329), stdev = 12.475
[info]   CI (99.9%): [388.358, 484.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   554.383 ±(99.9%) 42.685 B/op [Average]
[info]   (min, avg, max) = (536.000, 554.383, 564.032), stdev = 11.085
[info]   CI (99.9%): [511.698, 597.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   502.105 ±(99.9%) 1111.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.105, 666.585), stdev = 288.569
[info]   CI (99.9%): [≈ 0, 1613.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   638.886 ±(99.9%) 1402.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 638.886, 841.346), stdev = 364.271
[info]   CI (99.9%): [≈ 0, 2041.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.96% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555300.466 ops/s
[info] # Warmup Iteration   2: 1479204.956 ops/s
[info] # Warmup Iteration   3: 1505058.623 ops/s
[info] # Warmup Iteration   4: 1524358.270 ops/s
[info] # Warmup Iteration   5: 1515552.933 ops/s
[info] Iteration   1: 1508268.918 ops/s
[info]                  ·gc.alloc.rate:               904.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          943.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.512 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1525103.311 ops/s
[info]                  ·gc.alloc.rate:               908.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          937.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 687.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1512339.990 ops/s
[info]                  ·gc.alloc.rate:               918.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1386.485 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1545563.068 ops/s
[info]                  ·gc.alloc.rate:               916.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          933.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 678.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1459908.381 ops/s
[info]                  ·gc.alloc.rate:               867.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1510236.734 ±(99.9%) 121923.270 ops/s [Average]
[info]   (min, avg, max) = (1459908.381, 1510236.734, 1545563.068), stdev = 31663.086
[info]   CI (99.9%): [1388313.464, 1632160.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   902.963 ±(99.9%) 79.862 MB/sec [Average]
[info]   (min, avg, max) = (867.408, 902.963, 918.204), stdev = 20.740
[info]   CI (99.9%): [823.101, 982.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   941.004 ±(99.9%) 34.403 B/op [Average]
[info]   (min, avg, max) = (933.744, 941.004, 955.543), stdev = 8.934
[info]   CI (99.9%): [906.601, 975.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   799.792 ±(99.9%) 1146.281 MB/sec [Average]
[info]   (min, avg, max) = (666.135, 799.792, 1332.307), stdev = 297.686
[info]   CI (99.9%): [≈ 0, 1946.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   833.545 ±(99.9%) 1191.656 B/op [Average]
[info]   (min, avg, max) = (678.377, 833.545, 1386.485), stdev = 309.469
[info]   CI (99.9%): [≈ 0, 2025.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.19% complete, ETA 00:59:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006563.679 ops/s
[info] # Warmup Iteration   2: 1772647.334 ops/s
[info] # Warmup Iteration   3: 1901917.329 ops/s
[info] # Warmup Iteration   4: 1904580.590 ops/s
[info] # Warmup Iteration   5: 1903171.507 ops/s
[info] Iteration   1: 1905977.858 ops/s
[info]                  ·gc.alloc.rate:               668.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1846602.849 ops/s
[info]                  ·gc.alloc.rate:               660.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          563.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1911630.406 ops/s
[info]                  ·gc.alloc.rate:                   676.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1899127.993 ops/s
[info]                  ·gc.alloc.rate:               666.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 556.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1861416.439 ops/s
[info]                  ·gc.alloc.rate:                   652.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1884951.109 ±(99.9%) 111923.369 ops/s [Average]
[info]   (min, avg, max) = (1846602.849, 1884951.109, 1911630.406), stdev = 29066.144
[info]   CI (99.9%): [1773027.739, 1996874.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664.970 ±(99.9%) 34.388 MB/sec [Average]
[info]   (min, avg, max) = (652.445, 664.970, 676.313), stdev = 8.930
[info]   CI (99.9%): [630.582, 699.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   555.176 ±(99.9%) 18.749 B/op [Average]
[info]   (min, avg, max) = (551.617, 555.176, 563.046), stdev = 4.869
[info]   CI (99.9%): [536.427, 573.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.226 ±(99.9%) 1.475 MB/sec [Average]
[info]   (min, avg, max) = (670.815, 671.226, 671.849), stdev = 0.383
[info]   CI (99.9%): [669.751, 672.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   560.477 ±(99.9%) 33.803 B/op [Average]
[info]   (min, avg, max) = (552.538, 560.477, 571.732), stdev = 8.779
[info]   CI (99.9%): [526.674, 594.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.42% complete, ETA 00:58:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035731.129 ops/s
[info] # Warmup Iteration   2: 1845902.483 ops/s
[info] # Warmup Iteration   3: 1947285.454 ops/s
[info] # Warmup Iteration   4: 2058964.477 ops/s
[info] # Warmup Iteration   5: 2059452.671 ops/s
[info] Iteration   1: 2057024.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2057477.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2057839.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2015502.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2050324.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2047633.754 ±(99.9%) 70185.677 ops/s [Average]
[info]   (min, avg, max) = (2015502.594, 2047633.754, 2057839.094), stdev = 18226.997
[info]   CI (99.9%): [1977448.077, 2117819.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:58:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6068.534 ops/s
[info] # Warmup Iteration   2: 38257.213 ops/s
[info] # Warmup Iteration   3: 41287.880 ops/s
[info] # Warmup Iteration   4: 41296.736 ops/s
[info] # Warmup Iteration   5: 41019.173 ops/s
[info] Iteration   1: 41413.608 ops/s
[info]                  ·gc.alloc.rate:                   2063.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              78415.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76476.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 41798.057 ops/s
[info]                  ·gc.alloc.rate:                   2082.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              78386.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75620.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 41860.147 ops/s
[info]                  ·gc.alloc.rate:               2084.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          78386.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75334.781 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 41768.968 ops/s
[info]                  ·gc.alloc.rate:               2081.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          78409.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75497.070 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 41671.481 ops/s
[info]                  ·gc.alloc.rate:               2089.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          78912.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75771.578 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   41702.452 ±(99.9%) 674.750 ops/s [Average]
[info]   (min, avg, max) = (41413.608, 41702.452, 41860.147), stdev = 175.230
[info]   CI (99.9%): [41027.702, 42377.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2080.208 ±(99.9%) 38.278 MB/sec [Average]
[info]   (min, avg, max) = (2063.414, 2080.208, 2089.498), stdev = 9.941
[info]   CI (99.9%): [2041.930, 2118.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78502.264 ±(99.9%) 885.044 B/op [Average]
[info]   (min, avg, max) = (78386.208, 78502.264, 78912.731), stdev = 229.843
[info]   CI (99.9%): [77617.220, 79387.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2006.978 ±(99.9%) 14.097 MB/sec [Average]
[info]   (min, avg, max) = (2003.718, 2006.978, 2012.390), stdev = 3.661
[info]   CI (99.9%): [1992.881, 2021.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75740.112 ±(99.9%) 1702.049 B/op [Average]
[info]   (min, avg, max) = (75334.781, 75740.112, 76476.862), stdev = 442.017
[info]   CI (99.9%): [74038.063, 77442.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.372), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.432 ±(99.9%) 213.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.432, 128.158), stdev = 55.511
[info]   CI (99.9%): [≈ 0, 245.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:58:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5075.208 ops/s
[info] # Warmup Iteration   2: 13283.157 ops/s
[info] # Warmup Iteration   3: 14329.585 ops/s
[info] # Warmup Iteration   4: 14536.424 ops/s
[info] # Warmup Iteration   5: 14461.565 ops/s
[info] Iteration   1: 14236.315 ops/s
[info]                  ·gc.alloc.rate:                   1874.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              207123.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222911.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 14224.000 ops/s
[info]                  ·gc.alloc.rate:                   1897.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              209949.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222804.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14375.629 ops/s
[info]                  ·gc.alloc.rate:                   1898.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              207851.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146587.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14563.288 ops/s
[info]                  ·gc.alloc.rate:                   1919.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              207452.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217058.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14615.264 ops/s
[info]                  ·gc.alloc.rate:               1949.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          209879.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 216328.423 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   14402.899 ±(99.9%) 697.706 ops/s [Average]
[info]   (min, avg, max) = (14224.000, 14402.899, 14615.264), stdev = 181.192
[info]   CI (99.9%): [13705.193, 15100.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1907.892 ±(99.9%) 108.756 MB/sec [Average]
[info]   (min, avg, max) = (1874.226, 1907.892, 1949.451), stdev = 28.244
[info]   CI (99.9%): [1799.136, 2016.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   208451.295 ±(99.9%) 5238.410 B/op [Average]
[info]   (min, avg, max) = (207123.474, 208451.295, 209949.077), stdev = 1360.398
[info]   CI (99.9%): [203212.886, 213689.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.536 ±(99.9%) 1159.281 MB/sec [Average]
[info]   (min, avg, max) = (1339.016, 1877.536, 2017.091), stdev = 301.062
[info]   CI (99.9%): [718.255, 3036.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   205138.233 ±(99.9%) 126596.114 B/op [Average]
[info]   (min, avg, max) = (146587.687, 205138.233, 222911.690), stdev = 32876.609
[info]   CI (99.9%): [78542.119, 331734.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.645), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84.683 ±(99.9%) 491.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84.683, 292.263), stdev = 127.530
[info]   CI (99.9%): [≈ 0, 575.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27017.156 ops/s
[info] # Warmup Iteration   2: 96618.367 ops/s
[info] # Warmup Iteration   3: 94178.761 ops/s
[info] # Warmup Iteration   4: 96630.494 ops/s
[info] # Warmup Iteration   5: 100477.592 ops/s
[info] Iteration   1: 100656.387 ops/s
[info]                  ·gc.alloc.rate:                   1349.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              21096.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20914.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 99898.089 ops/s
[info]                  ·gc.alloc.rate:               1332.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          20987.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21084.657 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 100004.556 ops/s
[info]                  ·gc.alloc.rate:                   1345.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              21171.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21071.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 100363.016 ops/s
[info]                  ·gc.alloc.rate:                   1336.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              20965.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21018.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 100653.485 ops/s
[info]                  ·gc.alloc.rate:                   1351.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              21124.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20895.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   100315.107 ±(99.9%) 1366.318 ops/s [Average]
[info]   (min, avg, max) = (99898.089, 100315.107, 100656.387), stdev = 354.828
[info]   CI (99.9%): [98948.789, 101681.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1342.952 ±(99.9%) 31.368 MB/sec [Average]
[info]   (min, avg, max) = (1332.153, 1342.952, 1351.013), stdev = 8.146
[info]   CI (99.9%): [1311.584, 1374.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21069.053 ±(99.9%) 343.236 B/op [Average]
[info]   (min, avg, max) = (20965.366, 21069.053, 21171.328), stdev = 89.137
[info]   CI (99.9%): [20725.817, 21412.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.325 ±(99.9%) 5.609 MB/sec [Average]
[info]   (min, avg, max) = (1336.311, 1338.325, 1340.261), stdev = 1.457
[info]   CI (99.9%): [1332.716, 1343.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20996.761 ±(99.9%) 338.389 B/op [Average]
[info]   (min, avg, max) = (20895.064, 20996.761, 21084.657), stdev = 87.879
[info]   CI (99.9%): [20658.372, 21335.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.789), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.121 ±(99.9%) 99.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.121, 59.414), stdev = 25.966
[info]   CI (99.9%): [≈ 0, 113.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125330.005 ops/s
[info] # Warmup Iteration   2: 240848.895 ops/s
[info] # Warmup Iteration   3: 250336.026 ops/s
[info] # Warmup Iteration   4: 251422.124 ops/s
[info] # Warmup Iteration   5: 251165.678 ops/s
[info] Iteration   1: 251946.407 ops/s
[info]                  ·gc.alloc.rate:               843.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          5271.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4194.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 252176.915 ops/s
[info]                  ·gc.alloc.rate:                   837.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              5228.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4190.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 252544.954 ops/s
[info]                  ·gc.alloc.rate:               838.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          5226.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4188.890 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 252308.921 ops/s
[info]                  ·gc.alloc.rate:               836.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          5215.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4192.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 252690.487 ops/s
[info]                  ·gc.alloc.rate:                   851.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              5304.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8372.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   252333.537 ±(99.9%) 1134.334 ops/s [Average]
[info]   (min, avg, max) = (251946.407, 252333.537, 252690.487), stdev = 294.583
[info]   CI (99.9%): [251199.203, 253467.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   841.700 ±(99.9%) 24.070 MB/sec [Average]
[info]   (min, avg, max) = (836.413, 841.700, 851.681), stdev = 6.251
[info]   CI (99.9%): [817.629, 865.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5249.255 ±(99.9%) 144.466 B/op [Average]
[info]   (min, avg, max) = (5215.469, 5249.255, 5304.606), stdev = 37.517
[info]   CI (99.9%): [5104.789, 5393.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.364 ±(99.9%) 1157.778 MB/sec [Average]
[info]   (min, avg, max) = (671.501, 806.364, 1344.221), stdev = 300.671
[info]   CI (99.9%): [≈ 0, 1964.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5027.805 ±(99.9%) 7199.378 B/op [Average]
[info]   (min, avg, max) = (4188.890, 5027.805, 8372.345), stdev = 1869.655
[info]   CI (99.9%): [≈ 0, 12227.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.260), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.58% complete, ETA 00:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1118.592 ops/s
[info] # Warmup Iteration   2: 10373.971 ops/s
[info] # Warmup Iteration   3: 12597.330 ops/s
[info] # Warmup Iteration   4: 12582.449 ops/s
[info] # Warmup Iteration   5: 12890.329 ops/s
[info] Iteration   1: 12795.151 ops/s
[info]                  ·gc.alloc.rate:                   1945.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              239321.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246740.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 12778.561 ops/s
[info]                  ·gc.alloc.rate:                   1947.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              239915.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247109.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 12725.730 ops/s
[info]                  ·gc.alloc.rate:                   1947.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              240803.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247314.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12818.727 ops/s
[info]                  ·gc.alloc.rate:               1973.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          242283.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 245357.460 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 12897.960 ops/s
[info]                  ·gc.alloc.rate:               1984.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          242192.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244098.739 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   12803.226 ±(99.9%) 242.727 ops/s [Average]
[info]   (min, avg, max) = (12725.730, 12803.226, 12897.960), stdev = 63.036
[info]   CI (99.9%): [12560.498, 13045.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1959.871 ±(99.9%) 69.888 MB/sec [Average]
[info]   (min, avg, max) = (1945.713, 1959.871, 1984.767), stdev = 18.150
[info]   CI (99.9%): [1889.983, 2029.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   240903.213 ±(99.9%) 5114.824 B/op [Average]
[info]   (min, avg, max) = (239321.045, 240903.213, 242283.350), stdev = 1328.304
[info]   CI (99.9%): [235788.388, 246018.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.282 ±(99.9%) 14.028 MB/sec [Average]
[info]   (min, avg, max) = (1998.820, 2002.282, 2006.410), stdev = 3.643
[info]   CI (99.9%): [1988.254, 2016.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   246124.333 ±(99.9%) 5258.576 B/op [Average]
[info]   (min, avg, max) = (244098.739, 246124.333, 247314.987), stdev = 1365.635
[info]   CI (99.9%): [240865.757, 251382.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 7.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.517), stdev = 2.011
[info]   CI (99.9%): [≈ 0, 8.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   113.320 ±(99.9%) 953.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.320, 556.346), stdev = 247.679
[info]   CI (99.9%): [≈ 0, 1067.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.81% complete, ETA 00:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9793.218 ops/s
[info] # Warmup Iteration   2: 32038.396 ops/s
[info] # Warmup Iteration   3: 32859.646 ops/s
[info] # Warmup Iteration   4: 31960.624 ops/s
[info] # Warmup Iteration   5: 31430.203 ops/s
[info] Iteration   1: 32983.130 ops/s
[info]                  ·gc.alloc.rate:               2760.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          131702.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127782.088 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 33149.653 ops/s
[info]                  ·gc.alloc.rate:                   2784.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              132190.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127122.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33075.873 ops/s
[info]                  ·gc.alloc.rate:                   2781.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              132344.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127672.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33216.523 ops/s
[info]                  ·gc.alloc.rate:               2793.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          132340.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127481.743 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 32776.378 ops/s
[info]                  ·gc.alloc.rate:               2757.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          132426.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129540.701 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33040.311 ±(99.9%) 659.127 ops/s [Average]
[info]   (min, avg, max) = (32776.378, 33040.311, 33216.523), stdev = 171.173
[info]   CI (99.9%): [32381.184, 33699.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2775.361 ±(99.9%) 59.798 MB/sec [Average]
[info]   (min, avg, max) = (2757.941, 2775.361, 2793.000), stdev = 15.529
[info]   CI (99.9%): [2715.563, 2835.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   132200.927 ±(99.9%) 1122.225 B/op [Average]
[info]   (min, avg, max) = (131702.334, 132200.927, 132426.838), stdev = 291.438
[info]   CI (99.9%): [131078.701, 133323.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.413 ±(99.9%) 33.413 MB/sec [Average]
[info]   (min, avg, max) = (2677.603, 2685.413, 2697.834), stdev = 8.677
[info]   CI (99.9%): [2652.000, 2718.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127919.950 ±(99.9%) 3619.788 B/op [Average]
[info]   (min, avg, max) = (127122.643, 127919.950, 129540.701), stdev = 940.048
[info]   CI (99.9%): [124300.162, 131539.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.594 ±(99.9%) 3.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 1.981), stdev = 0.886
[info]   CI (99.9%): [≈ 0, 4.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.04% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35539.838 ops/s
[info] # Warmup Iteration   2: 97684.806 ops/s
[info] # Warmup Iteration   3: 101722.386 ops/s
[info] # Warmup Iteration   4: 106204.009 ops/s
[info] # Warmup Iteration   5: 106672.086 ops/s
[info] Iteration   1: 105827.212 ops/s
[info]                  ·gc.alloc.rate:               1479.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          22000.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19793.051 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 106561.249 ops/s
[info]                  ·gc.alloc.rate:                   1512.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              22337.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19677.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 105038.360 ops/s
[info]                  ·gc.alloc.rate:               1492.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          22366.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29998.241 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 106471.324 ops/s
[info]                  ·gc.alloc.rate:               1498.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          22150.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19763.272 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 97020.810 ops/s
[info]                  ·gc.alloc.rate:               1388.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          22518.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21730.074 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   104183.791 ±(99.9%) 15596.835 ops/s [Average]
[info]   (min, avg, max) = (97020.810, 104183.791, 106561.249), stdev = 4050.448
[info]   CI (99.9%): [88586.956, 119780.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1474.375 ±(99.9%) 190.850 MB/sec [Average]
[info]   (min, avg, max) = (1388.381, 1474.375, 1512.965), stdev = 49.563
[info]   CI (99.9%): [1283.525, 1665.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22274.890 ±(99.9%) 776.636 B/op [Average]
[info]   (min, avg, max) = (22000.229, 22274.890, 22518.994), stdev = 201.690
[info]   CI (99.9%): [21498.254, 23051.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1468.490 ±(99.9%) 1148.781 MB/sec [Average]
[info]   (min, avg, max) = (1330.905, 1468.490, 2002.132), stdev = 298.335
[info]   CI (99.9%): [319.710, 2617.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22192.359 ±(99.9%) 17126.589 B/op [Average]
[info]   (min, avg, max) = (19677.157, 22192.359, 29998.241), stdev = 4447.721
[info]   CI (99.9%): [5065.770, 39318.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.307), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.27% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111919.543 ops/s
[info] # Warmup Iteration   2: 172924.089 ops/s
[info] # Warmup Iteration   3: 178742.519 ops/s
[info] # Warmup Iteration   4: 178592.762 ops/s
[info] # Warmup Iteration   5: 172962.410 ops/s
[info] Iteration   1: 179072.123 ops/s
[info]                  ·gc.alloc.rate:               594.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          5228.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5896.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 168562.935 ops/s
[info]                  ·gc.alloc.rate:               568.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          5306.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6263.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 167402.928 ops/s
[info]                  ·gc.alloc.rate:      533.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 178436.098 ops/s
[info]                  ·gc.alloc.rate:               589.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          5198.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5922.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 178350.293 ops/s
[info]                  ·gc.alloc.rate:               586.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          5179.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5925.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   174364.875 ±(99.9%) 22514.565 ops/s [Average]
[info]   (min, avg, max) = (167402.928, 174364.875, 179072.123), stdev = 5846.961
[info]   CI (99.9%): [151850.311, 196879.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   574.628 ±(99.9%) 96.408 MB/sec [Average]
[info]   (min, avg, max) = (533.561, 574.628, 594.935), stdev = 25.037
[info]   CI (99.9%): [478.220, 671.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5185.779 ±(99.9%) 410.050 B/op [Average]
[info]   (min, avg, max) = (5016.003, 5185.779, 5306.226), stdev = 106.489
[info]   CI (99.9%): [4775.729, 5595.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.934 ±(99.9%) 1155.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.934, 671.467), stdev = 300.156
[info]   CI (99.9%): [≈ 0, 1692.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4801.522 ±(99.9%) 10352.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4801.522, 6263.553), stdev = 2688.405
[info]   CI (99.9%): [≈ 0, 15153.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 51.50% complete, ETA 00:56:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103186.175 ops/s
[info] # Warmup Iteration   2: 188734.916 ops/s
[info] # Warmup Iteration   3: 190661.133 ops/s
[info] # Warmup Iteration   4: 192250.163 ops/s
[info] # Warmup Iteration   5: 192009.014 ops/s
[info] Iteration   1: 192231.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 192260.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 192217.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 192191.744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 191713.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   192122.997 ±(99.9%) 887.566 ops/s [Average]
[info]   (min, avg, max) = (191713.103, 192122.997, 192260.993), stdev = 230.498
[info]   CI (99.9%): [191235.432, 193010.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.73% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9541.995 ops/s
[info] # Warmup Iteration   2: 44022.145 ops/s
[info] # Warmup Iteration   3: 48162.519 ops/s
[info] # Warmup Iteration   4: 48681.326 ops/s
[info] # Warmup Iteration   5: 49434.399 ops/s
[info] Iteration   1: 49384.354 ops/s
[info]                  ·gc.alloc.rate:               3485.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          111060.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3343.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106532.555 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 49309.395 ops/s
[info]                  ·gc.alloc.rate:                   3494.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              111514.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107000.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 48550.476 ops/s
[info]                  ·gc.alloc.rate:                   3443.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              111564.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109062.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 48490.350 ops/s
[info]                  ·gc.alloc.rate:               3438.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          111602.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109575.306 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 49526.518 ops/s
[info]                  ·gc.alloc.rate:               3510.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          111554.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107554.398 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49052.219 ±(99.9%) 1895.103 ops/s [Average]
[info]   (min, avg, max) = (48490.350, 49052.219, 49526.518), stdev = 492.152
[info]   CI (99.9%): [47157.115, 50947.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3474.439 ±(99.9%) 122.953 MB/sec [Average]
[info]   (min, avg, max) = (3438.542, 3474.439, 3510.454), stdev = 31.931
[info]   CI (99.9%): [3351.486, 3597.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111459.447 ±(99.9%) 866.762 B/op [Average]
[info]   (min, avg, max) = (111060.722, 111459.447, 111602.534), stdev = 225.095
[info]   CI (99.9%): [110592.686, 112326.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3364.611 ±(99.9%) 64.296 MB/sec [Average]
[info]   (min, avg, max) = (3343.481, 3364.611, 3384.567), stdev = 16.698
[info]   CI (99.9%): [3300.315, 3428.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107945.015 ±(99.9%) 5073.756 B/op [Average]
[info]   (min, avg, max) = (106532.555, 107945.015, 109575.306), stdev = 1317.638
[info]   CI (99.9%): [102871.259, 113018.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.268 ±(99.9%) 1.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.268, 0.675), stdev = 0.367
[info]   CI (99.9%): [≈ 0, 1.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.96% complete, ETA 00:55:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4834.895 ops/s
[info] # Warmup Iteration   2: 24118.584 ops/s
[info] # Warmup Iteration   3: 25986.811 ops/s
[info] # Warmup Iteration   4: 25843.313 ops/s
[info] # Warmup Iteration   5: 24438.874 ops/s
[info] Iteration   1: 25797.287 ops/s
[info]                  ·gc.alloc.rate:                   1393.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              85005.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81905.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 26192.919 ops/s
[info]                  ·gc.alloc.rate:                   1410.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              84725.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80690.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26105.444 ops/s
[info]                  ·gc.alloc.rate:                   1404.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              84683.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81005.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26290.257 ops/s
[info]                  ·gc.alloc.rate:                   1413.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              84634.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80355.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25673.774 ops/s
[info]                  ·gc.alloc.rate:                   1379.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              84595.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82079.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26011.936 ±(99.9%) 1017.671 ops/s [Average]
[info]   (min, avg, max) = (25673.774, 26011.936, 26290.257), stdev = 264.286
[info]   CI (99.9%): [24994.265, 27029.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1400.368 ±(99.9%) 53.047 MB/sec [Average]
[info]   (min, avg, max) = (1379.964, 1400.368, 1413.803), stdev = 13.776
[info]   CI (99.9%): [1347.320, 1453.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84728.781 ±(99.9%) 625.618 B/op [Average]
[info]   (min, avg, max) = (84595.050, 84728.781, 85005.649), stdev = 162.471
[info]   CI (99.9%): [84103.163, 85354.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.072 ±(99.9%) 7.044 MB/sec [Average]
[info]   (min, avg, max) = (1338.929, 1342.072, 1343.659), stdev = 1.829
[info]   CI (99.9%): [1335.028, 1349.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81207.418 ±(99.9%) 2907.525 B/op [Average]
[info]   (min, avg, max) = (80355.999, 81207.418, 82079.514), stdev = 755.075
[info]   CI (99.9%): [78299.893, 84114.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 5.223 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.791, 3.164), stdev = 1.357
[info]   CI (99.9%): [≈ 0, 6.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.648 ±(99.9%) 314.891 B/op [Average]
[info]   (min, avg, max) = (1.251, 47.648, 190.767), stdev = 81.776
[info]   CI (99.9%): [≈ 0, 362.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.19% complete, ETA 00:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3435.427 ops/s
[info] # Warmup Iteration   2: 27103.352 ops/s
[info] # Warmup Iteration   3: 29114.418 ops/s
[info] # Warmup Iteration   4: 28970.602 ops/s
[info] # Warmup Iteration   5: 27559.217 ops/s
[info] Iteration   1: 29241.878 ops/s
[info]                  ·gc.alloc.rate:               1200.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          64610.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71904.506 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 29254.731 ops/s
[info]                  ·gc.alloc.rate:                   1196.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              64392.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71926.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 29393.861 ops/s
[info]                  ·gc.alloc.rate:               1195.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          64004.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35808.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 29277.576 ops/s
[info]                  ·gc.alloc.rate:               1191.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          64063.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71974.789 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 29126.607 ops/s
[info]                  ·gc.alloc.rate:                   1198.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              64754.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72383.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29258.930 ±(99.9%) 367.187 ops/s [Average]
[info]   (min, avg, max) = (29126.607, 29258.930, 29393.861), stdev = 95.357
[info]   CI (99.9%): [28891.744, 29626.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1196.679 ±(99.9%) 13.052 MB/sec [Average]
[info]   (min, avg, max) = (1191.769, 1196.679, 1200.820), stdev = 3.390
[info]   CI (99.9%): [1183.627, 1209.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64364.981 ±(99.9%) 1268.997 B/op [Average]
[info]   (min, avg, max) = (64004.003, 64364.981, 64754.825), stdev = 329.555
[info]   CI (99.9%): [63095.984, 65633.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.149 ±(99.9%) 1152.344 MB/sec [Average]
[info]   (min, avg, max) = (668.821, 1204.149, 1339.644), stdev = 299.260
[info]   CI (99.9%): [51.805, 2356.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64799.595 ±(99.9%) 62410.048 B/op [Average]
[info]   (min, avg, max) = (35808.514, 64799.595, 72383.851), stdev = 16207.691
[info]   CI (99.9%): [2389.547, 127209.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 7.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.247), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.340 ±(99.9%) 394.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.340, 229.461), stdev = 102.372
[info]   CI (99.9%): [≈ 0, 440.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.42% complete, ETA 00:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350149.924 ops/s
[info] # Warmup Iteration   2: 621469.522 ops/s
[info] # Warmup Iteration   3: 618015.661 ops/s
[info] # Warmup Iteration   4: 640668.254 ops/s
[info] # Warmup Iteration   5: 625393.857 ops/s
[info] Iteration   1: 619647.285 ops/s
[info]                  ·gc.alloc.rate:                   1683.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              4276.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5126.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 642242.536 ops/s
[info]                  ·gc.alloc.rate:                   1706.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4180.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3300.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 635139.685 ops/s
[info]                  ·gc.alloc.rate:                   1719.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              4259.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4995.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 609232.330 ops/s
[info]                  ·gc.alloc.rate:                   1625.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              4198.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3469.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 644288.309 ops/s
[info]                  ·gc.alloc.rate:                   1730.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   630110.029 ±(99.9%) 58361.908 ops/s [Average]
[info]   (min, avg, max) = (609232.330, 630110.029, 644288.309), stdev = 15156.402
[info]   CI (99.9%): [571748.121, 688471.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1692.958 ±(99.9%) 160.320 MB/sec [Average]
[info]   (min, avg, max) = (1625.335, 1692.958, 1730.480), stdev = 41.635
[info]   CI (99.9%): [1532.638, 1853.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4228.308 ±(99.9%) 154.213 B/op [Average]
[info]   (min, avg, max) = (4180.541, 4228.308, 4276.179), stdev = 40.049
[info]   CI (99.9%): [4074.095, 4382.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.609 ±(99.9%) 1419.486 MB/sec [Average]
[info]   (min, avg, max) = (1343.007, 1613.609, 2018.531), stdev = 368.636
[info]   CI (99.9%): [194.123, 3033.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4034.573 ±(99.9%) 3623.524 B/op [Average]
[info]   (min, avg, max) = (3280.471, 4034.573, 5126.824), stdev = 941.018
[info]   CI (99.9%): [411.049, 7658.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.148 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.579, 2.498), stdev = 1.077
[info]   CI (99.9%): [≈ 0, 4.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.423 ±(99.9%) 10.155 B/op [Average]
[info]   (min, avg, max) = (0.051, 1.423, 6.122), stdev = 2.637
[info]   CI (99.9%): [≈ 0, 11.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.66% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1598.307 ops/s
[info] # Warmup Iteration   2: 18598.192 ops/s
[info] # Warmup Iteration   3: 24033.355 ops/s
[info] # Warmup Iteration   4: 23369.229 ops/s
[info] # Warmup Iteration   5: 23661.559 ops/s
[info] Iteration   1: 23942.575 ops/s
[info]                  ·gc.alloc.rate:                   1785.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              117386.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87815.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24145.087 ops/s
[info]                  ·gc.alloc.rate:                   1808.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              117856.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130892.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23951.592 ops/s
[info]                  ·gc.alloc.rate:                   1795.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              117991.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88154.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23484.797 ops/s
[info]                  ·gc.alloc.rate:                   1761.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              118050.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134888.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23990.518 ops/s
[info]                  ·gc.alloc.rate:                   1811.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              118820.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132197.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23902.914 ±(99.9%) 953.155 ops/s [Average]
[info]   (min, avg, max) = (23484.797, 23902.914, 24145.087), stdev = 247.531
[info]   CI (99.9%): [22949.759, 24856.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1792.492 ±(99.9%) 76.988 MB/sec [Average]
[info]   (min, avg, max) = (1761.646, 1792.492, 1811.176), stdev = 19.993
[info]   CI (99.9%): [1715.504, 1869.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118021.156 ±(99.9%) 1992.634 B/op [Average]
[info]   (min, avg, max) = (117386.627, 118021.156, 118820.992), stdev = 517.481
[info]   CI (99.9%): [116028.521, 120013.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.735 ±(99.9%) 1420.004 MB/sec [Average]
[info]   (min, avg, max) = (1335.979, 1742.735, 2015.070), stdev = 368.771
[info]   CI (99.9%): [322.731, 3162.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114789.742 ±(99.9%) 94386.434 B/op [Average]
[info]   (min, avg, max) = (87815.558, 114789.742, 134888.331), stdev = 24511.857
[info]   CI (99.9%): [20403.308, 209176.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.337, 1.311), stdev = 0.557
[info]   CI (99.9%): [≈ 0, 2.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.026 ±(99.9%) 139.635 B/op [Average]
[info]   (min, avg, max) = (1.366, 22.026, 85.485), stdev = 36.263
[info]   CI (99.9%): [≈ 0, 161.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.89% complete, ETA 00:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23052.858 ops/s
[info] # Warmup Iteration   2: 70049.755 ops/s
[info] # Warmup Iteration   3: 69871.502 ops/s
[info] # Warmup Iteration   4: 72004.659 ops/s
[info] # Warmup Iteration   5: 72901.790 ops/s
[info] Iteration   1: 73105.531 ops/s
[info]                  ·gc.alloc.rate:                   1946.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              41900.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43381.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 73930.849 ops/s
[info]                  ·gc.alloc.rate:                   1954.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              41590.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42840.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 73627.729 ops/s
[info]                  ·gc.alloc.rate:                   1972.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              42169.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42932.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 74189.934 ops/s
[info]                  ·gc.alloc.rate:               1961.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          41603.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28404.439 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 74018.080 ops/s
[info]                  ·gc.alloc.rate:                   1983.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              42181.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42719.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   73774.425 ±(99.9%) 1639.830 ops/s [Average]
[info]   (min, avg, max) = (73105.531, 73774.425, 74189.934), stdev = 425.859
[info]   CI (99.9%): [72134.595, 75414.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1963.828 ±(99.9%) 56.961 MB/sec [Average]
[info]   (min, avg, max) = (1946.413, 1963.828, 1983.830), stdev = 14.793
[info]   CI (99.9%): [1906.867, 2020.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41889.054 ±(99.9%) 1114.433 B/op [Average]
[info]   (min, avg, max) = (41590.631, 41889.054, 42181.305), stdev = 289.415
[info]   CI (99.9%): [40774.620, 43003.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1877.085 ±(99.9%) 1157.747 MB/sec [Average]
[info]   (min, avg, max) = (1339.265, 1877.085, 2015.203), stdev = 300.663
[info]   CI (99.9%): [719.338, 3034.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40055.993 ±(99.9%) 25099.327 B/op [Average]
[info]   (min, avg, max) = (28404.439, 40055.993, 43381.736), stdev = 6518.215
[info]   CI (99.9%): [14956.667, 65155.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.915), stdev = 1.239
[info]   CI (99.9%): [≈ 0, 5.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.362 ±(99.9%) 102.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.362, 62.742), stdev = 26.686
[info]   CI (99.9%): [≈ 0, 119.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.12% complete, ETA 00:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46988.850 ops/s
[info] # Warmup Iteration   2: 175746.936 ops/s
[info] # Warmup Iteration   3: 182183.890 ops/s
[info] # Warmup Iteration   4: 186359.782 ops/s
[info] # Warmup Iteration   5: 179100.393 ops/s
[info] Iteration   1: 184114.888 ops/s
[info]                  ·gc.alloc.rate:                   2058.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              17599.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17183.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 178854.725 ops/s
[info]                  ·gc.alloc.rate:                   2000.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              17607.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17650.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 186124.972 ops/s
[info]                  ·gc.alloc.rate:               2068.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          17491.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16949.858 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 184789.914 ops/s
[info]                  ·gc.alloc.rate:               2081.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          17728.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17086.203 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 180869.309 ops/s
[info]                  ·gc.alloc.rate:               2039.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          17743.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17479.165 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   182950.762 ±(99.9%) 11539.611 ops/s [Average]
[info]   (min, avg, max) = (178854.725, 182950.762, 186124.972), stdev = 2996.800
[info]   CI (99.9%): [171411.150, 194490.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2049.768 ±(99.9%) 120.776 MB/sec [Average]
[info]   (min, avg, max) = (2000.981, 2049.768, 2081.467), stdev = 31.365
[info]   CI (99.9%): [1928.992, 2170.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17634.023 ±(99.9%) 399.762 B/op [Average]
[info]   (min, avg, max) = (17491.207, 17634.023, 17743.140), stdev = 103.817
[info]   CI (99.9%): [17234.261, 18033.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.040 ±(99.9%) 8.841 MB/sec [Average]
[info]   (min, avg, max) = (2004.525, 2007.040, 2010.131), stdev = 2.296
[info]   CI (99.9%): [1998.199, 2015.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17269.736 ±(99.9%) 1109.478 B/op [Average]
[info]   (min, avg, max) = (16949.858, 17269.736, 17650.170), stdev = 288.128
[info]   CI (99.9%): [16160.258, 18379.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.789), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.514 ±(99.9%) 55.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.514, 32.388), stdev = 14.464
[info]   CI (99.9%): [≈ 0, 62.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.35% complete, ETA 00:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 890404.205 ops/s
[info] # Warmup Iteration   2: 1385554.321 ops/s
[info] # Warmup Iteration   3: 1508469.215 ops/s
[info] # Warmup Iteration   4: 1505288.821 ops/s
[info] # Warmup Iteration   5: 1498080.355 ops/s
[info] Iteration   1: 1505792.594 ops/s
[info]                  ·gc.alloc.rate:                   1278.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1499553.207 ops/s
[info]                  ·gc.alloc.rate:               1292.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          1356.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1410.859 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 1468156.907 ops/s
[info]                  ·gc.alloc.rate:               1267.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          1358.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1441.787 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1524113.120 ops/s
[info]                  ·gc.alloc.rate:                   1316.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1530612.683 ops/s
[info]                  ·gc.alloc.rate:                   1320.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1357.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1505645.702 ±(99.9%) 94457.509 ops/s [Average]
[info]   (min, avg, max) = (1468156.907, 1505645.702, 1530612.683), stdev = 24530.315
[info]   CI (99.9%): [1411188.193, 1600103.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1295.159 ±(99.9%) 89.655 MB/sec [Average]
[info]   (min, avg, max) = (1267.319, 1295.159, 1320.880), stdev = 23.283
[info]   CI (99.9%): [1205.503, 1384.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1353.636 ±(99.9%) 37.354 B/op [Average]
[info]   (min, avg, max) = (1336.371, 1353.636, 1359.046), stdev = 9.701
[info]   CI (99.9%): [1316.282, 1390.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.460 ±(99.9%) 3.936 MB/sec [Average]
[info]   (min, avg, max) = (1343.438, 1344.460, 1345.894), stdev = 1.022
[info]   CI (99.9%): [1340.524, 1348.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1405.472 ±(99.9%) 90.456 B/op [Average]
[info]   (min, avg, max) = (1380.900, 1405.472, 1441.787), stdev = 23.491
[info]   CI (99.9%): [1315.016, 1495.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.123), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 5.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.662 ±(99.9%) 5.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.224), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 53.58% complete, ETA 00:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695247.831 ops/s
[info] # Warmup Iteration   2: 1606378.539 ops/s
[info] # Warmup Iteration   3: 1671218.810 ops/s
[info] # Warmup Iteration   4: 1761056.759 ops/s
[info] # Warmup Iteration   5: 1770216.451 ops/s
[info] Iteration   1: 1769994.306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1771710.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1770326.470 ops/s
[info]                  ·gc.alloc.rate:      0.057 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1771762.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1770388.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1770836.485 ±(99.9%) 3217.208 ops/s [Average]
[info]   (min, avg, max) = (1769994.306, 1770836.485, 1771762.923), stdev = 835.499
[info]   CI (99.9%): [1767619.277, 1774053.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.012 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.012, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.81% complete, ETA 00:53:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37058.745 ops/s
[info] # Warmup Iteration   2: 142153.572 ops/s
[info] # Warmup Iteration   3: 146861.918 ops/s
[info] # Warmup Iteration   4: 150613.468 ops/s
[info] # Warmup Iteration   5: 154162.143 ops/s
[info] Iteration   1: 153705.448 ops/s
[info]                  ·gc.alloc.rate:               2009.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          20575.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20439.074 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 152065.964 ops/s
[info]                  ·gc.alloc.rate:                   1977.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              20455.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20700.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 152119.723 ops/s
[info]                  ·gc.alloc.rate:                   1965.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              20330.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20762.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.862 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 155145.028 ops/s
[info]                  ·gc.alloc.rate:                   2015.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              20443.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20411.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 155378.712 ops/s
[info]                  ·gc.alloc.rate:                   2032.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              20590.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20441.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   153682.975 ±(99.9%) 6110.315 ops/s [Average]
[info]   (min, avg, max) = (152065.964, 153682.975, 155378.712), stdev = 1586.829
[info]   CI (99.9%): [147572.660, 159793.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2000.004 ±(99.9%) 107.086 MB/sec [Average]
[info]   (min, avg, max) = (1965.553, 2000.004, 2032.741), stdev = 27.810
[info]   CI (99.9%): [1892.918, 2107.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20478.841 ±(99.9%) 410.643 B/op [Average]
[info]   (min, avg, max) = (20330.331, 20478.841, 20590.033), stdev = 106.643
[info]   CI (99.9%): [20068.198, 20889.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2006.889 ±(99.9%) 33.609 MB/sec [Average]
[info]   (min, avg, max) = (1996.067, 2006.889, 2018.058), stdev = 8.728
[info]   CI (99.9%): [1973.280, 2040.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20551.095 ±(99.9%) 641.440 B/op [Average]
[info]   (min, avg, max) = (20411.973, 20551.095, 20762.414), stdev = 166.580
[info]   CI (99.9%): [19909.655, 21192.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.342 ±(99.9%) 1.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.342, 0.862), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.04% complete, ETA 00:53:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5069.017 ops/s
[info] # Warmup Iteration   2: 39394.910 ops/s
[info] # Warmup Iteration   3: 42507.286 ops/s
[info] # Warmup Iteration   4: 42650.176 ops/s
[info] # Warmup Iteration   5: 43335.560 ops/s
[info] Iteration   1: 42647.493 ops/s
[info]                  ·gc.alloc.rate:               1570.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          57971.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49364.420 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 43618.732 ops/s
[info]                  ·gc.alloc.rate:               1592.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          57446.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48287.470 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 43652.672 ops/s
[info]                  ·gc.alloc.rate:                   1619.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              58386.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72388.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42881.743 ops/s
[info]                  ·gc.alloc.rate:               1590.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          58371.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48994.994 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42806.632 ops/s
[info]                  ·gc.alloc.rate:                   1587.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              58367.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49032.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   43121.455 ±(99.9%) 1837.338 ops/s [Average]
[info]   (min, avg, max) = (42647.493, 43121.455, 43652.672), stdev = 477.151
[info]   CI (99.9%): [41284.117, 44958.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1592.224 ±(99.9%) 67.941 MB/sec [Average]
[info]   (min, avg, max) = (1570.877, 1592.224, 1619.849), stdev = 17.644
[info]   CI (99.9%): [1524.283, 1660.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58108.780 ±(99.9%) 1575.862 B/op [Average]
[info]   (min, avg, max) = (57446.898, 58108.780, 58386.778), stdev = 409.246
[info]   CI (99.9%): [56532.918, 59684.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.617 ±(99.9%) 1157.436 MB/sec [Average]
[info]   (min, avg, max) = (1333.525, 1470.617, 2008.303), stdev = 300.583
[info]   CI (99.9%): [313.181, 2628.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53613.667 ±(99.9%) 40442.412 B/op [Average]
[info]   (min, avg, max) = (48287.470, 53613.667, 72388.467), stdev = 10502.766
[info]   CI (99.9%): [13171.255, 94056.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.289), stdev = 1.914
[info]   CI (99.9%): [≈ 0, 8.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.229 ±(99.9%) 265.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.229, 154.612), stdev = 68.977
[info]   CI (99.9%): [≈ 0, 296.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.27% complete, ETA 00:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381629.593 ops/s
[info] # Warmup Iteration   2: 774940.336 ops/s
[info] # Warmup Iteration   3: 761482.339 ops/s
[info] # Warmup Iteration   4: 787390.369 ops/s
[info] # Warmup Iteration   5: 787460.684 ops/s
[info] Iteration   1: 783487.626 ops/s
[info]                  ·gc.alloc.rate:                   1571.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              3156.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4053.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 784366.494 ops/s
[info]                  ·gc.alloc.rate:                   1570.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              3150.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2700.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 782512.281 ops/s
[info]                  ·gc.alloc.rate:                   1567.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2705.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 790455.454 ops/s
[info]                  ·gc.alloc.rate:                   1581.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              3149.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2675.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 783376.627 ops/s
[info]                  ·gc.alloc.rate:                   1580.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3175.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4044.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   784839.696 ±(99.9%) 12350.034 ops/s [Average]
[info]   (min, avg, max) = (782512.281, 784839.696, 790455.454), stdev = 3207.265
[info]   CI (99.9%): [772489.662, 797189.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1574.288 ±(99.9%) 25.106 MB/sec [Average]
[info]   (min, avg, max) = (1567.170, 1574.288, 1581.860), stdev = 6.520
[info]   CI (99.9%): [1549.182, 1599.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3156.902 ±(99.9%) 41.527 B/op [Average]
[info]   (min, avg, max) = (3149.609, 3156.902, 3175.550), stdev = 10.784
[info]   CI (99.9%): [3115.376, 3198.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.177 ±(99.9%) 1413.890 MB/sec [Average]
[info]   (min, avg, max) = (1343.642, 1613.177, 2017.758), stdev = 367.183
[info]   CI (99.9%): [199.287, 3027.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3235.898 ±(99.9%) 2858.048 B/op [Average]
[info]   (min, avg, max) = (2675.297, 3235.898, 4053.185), stdev = 742.226
[info]   CI (99.9%): [377.850, 6093.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.211 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.629, 2.561), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 4.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.262 ±(99.9%) 8.448 B/op [Average]
[info]   (min, avg, max) = (0.041, 1.262, 5.138), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.50% complete, ETA 00:52:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918.624 ops/s
[info] # Warmup Iteration   2: 24161.719 ops/s
[info] # Warmup Iteration   3: 32409.885 ops/s
[info] # Warmup Iteration   4: 32113.469 ops/s
[info] # Warmup Iteration   5: 32260.979 ops/s
[info] Iteration   1: 32541.606 ops/s
[info]                  ·gc.alloc.rate:                   2321.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              112295.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129561.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32641.020 ops/s
[info]                  ·gc.alloc.rate:                   2312.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              111515.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97097.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 32765.921 ops/s
[info]                  ·gc.alloc.rate:                   2309.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              110942.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96900.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32408.701 ops/s
[info]                  ·gc.alloc.rate:                   2339.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              113596.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130881.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 32683.101 ops/s
[info]                  ·gc.alloc.rate:               2332.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          112292.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97531.137 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32608.070 ±(99.9%) 530.068 ops/s [Average]
[info]   (min, avg, max) = (32408.701, 32608.070, 32765.921), stdev = 137.657
[info]   CI (99.9%): [32078.002, 33138.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2323.270 ±(99.9%) 48.391 MB/sec [Average]
[info]   (min, avg, max) = (2309.802, 2323.270, 2339.193), stdev = 12.567
[info]   CI (99.9%): [2274.879, 2371.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112128.464 ±(99.9%) 3847.730 B/op [Average]
[info]   (min, avg, max) = (110942.226, 112128.464, 113596.933), stdev = 999.243
[info]   CI (99.9%): [108280.734, 115976.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.254 ±(99.9%) 1408.900 MB/sec [Average]
[info]   (min, avg, max) = (2013.868, 2286.254, 2695.127), stdev = 365.887
[info]   CI (99.9%): [877.354, 3695.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110394.517 ±(99.9%) 69724.697 B/op [Average]
[info]   (min, avg, max) = (96900.171, 110394.517, 130881.953), stdev = 18107.282
[info]   CI (99.9%): [40669.820, 180119.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.204 ±(99.9%) 1.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.958), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.865 ±(99.9%) 78.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.865, 46.312), stdev = 20.379
[info]   CI (99.9%): [≈ 0, 88.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.73% complete, ETA 00:52:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135801.712 ops/s
[info] # Warmup Iteration   2: 333463.635 ops/s
[info] # Warmup Iteration   3: 381504.795 ops/s
[info] # Warmup Iteration   4: 383511.711 ops/s
[info] # Warmup Iteration   5: 381642.301 ops/s
[info] Iteration   1: 381746.005 ops/s
[info]                  ·gc.alloc.rate:               1097.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          4526.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5514.470 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 384584.801 ops/s
[info]                  ·gc.alloc.rate:               1084.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          4439.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2738.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 382712.328 ops/s
[info]                  ·gc.alloc.rate:                   1092.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              4494.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5506.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 374452.396 ops/s
[info]                  ·gc.alloc.rate:                   1065.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              4480.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2816.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 375223.772 ops/s
[info]                  ·gc.alloc.rate:                   1071.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              4491.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5623.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   379743.860 ±(99.9%) 17717.761 ops/s [Average]
[info]   (min, avg, max) = (374452.396, 379743.860, 384584.801), stdev = 4601.246
[info]   CI (99.9%): [362026.099, 397461.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1082.532 ±(99.9%) 52.916 MB/sec [Average]
[info]   (min, avg, max) = (1065.892, 1082.532, 1097.925), stdev = 13.742
[info]   CI (99.9%): [1029.617, 1135.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4486.506 ±(99.9%) 120.074 B/op [Average]
[info]   (min, avg, max) = (4439.988, 4486.506, 4526.497), stdev = 31.183
[info]   CI (99.9%): [4366.431, 4606.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.334 ±(99.9%) 1412.021 MB/sec [Average]
[info]   (min, avg, max) = (669.140, 1071.334, 1340.888), stdev = 366.697
[info]   CI (99.9%): [≈ 0, 2483.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4439.814 ±(99.9%) 5846.787 B/op [Average]
[info]   (min, avg, max) = (2738.384, 4439.814, 5623.219), stdev = 1518.392
[info]   CI (99.9%): [≈ 0, 10286.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.227), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.759 ±(99.9%) 23.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.759, 13.534), stdev = 6.024
[info]   CI (99.9%): [≈ 0, 25.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.97% complete, ETA 00:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1033566.114 ops/s
[info] # Warmup Iteration   2: 1935877.203 ops/s
[info] # Warmup Iteration   3: 1823595.273 ops/s
[info] # Warmup Iteration   4: 1865289.956 ops/s
[info] # Warmup Iteration   5: 1873257.125 ops/s
[info] Iteration   1: 1866995.250 ops/s
[info]                  ·gc.alloc.rate:                   1107.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              933.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1896699.536 ops/s
[info]                  ·gc.alloc.rate:               1138.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1114.927 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1871708.978 ops/s
[info]                  ·gc.alloc.rate:                   1108.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              931.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1869524.076 ops/s
[info]                  ·gc.alloc.rate:                   1120.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              943.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1896456.543 ops/s
[info]                  ·gc.alloc.rate:                   1148.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1880276.877 ±(99.9%) 57660.695 ops/s [Average]
[info]   (min, avg, max) = (1866995.250, 1880276.877, 1896699.536), stdev = 14974.299
[info]   CI (99.9%): [1822616.181, 1937937.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1124.936 ±(99.9%) 70.891 MB/sec [Average]
[info]   (min, avg, max) = (1107.867, 1124.936, 1148.860), stdev = 18.410
[info]   CI (99.9%): [1054.045, 1195.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   941.491 ±(99.9%) 33.746 B/op [Average]
[info]   (min, avg, max) = (931.874, 941.491, 953.420), stdev = 8.764
[info]   CI (99.9%): [907.745, 975.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.702 ±(99.9%) 1419.733 MB/sec [Average]
[info]   (min, avg, max) = (671.457, 1075.702, 1345.705), stdev = 368.700
[info]   CI (99.9%): [≈ 0, 2495.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   899.046 ±(99.9%) 1172.295 B/op [Average]
[info]   (min, avg, max) = (565.209, 899.046, 1132.266), stdev = 304.441
[info]   CI (99.9%): [≈ 0, 2071.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.039), stdev = 1.350
[info]   CI (99.9%): [≈ 0, 5.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 4.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 2.522), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 55.20% complete, ETA 00:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1398954.270 ops/s
[info] # Warmup Iteration   2: 2228426.527 ops/s
[info] # Warmup Iteration   3: 2262466.314 ops/s
[info] # Warmup Iteration   4: 2254978.263 ops/s
[info] # Warmup Iteration   5: 2254660.177 ops/s
[info] Iteration   1: 2255003.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2254566.914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2254017.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2255635.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2254498.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2254744.571 ±(99.9%) 2343.636 ops/s [Average]
[info]   (min, avg, max) = (2254017.829, 2254744.571, 2255635.805), stdev = 608.635
[info]   CI (99.9%): [2252400.935, 2257088.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.43% complete, ETA 00:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32365.163 ops/s
[info] # Warmup Iteration   2: 233405.731 ops/s
[info] # Warmup Iteration   3: 241335.659 ops/s
[info] # Warmup Iteration   4: 249049.774 ops/s
[info] # Warmup Iteration   5: 244710.929 ops/s
[info] Iteration   1: 241218.607 ops/s
[info]                  ·gc.alloc.rate:               1590.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          10375.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8705.753 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 239970.147 ops/s
[info]                  ·gc.alloc.rate:                   1601.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              10504.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8768.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 248840.475 ops/s
[info]                  ·gc.alloc.rate:               1662.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          10514.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12714.034 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 249097.305 ops/s
[info]                  ·gc.alloc.rate:                   1650.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              10426.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8489.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 246317.056 ops/s
[info]                  ·gc.alloc.rate:                   1672.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12909.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   245088.718 ±(99.9%) 16430.882 ops/s [Average]
[info]   (min, avg, max) = (239970.147, 245088.718, 249097.305), stdev = 4267.048
[info]   CI (99.9%): [228657.836, 261519.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1635.499 ±(99.9%) 143.481 MB/sec [Average]
[info]   (min, avg, max) = (1590.094, 1635.499, 1672.869), stdev = 37.261
[info]   CI (99.9%): [1492.018, 1778.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10501.946 ±(99.9%) 458.563 B/op [Average]
[info]   (min, avg, max) = (10375.229, 10501.946, 10688.615), stdev = 119.087
[info]   CI (99.9%): [10043.383, 10960.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1609.142 ±(99.9%) 1428.156 MB/sec [Average]
[info]   (min, avg, max) = (1334.232, 1609.142, 2020.466), stdev = 370.888
[info]   CI (99.9%): [180.986, 3037.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10317.510 ±(99.9%) 8780.867 B/op [Average]
[info]   (min, avg, max) = (8489.284, 10317.510, 12909.545), stdev = 2280.363
[info]   CI (99.9%): [1536.644, 19098.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 0.546), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.66% complete, ETA 00:51:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18213.052 ops/s
[info] # Warmup Iteration   2: 68644.728 ops/s
[info] # Warmup Iteration   3: 69414.118 ops/s
[info] # Warmup Iteration   4: 71693.328 ops/s
[info] # Warmup Iteration   5: 72442.395 ops/s
[info] Iteration   1: 73098.615 ops/s
[info]                  ·gc.alloc.rate:               1601.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          34478.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28884.890 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 72484.479 ops/s
[info]                  ·gc.alloc.rate:                   1622.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              35215.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43725.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 72575.226 ops/s
[info]                  ·gc.alloc.rate:                   1599.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              34683.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29079.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72621.209 ops/s
[info]                  ·gc.alloc.rate:               1599.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          34672.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29003.596 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 72772.381 ops/s
[info]                  ·gc.alloc.rate:                   1629.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              35226.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43391.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72710.382 ±(99.9%) 926.997 ops/s [Average]
[info]   (min, avg, max) = (72484.479, 72710.382, 73098.615), stdev = 240.738
[info]   CI (99.9%): [71783.384, 73637.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1610.514 ±(99.9%) 53.918 MB/sec [Average]
[info]   (min, avg, max) = (1599.762, 1610.514, 1629.085), stdev = 14.002
[info]   CI (99.9%): [1556.596, 1664.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34855.433 ±(99.9%) 1323.026 B/op [Average]
[info]   (min, avg, max) = (34478.591, 34855.433, 35226.066), stdev = 343.586
[info]   CI (99.9%): [33532.408, 36178.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.436 ±(99.9%) 1412.858 MB/sec [Average]
[info]   (min, avg, max) = (1338.295, 1608.436, 2014.025), stdev = 366.915
[info]   CI (99.9%): [195.578, 3021.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34816.881 ±(99.9%) 30731.070 B/op [Average]
[info]   (min, avg, max) = (28884.890, 34816.881, 43725.019), stdev = 7980.761
[info]   CI (99.9%): [4085.812, 65547.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.061), stdev = 1.323
[info]   CI (99.9%): [≈ 0, 5.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.990 ±(99.9%) 110.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.990, 66.445), stdev = 28.713
[info]   CI (99.9%): [≈ 0, 127.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.89% complete, ETA 00:51:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29596.039 ops/s
[info] # Warmup Iteration   2: 74157.920 ops/s
[info] # Warmup Iteration   3: 73323.984 ops/s
[info] # Warmup Iteration   4: 77283.710 ops/s
[info] # Warmup Iteration   5: 77742.162 ops/s
[info] Iteration   1: 77988.194 ops/s
[info]                  ·gc.alloc.rate:                   1014.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              20469.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13470.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 77955.988 ops/s
[info]                  ·gc.alloc.rate:               1029.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          20777.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26978.292 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 78294.846 ops/s
[info]                  ·gc.alloc.rate:               1024.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          20587.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13437.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 77767.909 ops/s
[info]                  ·gc.alloc.rate:               1019.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          20637.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27071.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 78038.864 ops/s
[info]                  ·gc.alloc.rate:                   1008.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              20337.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13494.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   78009.160 ±(99.9%) 730.526 ops/s [Average]
[info]   (min, avg, max) = (77767.909, 78009.160, 78294.846), stdev = 189.715
[info]   CI (99.9%): [77278.635, 78739.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1019.179 ±(99.9%) 31.516 MB/sec [Average]
[info]   (min, avg, max) = (1008.363, 1019.179, 1029.172), stdev = 8.185
[info]   CI (99.9%): [987.663, 1050.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20561.743 ±(99.9%) 644.429 B/op [Average]
[info]   (min, avg, max) = (20337.016, 20561.743, 20777.681), stdev = 167.356
[info]   CI (99.9%): [19917.314, 21206.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.825 ±(99.9%) 1410.021 MB/sec [Average]
[info]   (min, avg, max) = (667.482, 935.825, 1337.600), stdev = 366.178
[info]   CI (99.9%): [≈ 0, 2345.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18890.507 ±(99.9%) 28593.311 B/op [Average]
[info]   (min, avg, max) = (13437.788, 18890.507, 27071.159), stdev = 7425.592
[info]   CI (99.9%): [≈ 0, 47483.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.252 ±(99.9%) 1.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 0.840), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.12% complete, ETA 00:50:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31613.463 ops/s
[info] # Warmup Iteration   2: 83886.359 ops/s
[info] # Warmup Iteration   3: 86312.994 ops/s
[info] # Warmup Iteration   4: 89426.328 ops/s
[info] # Warmup Iteration   5: 88836.056 ops/s
[info] Iteration   1: 89209.840 ops/s
[info]                  ·gc.alloc.rate:                   1108.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              19548.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23674.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 89573.332 ops/s
[info]                  ·gc.alloc.rate:               1092.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          19186.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11792.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 89340.672 ops/s
[info]                  ·gc.alloc.rate:                   1115.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              19642.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23657.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 89276.953 ops/s
[info]                  ·gc.alloc.rate:               1099.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          19383.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11848.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 87669.275 ops/s
[info]                  ·gc.alloc.rate:                   1081.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              19406.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24137.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   89014.014 ±(99.9%) 2942.248 ops/s [Average]
[info]   (min, avg, max) = (87669.275, 89014.014, 89573.332), stdev = 764.093
[info]   CI (99.9%): [86071.766, 91956.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1099.263 ±(99.9%) 51.738 MB/sec [Average]
[info]   (min, avg, max) = (1081.029, 1099.263, 1115.378), stdev = 13.436
[info]   CI (99.9%): [1047.525, 1151.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19433.729 ±(99.9%) 670.822 B/op [Average]
[info]   (min, avg, max) = (19186.519, 19433.729, 19642.893), stdev = 174.210
[info]   CI (99.9%): [18762.907, 20104.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.682 ±(99.9%) 1416.512 MB/sec [Average]
[info]   (min, avg, max) = (671.280, 1074.682, 1344.554), stdev = 367.864
[info]   CI (99.9%): [≈ 0, 2491.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19022.379 ±(99.9%) 25325.918 B/op [Average]
[info]   (min, avg, max) = (11792.471, 19022.379, 24137.840), stdev = 6577.061
[info]   CI (99.9%): [≈ 0, 44348.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.081), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 5.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.282 ±(99.9%) 94.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.282, 55.307), stdev = 24.613
[info]   CI (99.9%): [≈ 0, 106.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.35% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5650.914 ops/s
[info] # Warmup Iteration   2: 38386.420 ops/s
[info] # Warmup Iteration   3: 42415.839 ops/s
[info] # Warmup Iteration   4: 42147.825 ops/s
[info] # Warmup Iteration   5: 42960.583 ops/s
[info] Iteration   1: 42580.888 ops/s
[info]                  ·gc.alloc.rate:                   1970.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              72847.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74210.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 43034.970 ops/s
[info]                  ·gc.alloc.rate:                   2028.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              74167.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73304.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43357.225 ops/s
[info]                  ·gc.alloc.rate:                   2030.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              73713.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72590.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43397.975 ops/s
[info]                  ·gc.alloc.rate:                   2044.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              74129.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72520.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43036.309 ops/s
[info]                  ·gc.alloc.rate:               2029.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          74217.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73260.984 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   43081.473 ±(99.9%) 1263.986 ops/s [Average]
[info]   (min, avg, max) = (42580.888, 43081.473, 43397.975), stdev = 328.253
[info]   CI (99.9%): [41817.487, 44345.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2020.740 ±(99.9%) 110.470 MB/sec [Average]
[info]   (min, avg, max) = (1970.821, 2020.740, 2044.642), stdev = 28.689
[info]   CI (99.9%): [1910.270, 2131.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73815.066 ±(99.9%) 2221.039 B/op [Average]
[info]   (min, avg, max) = (72847.703, 73815.066, 74217.706), stdev = 576.797
[info]   CI (99.9%): [71594.028, 76036.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.103 ±(99.9%) 12.540 MB/sec [Average]
[info]   (min, avg, max) = (1999.732, 2003.103, 2007.694), stdev = 3.257
[info]   CI (99.9%): [1990.563, 2015.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73177.441 ±(99.9%) 2630.254 B/op [Average]
[info]   (min, avg, max) = (72520.508, 73177.441, 74210.629), stdev = 683.069
[info]   CI (99.9%): [70547.187, 75807.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 5.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 3.601), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 6.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.924 ±(99.9%) 219.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.924, 133.113), stdev = 57.006
[info]   CI (99.9%): [≈ 0, 253.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.58% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50111.402 ops/s
[info] # Warmup Iteration   2: 111023.593 ops/s
[info] # Warmup Iteration   3: 111811.205 ops/s
[info] # Warmup Iteration   4: 112992.557 ops/s
[info] # Warmup Iteration   5: 113531.155 ops/s
[info] Iteration   1: 112781.969 ops/s
[info]                  ·gc.alloc.rate:                   1089.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              15201.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18675.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 113215.582 ops/s
[info]                  ·gc.alloc.rate:               1072.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          14910.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9306.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 113407.806 ops/s
[info]                  ·gc.alloc.rate:                   1097.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              15229.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18591.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 113966.336 ops/s
[info]                  ·gc.alloc.rate:               1076.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          14865.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9254.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 113130.953 ops/s
[info]                  ·gc.alloc.rate:                   1096.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              15247.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18654.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   113300.529 ±(99.9%) 1678.108 ops/s [Average]
[info]   (min, avg, max) = (112781.969, 113300.529, 113966.336), stdev = 435.799
[info]   CI (99.9%): [111622.421, 114978.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1086.524 ±(99.9%) 44.167 MB/sec [Average]
[info]   (min, avg, max) = (1072.565, 1086.524, 1097.612), stdev = 11.470
[info]   CI (99.9%): [1042.357, 1130.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15091.044 ±(99.9%) 718.172 B/op [Average]
[info]   (min, avg, max) = (14865.721, 15091.044, 15247.891), stdev = 186.507
[info]   CI (99.9%): [14372.872, 15809.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1071.900 ±(99.9%) 1413.565 MB/sec [Average]
[info]   (min, avg, max) = (669.424, 1071.900, 1341.249), stdev = 367.098
[info]   CI (99.9%): [≈ 0, 2485.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14896.537 ±(99.9%) 19741.654 B/op [Average]
[info]   (min, avg, max) = (9254.603, 14896.537, 18675.602), stdev = 5126.845
[info]   CI (99.9%): [≈ 0, 34638.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.477), stdev = 1.544
[info]   CI (99.9%): [≈ 0, 6.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.963 ±(99.9%) 82.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.963, 48.363), stdev = 21.470
[info]   CI (99.9%): [≈ 0, 92.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.81% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152312.834 ops/s
[info] # Warmup Iteration   2: 296671.705 ops/s
[info] # Warmup Iteration   3: 323904.678 ops/s
[info] # Warmup Iteration   4: 318331.673 ops/s
[info] # Warmup Iteration   5: 317079.792 ops/s
[info] Iteration   1: 323277.985 ops/s
[info]                  ·gc.alloc.rate:               491.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          2392.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2490.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 324317.184 ops/s
[info]                  ·gc.alloc.rate:               501.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          2432.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3235.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 321676.724 ops/s
[info]                  ·gc.alloc.rate:      477.456 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 321698.960 ops/s
[info]                  ·gc.alloc.rate:               495.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          2422.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3262.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 321305.434 ops/s
[info]                  ·gc.alloc.rate:               497.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          2438.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3269.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   322455.257 ±(99.9%) 4962.643 ops/s [Average]
[info]   (min, avg, max) = (321305.434, 322455.257, 324317.184), stdev = 1288.783
[info]   CI (99.9%): [317492.614, 327417.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   492.607 ±(99.9%) 35.483 MB/sec [Average]
[info]   (min, avg, max) = (477.456, 492.607, 501.299), stdev = 9.215
[info]   CI (99.9%): [457.124, 528.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2404.229 ±(99.9%) 161.978 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2404.229, 2438.065), stdev = 42.065
[info]   CI (99.9%): [2242.251, 2566.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.571 ±(99.9%) 1112.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.571, 667.483), stdev = 288.898
[info]   CI (99.9%): [≈ 0, 1615.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2451.720 ±(99.9%) 5429.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2451.720, 3269.580), stdev = 1410.091
[info]   CI (99.9%): [≈ 0, 7881.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.04% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440024.768 ops/s
[info] # Warmup Iteration   2: 634064.452 ops/s
[info] # Warmup Iteration   3: 578145.980 ops/s
[info] # Warmup Iteration   4: 654226.404 ops/s
[info] # Warmup Iteration   5: 666236.432 ops/s
[info] Iteration   1: 676998.963 ops/s
[info]                  ·gc.alloc.rate:               859.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          1998.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1559.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 670162.383 ops/s
[info]                  ·gc.alloc.rate:               848.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          1993.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1575.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 677699.300 ops/s
[info]                  ·gc.alloc.rate:               857.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          1991.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1558.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 667379.739 ops/s
[info]                  ·gc.alloc.rate:               858.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          2024.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3166.249 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 663474.214 ops/s
[info]                  ·gc.alloc.rate:                   836.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1592.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   671142.920 ±(99.9%) 23675.308 ops/s [Average]
[info]   (min, avg, max) = (663474.214, 671142.920, 677699.300), stdev = 6148.402
[info]   CI (99.9%): [647467.612, 694818.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   852.263 ±(99.9%) 37.975 MB/sec [Average]
[info]   (min, avg, max) = (836.410, 852.263, 859.878), stdev = 9.862
[info]   CI (99.9%): [814.288, 890.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1998.455 ±(99.9%) 60.090 B/op [Average]
[info]   (min, avg, max) = (1984.156, 1998.455, 2024.860), stdev = 15.605
[info]   CI (99.9%): [1938.366, 2058.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.425 ±(99.9%) 1156.359 MB/sec [Average]
[info]   (min, avg, max) = (670.794, 805.425, 1342.622), stdev = 300.303
[info]   CI (99.9%): [≈ 0, 1961.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1890.524 ±(99.9%) 2746.621 B/op [Average]
[info]   (min, avg, max) = (1558.645, 1890.524, 3166.249), stdev = 713.289
[info]   CI (99.9%): [≈ 0, 4637.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 57.27% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483027.349 ops/s
[info] # Warmup Iteration   2: 712301.991 ops/s
[info] # Warmup Iteration   3: 589828.837 ops/s
[info] # Warmup Iteration   4: 692035.221 ops/s
[info] # Warmup Iteration   5: 697354.915 ops/s
[info] Iteration   1: 580765.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 589993.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 585857.412 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 594222.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 720565.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   614280.640 ±(99.9%) 229588.412 ops/s [Average]
[info]   (min, avg, max) = (580765.255, 614280.640, 720565.196), stdev = 59623.381
[info]   CI (99.9%): [384692.229, 843869.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.51% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82663.235 ops/s
[info] # Warmup Iteration   2: 214267.066 ops/s
[info] # Warmup Iteration   3: 221708.090 ops/s
[info] # Warmup Iteration   4: 227033.589 ops/s
[info] # Warmup Iteration   5: 228550.257 ops/s
[info] Iteration   1: 229367.784 ops/s
[info]                  ·gc.alloc.rate:               749.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          5145.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4580.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 226889.668 ops/s
[info]                  ·gc.alloc.rate:               749.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          5201.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4634.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 217539.864 ops/s
[info]                  ·gc.alloc.rate:               714.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          5170.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4834.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 229761.962 ops/s
[info]                  ·gc.alloc.rate:                   753.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              5162.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4581.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 229563.394 ops/s
[info]                  ·gc.alloc.rate:               751.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          5151.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4585.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   226624.535 ±(99.9%) 20064.710 ops/s [Average]
[info]   (min, avg, max) = (217539.864, 226624.535, 229761.962), stdev = 5210.741
[info]   CI (99.9%): [206559.825, 246689.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   743.980 ±(99.9%) 63.235 MB/sec [Average]
[info]   (min, avg, max) = (714.741, 743.980, 753.751), stdev = 16.422
[info]   CI (99.9%): [680.745, 807.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5166.265 ±(99.9%) 84.737 B/op [Average]
[info]   (min, avg, max) = (5145.379, 5166.265, 5201.560), stdev = 22.006
[info]   CI (99.9%): [5081.528, 5251.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.369 ±(99.9%) 2.381 MB/sec [Average]
[info]   (min, avg, max) = (667.508, 668.369, 669.002), stdev = 0.618
[info]   CI (99.9%): [665.989, 670.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4643.113 ±(99.9%) 420.390 B/op [Average]
[info]   (min, avg, max) = (4580.052, 4643.113, 4834.058), stdev = 109.174
[info]   CI (99.9%): [4222.723, 5063.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.285), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.74% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24850.871 ops/s
[info] # Warmup Iteration   2: 110935.995 ops/s
[info] # Warmup Iteration   3: 119283.026 ops/s
[info] # Warmup Iteration   4: 120627.421 ops/s
[info] # Warmup Iteration   5: 123611.922 ops/s
[info] Iteration   1: 123501.197 ops/s
[info]                  ·gc.alloc.rate:               1729.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          22035.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17093.257 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 124290.631 ops/s
[info]                  ·gc.alloc.rate:                   1766.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              22362.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25491.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 125607.484 ops/s
[info]                  ·gc.alloc.rate:                   1758.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              22034.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16776.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 125286.560 ops/s
[info]                  ·gc.alloc.rate:                   1778.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              22346.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25179.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 123888.956 ops/s
[info]                  ·gc.alloc.rate:                   1734.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              22033.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16979.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   124514.966 ±(99.9%) 3475.671 ops/s [Average]
[info]   (min, avg, max) = (123501.197, 124514.966, 125607.484), stdev = 902.621
[info]   CI (99.9%): [121039.295, 127990.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1753.446 ±(99.9%) 81.077 MB/sec [Average]
[info]   (min, avg, max) = (1729.352, 1753.446, 1778.828), stdev = 21.055
[info]   CI (99.9%): [1672.369, 1834.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22162.546 ±(99.9%) 675.198 B/op [Average]
[info]   (min, avg, max) = (22033.350, 22162.546, 22362.881), stdev = 175.347
[info]   CI (99.9%): [21487.348, 22837.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.902 ±(99.9%) 1412.589 MB/sec [Average]
[info]   (min, avg, max) = (1336.578, 1606.902, 2013.081), stdev = 366.845
[info]   CI (99.9%): [194.314, 3019.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20304.129 ±(99.9%) 17696.753 B/op [Average]
[info]   (min, avg, max) = (16776.548, 20304.129, 25491.289), stdev = 4595.791
[info]   CI (99.9%): [2607.376, 38000.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.914), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.382 ±(99.9%) 84.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.382, 49.557), stdev = 21.912
[info]   CI (99.9%): [≈ 0, 94.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.97% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56247.700 ops/s
[info] # Warmup Iteration   2: 178214.182 ops/s
[info] # Warmup Iteration   3: 173216.539 ops/s
[info] # Warmup Iteration   4: 196985.584 ops/s
[info] # Warmup Iteration   5: 192975.016 ops/s
[info] Iteration   1: 196944.693 ops/s
[info]                  ·gc.alloc.rate:                   1208.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              9660.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10635.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 196756.339 ops/s
[info]                  ·gc.alloc.rate:                   1197.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              9575.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10635.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 194301.528 ops/s
[info]                  ·gc.alloc.rate:               1165.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          9443.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5390.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 190907.897 ops/s
[info]                  ·gc.alloc.rate:               1159.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          9559.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10978.099 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 191113.430 ops/s
[info]                  ·gc.alloc.rate:               1159.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          9551.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10979.466 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   194004.777 ±(99.9%) 11268.121 ops/s [Average]
[info]   (min, avg, max) = (190907.897, 194004.777, 196944.693), stdev = 2926.295
[info]   CI (99.9%): [182736.656, 205272.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.255 ±(99.9%) 88.896 MB/sec [Average]
[info]   (min, avg, max) = (1159.654, 1178.255, 1208.836), stdev = 23.086
[info]   CI (99.9%): [1089.359, 1267.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9557.899 ±(99.9%) 297.935 B/op [Average]
[info]   (min, avg, max) = (9443.192, 9557.899, 9660.019), stdev = 77.373
[info]   CI (99.9%): [9259.964, 9855.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.200 ±(99.9%) 1146.689 MB/sec [Average]
[info]   (min, avg, max) = (665.499, 1198.200, 1333.215), stdev = 297.791
[info]   CI (99.9%): [51.511, 2344.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9723.742 ±(99.9%) 9351.074 B/op [Average]
[info]   (min, avg, max) = (5390.484, 9723.742, 10979.466), stdev = 2428.444
[info]   CI (99.9%): [372.668, 19074.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.20% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226547.063 ops/s
[info] # Warmup Iteration   2: 414464.460 ops/s
[info] # Warmup Iteration   3: 352837.760 ops/s
[info] # Warmup Iteration   4: 411871.675 ops/s
[info] # Warmup Iteration   5: 443372.285 ops/s
[info] Iteration   1: 455099.624 ops/s
[info]                  ·gc.alloc.rate:               311.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1769.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 453425.966 ops/s
[info]                  ·gc.alloc.rate:                   313.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1086.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1775.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 453770.172 ops/s
[info]                  ·gc.alloc.rate:      295.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 434231.045 ops/s
[info]                  ·gc.alloc.rate:               294.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          1068.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1854.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 448206.388 ops/s
[info]                  ·gc.alloc.rate:      291.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   448946.639 ±(99.9%) 33252.197 ops/s [Average]
[info]   (min, avg, max) = (434231.045, 448946.639, 455099.624), stdev = 8635.490
[info]   CI (99.9%): [415694.442, 482198.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   301.295 ±(99.9%) 39.286 MB/sec [Average]
[info]   (min, avg, max) = (291.611, 301.295, 313.019), stdev = 10.203
[info]   CI (99.9%): [262.008, 340.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1056.179 ±(99.9%) 115.707 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1056.179, 1086.473), stdev = 30.049
[info]   CI (99.9%): [940.472, 1171.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.967 ±(99.9%) 1079.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.967, 511.635), stdev = 280.221
[info]   CI (99.9%): [≈ 0, 1386.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1079.835 ±(99.9%) 3797.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1079.835, 1854.220), stdev = 986.317
[info]   CI (99.9%): [≈ 0, 4877.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4099.554 ops/s
[info] # Warmup Iteration   2: 53366.689 ops/s
[info] # Warmup Iteration   3: 68251.670 ops/s
[info] # Warmup Iteration   4: 71356.875 ops/s
[info] # Warmup Iteration   5: 71149.514 ops/s
[info] Iteration   1: 69344.480 ops/s
[info]                  ·gc.alloc.rate:               2793.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          63390.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60809.365 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 70791.712 ops/s
[info]                  ·gc.alloc.rate:                   2837.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              63080.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59787.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.463 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 71795.751 ops/s
[info]                  ·gc.alloc.rate:               2904.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          63654.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59140.931 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 71564.248 ops/s
[info]                  ·gc.alloc.rate:                   2910.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              63965.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74249.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 71669.779 ops/s
[info]                  ·gc.alloc.rate:                   2899.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              63670.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59537.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   71033.194 ±(99.9%) 3935.774 ops/s [Average]
[info]   (min, avg, max) = (69344.480, 71033.194, 71795.751), stdev = 1022.108
[info]   CI (99.9%): [67097.420, 74968.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2868.975 ±(99.9%) 198.127 MB/sec [Average]
[info]   (min, avg, max) = (2793.102, 2868.975, 2910.029), stdev = 51.453
[info]   CI (99.9%): [2670.848, 3067.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63552.279 ±(99.9%) 1283.346 B/op [Average]
[info]   (min, avg, max) = (63080.149, 63552.279, 63965.793), stdev = 333.281
[info]   CI (99.9%): [62268.933, 64835.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2831.344 ±(99.9%) 1177.310 MB/sec [Average]
[info]   (min, avg, max) = (2679.359, 2831.344, 3377.872), stdev = 305.744
[info]   CI (99.9%): [1654.034, 4008.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62705.028 ±(99.9%) 24963.545 B/op [Average]
[info]   (min, avg, max) = (59140.931, 62705.028, 74249.513), stdev = 6482.953
[info]   CI (99.9%): [37741.483, 87668.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 0.463), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.66% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80498.307 ops/s
[info] # Warmup Iteration   2: 176600.436 ops/s
[info] # Warmup Iteration   3: 185883.607 ops/s
[info] # Warmup Iteration   4: 187290.537 ops/s
[info] # Warmup Iteration   5: 187713.886 ops/s
[info] Iteration   1: 185866.373 ops/s
[info]                  ·gc.alloc.rate:                   1211.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              10262.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11354.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 183750.616 ops/s
[info]                  ·gc.alloc.rate:               1190.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          10191.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5745.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 186916.611 ops/s
[info]                  ·gc.alloc.rate:               1225.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          10315.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11301.788 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 187515.690 ops/s
[info]                  ·gc.alloc.rate:                   1216.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              10207.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11274.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 187105.531 ops/s
[info]                  ·gc.alloc.rate:                   1237.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              10412.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11287.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   186230.964 ±(99.9%) 5830.438 ops/s [Average]
[info]   (min, avg, max) = (183750.616, 186230.964, 187515.690), stdev = 1514.146
[info]   CI (99.9%): [180400.526, 192061.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1216.320 ±(99.9%) 68.039 MB/sec [Average]
[info]   (min, avg, max) = (1190.180, 1216.320, 1237.848), stdev = 17.670
[info]   CI (99.9%): [1148.281, 1284.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10277.898 ±(99.9%) 344.835 B/op [Average]
[info]   (min, avg, max) = (10191.626, 10277.898, 10412.257), stdev = 89.553
[info]   CI (99.9%): [9933.062, 10622.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.938 ±(99.9%) 1155.862 MB/sec [Average]
[info]   (min, avg, max) = (670.973, 1207.938, 1343.278), stdev = 300.174
[info]   CI (99.9%): [52.075, 2363.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10192.785 ±(99.9%) 9573.596 B/op [Average]
[info]   (min, avg, max) = (5745.606, 10192.785, 11354.220), stdev = 2486.232
[info]   CI (99.9%): [619.190, 19766.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 5.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.039), stdev = 1.329
[info]   CI (99.9%): [≈ 0, 5.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.663 ±(99.9%) 42.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.663, 25.510), stdev = 11.151
[info]   CI (99.9%): [≈ 0, 48.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.89% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222812.217 ops/s
[info] # Warmup Iteration   2: 529838.805 ops/s
[info] # Warmup Iteration   3: 547868.306 ops/s
[info] # Warmup Iteration   4: 550475.648 ops/s
[info] # Warmup Iteration   5: 549419.463 ops/s
[info] Iteration   1: 550377.622 ops/s
[info]                  ·gc.alloc.rate:               565.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1907.780 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 548682.593 ops/s
[info]                  ·gc.alloc.rate:      541.109 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 539855.815 ops/s
[info]                  ·gc.alloc.rate:               547.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          1595.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1944.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 538736.326 ops/s
[info]                  ·gc.alloc.rate:               556.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          1624.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1951.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 539495.190 ops/s
[info]                  ·gc.alloc.rate:                   552.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1611.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1948.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   543429.509 ±(99.9%) 21624.313 ops/s [Average]
[info]   (min, avg, max) = (538736.326, 543429.509, 550377.622), stdev = 5615.766
[info]   CI (99.9%): [521805.196, 565053.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   552.455 ±(99.9%) 35.346 MB/sec [Average]
[info]   (min, avg, max) = (541.109, 552.455, 565.387), stdev = 9.179
[info]   CI (99.9%): [517.109, 587.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1600.042 ±(99.9%) 111.413 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1600.042, 1624.641), stdev = 28.934
[info]   CI (99.9%): [1488.629, 1711.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.009 ±(99.9%) 1149.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.009, 667.886), stdev = 298.521
[info]   CI (99.9%): [≈ 0, 1683.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1550.408 ±(99.9%) 3338.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1550.408, 1951.012), stdev = 866.883
[info]   CI (99.9%): [≈ 0, 4888.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.12% complete, ETA 00:47:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655956.250 ops/s
[info] # Warmup Iteration   2: 1104398.698 ops/s
[info] # Warmup Iteration   3: 1089588.311 ops/s
[info] # Warmup Iteration   4: 1115918.294 ops/s
[info] # Warmup Iteration   5: 1100979.247 ops/s
[info] Iteration   1: 1125221.115 ops/s
[info]                  ·gc.alloc.rate:               860.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          1204.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 938.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1116656.481 ops/s
[info]                  ·gc.alloc.rate:               859.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          1210.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 945.938 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1140243.725 ops/s
[info]                  ·gc.alloc.rate:                   859.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              1186.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1134334.080 ops/s
[info]                  ·gc.alloc.rate:               872.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          1210.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1864.634 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1137978.780 ops/s
[info]                  ·gc.alloc.rate:                   858.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1187.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1130886.836 ±(99.9%) 37744.852 ops/s [Average]
[info]   (min, avg, max) = (1116656.481, 1130886.836, 1140243.725), stdev = 9802.218
[info]   CI (99.9%): [1093141.984, 1168631.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   862.268 ±(99.9%) 22.538 MB/sec [Average]
[info]   (min, avg, max) = (858.959, 862.268, 872.656), stdev = 5.853
[info]   CI (99.9%): [839.730, 884.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1200.055 ±(99.9%) 46.357 B/op [Average]
[info]   (min, avg, max) = (1186.636, 1200.055, 1210.917), stdev = 12.039
[info]   CI (99.9%): [1153.698, 1246.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.038 ±(99.9%) 1157.768 MB/sec [Average]
[info]   (min, avg, max) = (671.127, 806.038, 1343.890), stdev = 300.669
[info]   CI (99.9%): [≈ 0, 1963.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1121.230 ±(99.9%) 1600.491 B/op [Average]
[info]   (min, avg, max) = (927.256, 1121.230, 1864.634), stdev = 415.642
[info]   CI (99.9%): [≈ 0, 2721.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 59.35% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730548.829 ops/s
[info] # Warmup Iteration   2: 1196507.239 ops/s
[info] # Warmup Iteration   3: 1260822.113 ops/s
[info] # Warmup Iteration   4: 1256772.934 ops/s
[info] # Warmup Iteration   5: 1261611.873 ops/s
[info] Iteration   1: 1261458.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1261576.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1262124.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1261955.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1262039.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1261830.845 ±(99.9%) 1137.795 ops/s [Average]
[info]   (min, avg, max) = (1261458.014, 1261830.845, 1262124.912), stdev = 295.482
[info]   CI (99.9%): [1260693.050, 1262968.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.58% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93717.914 ops/s
[info] # Warmup Iteration   2: 353543.803 ops/s
[info] # Warmup Iteration   3: 352976.105 ops/s
[info] # Warmup Iteration   4: 346457.395 ops/s
[info] # Warmup Iteration   5: 350456.767 ops/s
[info] Iteration   1: 350698.568 ops/s
[info]                  ·gc.alloc.rate:                   996.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              4473.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5981.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 346010.748 ops/s
[info]                  ·gc.alloc.rate:               958.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          4358.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3034.604 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 349873.761 ops/s
[info]                  ·gc.alloc.rate:                        993.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                   4469.484 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.011 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.051 B/op
[info]                  ·gc.churn.Metaspace:                   0.033 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1349.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          6071.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      18.915 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              34.000 ms
[info] Iteration   4: 364224.893 ops/s
[info]                  ·gc.alloc.rate:                   1016.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              4394.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2884.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 363588.920 ops/s
[info]                  ·gc.alloc.rate:               1016.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          4400.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5772.989 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   354879.378 ±(99.9%) 32467.958 ops/s [Average]
[info]   (min, avg, max) = (346010.748, 354879.378, 364224.893), stdev = 8431.826
[info]   CI (99.9%): [322411.420, 387347.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   996.461 ±(99.9%) 92.064 MB/sec [Average]
[info]   (min, avg, max) = (958.285, 996.461, 1016.851), stdev = 23.909
[info]   CI (99.9%): [904.397, 1088.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4419.333 ±(99.9%) 193.750 B/op [Average]
[info]   (min, avg, max) = (4358.790, 4419.333, 4473.713), stdev = 50.316
[info]   CI (99.9%): [4225.582, 4613.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.030 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.203 ±(99.9%) 1416.440 MB/sec [Average]
[info]   (min, avg, max) = (667.161, 1070.203, 1349.679), stdev = 367.845
[info]   CI (99.9%): [≈ 0, 2486.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4749.003 ±(99.9%) 6307.650 B/op [Average]
[info]   (min, avg, max) = (2884.294, 4749.003, 6071.278), stdev = 1638.077
[info]   CI (99.9%): [≈ 0, 11056.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.205), stdev = 1.876
[info]   CI (99.9%): [≈ 0, 8.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.820 ±(99.9%) 32.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.820, 18.915), stdev = 8.439
[info]   CI (99.9%): [≈ 0, 36.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 9.200, 34.000), stdev = 13.989
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.82% complete, ETA 00:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177.880 ops/s
[info] # Warmup Iteration   2: 519.789 ops/s
[info] # Warmup Iteration   3: 579.009 ops/s
[info] # Warmup Iteration   4: 600.444 ops/s
[info] # Warmup Iteration   5: 606.830 ops/s
[info] Iteration   1: 598.318 ops/s
[info]                  ·gc.alloc.rate:               1278.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          3361973.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3516843.379 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 605.878 ops/s
[info]                  ·gc.alloc.rate:                   1289.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              3346463.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3472220.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 606.567 ops/s
[info]                  ·gc.alloc.rate:               1287.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          3341025.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3472220.362 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 606.587 ops/s
[info]                  ·gc.alloc.rate:                   1286.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              3338217.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3472220.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14683.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 582.969 ops/s
[info]                  ·gc.alloc.rate:                   1277.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              3446536.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3591013.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   600.064 ±(99.9%) 39.171 ops/s [Average]
[info]   (min, avg, max) = (582.969, 600.064, 606.587), stdev = 10.173
[info]   CI (99.9%): [560.893, 639.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1284.021 ±(99.9%) 21.185 MB/sec [Average]
[info]   (min, avg, max) = (1277.654, 1284.021, 1289.182), stdev = 5.502
[info]   CI (99.9%): [1262.836, 1305.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3366843.305 ±(99.9%) 175151.667 B/op [Average]
[info]   (min, avg, max) = (3338217.832, 3366843.305, 3446536.356), stdev = 45486.332
[info]   CI (99.9%): [3191691.638, 3541994.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.647 ±(99.9%) 11.860 MB/sec [Average]
[info]   (min, avg, max) = (1331.213, 1336.647, 1338.513), stdev = 3.080
[info]   CI (99.9%): [1324.787, 1348.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3504903.633 ±(99.9%) 199733.846 B/op [Average]
[info]   (min, avg, max) = (3472220.362, 3504903.633, 3591013.699), stdev = 51870.245
[info]   CI (99.9%): [3305169.787, 3704637.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.174 ±(99.9%) 9.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.174, 5.660), stdev = 2.509
[info]   CI (99.9%): [≈ 0, 10.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3048.498 ±(99.9%) 25058.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3048.498, 14683.519), stdev = 6507.629
[info]   CI (99.9%): [≈ 0, 28107.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.05% complete, ETA 00:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174.571 ops/s
[info] # Warmup Iteration   2: 517.380 ops/s
[info] # Warmup Iteration   3: 588.997 ops/s
[info] # Warmup Iteration   4: 577.369 ops/s
[info] # Warmup Iteration   5: 572.080 ops/s
[info] Iteration   1: 589.421 ops/s
[info]                  ·gc.alloc.rate:                   1250.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              3337810.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3559826.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 576.165 ops/s
[info]                  ·gc.alloc.rate:                   1220.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              3327254.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3623010.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 590.095 ops/s
[info]                  ·gc.alloc.rate:               1244.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          3317403.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1779562.992 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 593.092 ops/s
[info]                  ·gc.alloc.rate:                   1252.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              3321970.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3542915.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10426.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 587.977 ops/s
[info]                  ·gc.alloc.rate:                   1266.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              3387967.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3569431.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1557.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   587.350 ±(99.9%) 25.125 ops/s [Average]
[info]   (min, avg, max) = (576.165, 587.350, 593.092), stdev = 6.525
[info]   CI (99.9%): [562.225, 612.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246.936 ±(99.9%) 64.174 MB/sec [Average]
[info]   (min, avg, max) = (1220.916, 1246.936, 1266.566), stdev = 16.666
[info]   CI (99.9%): [1182.762, 1311.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3338481.167 ±(99.9%) 110470.640 B/op [Average]
[info]   (min, avg, max) = (3317403.993, 3338481.167, 3387967.022), stdev = 28688.875
[info]   CI (99.9%): [3228010.526, 3448951.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.130 ±(99.9%) 1146.485 MB/sec [Average]
[info]   (min, avg, max) = (667.536, 1200.130, 1335.774), stdev = 297.738
[info]   CI (99.9%): [53.645, 2346.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3214949.487 ±(99.9%) 3091930.326 B/op [Average]
[info]   (min, avg, max) = (1779562.992, 3214949.487, 3623010.869), stdev = 802964.487
[info]   CI (99.9%): [123019.161, 6306879.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.911 ±(99.9%) 6.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.911, 3.931), stdev = 1.706
[info]   CI (99.9%): [≈ 0, 7.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2419.190 ±(99.9%) 17421.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2419.190, 10426.182), stdev = 4524.259
[info]   CI (99.9%): [≈ 0, 19840.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.28% complete, ETA 00:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24437.746 ops/s
[info] # Warmup Iteration   2: 47566.481 ops/s
[info] # Warmup Iteration   3: 48852.471 ops/s
[info] # Warmup Iteration   4: 51111.699 ops/s
[info] # Warmup Iteration   5: 50935.044 ops/s
[info] Iteration   1: 50589.436 ops/s
[info]                  ·gc.alloc.rate:               834.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          25961.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20848.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 50012.023 ops/s
[info]                  ·gc.alloc.rate:               832.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          26212.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21089.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 49939.917 ops/s
[info]                  ·gc.alloc.rate:                   829.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              26145.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21120.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 48572.969 ops/s
[info]                  ·gc.alloc.rate:                   804.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              26055.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21714.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51383.304 ops/s
[info]                  ·gc.alloc.rate:               876.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          26844.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41052.615 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   50099.530 ±(99.9%) 3969.902 ops/s [Average]
[info]   (min, avg, max) = (48572.969, 50099.530, 51383.304), stdev = 1030.971
[info]   CI (99.9%): [46129.628, 54069.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   835.678 ±(99.9%) 100.321 MB/sec [Average]
[info]   (min, avg, max) = (804.313, 835.678, 876.757), stdev = 26.053
[info]   CI (99.9%): [735.357, 935.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26243.952 ±(99.9%) 1342.858 B/op [Average]
[info]   (min, avg, max) = (25961.319, 26243.952, 26844.445), stdev = 348.736
[info]   CI (99.9%): [24901.094, 27586.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.356 ±(99.9%) 1154.747 MB/sec [Average]
[info]   (min, avg, max) = (670.172, 804.356, 1340.805), stdev = 299.884
[info]   CI (99.9%): [≈ 0, 1959.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25165.085 ±(99.9%) 34221.137 B/op [Average]
[info]   (min, avg, max) = (20848.419, 25165.085, 41052.615), stdev = 8887.121
[info]   CI (99.9%): [≈ 0, 59386.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.401 ±(99.9%) 2.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.401, 1.349), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.51% complete, ETA 00:45:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147.517 ops/s
[info] # Warmup Iteration   2: 425.633 ops/s
[info] # Warmup Iteration   3: 552.657 ops/s
[info] # Warmup Iteration   4: 582.323 ops/s
[info] # Warmup Iteration   5: 576.436 ops/s
[info] Iteration   1: 563.385 ops/s
[info]                  ·gc.alloc.rate:               1242.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          3470903.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3722072.965 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 581.909 ops/s
[info]                  ·gc.alloc.rate:                   1267.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              3427868.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803478.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 582.882 ops/s
[info]                  ·gc.alloc.rate:                   1272.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              3435001.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3602569.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 571.929 ops/s
[info]                  ·gc.alloc.rate:                   1249.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              3435407.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3667271.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14639.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 562.565 ops/s
[info]                  ·gc.alloc.rate:                   1245.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              3482355.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3723096.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2677.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   572.534 ±(99.9%) 37.453 ops/s [Average]
[info]   (min, avg, max) = (562.565, 572.534, 582.882), stdev = 9.726
[info]   CI (99.9%): [535.082, 609.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1255.414 ±(99.9%) 51.905 MB/sec [Average]
[info]   (min, avg, max) = (1242.785, 1255.414, 1272.161), stdev = 13.480
[info]   CI (99.9%): [1203.509, 1307.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3450307.482 ±(99.9%) 94538.419 B/op [Average]
[info]   (min, avg, max) = (3427868.440, 3450307.482, 3482355.680), stdev = 24551.327
[info]   CI (99.9%): [3355769.063, 3544845.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1199.769 ±(99.9%) 1147.163 MB/sec [Average]
[info]   (min, avg, max) = (666.848, 1199.769, 1334.220), stdev = 297.915
[info]   CI (99.9%): [52.606, 2346.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3303697.665 ±(99.9%) 3234942.082 B/op [Average]
[info]   (min, avg, max) = (1803478.653, 3303697.665, 3723096.668), stdev = 840104.186
[info]   CI (99.9%): [68755.583, 6538639.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.281 ±(99.9%) 8.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.281, 5.325), stdev = 2.295
[info]   CI (99.9%): [≈ 0, 10.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3530.967 ±(99.9%) 24295.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3530.967, 14639.805), stdev = 6309.430
[info]   CI (99.9%): [≈ 0, 27826.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.74% complete, ETA 00:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5348.929 ops/s
[info] # Warmup Iteration   2: 14198.827 ops/s
[info] # Warmup Iteration   3: 15078.097 ops/s
[info] # Warmup Iteration   4: 14982.969 ops/s
[info] # Warmup Iteration   5: 15070.655 ops/s
[info] Iteration   1: 15179.539 ops/s
[info]                  ·gc.alloc.rate:                   1179.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              122270.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69136.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15107.838 ops/s
[info]                  ·gc.alloc.rate:               1189.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          123891.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138991.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 14569.079 ops/s
[info]                  ·gc.alloc.rate:               1181.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          127630.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144240.365 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 14006.425 ops/s
[info]                  ·gc.alloc.rate:               1099.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          123448.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75031.937 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14858.594 ops/s
[info]                  ·gc.alloc.rate:                   1191.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              126184.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141541.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14744.295 ±(99.9%) 1836.457 ops/s [Average]
[info]   (min, avg, max) = (14006.425, 14744.295, 15179.539), stdev = 476.922
[info]   CI (99.9%): [12907.838, 16580.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1168.197 ±(99.9%) 149.855 MB/sec [Average]
[info]   (min, avg, max) = (1099.150, 1168.197, 1191.355), stdev = 38.917
[info]   CI (99.9%): [1018.342, 1318.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   124685.016 ±(99.9%) 8371.992 B/op [Average]
[info]   (min, avg, max) = (122270.692, 124685.016, 127630.156), stdev = 2174.180
[info]   CI (99.9%): [116313.024, 133057.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.235 ±(99.9%) 1408.858 MB/sec [Average]
[info]   (min, avg, max) = (666.816, 1068.235, 1336.348), stdev = 365.876
[info]   CI (99.9%): [≈ 0, 2477.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113788.183 ±(99.9%) 146989.414 B/op [Average]
[info]   (min, avg, max) = (69136.120, 113788.183, 144240.365), stdev = 38172.684
[info]   CI (99.9%): [≈ 0, 260777.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.110 ±(99.9%) 9.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.110, 5.527), stdev = 2.470
[info]   CI (99.9%): [≈ 0, 10.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   117.519 ±(99.9%) 1007.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.519, 585.435), stdev = 261.575
[info]   CI (99.9%): [≈ 0, 1124.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.97% complete, ETA 00:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6445.374 ops/s
[info] # Warmup Iteration   2: 15795.769 ops/s
[info] # Warmup Iteration   3: 18342.981 ops/s
[info] # Warmup Iteration   4: 17971.632 ops/s
[info] # Warmup Iteration   5: 17917.579 ops/s
[info] Iteration   1: 18375.306 ops/s
[info]                  ·gc.alloc.rate:                   1117.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              95742.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114083.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 18416.875 ops/s
[info]                  ·gc.alloc.rate:                   1097.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              93804.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56925.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18495.612 ops/s
[info]                  ·gc.alloc.rate:                   1125.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              95783.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113479.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 18517.949 ops/s
[info]                  ·gc.alloc.rate:                   1127.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              95740.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113400.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 18598.574 ops/s
[info]                  ·gc.alloc.rate:                   1106.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              93585.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56481.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18480.863 ±(99.9%) 337.264 ops/s [Average]
[info]   (min, avg, max) = (18375.306, 18480.863, 18598.574), stdev = 87.586
[info]   CI (99.9%): [18143.599, 18818.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1114.858 ±(99.9%) 48.831 MB/sec [Average]
[info]   (min, avg, max) = (1097.723, 1114.858, 1127.029), stdev = 12.681
[info]   CI (99.9%): [1066.027, 1163.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   94931.270 ±(99.9%) 4356.957 B/op [Average]
[info]   (min, avg, max) = (93585.365, 94931.270, 95783.504), stdev = 1131.488
[info]   CI (99.9%): [90574.313, 99288.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.835 ±(99.9%) 1405.962 MB/sec [Average]
[info]   (min, avg, max) = (666.162, 1066.835, 1334.918), stdev = 365.124
[info]   CI (99.9%): [≈ 0, 2472.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   90874.237 ±(99.9%) 120119.590 B/op [Average]
[info]   (min, avg, max) = (56481.731, 90874.237, 114083.563), stdev = 31194.676
[info]   CI (99.9%): [≈ 0, 210993.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.074 ±(99.9%) 8.981 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.074, 5.247), stdev = 2.332
[info]   CI (99.9%): [≈ 0, 10.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   90.915 ±(99.9%) 759.863 B/op [Average]
[info]   (min, avg, max) = (1.769, 90.915, 443.906), stdev = 197.334
[info]   CI (99.9%): [≈ 0, 850.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.20% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121332.741 ops/s
[info] # Warmup Iteration   2: 212416.428 ops/s
[info] # Warmup Iteration   3: 222645.168 ops/s
[info] # Warmup Iteration   4: 223106.515 ops/s
[info] # Warmup Iteration   5: 221567.006 ops/s
[info] Iteration   1: 222281.492 ops/s
[info]                  ·gc.alloc.rate:                   836.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5924.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9456.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 223744.248 ops/s
[info]                  ·gc.alloc.rate:               814.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          5730.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4702.334 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 224177.107 ops/s
[info]                  ·gc.alloc.rate:                   808.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              5676.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4697.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 219468.566 ops/s
[info]                  ·gc.alloc.rate:               789.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          5659.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4798.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 220104.520 ops/s
[info]                  ·gc.alloc.rate:               792.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          5664.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4789.465 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   221955.187 ±(99.9%) 8134.888 ops/s [Average]
[info]   (min, avg, max) = (219468.566, 221955.187, 224177.107), stdev = 2112.605
[info]   CI (99.9%): [213820.299, 230090.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   808.409 ±(99.9%) 73.840 MB/sec [Average]
[info]   (min, avg, max) = (789.522, 808.409, 836.831), stdev = 19.176
[info]   CI (99.9%): [734.569, 882.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5731.072 ±(99.9%) 429.721 B/op [Average]
[info]   (min, avg, max) = (5659.599, 5731.072, 5924.230), stdev = 111.597
[info]   CI (99.9%): [5301.352, 6160.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.594 ±(99.9%) 1147.884 MB/sec [Average]
[info]   (min, avg, max) = (668.657, 802.594, 1335.854), stdev = 298.102
[info]   CI (99.9%): [≈ 0, 1950.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5689.059 ±(99.9%) 8112.804 B/op [Average]
[info]   (min, avg, max) = (4697.825, 5689.059, 9456.999), stdev = 2106.870
[info]   CI (99.9%): [≈ 0, 13801.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.147), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 61.43% complete, ETA 00:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156143.705 ops/s
[info] # Warmup Iteration   2: 231314.375 ops/s
[info] # Warmup Iteration   3: 243600.687 ops/s
[info] # Warmup Iteration   4: 242195.744 ops/s
[info] # Warmup Iteration   5: 242610.447 ops/s
[info] Iteration   1: 243127.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 242908.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 227721.932 ops/s
[info]                  ·gc.alloc.rate:      8.958 MB/sec
[info]                  ·gc.alloc.rate.norm: 61.901 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 243212.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 242571.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   239908.237 ±(99.9%) 26249.264 ops/s [Average]
[info]   (min, avg, max) = (227721.932, 239908.237, 243212.260), stdev = 6816.851
[info]   CI (99.9%): [213658.973, 266157.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.792 ±(99.9%) 15.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.792, 8.958), stdev = 4.006
[info]   CI (99.9%): [≈ 0, 17.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12.382 ±(99.9%) 106.593 B/op [Average]
[info]   (min, avg, max) = (0.002, 12.382, 61.901), stdev = 27.682
[info]   CI (99.9%): [≈ 0, 118.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.66% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4665.177 ops/s
[info] # Warmup Iteration   2: 16425.889 ops/s
[info] # Warmup Iteration   3: 17378.761 ops/s
[info] # Warmup Iteration   4: 18191.147 ops/s
[info] # Warmup Iteration   5: 18371.539 ops/s
[info] Iteration   1: 17466.622 ops/s
[info]                  ·gc.alloc.rate:                   1129.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              101789.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120229.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17966.673 ops/s
[info]                  ·gc.alloc.rate:               1180.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          103426.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116936.355 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 18362.042 ops/s
[info]                  ·gc.alloc.rate:                   1166.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              99951.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57207.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18367.956 ops/s
[info]                  ·gc.alloc.rate:               1174.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          100644.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114498.038 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 18360.086 ops/s
[info]                  ·gc.alloc.rate:                   1173.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              100592.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114529.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18104.676 ±(99.9%) 1524.468 ops/s [Average]
[info]   (min, avg, max) = (17466.622, 18104.676, 18367.956), stdev = 395.899
[info]   CI (99.9%): [16580.208, 19629.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1164.952 ±(99.9%) 78.509 MB/sec [Average]
[info]   (min, avg, max) = (1129.661, 1164.952, 1180.732), stdev = 20.389
[info]   CI (99.9%): [1086.443, 1243.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101281.104 ±(99.9%) 5275.728 B/op [Average]
[info]   (min, avg, max) = (99951.910, 101281.104, 103426.667), stdev = 1370.090
[info]   CI (99.9%): [96005.376, 106556.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1201.833 ±(99.9%) 1150.202 MB/sec [Average]
[info]   (min, avg, max) = (667.497, 1201.833, 1336.300), stdev = 298.704
[info]   CI (99.9%): [51.631, 2352.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104680.221 ±(99.9%) 102586.576 B/op [Average]
[info]   (min, avg, max) = (57207.511, 104680.221, 120229.992), stdev = 26641.408
[info]   CI (99.9%): [2093.645, 207266.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.207 ±(99.9%) 10.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.207, 5.953), stdev = 2.653
[info]   CI (99.9%): [≈ 0, 11.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   103.537 ±(99.9%) 875.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.537, 510.272), stdev = 227.383
[info]   CI (99.9%): [≈ 0, 979.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.89% complete, ETA 00:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 902358.896 ops/s
[info] # Warmup Iteration   2: 1538873.708 ops/s
[info] # Warmup Iteration   3: 1550640.642 ops/s
[info] # Warmup Iteration   4: 1563699.247 ops/s
[info] # Warmup Iteration   5: 1563791.234 ops/s
[info] Iteration   1: 1533915.114 ops/s
[info]                  ·gc.alloc.rate:               88.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          91.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 524.951 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1310066.636 ops/s
[info]                  ·gc.alloc.rate:      53.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.047 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1459943.593 ops/s
[info]                  ·gc.alloc.rate:      59.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1564111.057 ops/s
[info]                  ·gc.alloc.rate:      63.627 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1559131.123 ops/s
[info]                  ·gc.alloc.rate:      63.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1485433.504 ±(99.9%) 410121.765 ops/s [Average]
[info]   (min, avg, max) = (1310066.636, 1485433.504, 1564111.057), stdev = 106507.320
[info]   CI (99.9%): [1075311.739, 1895555.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   65.708 ±(99.9%) 52.307 MB/sec [Average]
[info]   (min, avg, max) = (53.316, 65.708, 88.832), stdev = 13.584
[info]   CI (99.9%): [13.401, 118.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   69.438 ±(99.9%) 46.724 B/op [Average]
[info]   (min, avg, max) = (64.000, 69.438, 91.144), stdev = 12.134
[info]   CI (99.9%): [22.715, 116.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.326 ±(99.9%) 881.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.326, 511.631), stdev = 228.808
[info]   CI (99.9%): [≈ 0, 983.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   104.990 ±(99.9%) 903.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.990, 524.951), stdev = 234.765
[info]   CI (99.9%): [≈ 0, 1008.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4424.439 ops/s
[info] # Warmup Iteration   2: 60795.672 ops/s
[info] # Warmup Iteration   3: 80778.519 ops/s
[info] # Warmup Iteration   4: 80761.398 ops/s
[info] # Warmup Iteration   5: 81743.412 ops/s
[info] Iteration   1: 83036.897 ops/s
[info]                  ·gc.alloc.rate:               3512.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          66582.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63780.198 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 81449.703 ops/s
[info]                  ·gc.alloc.rate:                   3489.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              67421.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65190.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 82648.266 ops/s
[info]                  ·gc.alloc.rate:               3539.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          67408.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64428.419 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 82965.167 ops/s
[info]                  ·gc.alloc.rate:               3552.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          67386.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3389.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64296.789 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 81209.444 ops/s
[info]                  ·gc.alloc.rate:               3480.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          67461.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65802.269 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82261.895 ±(99.9%) 3341.314 ops/s [Average]
[info]   (min, avg, max) = (81209.444, 82261.895, 83036.897), stdev = 867.729
[info]   CI (99.9%): [78920.581, 85603.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3514.996 ±(99.9%) 119.183 MB/sec [Average]
[info]   (min, avg, max) = (3480.844, 3514.996, 3552.090), stdev = 30.952
[info]   CI (99.9%): [3395.813, 3634.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67252.095 ±(99.9%) 1446.198 B/op [Average]
[info]   (min, avg, max) = (66582.016, 67252.095, 67461.470), stdev = 375.573
[info]   CI (99.9%): [65805.897, 68698.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3381.335 ±(99.9%) 46.411 MB/sec [Average]
[info]   (min, avg, max) = (3365.098, 3381.335, 3395.234), stdev = 12.053
[info]   CI (99.9%): [3334.924, 3427.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64699.548 ±(99.9%) 3066.967 B/op [Average]
[info]   (min, avg, max) = (63780.198, 64699.548, 65802.269), stdev = 796.481
[info]   CI (99.9%): [61632.581, 67766.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.402), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.36% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492195.955 ops/s
[info] # Warmup Iteration   2: 1744338.108 ops/s
[info] # Warmup Iteration   3: 1870324.213 ops/s
[info] # Warmup Iteration   4: 1855227.217 ops/s
[info] # Warmup Iteration   5: 1874626.808 ops/s
[info] Iteration   1: 1858002.198 ops/s
[info]                  ·gc.alloc.rate:                   1018.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1128.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1879562.935 ops/s
[info]                  ·gc.alloc.rate:               1000.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          837.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1883289.802 ops/s
[info]                  ·gc.alloc.rate:                   1017.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1115.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1883494.945 ops/s
[info]                  ·gc.alloc.rate:               1000.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          836.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 557.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1871550.111 ops/s
[info]                  ·gc.alloc.rate:               1019.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          857.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123.735 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1875179.998 ±(99.9%) 41399.808 ops/s [Average]
[info]   (min, avg, max) = (1858002.198, 1875179.998, 1883494.945), stdev = 10751.399
[info]   CI (99.9%): [1833780.190, 1916579.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1011.356 ±(99.9%) 38.606 MB/sec [Average]
[info]   (min, avg, max) = (1000.042, 1011.356, 1019.944), stdev = 10.026
[info]   CI (99.9%): [972.749, 1049.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   848.780 ±(99.9%) 45.932 B/op [Average]
[info]   (min, avg, max) = (836.122, 848.780, 862.854), stdev = 11.928
[info]   CI (99.9%): [802.849, 894.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.584 ±(99.9%) 1407.359 MB/sec [Average]
[info]   (min, avg, max) = (666.821, 1067.584, 1336.288), stdev = 365.487
[info]   CI (99.9%): [≈ 0, 2474.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   896.700 ±(99.9%) 1190.518 B/op [Average]
[info]   (min, avg, max) = (557.757, 896.700, 1128.549), stdev = 309.174
[info]   CI (99.9%): [≈ 0, 2087.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1148780.848 ops/s
[info] # Warmup Iteration   2: 2276944.462 ops/s
[info] # Warmup Iteration   3: 2372442.040 ops/s
[info] # Warmup Iteration   4: 2377867.620 ops/s
[info] # Warmup Iteration   5: 2379422.392 ops/s
[info] Iteration   1: 2384992.005 ops/s
[info]                  ·gc.alloc.rate:               666.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 442.449 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2317225.577 ops/s
[info]                  ·gc.alloc.rate:               649.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2377927.696 ops/s
[info]                  ·gc.alloc.rate:                   665.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2375978.398 ops/s
[info]                  ·gc.alloc.rate:               663.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 444.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2375271.500 ops/s
[info]                  ·gc.alloc.rate:               656.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 444.922 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2366279.035 ±(99.9%) 106626.173 ops/s [Average]
[info]   (min, avg, max) = (2317225.577, 2366279.035, 2384992.005), stdev = 27690.478
[info]   CI (99.9%): [2259652.863, 2472905.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.260 ±(99.9%) 27.328 MB/sec [Average]
[info]   (min, avg, max) = (649.591, 660.260, 666.500), stdev = 7.097
[info]   CI (99.9%): [632.932, 687.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   439.032 ±(99.9%) 9.188 B/op [Average]
[info]   (min, avg, max) = (434.931, 439.032, 441.122), stdev = 2.386
[info]   CI (99.9%): [429.843, 448.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.007 ±(99.9%) 1.446 MB/sec [Average]
[info]   (min, avg, max) = (670.598, 671.007, 671.588), stdev = 0.376
[info]   CI (99.9%): [669.561, 672.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   446.217 ±(99.9%) 20.051 B/op [Average]
[info]   (min, avg, max) = (442.449, 446.217, 455.387), stdev = 5.207
[info]   CI (99.9%): [426.166, 466.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1329178.452 ops/s
[info] # Warmup Iteration   2: 2248985.677 ops/s
[info] # Warmup Iteration   3: 2399865.080 ops/s
[info] # Warmup Iteration   4: 2398899.224 ops/s
[info] # Warmup Iteration   5: 2399879.518 ops/s
[info] Iteration   1: 2399774.316 ops/s
[info]                  ·gc.alloc.rate:      24.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2400697.724 ops/s
[info]                  ·gc.alloc.rate:      24.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2392970.075 ops/s
[info]                  ·gc.alloc.rate:      24.675 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.229 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2398590.657 ops/s
[info]                  ·gc.alloc.rate:      24.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2397437.603 ops/s
[info]                  ·gc.alloc.rate:      24.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2397894.075 ±(99.9%) 11605.577 ops/s [Average]
[info]   (min, avg, max) = (2392970.075, 2397894.075, 2400697.724), stdev = 3013.931
[info]   CI (99.9%): [2386288.499, 2409499.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.452 ±(99.9%) 0.484 MB/sec [Average]
[info]   (min, avg, max) = (24.372, 24.452, 24.675), stdev = 0.126
[info]   CI (99.9%): [23.968, 24.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.046 ±(99.9%) 0.393 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.046, 16.229), stdev = 0.102
[info]   CI (99.9%): [15.653, 16.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10187.667 ops/s
[info] # Warmup Iteration   2: 46152.303 ops/s
[info] # Warmup Iteration   3: 51038.175 ops/s
[info] # Warmup Iteration   4: 51951.169 ops/s
[info] # Warmup Iteration   5: 51509.469 ops/s
[info] Iteration   1: 51790.737 ops/s
[info]                  ·gc.alloc.rate:                   2213.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              67239.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60973.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 51076.452 ops/s
[info]                  ·gc.alloc.rate:                   2194.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              67609.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61661.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 49368.219 ops/s
[info]                  ·gc.alloc.rate:                   2136.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              68110.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63774.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52041.727 ops/s
[info]                  ·gc.alloc.rate:               2248.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          68003.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60536.222 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 51809.604 ops/s
[info]                  ·gc.alloc.rate:               2265.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          68829.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81287.001 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51217.348 ±(99.9%) 4217.410 ops/s [Average]
[info]   (min, avg, max) = (49368.219, 51217.348, 52041.727), stdev = 1095.248
[info]   CI (99.9%): [46999.938, 55434.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2211.786 ±(99.9%) 194.874 MB/sec [Average]
[info]   (min, avg, max) = (2136.488, 2211.786, 2265.758), stdev = 50.608
[info]   CI (99.9%): [2016.912, 2406.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67958.589 ±(99.9%) 2295.356 B/op [Average]
[info]   (min, avg, max) = (67239.936, 67958.589, 68829.157), stdev = 596.097
[info]   CI (99.9%): [65663.233, 70253.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.349 ±(99.9%) 1159.217 MB/sec [Average]
[info]   (min, avg, max) = (2000.473, 2137.349, 2675.853), stdev = 301.045
[info]   CI (99.9%): [978.132, 3296.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65646.622 ±(99.9%) 34005.741 B/op [Average]
[info]   (min, avg, max) = (60536.222, 65646.622, 81287.001), stdev = 8831.183
[info]   CI (99.9%): [31640.881, 99652.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 7.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 4.249), stdev = 1.878
[info]   CI (99.9%): [≈ 0, 8.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.120 ±(99.9%) 219.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.120, 129.053), stdev = 57.008
[info]   CI (99.9%): [≈ 0, 246.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 63.28% complete, ETA 00:42:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91825.173 ops/s
[info] # Warmup Iteration   2: 718116.268 ops/s
[info] # Warmup Iteration   3: 827005.382 ops/s
[info] # Warmup Iteration   4: 844704.025 ops/s
[info] # Warmup Iteration   5: 847085.396 ops/s
[info] Iteration   1: 869652.723 ops/s
[info]                  ·gc.alloc.rate:                   2802.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              5071.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4846.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 872214.202 ops/s
[info]                  ·gc.alloc.rate:                   2798.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              5049.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4827.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 878501.954 ops/s
[info]                  ·gc.alloc.rate:                   2842.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              5092.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4797.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 878433.156 ops/s
[info]                  ·gc.alloc.rate:                   2844.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              5095.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 867733.320 ops/s
[info]                  ·gc.alloc.rate:                   2810.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4886.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   873307.071 ±(99.9%) 19144.989 ops/s [Average]
[info]   (min, avg, max) = (867733.320, 873307.071, 878501.954), stdev = 4971.893
[info]   CI (99.9%): [854162.082, 892452.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2819.660 ±(99.9%) 85.202 MB/sec [Average]
[info]   (min, avg, max) = (2798.273, 2819.660, 2844.076), stdev = 22.127
[info]   CI (99.9%): [2734.458, 2904.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5081.242 ±(99.9%) 79.501 B/op [Average]
[info]   (min, avg, max) = (5049.206, 5081.242, 5096.963), stdev = 20.646
[info]   CI (99.9%): [5001.741, 5160.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2682.336 ±(99.9%) 30.552 MB/sec [Average]
[info]   (min, avg, max) = (2675.305, 2682.336, 2694.661), stdev = 7.934
[info]   CI (99.9%): [2651.785, 2712.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4833.942 ±(99.9%) 132.734 B/op [Average]
[info]   (min, avg, max) = (4797.396, 4833.942, 4886.343), stdev = 34.470
[info]   CI (99.9%): [4701.208, 4966.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.075, 0.188), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 63.51% complete, ETA 00:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.723 ops/s
[info] # Warmup Iteration   2: 4655207.591 ops/s
[info] # Warmup Iteration   3: 5013855.929 ops/s
[info] # Warmup Iteration   4: 5027688.784 ops/s
[info] # Warmup Iteration   5: 5261214.873 ops/s
[info] Iteration   1: 5292710.388 ops/s
[info]                  ·gc.alloc.rate:      322.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5257268.985 ops/s
[info]                  ·gc.alloc.rate:               332.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5275897.290 ops/s
[info]                  ·gc.alloc.rate:      321.808 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5261196.572 ops/s
[info]                  ·gc.alloc.rate:                   340.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4796722.387 ops/s
[info]                  ·gc.alloc.rate:      292.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5176759.124 ±(99.9%) 819817.632 ops/s [Average]
[info]   (min, avg, max) = (4796722.387, 5176759.124, 5292710.388), stdev = 212904.035
[info]   CI (99.9%): [4356941.493, 5996576.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   322.085 ±(99.9%) 69.711 MB/sec [Average]
[info]   (min, avg, max) = (292.765, 322.085, 340.671), stdev = 18.104
[info]   CI (99.9%): [252.374, 391.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   97.887 ±(99.9%) 10.392 B/op [Average]
[info]   (min, avg, max) = (96.000, 97.887, 101.911), stdev = 2.699
[info]   CI (99.9%): [87.494, 108.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.578 ±(99.9%) 1259.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.578, 666.158), stdev = 327.166
[info]   CI (99.9%): [≈ 0, 1495.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   70.486 ±(99.9%) 376.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.486, 199.279), stdev = 97.885
[info]   CI (99.9%): [≈ 0, 447.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.74% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33253.983 ops/s
[info] # Warmup Iteration   2: 756956.063 ops/s
[info] # Warmup Iteration   3: 976414.105 ops/s
[info] # Warmup Iteration   4: 1002381.524 ops/s
[info] # Warmup Iteration   5: 1007602.330 ops/s
[info] Iteration   1: 1004796.978 ops/s
[info]                  ·gc.alloc.rate:               1194.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1870.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2082.671 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1002590.093 ops/s
[info]                  ·gc.alloc.rate:                   1180.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              1853.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2085.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 976978.337 ops/s
[info]                  ·gc.alloc.rate:               1156.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          1863.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2140.367 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1010327.896 ops/s
[info]                  ·gc.alloc.rate:               1180.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          1838.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1035.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1007533.920 ops/s
[info]                  ·gc.alloc.rate:               1179.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          1842.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2079.032 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1000445.445 ±(99.9%) 51738.879 ops/s [Average]
[info]   (min, avg, max) = (976978.337, 1000445.445, 1010327.896), stdev = 13436.423
[info]   CI (99.9%): [948706.566, 1052184.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.413 ±(99.9%) 51.989 MB/sec [Average]
[info]   (min, avg, max) = (1156.808, 1178.413, 1194.244), stdev = 13.501
[info]   CI (99.9%): [1126.424, 1230.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1853.866 ±(99.9%) 51.711 B/op [Average]
[info]   (min, avg, max) = (1838.916, 1853.866, 1870.669), stdev = 13.429
[info]   CI (99.9%): [1802.155, 1905.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1196.433 ±(99.9%) 1145.010 MB/sec [Average]
[info]   (min, avg, max) = (664.510, 1196.433, 1330.898), stdev = 297.356
[info]   CI (99.9%): [51.422, 2341.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1884.483 ±(99.9%) 1830.883 B/op [Average]
[info]   (min, avg, max) = (1035.127, 1884.483, 2140.367), stdev = 475.474
[info]   CI (99.9%): [53.600, 3715.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.97% complete, ETA 00:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3057611.438 ops/s
[info] # Warmup Iteration   2: 8696245.515 ops/s
[info] # Warmup Iteration   3: 9340082.452 ops/s
[info] # Warmup Iteration   4: 9388799.767 ops/s
[info] # Warmup Iteration   5: 9388056.347 ops/s
[info] Iteration   1: 9418859.098 ops/s
[info]                  ·gc.alloc.rate:      430.874 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9395496.502 ops/s
[info]                  ·gc.alloc.rate:               443.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9150418.778 ops/s
[info]                  ·gc.alloc.rate:               456.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          78.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 9359240.737 ops/s
[info]                  ·gc.alloc.rate:      428.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9261352.050 ops/s
[info]                  ·gc.alloc.rate:                   440.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9317073.433 ±(99.9%) 426914.815 ops/s [Average]
[info]   (min, avg, max) = (9150418.778, 9317073.433, 9418859.098), stdev = 110868.422
[info]   CI (99.9%): [8890158.618, 9743988.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439.975 ±(99.9%) 43.404 MB/sec [Average]
[info]   (min, avg, max) = (428.312, 439.975, 456.539), stdev = 11.272
[info]   CI (99.9%): [396.572, 483.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.333 ±(99.9%) 10.307 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.333, 78.523), stdev = 2.677
[info]   CI (99.9%): [64.026, 84.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.106 ±(99.9%) 1328.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.106, 672.085), stdev = 345.039
[info]   CI (99.9%): [≈ 0, 1699.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   63.084 ±(99.9%) 226.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.084, 115.554), stdev = 58.807
[info]   CI (99.9%): [≈ 0, 289.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.20% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7592.474 ops/s
[info] # Warmup Iteration   2: 213812.352 ops/s
[info] # Warmup Iteration   3: 460863.641 ops/s
[info] # Warmup Iteration   4: 474350.489 ops/s
[info] # Warmup Iteration   5: 476040.535 ops/s
[info] Iteration   1: 473986.337 ops/s
[info]                  ·gc.alloc.rate:               2084.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          6921.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6670.255 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 476679.106 ops/s
[info]                  ·gc.alloc.rate:                   2117.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6989.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6647.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 477054.259 ops/s
[info]                  ·gc.alloc.rate:                   2129.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              7026.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6653.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 475059.978 ops/s
[info]                  ·gc.alloc.rate:               2096.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          6945.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6688.028 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 471405.848 ops/s
[info]                  ·gc.alloc.rate:               2107.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          7036.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6750.709 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   474837.106 ±(99.9%) 8792.577 ops/s [Average]
[info]   (min, avg, max) = (471405.848, 474837.106, 477054.259), stdev = 2283.404
[info]   CI (99.9%): [466044.528, 483629.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2107.201 ±(99.9%) 68.074 MB/sec [Average]
[info]   (min, avg, max) = (2084.500, 2107.201, 2129.914), stdev = 17.679
[info]   CI (99.9%): [2039.127, 2175.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6984.099 ±(99.9%) 192.194 B/op [Average]
[info]   (min, avg, max) = (6921.728, 6984.099, 7036.584), stdev = 49.912
[info]   CI (99.9%): [6791.905, 7176.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2016.003 ±(99.9%) 19.407 MB/sec [Average]
[info]   (min, avg, max) = (2008.768, 2016.003, 2022.027), stdev = 5.040
[info]   CI (99.9%): [1996.595, 2035.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6681.970 ±(99.9%) 159.990 B/op [Average]
[info]   (min, avg, max) = (6647.554, 6681.970, 6750.709), stdev = 41.549
[info]   CI (99.9%): [6521.980, 6841.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 1.041), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 1.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.701 ±(99.9%) 5.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.436), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 6.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 64.43% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1151.284 ops/s
[info] # Warmup Iteration   2: 4088.769 ops/s
[info] # Warmup Iteration   3: 4122.007 ops/s
[info] # Warmup Iteration   4: 4603.389 ops/s
[info] # Warmup Iteration   5: 4546.088 ops/s
[info] Iteration   1: 4561.565 ops/s
[info]                  ·gc.alloc.rate:                   2277.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              785842.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     692156.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1467.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4653.399 ops/s
[info]                  ·gc.alloc.rate:                   2358.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              797667.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901482.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.668 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4643.567 ops/s
[info]                  ·gc.alloc.rate:                   2315.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              784725.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677228.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4657.326 ops/s
[info]                  ·gc.alloc.rate:                   2375.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              802750.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     902252.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4646.195 ops/s
[info]                  ·gc.alloc.rate:                   2343.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              793901.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680322.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4632.410 ±(99.9%) 153.965 ops/s [Average]
[info]   (min, avg, max) = (4561.565, 4632.410, 4657.326), stdev = 39.984
[info]   CI (99.9%): [4478.446, 4786.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2334.340 ±(99.9%) 148.687 MB/sec [Average]
[info]   (min, avg, max) = (2277.773, 2334.340, 2375.975), stdev = 38.613
[info]   CI (99.9%): [2185.653, 2483.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792977.557 ±(99.9%) 29662.011 B/op [Average]
[info]   (min, avg, max) = (784725.768, 792977.557, 802750.307), stdev = 7703.130
[info]   CI (99.9%): [763315.546, 822639.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2269.823 ±(99.9%) 1399.883 MB/sec [Average]
[info]   (min, avg, max) = (1998.371, 2269.823, 2670.481), stdev = 363.545
[info]   CI (99.9%): [869.940, 3669.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   770688.543 ±(99.9%) 461612.696 B/op [Average]
[info]   (min, avg, max) = (677228.848, 770688.543, 902252.599), stdev = 119879.351
[info]   CI (99.9%): [309075.847, 1232301.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.967 ±(99.9%) 7.090 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.967, 4.252), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 8.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   332.868 ±(99.9%) 2447.643 B/op [Average]
[info]   (min, avg, max) = (7.051, 332.868, 1467.117), stdev = 635.645
[info]   CI (99.9%): [≈ 0, 2780.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 64.67% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1238.339 ops/s
[info] # Warmup Iteration   2: 5678.738 ops/s
[info] # Warmup Iteration   3: 6549.648 ops/s
[info] # Warmup Iteration   4: 6671.321 ops/s
[info] # Warmup Iteration   5: 6820.660 ops/s
[info] Iteration   1: 6647.867 ops/s
[info]                  ·gc.alloc.rate:                   2262.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              535522.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632299.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.246 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6670.231 ops/s
[info]                  ·gc.alloc.rate:                   2254.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              531918.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     474232.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6787.097 ops/s
[info]                  ·gc.alloc.rate:               2293.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          531775.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466900.554 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6846.606 ops/s
[info]                  ·gc.alloc.rate:               2366.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          543808.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 618610.841 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 6854.811 ops/s
[info]                  ·gc.alloc.rate:               2342.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          537782.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464496.077 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6761.322 ±(99.9%) 374.560 ops/s [Average]
[info]   (min, avg, max) = (6647.867, 6761.322, 6854.811), stdev = 97.272
[info]   CI (99.9%): [6386.762, 7135.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2303.769 ±(99.9%) 188.851 MB/sec [Average]
[info]   (min, avg, max) = (2254.497, 2303.769, 2366.065), stdev = 49.044
[info]   CI (99.9%): [2114.918, 2492.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   536161.537 ±(99.9%) 19133.769 B/op [Average]
[info]   (min, avg, max) = (531775.295, 536161.537, 543808.881), stdev = 4968.979
[info]   CI (99.9%): [517027.768, 555295.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2281.935 ±(99.9%) 1404.736 MB/sec [Average]
[info]   (min, avg, max) = (2009.999, 2281.935, 2691.522), stdev = 364.806
[info]   CI (99.9%): [877.198, 3686.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   531307.802 ±(99.9%) 331752.561 B/op [Average]
[info]   (min, avg, max) = (464496.077, 531307.802, 632299.212), stdev = 86155.086
[info]   CI (99.9%): [199555.241, 863060.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.791), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.272 ±(99.9%) 312.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.272, 187.246), stdev = 81.086
[info]   CI (99.9%): [≈ 0, 359.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 64.90% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29364.400 ops/s
[info] # Warmup Iteration   2: 46179.475 ops/s
[info] # Warmup Iteration   3: 45372.284 ops/s
[info] # Warmup Iteration   4: 47312.761 ops/s
[info] # Warmup Iteration   5: 44967.731 ops/s
[info] Iteration   1: 47627.838 ops/s
[info]                  ·gc.alloc.rate:               786.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          26003.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22166.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 47503.674 ops/s
[info]                  ·gc.alloc.rate:                   813.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              26942.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44494.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47630.903 ops/s
[info]                  ·gc.alloc.rate:               786.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          25977.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22209.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 47708.449 ops/s
[info]                  ·gc.alloc.rate:                   785.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              25925.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22173.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47709.968 ops/s
[info]                  ·gc.alloc.rate:               784.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          25885.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22181.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47636.167 ±(99.9%) 324.020 ops/s [Average]
[info]   (min, avg, max) = (47503.674, 47636.167, 47709.968), stdev = 84.147
[info]   CI (99.9%): [47312.146, 47960.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   791.402 ±(99.9%) 47.382 MB/sec [Average]
[info]   (min, avg, max) = (784.716, 791.402, 813.369), stdev = 12.305
[info]   CI (99.9%): [744.020, 838.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26146.724 ±(99.9%) 1721.487 B/op [Average]
[info]   (min, avg, max) = (25885.765, 26146.724, 26942.320), stdev = 447.065
[info]   CI (99.9%): [24425.237, 27868.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.153 ±(99.9%) 1156.150 MB/sec [Average]
[info]   (min, avg, max) = (670.787, 806.153, 1343.253), stdev = 300.248
[info]   CI (99.9%): [≈ 0, 1962.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26645.210 ±(99.9%) 38421.793 B/op [Average]
[info]   (min, avg, max) = (22166.345, 26645.210, 44494.406), stdev = 9978.018
[info]   CI (99.9%): [≈ 0, 65067.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 1.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 0.690), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 65.13% complete, ETA 00:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1407.199 ops/s
[info] # Warmup Iteration   2: 4186.843 ops/s
[info] # Warmup Iteration   3: 4821.305 ops/s
[info] # Warmup Iteration   4: 4970.801 ops/s
[info] # Warmup Iteration   5: 4935.147 ops/s
[info] Iteration   1: 4869.481 ops/s
[info]                  ·gc.alloc.rate:                   1021.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              330073.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216130.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4926.427 ops/s
[info]                  ·gc.alloc.rate:               1048.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          334975.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 427686.234 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 4977.708 ops/s
[info]                  ·gc.alloc.rate:                   1035.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              327524.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211652.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4947.936 ops/s
[info]                  ·gc.alloc.rate:                   1041.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              331270.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426083.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4960.778 ops/s
[info]                  ·gc.alloc.rate:                   1029.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              326629.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212589.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4936.466 ±(99.9%) 161.214 ops/s [Average]
[info]   (min, avg, max) = (4869.481, 4936.466, 4977.708), stdev = 41.867
[info]   CI (99.9%): [4775.252, 5097.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1035.380 ±(99.9%) 40.582 MB/sec [Average]
[info]   (min, avg, max) = (1021.325, 1035.380, 1048.595), stdev = 10.539
[info]   CI (99.9%): [994.798, 1075.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   330094.729 ±(99.9%) 12745.963 B/op [Average]
[info]   (min, avg, max) = (326629.159, 330094.729, 334975.896), stdev = 3310.086
[info]   CI (99.9%): [317348.766, 342840.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   937.337 ±(99.9%) 1412.600 MB/sec [Average]
[info]   (min, avg, max) = (668.758, 937.337, 1339.583), stdev = 366.848
[info]   CI (99.9%): [≈ 0, 2349.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   298828.332 ±(99.9%) 450187.659 B/op [Average]
[info]   (min, avg, max) = (211652.717, 298828.332, 427686.234), stdev = 116912.306
[info]   CI (99.9%): [≈ 0, 749015.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.082), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.912 ±(99.9%) 41.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.912, 26.142), stdev = 10.692
[info]   CI (99.9%): [≈ 0, 53.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 65.36% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 713.661 ops/s
[info] # Warmup Iteration   2: 4592.249 ops/s
[info] # Warmup Iteration   3: 5017.390 ops/s
[info] # Warmup Iteration   4: 5155.207 ops/s
[info] # Warmup Iteration   5: 5158.469 ops/s
[info] Iteration   1: 5159.605 ops/s
[info]                  ·gc.alloc.rate:               644.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          196691.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201750.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5176.105 ops/s
[info]                  ·gc.alloc.rate:      632.687 MB/sec
[info]                  ·gc.alloc.rate.norm: 192324.946 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5169.597 ops/s
[info]                  ·gc.alloc.rate:               652.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          198582.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201867.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5184.875 ops/s
[info]                  ·gc.alloc.rate:                   653.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              198208.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201283.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.319 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5187.611 ops/s
[info]                  ·gc.alloc.rate:                   655.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              198743.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201773.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5175.559 ±(99.9%) 44.007 ops/s [Average]
[info]   (min, avg, max) = (5159.605, 5175.559, 5187.611), stdev = 11.428
[info]   CI (99.9%): [5131.552, 5219.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   647.661 ±(99.9%) 35.555 MB/sec [Average]
[info]   (min, avg, max) = (632.687, 647.661, 655.166), stdev = 9.234
[info]   CI (99.9%): [612.106, 683.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   196910.118 ±(99.9%) 10352.693 B/op [Average]
[info]   (min, avg, max) = (192324.946, 196910.118, 198743.494), stdev = 2688.562
[info]   CI (99.9%): [186557.425, 207262.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.625 ±(99.9%) 1142.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.625, 665.155), stdev = 296.631
[info]   CI (99.9%): [≈ 0, 1672.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   161335.148 ±(99.9%) 347287.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161335.148, 201867.609), stdev = 90189.374
[info]   CI (99.9%): [≈ 0, 508622.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.527 ±(99.9%) 13.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.527, 6.319), stdev = 3.460
[info]   CI (99.9%): [≈ 0, 15.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 65.59% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3636.429 ops/s
[info] # Warmup Iteration   2: 6000.247 ops/s
[info] # Warmup Iteration   3: 6413.507 ops/s
[info] # Warmup Iteration   4: 6607.356 ops/s
[info] # Warmup Iteration   5: 6570.342 ops/s
[info] Iteration   1: 6551.090 ops/s
[info]                  ·gc.alloc.rate:                   337.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              81130.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122891.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6219.053 ops/s
[info]                  ·gc.alloc.rate:      304.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 76928.069 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6388.658 ops/s
[info]                  ·gc.alloc.rate:                   324.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              79944.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126026.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.562 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6594.684 ops/s
[info]                  ·gc.alloc.rate:      322.399 MB/sec
[info]                  ·gc.alloc.rate.norm: 76928.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6585.350 ops/s
[info]                  ·gc.alloc.rate:               346.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          82752.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160223.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6467.767 ±(99.9%) 623.855 ops/s [Average]
[info]   (min, avg, max) = (6219.053, 6467.767, 6594.684), stdev = 162.013
[info]   CI (99.9%): [5843.912, 7091.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   327.012 ±(99.9%) 62.004 MB/sec [Average]
[info]   (min, avg, max) = (304.125, 327.012, 346.261), stdev = 16.102
[info]   CI (99.9%): [265.007, 389.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79536.673 ±(99.9%) 9940.531 B/op [Average]
[info]   (min, avg, max) = (76928.069, 79536.673, 82752.588), stdev = 2581.524
[info]   CI (99.9%): [69596.142, 89477.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.722 ±(99.9%) 1216.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.722, 670.421), stdev = 315.935
[info]   CI (99.9%): [≈ 0, 1555.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81828.144 ±(99.9%) 293111.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81828.144, 160223.432), stdev = 76120.207
[info]   CI (99.9%): [≈ 0, 374939.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.013 ±(99.9%) 5.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.013, 2.562), stdev = 1.387
[info]   CI (99.9%): [≈ 0, 6.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.82% complete, ETA 00:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3905.568 ops/s
[info] # Warmup Iteration   2: 6267.699 ops/s
[info] # Warmup Iteration   3: 6667.700 ops/s
[info] # Warmup Iteration   4: 6652.991 ops/s
[info] # Warmup Iteration   5: 6650.007 ops/s
[info] Iteration   1: 6669.566 ops/s
[info]                  ·gc.alloc.rate:      278.188 MB/sec
[info]                  ·gc.alloc.rate.norm: 65637.478 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6654.482 ops/s
[info]                  ·gc.alloc.rate:               293.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          69310.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120989.538 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6663.515 ops/s
[info]                  ·gc.alloc.rate:      276.906 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6632.020 ops/s
[info]                  ·gc.alloc.rate:                   294.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              69944.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121390.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6655.640 ops/s
[info]                  ·gc.alloc.rate:      277.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 65628.437 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6655.045 ±(99.9%) 54.910 ops/s [Average]
[info]   (min, avg, max) = (6632.020, 6655.045, 6669.566), stdev = 14.260
[info]   CI (99.9%): [6600.134, 6709.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   284.090 ±(99.9%) 34.651 MB/sec [Average]
[info]   (min, avg, max) = (276.906, 284.090, 294.755), stdev = 8.999
[info]   CI (99.9%): [249.439, 318.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67184.138 ±(99.9%) 8639.356 B/op [Average]
[info]   (min, avg, max) = (65400.065, 67184.138, 69944.611), stdev = 2243.613
[info]   CI (99.9%): [58544.782, 75823.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.630 ±(99.9%) 1078.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.630, 511.595), stdev = 280.201
[info]   CI (99.9%): [≈ 0, 1283.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48476.062 ±(99.9%) 255600.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48476.062, 121390.770), stdev = 66378.733
[info]   CI (99.9%): [≈ 0, 304076.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.976 ±(99.9%) 17.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.976, 9.879), stdev = 4.418
[info]   CI (99.9%): [≈ 0, 18.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 66.05% complete, ETA 00:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1752.100 ops/s
[info] # Warmup Iteration   2: 6116.746 ops/s
[info] # Warmup Iteration   3: 7916.320 ops/s
[info] # Warmup Iteration   4: 8101.334 ops/s
[info] # Warmup Iteration   5: 7941.130 ops/s
[info] Iteration   1: 8104.641 ops/s
[info]                  ·gc.alloc.rate:                   1716.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              333362.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     390467.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8133.278 ops/s
[info]                  ·gc.alloc.rate:                   1705.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              329951.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259533.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 596.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8046.163 ops/s
[info]                  ·gc.alloc.rate:                   1712.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              334936.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393085.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8022.514 ops/s
[info]                  ·gc.alloc.rate:                   1707.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              334996.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262111.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7902.347 ops/s
[info]                  ·gc.alloc.rate:               1707.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          340070.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 399185.879 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8041.788 ±(99.9%) 345.247 ops/s [Average]
[info]   (min, avg, max) = (7902.347, 8041.788, 8133.278), stdev = 89.660
[info]   CI (99.9%): [7696.541, 8387.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1709.920 ±(99.9%) 17.737 MB/sec [Average]
[info]   (min, avg, max) = (1705.189, 1709.920, 1716.758), stdev = 4.606
[info]   CI (99.9%): [1692.183, 1727.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334663.177 ±(99.9%) 14058.867 B/op [Average]
[info]   (min, avg, max) = (329951.111, 334663.177, 340070.467), stdev = 3651.043
[info]   CI (99.9%): [320604.310, 348722.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1740.471 ±(99.9%) 1412.305 MB/sec [Average]
[info]   (min, avg, max) = (1336.141, 1740.471, 2010.839), stdev = 366.771
[info]   CI (99.9%): [328.166, 3152.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   340876.781 ±(99.9%) 281687.151 B/op [Average]
[info]   (min, avg, max) = (259533.838, 340876.781, 399185.879), stdev = 73153.259
[info]   CI (99.9%): [59189.630, 622563.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.863 ±(99.9%) 5.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.863, 3.081), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   167.420 ±(99.9%) 981.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.420, 596.148), stdev = 254.888
[info]   CI (99.9%): [≈ 0, 1148.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 66.28% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.692 ops/s
[info] # Warmup Iteration   2: 17794.462 ops/s
[info] # Warmup Iteration   3: 18696.039 ops/s
[info] # Warmup Iteration   4: 19104.851 ops/s
[info] # Warmup Iteration   5: 19112.830 ops/s
[info] Iteration   1: 19147.350 ops/s
[info]                  ·gc.alloc.rate:      472.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18968.568 ops/s
[info]                  ·gc.alloc.rate:                   485.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              40285.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55186.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18916.679 ops/s
[info]                  ·gc.alloc.rate:                   482.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              40134.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55255.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.464 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19151.151 ops/s
[info]                  ·gc.alloc.rate:      472.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18549.083 ops/s
[info]                  ·gc.alloc.rate:               481.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          40851.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56351.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18946.566 ±(99.9%) 946.231 ops/s [Average]
[info]   (min, avg, max) = (18549.083, 18946.566, 19151.151), stdev = 245.733
[info]   CI (99.9%): [18000.335, 19892.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   478.901 ±(99.9%) 23.264 MB/sec [Average]
[info]   (min, avg, max) = (472.435, 478.901, 485.547), stdev = 6.042
[info]   CI (99.9%): [455.636, 502.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39787.141 ±(99.9%) 3511.879 B/op [Average]
[info]   (min, avg, max) = (38832.023, 39787.141, 40851.960), stdev = 912.024
[info]   CI (99.9%): [36275.262, 43299.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.721 ±(99.9%) 1401.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.721, 665.146), stdev = 363.981
[info]   CI (99.9%): [≈ 0, 1800.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   33358.681 ±(99.9%) 117273.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33358.681, 56351.351), stdev = 30455.676
[info]   CI (99.9%): [≈ 0, 150632.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 8.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.748), stdev = 2.119
[info]   CI (99.9%): [≈ 0, 9.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   79.475 ±(99.9%) 676.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.475, 393.909), stdev = 175.781
[info]   CI (99.9%): [≈ 0, 756.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 66.51% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3548.636 ops/s
[info] # Warmup Iteration   2: 12685.376 ops/s
[info] # Warmup Iteration   3: 14949.723 ops/s
[info] # Warmup Iteration   4: 14714.238 ops/s
[info] # Warmup Iteration   5: 15012.364 ops/s
[info] Iteration   1: 15038.547 ops/s
[info]                  ·gc.alloc.rate:               412.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          43152.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53540.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 12891.095 ops/s
[info]                  ·gc.alloc.rate:      349.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 42710.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14848.214 ops/s
[info]                  ·gc.alloc.rate:               426.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          45181.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70076.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 15040.523 ops/s
[info]                  ·gc.alloc.rate:      400.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 41920.198 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14993.556 ops/s
[info]                  ·gc.alloc.rate:               417.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          43799.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69399.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14562.387 ±(99.9%) 3610.255 ops/s [Average]
[info]   (min, avg, max) = (12891.095, 14562.387, 15040.523), stdev = 937.572
[info]   CI (99.9%): [10952.132, 18172.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   401.318 ±(99.9%) 116.134 MB/sec [Average]
[info]   (min, avg, max) = (349.987, 401.318, 426.321), stdev = 30.160
[info]   CI (99.9%): [285.184, 517.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43352.859 ±(99.9%) 4735.530 B/op [Average]
[info]   (min, avg, max) = (41920.198, 43352.859, 45181.557), stdev = 1229.802
[info]   CI (99.9%): [38617.329, 48088.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.816 ±(99.9%) 1310.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.816, 661.227), stdev = 340.376
[info]   CI (99.9%): [≈ 0, 1677.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38603.381 ±(99.9%) 138067.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38603.381, 70076.876), stdev = 35855.737
[info]   CI (99.9%): [≈ 0, 176671.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.74% complete, ETA 00:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14075.587 ops/s
[info] # Warmup Iteration   2: 23112.915 ops/s
[info] # Warmup Iteration   3: 22615.135 ops/s
[info] # Warmup Iteration   4: 23667.887 ops/s
[info] # Warmup Iteration   5: 23400.524 ops/s
[info] Iteration   1: 23146.611 ops/s
[info]                  ·gc.alloc.rate:               445.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          30268.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34786.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 23324.839 ops/s
[info]                  ·gc.alloc.rate:      428.803 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23291.297 ops/s
[info]                  ·gc.alloc.rate:               443.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          29977.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45282.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 23264.868 ops/s
[info]                  ·gc.alloc.rate:                   447.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              30265.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45331.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23389.821 ops/s
[info]                  ·gc.alloc.rate:      430.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23283.487 ±(99.9%) 345.270 ops/s [Average]
[info]   (min, avg, max) = (23146.611, 23283.487, 23389.821), stdev = 89.666
[info]   CI (99.9%): [22938.217, 23628.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439.065 ±(99.9%) 34.337 MB/sec [Average]
[info]   (min, avg, max) = (428.803, 439.065, 447.429), stdev = 8.917
[info]   CI (99.9%): [404.729, 473.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29673.414 ±(99.9%) 2659.509 B/op [Average]
[info]   (min, avg, max) = (28928.018, 29673.414, 30268.725), stdev = 690.666
[info]   CI (99.9%): [27013.905, 32332.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.453 ±(99.9%) 1325.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.453, 670.289), stdev = 344.304
[info]   CI (99.9%): [≈ 0, 1696.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25080.220 ±(99.9%) 89698.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25080.220, 45331.648), stdev = 23294.412
[info]   CI (99.9%): [≈ 0, 114778.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.282 ±(99.9%) 2.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.282, 1.408), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 2.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.97% complete, ETA 00:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135.755 ops/s
[info] # Warmup Iteration   2: 3456.516 ops/s
[info] # Warmup Iteration   3: 4054.534 ops/s
[info] # Warmup Iteration   4: 4216.472 ops/s
[info] # Warmup Iteration   5: 4222.839 ops/s
[info] Iteration   1: 4245.768 ops/s
[info]                  ·gc.alloc.rate:                   2597.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              962957.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745138.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4176.207 ops/s
[info]                  ·gc.alloc.rate:                   2565.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              966870.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1011046.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4201.724 ops/s
[info]                  ·gc.alloc.rate:                   2597.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              972841.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1006413.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4261.255 ops/s
[info]                  ·gc.alloc.rate:                   2646.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              977538.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     994339.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4256.823 ops/s
[info]                  ·gc.alloc.rate:               2617.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          967576.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 748138.536 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4228.355 ±(99.9%) 144.394 ops/s [Average]
[info]   (min, avg, max) = (4176.207, 4228.355, 4261.255), stdev = 37.499
[info]   CI (99.9%): [4083.962, 4372.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2605.016 ±(99.9%) 114.766 MB/sec [Average]
[info]   (min, avg, max) = (2565.756, 2605.016, 2646.950), stdev = 29.804
[info]   CI (99.9%): [2490.250, 2719.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   969556.988 ±(99.9%) 21882.784 B/op [Average]
[info]   (min, avg, max) = (962957.738, 969556.988, 977538.338), stdev = 5682.889
[info]   CI (99.9%): [947674.204, 991439.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2419.252 ±(99.9%) 1414.470 MB/sec [Average]
[info]   (min, avg, max) = (2010.283, 2419.252, 2692.443), stdev = 367.333
[info]   CI (99.9%): [1004.782, 3833.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   901015.146 ±(99.9%) 543179.252 B/op [Average]
[info]   (min, avg, max) = (745138.302, 901015.146, 1011046.167), stdev = 141061.927
[info]   CI (99.9%): [357835.894, 1444194.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.416), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.081 ±(99.9%) 276.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.081, 156.897), stdev = 71.904
[info]   CI (99.9%): [≈ 0, 332.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 67.21% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2256.051 ops/s
[info] # Warmup Iteration   2: 9618.581 ops/s
[info] # Warmup Iteration   3: 10834.007 ops/s
[info] # Warmup Iteration   4: 10574.966 ops/s
[info] # Warmup Iteration   5: 10773.806 ops/s
[info] Iteration   1: 10881.233 ops/s
[info]                  ·gc.alloc.rate:                   2184.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              315897.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290853.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 557.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 10734.199 ops/s
[info]                  ·gc.alloc.rate:                   2190.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              321160.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392043.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10718.982 ops/s
[info]                  ·gc.alloc.rate:                   2163.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              317681.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294295.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10779.953 ops/s
[info]                  ·gc.alloc.rate:                   2190.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              319789.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292799.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10742.001 ops/s
[info]                  ·gc.alloc.rate:               2183.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          319871.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 294497.215 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10771.274 ±(99.9%) 252.006 ops/s [Average]
[info]   (min, avg, max) = (10718.982, 10771.274, 10881.233), stdev = 65.445
[info]   CI (99.9%): [10519.268, 11023.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2182.470 ±(99.9%) 42.517 MB/sec [Average]
[info]   (min, avg, max) = (2163.631, 2182.470, 2190.489), stdev = 11.041
[info]   CI (99.9%): [2139.954, 2224.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   318879.870 ±(99.9%) 8018.074 B/op [Average]
[info]   (min, avg, max) = (315897.093, 318879.870, 321160.242), stdev = 2082.268
[info]   CI (99.9%): [310861.796, 326897.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2141.058 ±(99.9%) 1147.018 MB/sec [Average]
[info]   (min, avg, max) = (2004.357, 2141.058, 2673.890), stdev = 297.877
[info]   CI (99.9%): [994.040, 3288.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   312898.070 ±(99.9%) 170460.150 B/op [Average]
[info]   (min, avg, max) = (290853.633, 312898.070, 392043.970), stdev = 44267.960
[info]   CI (99.9%): [142437.920, 483358.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.854), stdev = 1.701
[info]   CI (99.9%): [≈ 0, 7.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   117.568 ±(99.9%) 946.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.568, 557.350), stdev = 245.907
[info]   CI (99.9%): [≈ 0, 1064.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 67.44% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.798 ops/s
[info] # Warmup Iteration   2: 44561.154 ops/s
[info] # Warmup Iteration   3: 57376.903 ops/s
[info] # Warmup Iteration   4: 57431.553 ops/s
[info] # Warmup Iteration   5: 56229.578 ops/s
[info] Iteration   1: 56051.397 ops/s
[info]                  ·gc.alloc.rate:                   545.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              15306.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18667.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 56187.129 ops/s
[info]                  ·gc.alloc.rate:               538.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          15070.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18622.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 56263.034 ops/s
[info]                  ·gc.alloc.rate:               551.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          15406.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18553.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 56386.521 ops/s
[info]                  ·gc.alloc.rate:      527.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52448.931 ops/s
[info]                  ·gc.alloc.rate:                   506.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              15197.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19959.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   55467.402 ±(99.9%) 6514.316 ops/s [Average]
[info]   (min, avg, max) = (52448.931, 55467.402, 56386.521), stdev = 1691.747
[info]   CI (99.9%): [48953.086, 61981.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   533.630 ±(99.9%) 67.942 MB/sec [Average]
[info]   (min, avg, max) = (506.449, 533.630, 551.343), stdev = 17.644
[info]   CI (99.9%): [465.688, 601.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15138.458 ±(99.9%) 1036.282 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15138.458, 15406.053), stdev = 269.119
[info]   CI (99.9%): [14102.176, 16174.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.754 ±(99.9%) 1144.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.754, 665.146), stdev = 297.260
[info]   CI (99.9%): [≈ 0, 1676.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15160.470 ±(99.9%) 32711.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15160.470, 19959.264), stdev = 8495.041
[info]   CI (99.9%): [≈ 0, 47871.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.367 ±(99.9%) 2.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.249), stdev = 0.555
[info]   CI (99.9%): [≈ 0, 2.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.67% complete, ETA 00:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14737.665 ops/s
[info] # Warmup Iteration   2: 43279.729 ops/s
[info] # Warmup Iteration   3: 43743.015 ops/s
[info] # Warmup Iteration   4: 45334.279 ops/s
[info] # Warmup Iteration   5: 45856.317 ops/s
[info] Iteration   1: 46114.968 ops/s
[info]                  ·gc.alloc.rate:               684.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          23371.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22576.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 44906.003 ops/s
[info]                  ·gc.alloc.rate:               670.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          23487.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23183.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 44882.613 ops/s
[info]                  ·gc.alloc.rate:                   669.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              23478.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23265.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44810.093 ops/s
[info]                  ·gc.alloc.rate:                   665.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              23382.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23303.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 44914.389 ops/s
[info]                  ·gc.alloc.rate:               664.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          23298.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23307.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45125.613 ±(99.9%) 2135.519 ops/s [Average]
[info]   (min, avg, max) = (44810.093, 45125.613, 46114.968), stdev = 554.587
[info]   CI (99.9%): [42990.095, 47261.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   671.053 ±(99.9%) 30.922 MB/sec [Average]
[info]   (min, avg, max) = (664.881, 671.053, 684.787), stdev = 8.030
[info]   CI (99.9%): [640.130, 701.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23403.428 ±(99.9%) 305.418 B/op [Average]
[info]   (min, avg, max) = (23298.264, 23403.428, 23487.192), stdev = 79.316
[info]   CI (99.9%): [23098.011, 23708.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.055 ±(99.9%) 5.833 MB/sec [Average]
[info]   (min, avg, max) = (661.494, 663.055, 665.149), stdev = 1.515
[info]   CI (99.9%): [657.222, 668.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23127.374 ±(99.9%) 1201.981 B/op [Average]
[info]   (min, avg, max) = (22576.179, 23127.374, 23307.654), stdev = 312.151
[info]   CI (99.9%): [21925.394, 24329.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 1.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 0.731), stdev = 0.400
[info]   CI (99.9%): [≈ 0, 1.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.90% complete, ETA 00:37:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39948.733 ops/s
[info] # Warmup Iteration   2: 91789.610 ops/s
[info] # Warmup Iteration   3: 92548.034 ops/s
[info] # Warmup Iteration   4: 91545.770 ops/s
[info] # Warmup Iteration   5: 95494.172 ops/s
[info] Iteration   1: 95439.628 ops/s
[info]                  ·gc.alloc.rate:               736.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          12140.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11050.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 95185.762 ops/s
[info]                  ·gc.alloc.rate:                   738.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              12217.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11091.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 95265.190 ops/s
[info]                  ·gc.alloc.rate:               739.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          12212.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11082.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 95418.452 ops/s
[info]                  ·gc.alloc.rate:                   735.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              12125.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11069.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 95423.631 ops/s
[info]                  ·gc.alloc.rate:               734.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          12115.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11068.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   95346.533 ±(99.9%) 440.084 ops/s [Average]
[info]   (min, avg, max) = (95185.762, 95346.533, 95439.628), stdev = 114.288
[info]   CI (99.9%): [94906.449, 95786.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   736.848 ±(99.9%) 8.236 MB/sec [Average]
[info]   (min, avg, max) = (734.681, 736.848, 739.280), stdev = 2.139
[info]   CI (99.9%): [728.612, 745.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12162.381 ±(99.9%) 189.178 B/op [Average]
[info]   (min, avg, max) = (12115.277, 12162.381, 12217.655), stdev = 49.129
[info]   CI (99.9%): [11973.203, 12351.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.821 ±(99.9%) 1.672 MB/sec [Average]
[info]   (min, avg, max) = (670.116, 670.821, 671.230), stdev = 0.434
[info]   CI (99.9%): [669.149, 672.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11072.517 ±(99.9%) 59.050 B/op [Average]
[info]   (min, avg, max) = (11050.708, 11072.517, 11091.322), stdev = 15.335
[info]   CI (99.9%): [11013.467, 11131.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 1.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.687), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 68.13% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42800.140 ops/s
[info] # Warmup Iteration   2: 99984.461 ops/s
[info] # Warmup Iteration   3: 102593.795 ops/s
[info] # Warmup Iteration   4: 105671.049 ops/s
[info] # Warmup Iteration   5: 106188.382 ops/s
[info] Iteration   1: 106312.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106226.636 ops/s
[info]                  ·gc.alloc.rate:      0.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.670 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 106278.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106292.238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 106255.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   106273.071 ±(99.9%) 127.939 ops/s [Average]
[info]   (min, avg, max) = (106226.636, 106273.071, 106312.618), stdev = 33.225
[info]   CI (99.9%): [106145.132, 106401.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.537 ±(99.9%) 4.590 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.537, 2.670), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.36% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316.717 ops/s
[info] # Warmup Iteration   2: 7001.458 ops/s
[info] # Warmup Iteration   3: 7895.622 ops/s
[info] # Warmup Iteration   4: 7880.600 ops/s
[info] # Warmup Iteration   5: 7895.384 ops/s
[info] Iteration   1: 7905.843 ops/s
[info]                  ·gc.alloc.rate:                   2401.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              478145.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533702.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7924.032 ops/s
[info]                  ·gc.alloc.rate:                   2380.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              472714.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400393.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7894.004 ops/s
[info]                  ·gc.alloc.rate:                   2386.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              475510.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     535819.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7923.665 ops/s
[info]                  ·gc.alloc.rate:               2394.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          475533.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 401914.445 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7922.150 ops/s
[info]                  ·gc.alloc.rate:                   2393.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              475560.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402876.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7913.939 ±(99.9%) 51.907 ops/s [Average]
[info]   (min, avg, max) = (7894.004, 7913.939, 7924.032), stdev = 13.480
[info]   CI (99.9%): [7862.031, 7965.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2391.378 ±(99.9%) 31.881 MB/sec [Average]
[info]   (min, avg, max) = (2380.095, 2391.378, 2401.866), stdev = 8.279
[info]   CI (99.9%): [2359.497, 2423.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   475492.867 ±(99.9%) 7396.412 B/op [Average]
[info]   (min, avg, max) = (472714.933, 475492.867, 478145.193), stdev = 1920.825
[info]   CI (99.9%): [468096.455, 482889.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2287.597 ±(99.9%) 1397.713 MB/sec [Average]
[info]   (min, avg, max) = (2015.958, 2287.597, 2689.417), stdev = 362.982
[info]   CI (99.9%): [889.884, 3685.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   454941.089 ±(99.9%) 280613.622 B/op [Average]
[info]   (min, avg, max) = (400393.044, 454941.089, 535819.553), stdev = 72874.466
[info]   CI (99.9%): [174327.467, 735554.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.183 ±(99.9%) 1.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.666), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.445 ±(99.9%) 214.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.445, 132.597), stdev = 55.702
[info]   CI (99.9%): [≈ 0, 250.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.59% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 849724.521 ops/s
[info] # Warmup Iteration   2: 7760951.122 ops/s
[info] # Warmup Iteration   3: 8317142.891 ops/s
[info] # Warmup Iteration   4: 8495118.011 ops/s
[info] # Warmup Iteration   5: 8584050.504 ops/s
[info] Iteration   1: 8563098.449 ops/s
[info]                  ·gc.alloc.rate:                   4713.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4736.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     870.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8591123.871 ops/s
[info]                  ·gc.alloc.rate:                   4702.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8554125.157 ops/s
[info]                  ·gc.alloc.rate:                   4713.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     875.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8557465.449 ops/s
[info]                  ·gc.alloc.rate:                   4713.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     876.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8545639.879 ops/s
[info]                  ·gc.alloc.rate:                   4689.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8562290.561 ±(99.9%) 66673.241 ops/s [Average]
[info]   (min, avg, max) = (8545639.879, 8562290.561, 8591123.871), stdev = 17314.829
[info]   CI (99.9%): [8495617.320, 8628963.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4706.567 ±(99.9%) 40.328 MB/sec [Average]
[info]   (min, avg, max) = (4689.757, 4706.567, 4713.590), stdev = 10.473
[info]   CI (99.9%): [4666.239, 4746.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   865.052 ±(99.9%) 9.127 B/op [Average]
[info]   (min, avg, max) = (861.513, 865.052, 866.887), stdev = 2.370
[info]   CI (99.9%): [855.925, 874.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4482.648 ±(99.9%) 1424.860 MB/sec [Average]
[info]   (min, avg, max) = (4070.112, 4482.648, 4762.890), stdev = 370.032
[info]   CI (99.9%): [3057.788, 5907.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   823.930 ±(99.9%) 263.805 B/op [Average]
[info]   (min, avg, max) = (745.616, 823.930, 876.001), stdev = 68.509
[info]   CI (99.9%): [560.125, 1087.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.008, 0.012), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.82% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.719 ops/s
[info] # Warmup Iteration   2: 36671949.208 ops/s
[info] # Warmup Iteration   3: 37674165.449 ops/s
[info] # Warmup Iteration   4: 38235544.617 ops/s
[info] # Warmup Iteration   5: 35145653.982 ops/s
[info] Iteration   1: 38239931.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38239467.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38255522.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38316204.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38278385.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38265902.511 ±(99.9%) 124286.514 ops/s [Average]
[info]   (min, avg, max) = (38239467.596, 38265902.511, 38316204.714), stdev = 32276.813
[info]   CI (99.9%): [38141615.997, 38390189.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 69.05% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 563809.471 ops/s
[info] # Warmup Iteration   2: 9686662.328 ops/s
[info] # Warmup Iteration   3: 10329581.498 ops/s
[info] # Warmup Iteration   4: 10299296.493 ops/s
[info] # Warmup Iteration   5: 10133941.263 ops/s
[info] Iteration   1: 10146679.877 ops/s
[info]                  ·gc.alloc.rate:               3485.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          540.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3344.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 518.594 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10134583.535 ops/s
[info]                  ·gc.alloc.rate:                   3479.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              540.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10159505.505 ops/s
[info]                  ·gc.alloc.rate:               3489.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          540.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521.537 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 9973626.300 ops/s
[info]                  ·gc.alloc.rate:               3404.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          536.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.337 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 10045051.460 ops/s
[info]                  ·gc.alloc.rate:                   3453.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              541.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     530.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10091889.335 ±(99.9%) 307911.154 ops/s [Average]
[info]   (min, avg, max) = (9973626.300, 10091889.335, 10159505.505), stdev = 79963.549
[info]   CI (99.9%): [9783978.181, 10399800.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3462.422 ±(99.9%) 136.796 MB/sec [Average]
[info]   (min, avg, max) = (3404.207, 3462.422, 3489.871), stdev = 35.525
[info]   CI (99.9%): [3325.626, 3599.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   539.901 ±(99.9%) 6.408 B/op [Average]
[info]   (min, avg, max) = (536.964, 539.901, 541.054), stdev = 1.664
[info]   CI (99.9%): [533.492, 546.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3230.504 ±(99.9%) 1137.290 MB/sec [Average]
[info]   (min, avg, max) = (2702.865, 3230.504, 3384.862), stdev = 295.351
[info]   CI (99.9%): [2093.214, 4367.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   503.539 ±(99.9%) 167.072 B/op [Average]
[info]   (min, avg, max) = (426.337, 503.539, 530.346), stdev = 43.388
[info]   CI (99.9%): [336.467, 670.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 69.28% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19799791.854 ops/s
[info] # Warmup Iteration   2: 44944811.265 ops/s
[info] # Warmup Iteration   3: 49344420.383 ops/s
[info] # Warmup Iteration   4: 49592120.930 ops/s
[info] # Warmup Iteration   5: 49577447.537 ops/s
[info] Iteration   1: 49568397.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49447193.568 ops/s
[info]                  ·gc.alloc.rate:      1.250 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48730750.892 ops/s
[info]                  ·gc.alloc.rate:      9.947 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.321 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49599775.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49591452.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   49387513.999 ±(99.9%) 1433381.377 ops/s [Average]
[info]   (min, avg, max) = (48730750.892, 49387513.999, 49599775.282), stdev = 372244.592
[info]   CI (99.9%): [47954132.622, 50820895.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2.240 ±(99.9%) 16.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.240, 9.947), stdev = 4.343
[info]   CI (99.9%): [≈ 0, 18.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.072 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.072, 0.321), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.52% complete, ETA 00:35:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6705054.633 ops/s
[info] # Warmup Iteration   2: 30710685.861 ops/s
[info] # Warmup Iteration   3: 30384766.034 ops/s
[info] # Warmup Iteration   4: 31508360.560 ops/s
[info] # Warmup Iteration   5: 31695691.743 ops/s
[info] Iteration   1: 31427812.677 ops/s
[info]                  ·gc.alloc.rate:                   836.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 31391327.909 ops/s
[info]                  ·gc.alloc.rate:               826.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 31602776.066 ops/s
[info]                  ·gc.alloc.rate:                   820.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 31578309.309 ops/s
[info]                  ·gc.alloc.rate:               818.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 31725480.700 ops/s
[info]                  ·gc.alloc.rate:               821.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31545141.332 ±(99.9%) 525047.505 ops/s [Average]
[info]   (min, avg, max) = (31391327.909, 31545141.332, 31725480.700), stdev = 136353.170
[info]   CI (99.9%): [31020093.827, 32070188.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   824.863 ±(99.9%) 27.559 MB/sec [Average]
[info]   (min, avg, max) = (818.930, 824.863, 836.621), stdev = 7.157
[info]   CI (99.9%): [797.304, 852.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.148 ±(99.9%) 1.892 B/op [Average]
[info]   (min, avg, max) = (40.767, 41.148, 41.879), stdev = 0.491
[info]   CI (99.9%): [39.256, 43.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.772 ±(99.9%) 1156.166 MB/sec [Average]
[info]   (min, avg, max) = (671.851, 806.772, 1343.879), stdev = 300.253
[info]   CI (99.9%): [≈ 0, 1962.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.268 ±(99.9%) 58.127 B/op [Average]
[info]   (min, avg, max) = (33.378, 40.268, 67.271), stdev = 15.096
[info]   CI (99.9%): [≈ 0, 98.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.75% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 523998.904 ops/s
[info] # Warmup Iteration   2: 7875717.832 ops/s
[info] # Warmup Iteration   3: 8721342.383 ops/s
[info] # Warmup Iteration   4: 8742893.334 ops/s
[info] # Warmup Iteration   5: 8866394.156 ops/s
[info] Iteration   1: 8942329.415 ops/s
[info]                  ·gc.alloc.rate:               3995.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          703.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3347.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 588.962 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 8826582.278 ops/s
[info]                  ·gc.alloc.rate:                   3972.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4032.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8870847.892 ops/s
[info]                  ·gc.alloc.rate:               3997.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          708.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4052.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718.599 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 8919371.093 ops/s
[info]                  ·gc.alloc.rate:               3985.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          703.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 597.277 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 8768162.909 ops/s
[info]                  ·gc.alloc.rate:                   3950.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              709.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8865458.718 ±(99.9%) 271070.998 ops/s [Average]
[info]   (min, avg, max) = (8768162.909, 8865458.718, 8942329.415), stdev = 70396.277
[info]   CI (99.9%): [8594387.720, 9136529.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3980.663 ±(99.9%) 74.607 MB/sec [Average]
[info]   (min, avg, max) = (3950.822, 3980.663, 3997.854), stdev = 19.375
[info]   CI (99.9%): [3906.057, 4055.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   706.562 ±(99.9%) 12.050 B/op [Average]
[info]   (min, avg, max) = (703.048, 706.562, 709.154), stdev = 3.129
[info]   CI (99.9%): [694.512, 718.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3777.750 ±(99.9%) 1448.096 MB/sec [Average]
[info]   (min, avg, max) = (3347.405, 3777.750, 4070.967), stdev = 376.066
[info]   CI (99.9%): [2329.654, 5225.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   670.930 ±(99.9%) 274.384 B/op [Average]
[info]   (min, avg, max) = (588.962, 670.930, 730.719), stdev = 71.257
[info]   CI (99.9%): [396.545, 945.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 69.98% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3327959.285 ops/s
[info] # Warmup Iteration   2: 13609177.432 ops/s
[info] # Warmup Iteration   3: 13919297.189 ops/s
[info] # Warmup Iteration   4: 14001511.507 ops/s
[info] # Warmup Iteration   5: 14072339.779 ops/s
[info] Iteration   1: 14318210.011 ops/s
[info]                  ·gc.alloc.rate:                   1727.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              189.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 14291093.514 ops/s
[info]                  ·gc.alloc.rate:                   1738.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14328285.442 ops/s
[info]                  ·gc.alloc.rate:                   1727.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              189.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14111545.219 ops/s
[info]                  ·gc.alloc.rate:                   1703.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              189.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14315591.891 ops/s
[info]                  ·gc.alloc.rate:                   1713.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   14272945.216 ±(99.9%) 351388.406 ops/s [Average]
[info]   (min, avg, max) = (14111545.219, 14272945.216, 14328285.442), stdev = 91254.453
[info]   CI (99.9%): [13921556.810, 14624333.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1722.041 ±(99.9%) 52.510 MB/sec [Average]
[info]   (min, avg, max) = (1703.164, 1722.041, 1738.216), stdev = 13.637
[info]   CI (99.9%): [1669.532, 1774.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189.876 ±(99.9%) 4.091 B/op [Average]
[info]   (min, avg, max) = (188.423, 189.876, 191.419), stdev = 1.062
[info]   CI (99.9%): [185.785, 193.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.707 ±(99.9%) 1416.730 MB/sec [Average]
[info]   (min, avg, max) = (1340.634, 1610.707, 2016.608), stdev = 367.920
[info]   CI (99.9%): [193.976, 3027.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   177.542 ±(99.9%) 154.819 B/op [Average]
[info]   (min, avg, max) = (147.376, 177.542, 222.077), stdev = 40.206
[info]   CI (99.9%): [22.723, 332.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.256 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.683, 3.123), stdev = 1.365
[info]   CI (99.9%): [≈ 0, 5.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.075, 0.344), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 70.21% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.695 ops/s
[info] # Warmup Iteration   2: 37641323.997 ops/s
[info] # Warmup Iteration   3: 39773646.653 ops/s
[info] # Warmup Iteration   4: 42307427.874 ops/s
[info] # Warmup Iteration   5: 42581695.186 ops/s
[info] Iteration   1: 41065909.986 ops/s
[info]                  ·gc.alloc.rate:                   853.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42429764.248 ops/s
[info]                  ·gc.alloc.rate:               883.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 42152682.959 ops/s
[info]                  ·gc.alloc.rate:                   894.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 42435698.910 ops/s
[info]                  ·gc.alloc.rate:               880.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 42449983.681 ops/s
[info]                  ·gc.alloc.rate:               887.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42106807.957 ±(99.9%) 2290900.715 ops/s [Average]
[info]   (min, avg, max) = (41065909.986, 42106807.957, 42449983.681), stdev = 594939.641
[info]   CI (99.9%): [39815907.242, 44397708.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   879.897 ±(99.9%) 59.764 MB/sec [Average]
[info]   (min, avg, max) = (853.920, 879.897, 894.777), stdev = 15.521
[info]   CI (99.9%): [820.133, 939.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.887 ±(99.9%) 1.175 B/op [Average]
[info]   (min, avg, max) = (32.645, 32.887, 33.407), stdev = 0.305
[info]   CI (99.9%): [31.712, 34.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.615 ±(99.9%) 1148.829 MB/sec [Average]
[info]   (min, avg, max) = (666.845, 800.615, 1334.314), stdev = 298.347
[info]   CI (99.9%): [≈ 0, 1949.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   29.923 ±(99.9%) 42.846 B/op [Average]
[info]   (min, avg, max) = (24.735, 29.923, 49.817), stdev = 11.127
[info]   CI (99.9%): [≈ 0, 72.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.025), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.44% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2028078.007 ops/s
[info] # Warmup Iteration   2: 12080357.893 ops/s
[info] # Warmup Iteration   3: 13109517.895 ops/s
[info] # Warmup Iteration   4: 13143456.603 ops/s
[info] # Warmup Iteration   5: 13166621.545 ops/s
[info] Iteration   1: 13201797.345 ops/s
[info]                  ·gc.alloc.rate:                   2706.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13222500.845 ops/s
[info]                  ·gc.alloc.rate:                   2712.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13204448.020 ops/s
[info]                  ·gc.alloc.rate:               2723.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319.273 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 13240864.235 ops/s
[info]                  ·gc.alloc.rate:               2731.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319.335 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13238948.945 ops/s
[info]                  ·gc.alloc.rate:               2731.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.327 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13221711.878 ±(99.9%) 70980.987 ops/s [Average]
[info]   (min, avg, max) = (13201797.345, 13221711.878, 13240864.235), stdev = 18433.537
[info]   CI (99.9%): [13150730.892, 13292692.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2721.168 ±(99.9%) 42.905 MB/sec [Average]
[info]   (min, avg, max) = (2706.891, 2721.168, 2731.636), stdev = 11.142
[info]   CI (99.9%): [2678.263, 2764.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.906 ±(99.9%) 3.938 B/op [Average]
[info]   (min, avg, max) = (322.712, 323.906, 324.696), stdev = 1.023
[info]   CI (99.9%): [319.968, 327.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2681.481 ±(99.9%) 35.520 MB/sec [Average]
[info]   (min, avg, max) = (2673.395, 2681.481, 2695.108), stdev = 9.225
[info]   CI (99.9%): [2645.961, 2717.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   319.182 ±(99.9%) 3.032 B/op [Average]
[info]   (min, avg, max) = (318.194, 319.182, 320.327), stdev = 0.787
[info]   CI (99.9%): [316.150, 322.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.67% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10891418.272 ops/s
[info] # Warmup Iteration   2: 46468965.277 ops/s
[info] # Warmup Iteration   3: 46499385.736 ops/s
[info] # Warmup Iteration   4: 49669057.149 ops/s
[info] # Warmup Iteration   5: 49915907.307 ops/s
[info] Iteration   1: 49557934.310 ops/s
[info]                  ·gc.alloc.rate:               1046.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.607 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 48492795.325 ops/s
[info]                  ·gc.alloc.rate:               1002.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 47473940.819 ops/s
[info]                  ·gc.alloc.rate:                   997.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 49196610.685 ops/s
[info]                  ·gc.alloc.rate:               1026.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.482 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 49713971.843 ops/s
[info]                  ·gc.alloc.rate:                   1038.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48887050.596 ±(99.9%) 3540722.902 ops/s [Average]
[info]   (min, avg, max) = (47473940.819, 48887050.596, 49713971.843), stdev = 919514.494
[info]   CI (99.9%): [45346327.694, 52427773.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1022.362 ±(99.9%) 83.811 MB/sec [Average]
[info]   (min, avg, max) = (997.468, 1022.362, 1046.761), stdev = 21.765
[info]   CI (99.9%): [938.551, 1106.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.911 ±(99.9%) 1.014 B/op [Average]
[info]   (min, avg, max) = (32.533, 32.911, 33.238), stdev = 0.263
[info]   CI (99.9%): [31.897, 33.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.330 ±(99.9%) 1416.715 MB/sec [Average]
[info]   (min, avg, max) = (671.130, 1074.330, 1344.319), stdev = 367.917
[info]   CI (99.9%): [≈ 0, 2491.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.588 ±(99.9%) 45.643 B/op [Average]
[info]   (min, avg, max) = (21.482, 34.588, 44.509), stdev = 11.853
[info]   CI (99.9%): [≈ 0, 80.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 70.90% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21334656.680 ops/s
[info] # Warmup Iteration   2: 54589519.069 ops/s
[info] # Warmup Iteration   3: 62789792.749 ops/s
[info] # Warmup Iteration   4: 62740498.583 ops/s
[info] # Warmup Iteration   5: 62051471.535 ops/s
[info] Iteration   1: 62718012.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62788512.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62781585.127 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62759421.895 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 60759888.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62361484.010 ±(99.9%) 3449183.424 ops/s [Average]
[info]   (min, avg, max) = (60759888.109, 62361484.010, 62788512.596), stdev = 895741.982
[info]   CI (99.9%): [58912300.586, 65810667.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 71.13% complete, ETA 00:33:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6450358.209 ops/s
[info] # Warmup Iteration   2: 17034268.465 ops/s
[info] # Warmup Iteration   3: 18011933.077 ops/s
[info] # Warmup Iteration   4: 17423706.730 ops/s
[info] # Warmup Iteration   5: 17895105.094 ops/s
[info] Iteration   1: 18004928.991 ops/s
[info]                  ·gc.alloc.rate:               1687.558 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.067 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17926872.046 ops/s
[info]                  ·gc.alloc.rate:                   1705.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17982488.247 ops/s
[info]                  ·gc.alloc.rate:                   1685.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17898046.990 ops/s
[info]                  ·gc.alloc.rate:               1702.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          149.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.669 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17985954.677 ops/s
[info]                  ·gc.alloc.rate:               1699.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          148.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17959658.190 ±(99.9%) 173631.950 ops/s [Average]
[info]   (min, avg, max) = (17898046.990, 17959658.190, 18004928.991), stdev = 45091.666
[info]   CI (99.9%): [17786026.241, 18133290.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1695.999 ±(99.9%) 34.745 MB/sec [Average]
[info]   (min, avg, max) = (1685.297, 1695.999, 1705.289), stdev = 9.023
[info]   CI (99.9%): [1661.254, 1730.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.628 ±(99.9%) 4.241 B/op [Average]
[info]   (min, avg, max) = (147.502, 148.628, 149.713), stdev = 1.101
[info]   CI (99.9%): [144.387, 152.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1613.147 ±(99.9%) 1417.818 MB/sec [Average]
[info]   (min, avg, max) = (1339.232, 1613.147, 2020.438), stdev = 368.203
[info]   CI (99.9%): [195.329, 3030.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   141.428 ±(99.9%) 125.661 B/op [Average]
[info]   (min, avg, max) = (117.067, 141.428, 177.669), stdev = 32.634
[info]   CI (99.9%): [15.767, 267.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.36% complete, ETA 00:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289890.629 ops/s
[info] # Warmup Iteration   2: 2491644.882 ops/s
[info] # Warmup Iteration   3: 2692531.781 ops/s
[info] # Warmup Iteration   4: 2649886.519 ops/s
[info] # Warmup Iteration   5: 2693573.716 ops/s
[info] Iteration   1: 2705764.244 ops/s
[info]                  ·gc.alloc.rate:                   2169.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1171.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.974 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2728719.517 ops/s
[info]                  ·gc.alloc.rate:                   2187.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1159.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2734756.106 ops/s
[info]                  ·gc.alloc.rate:               2179.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1155.476 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2735543.195 ops/s
[info]                  ·gc.alloc.rate:               2207.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1155.913 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2670877.938 ops/s
[info]                  ·gc.alloc.rate:               2183.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          1286.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1581.410 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2715132.200 ±(99.9%) 106024.246 ops/s [Average]
[info]   (min, avg, max) = (2670877.938, 2715132.200, 2735543.195), stdev = 27534.160
[info]   CI (99.9%): [2609107.954, 2821156.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2185.405 ±(99.9%) 53.732 MB/sec [Average]
[info]   (min, avg, max) = (2169.193, 2185.405, 2207.159), stdev = 13.954
[info]   CI (99.9%): [2131.673, 2239.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1266.797 ±(99.9%) 47.500 B/op [Average]
[info]   (min, avg, max) = (1254.325, 1266.797, 1286.523), stdev = 12.336
[info]   CI (99.9%): [1219.297, 1314.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2144.997 ±(99.9%) 1160.011 MB/sec [Average]
[info]   (min, avg, max) = (2007.832, 2144.997, 2683.872), stdev = 301.251
[info]   CI (99.9%): [984.986, 3305.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1244.690 ±(99.9%) 725.244 B/op [Average]
[info]   (min, avg, max) = (1155.476, 1244.690, 1581.410), stdev = 188.344
[info]   CI (99.9%): [519.446, 1969.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.394), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.419 ±(99.9%) 3.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 1.974), stdev = 0.871
[info]   CI (99.9%): [≈ 0, 3.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 71.59% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62800.959 ops/s
[info] # Warmup Iteration   2: 166490.160 ops/s
[info] # Warmup Iteration   3: 166407.394 ops/s
[info] # Warmup Iteration   4: 164542.228 ops/s
[info] # Warmup Iteration   5: 170021.115 ops/s
[info] Iteration   1: 171270.614 ops/s
[info]                  ·gc.alloc.rate:               3274.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          30084.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30828.947 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 171624.768 ops/s
[info]                  ·gc.alloc.rate:                   3270.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              29975.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30785.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 172093.334 ops/s
[info]                  ·gc.alloc.rate:               3264.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          29851.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24660.909 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 171559.951 ops/s
[info]                  ·gc.alloc.rate:                   3281.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              30106.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31007.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 169779.782 ops/s
[info]                  ·gc.alloc.rate:               3222.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          29873.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25117.830 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   171265.690 ±(99.9%) 3394.506 ops/s [Average]
[info]   (min, avg, max) = (169779.782, 171265.690, 172093.334), stdev = 881.542
[info]   CI (99.9%): [167871.184, 174660.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3262.632 ±(99.9%) 89.857 MB/sec [Average]
[info]   (min, avg, max) = (3222.380, 3262.632, 3281.716), stdev = 23.336
[info]   CI (99.9%): [3172.774, 3352.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29978.402 ±(99.9%) 450.853 B/op [Average]
[info]   (min, avg, max) = (29851.779, 29978.402, 30106.971), stdev = 117.085
[info]   CI (99.9%): [29527.549, 30429.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3100.018 ±(99.9%) 1395.234 MB/sec [Average]
[info]   (min, avg, max) = (2697.092, 3100.018, 3379.889), stdev = 362.338
[info]   CI (99.9%): [1704.783, 4495.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28480.247 ±(99.9%) 12641.811 B/op [Average]
[info]   (min, avg, max) = (24660.909, 28480.247, 31007.627), stdev = 3283.038
[info]   CI (99.9%): [15838.435, 41122.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.153 ±(99.9%) 0.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.382), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 71.82% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1530.211 ops/s
[info] # Warmup Iteration   2: 28141.099 ops/s
[info] # Warmup Iteration   3: 35856.996 ops/s
[info] # Warmup Iteration   4: 35828.672 ops/s
[info] # Warmup Iteration   5: 35652.477 ops/s
[info] Iteration   1: 36195.273 ops/s
[info]                  ·gc.alloc.rate:                   2614.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              113675.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116695.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.679 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 35895.831 ops/s
[info]                  ·gc.alloc.rate:                   2541.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88423.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 36313.830 ops/s
[info]                  ·gc.alloc.rate:               2610.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          113148.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116838.851 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 35560.878 ops/s
[info]                  ·gc.alloc.rate:               2574.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          113888.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119574.456 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 35695.864 ops/s
[info]                  ·gc.alloc.rate:               2555.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          112673.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89505.780 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   35932.335 ±(99.9%) 1232.666 ops/s [Average]
[info]   (min, avg, max) = (35560.878, 35932.335, 36313.830), stdev = 320.120
[info]   CI (99.9%): [34699.669, 37165.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2579.374 ±(99.9%) 124.667 MB/sec [Average]
[info]   (min, avg, max) = (2541.977, 2579.374, 2614.258), stdev = 32.376
[info]   CI (99.9%): [2454.707, 2704.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112966.803 ±(99.9%) 3740.714 B/op [Average]
[info]   (min, avg, max) = (111448.732, 112966.803, 113888.119), stdev = 971.452
[info]   CI (99.9%): [109226.089, 116707.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2425.877 ±(99.9%) 1415.127 MB/sec [Average]
[info]   (min, avg, max) = (2016.796, 2425.877, 2703.042), stdev = 367.504
[info]   CI (99.9%): [1010.749, 3841.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106207.445 ±(99.9%) 60790.360 B/op [Average]
[info]   (min, avg, max) = (88423.036, 106207.445, 119574.456), stdev = 15787.064
[info]   CI (99.9%): [45417.084, 166997.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 1.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.729), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.518 ±(99.9%) 54.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.518, 31.679), stdev = 14.071
[info]   CI (99.9%): [≈ 0, 60.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.06% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39352.245 ops/s
[info] # Warmup Iteration   2: 136012.344 ops/s
[info] # Warmup Iteration   3: 140204.533 ops/s
[info] # Warmup Iteration   4: 141149.647 ops/s
[info] # Warmup Iteration   5: 142664.658 ops/s
[info] Iteration   1: 141927.397 ops/s
[info]                  ·gc.alloc.rate:               1229.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          13633.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14810.917 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 142357.480 ops/s
[info]                  ·gc.alloc.rate:               1214.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          13421.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7386.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 140015.760 ops/s
[info]                  ·gc.alloc.rate:                   1230.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              13829.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15028.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 144523.834 ops/s
[info]                  ·gc.alloc.rate:                   1257.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              13689.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14573.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 145321.616 ops/s
[info]                  ·gc.alloc.rate:                   1277.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              13833.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14479.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   142829.217 ±(99.9%) 8176.418 ops/s [Average]
[info]   (min, avg, max) = (140015.760, 142829.217, 145321.616), stdev = 2123.390
[info]   CI (99.9%): [134652.799, 151005.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1241.834 ±(99.9%) 97.287 MB/sec [Average]
[info]   (min, avg, max) = (1214.147, 1241.834, 1277.498), stdev = 25.265
[info]   CI (99.9%): [1144.547, 1339.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13681.442 ±(99.9%) 653.548 B/op [Average]
[info]   (min, avg, max) = (13421.276, 13681.442, 13833.576), stdev = 169.724
[info]   CI (99.9%): [13027.895, 14334.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.385 ±(99.9%) 1151.998 MB/sec [Average]
[info]   (min, avg, max) = (668.216, 1203.385, 1338.501), stdev = 299.170
[info]   CI (99.9%): [51.387, 2355.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13255.673 ±(99.9%) 12660.563 B/op [Average]
[info]   (min, avg, max) = (7386.516, 13255.673, 15028.114), stdev = 3287.908
[info]   CI (99.9%): [595.110, 25916.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.602), stdev = 1.563
[info]   CI (99.9%): [≈ 0, 6.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.110 ±(99.9%) 65.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.110, 39.218), stdev = 17.013
[info]   CI (99.9%): [≈ 0, 74.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.29% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220400.941 ops/s
[info] # Warmup Iteration   2: 436272.512 ops/s
[info] # Warmup Iteration   3: 439197.941 ops/s
[info] # Warmup Iteration   4: 441804.768 ops/s
[info] # Warmup Iteration   5: 437708.260 ops/s
[info] Iteration   1: 444783.918 ops/s
[info]                  ·gc.alloc.rate:                   1767.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              6254.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4759.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 441847.405 ops/s
[info]                  ·gc.alloc.rate:                   1807.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              6436.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7184.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 438775.726 ops/s
[info]                  ·gc.alloc.rate:               1745.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          6261.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4814.640 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 434210.729 ops/s
[info]                  ·gc.alloc.rate:                   1738.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              6303.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7294.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 434459.264 ops/s
[info]                  ·gc.alloc.rate:                   1740.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              6305.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4860.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   438815.408 ±(99.9%) 17750.251 ops/s [Average]
[info]   (min, avg, max) = (434210.729, 438815.408, 444783.918), stdev = 4609.684
[info]   CI (99.9%): [421065.157, 456565.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1760.174 ±(99.9%) 111.357 MB/sec [Average]
[info]   (min, avg, max) = (1738.960, 1760.174, 1807.706), stdev = 28.919
[info]   CI (99.9%): [1648.817, 1871.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6312.235 ±(99.9%) 281.888 B/op [Average]
[info]   (min, avg, max) = (6254.476, 6312.235, 6436.376), stdev = 73.205
[info]   CI (99.9%): [6030.347, 6594.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.908 ±(99.9%) 1417.673 MB/sec [Average]
[info]   (min, avg, max) = (1341.652, 1611.908, 2017.923), stdev = 368.165
[info]   CI (99.9%): [194.235, 3029.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5782.674 ±(99.9%) 5125.695 B/op [Average]
[info]   (min, avg, max) = (4759.183, 5782.674, 7294.555), stdev = 1331.127
[info]   CI (99.9%): [656.979, 10908.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.249), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.373 ±(99.9%) 19.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.373, 11.567), stdev = 5.140
[info]   CI (99.9%): [≈ 0, 22.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 72.52% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214255.919 ops/s
[info] # Warmup Iteration   2: 469470.140 ops/s
[info] # Warmup Iteration   3: 477271.182 ops/s
[info] # Warmup Iteration   4: 481531.130 ops/s
[info] # Warmup Iteration   5: 482423.651 ops/s
[info] Iteration   1: 477473.625 ops/s
[info]                  ·gc.alloc.rate:               1374.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          4530.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4428.828 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 478604.244 ops/s
[info]                  ·gc.alloc.rate:                   1388.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              4564.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4420.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 472822.070 ops/s
[info]                  ·gc.alloc.rate:                   1358.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              4523.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4476.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 487028.567 ops/s
[info]                  ·gc.alloc.rate:                   1398.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              4520.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4344.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 486003.937 ops/s
[info]                  ·gc.alloc.rate:               1396.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          4521.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4346.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   480386.489 ±(99.9%) 23148.307 ops/s [Average]
[info]   (min, avg, max) = (472822.070, 480386.489, 487028.567), stdev = 6011.542
[info]   CI (99.9%): [457238.182, 503534.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1383.488 ±(99.9%) 64.323 MB/sec [Average]
[info]   (min, avg, max) = (1358.832, 1383.488, 1398.877), stdev = 16.704
[info]   CI (99.9%): [1319.166, 1447.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4532.228 ±(99.9%) 71.798 B/op [Average]
[info]   (min, avg, max) = (4520.624, 4532.228, 4564.811), stdev = 18.646
[info]   CI (99.9%): [4460.430, 4604.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1344.016 ±(99.9%) 3.577 MB/sec [Average]
[info]   (min, avg, max) = (1342.526, 1344.016, 1344.938), stdev = 0.929
[info]   CI (99.9%): [1340.439, 1347.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4403.442 ±(99.9%) 219.907 B/op [Average]
[info]   (min, avg, max) = (4344.122, 4403.442, 4476.830), stdev = 57.109
[info]   CI (99.9%): [4183.535, 4623.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.852), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.141 ±(99.9%) 15.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.141, 9.493), stdev = 4.139
[info]   CI (99.9%): [≈ 0, 18.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.75% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7992.325 ops/s
[info] # Warmup Iteration   2: 67478.692 ops/s
[info] # Warmup Iteration   3: 70136.754 ops/s
[info] # Warmup Iteration   4: 74022.365 ops/s
[info] # Warmup Iteration   5: 72402.583 ops/s
[info] Iteration   1: 74042.195 ops/s
[info]                  ·gc.alloc.rate:                   1527.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              32458.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28361.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 71017.982 ops/s
[info]                  ·gc.alloc.rate:                        1486.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                   32940.968 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.405 B/op
[info]                  ·gc.churn.Metaspace:                   0.054 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2017.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          44703.643 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  1.667 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             36.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      107.494 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              46.000 ms
[info] Iteration   3: 74162.121 ops/s
[info]                  ·gc.alloc.rate:               1546.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          32826.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28337.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 74303.983 ops/s
[info]                  ·gc.alloc.rate:               1537.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          32555.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28219.008 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 74549.430 ops/s
[info]                  ·gc.alloc.rate:               1541.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          32542.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28098.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   73615.142 ±(99.9%) 5637.675 ops/s [Average]
[info]   (min, avg, max) = (71017.982, 73615.142, 74549.430), stdev = 1464.086
[info]   CI (99.9%): [67977.467, 79252.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1527.809 ±(99.9%) 93.314 MB/sec [Average]
[info]   (min, avg, max) = (1486.455, 1527.809, 1546.853), stdev = 24.233
[info]   CI (99.9%): [1434.495, 1621.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32664.888 ±(99.9%) 797.992 B/op [Average]
[info]   (min, avg, max) = (32458.967, 32664.888, 32940.968), stdev = 207.236
[info]   CI (99.9%): [31866.896, 33462.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.081 ±(99.9%) 0.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.405), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.238 ±(99.9%) 2.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 1.189), stdev = 0.532
[info]   CI (99.9%): [≈ 0, 2.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.059 ±(99.9%) 1177.872 MB/sec [Average]
[info]   (min, avg, max) = (1330.994, 1470.059, 2017.243), stdev = 305.890
[info]   CI (99.9%): [292.187, 2647.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31544.135 ±(99.9%) 28329.700 B/op [Average]
[info]   (min, avg, max) = (28098.912, 31544.135, 44703.643), stdev = 7357.133
[info]   CI (99.9%): [3214.435, 59873.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.333 ±(99.9%) 2.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.667), stdev = 0.745
[info]   CI (99.9%): [≈ 0, 3.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   7.388 ±(99.9%) 63.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.388, 36.940), stdev = 16.520
[info]   CI (99.9%): [≈ 0, 71.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.974 ±(99.9%) 8.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.974, 4.851), stdev = 2.167
[info]   CI (99.9%): [≈ 0, 9.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.587 ±(99.9%) 184.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.587, 107.494), stdev = 48.023
[info]   CI (99.9%): [≈ 0, 206.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 12.400, 46.000), stdev = 18.942
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 72.98% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55693.306 ops/s
[info] # Warmup Iteration   2: 303896.652 ops/s
[info] # Warmup Iteration   3: 301993.602 ops/s
[info] # Warmup Iteration   4: 312153.181 ops/s
[info] # Warmup Iteration   5: 321351.255 ops/s
[info] Iteration   1: 321270.305 ops/s
[info]                  ·gc.alloc.rate:                   2395.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              11736.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13151.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.642 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 322419.659 ops/s
[info]                  ·gc.alloc.rate:                   2404.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              11736.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9803.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 322485.551 ops/s
[info]                  ·gc.alloc.rate:                   2417.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              11800.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13072.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 322921.614 ops/s
[info]                  ·gc.alloc.rate:               2408.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          11739.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9804.904 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 322190.134 ops/s
[info]                  ·gc.alloc.rate:               2431.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          11875.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13133.151 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   322257.453 ±(99.9%) 2356.803 ops/s [Average]
[info]   (min, avg, max) = (321270.305, 322257.453, 322921.614), stdev = 612.054
[info]   CI (99.9%): [319900.650, 324614.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2411.707 ±(99.9%) 52.397 MB/sec [Average]
[info]   (min, avg, max) = (2395.919, 2411.707, 2431.491), stdev = 13.607
[info]   CI (99.9%): [2359.310, 2464.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11777.633 ±(99.9%) 234.676 B/op [Average]
[info]   (min, avg, max) = (11736.066, 11777.633, 11875.150), stdev = 60.945
[info]   CI (99.9%): [11542.957, 12012.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2414.537 ±(99.9%) 1421.862 MB/sec [Average]
[info]   (min, avg, max) = (2008.329, 2414.537, 2689.072), stdev = 369.253
[info]   CI (99.9%): [992.675, 3836.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11793.124 ±(99.9%) 6992.530 B/op [Average]
[info]   (min, avg, max) = (9803.331, 11793.124, 13151.255), stdev = 1815.938
[info]   CI (99.9%): [4800.594, 18785.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.602), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.650 ±(99.9%) 30.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.650, 17.642), stdev = 7.824
[info]   CI (99.9%): [≈ 0, 33.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.21% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90269.384 ops/s
[info] # Warmup Iteration   2: 480477.127 ops/s
[info] # Warmup Iteration   3: 478509.832 ops/s
[info] # Warmup Iteration   4: 486594.834 ops/s
[info] # Warmup Iteration   5: 488403.822 ops/s
[info] Iteration   1: 486452.100 ops/s
[info]                  ·gc.alloc.rate:               1277.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          4132.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4316.715 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 488686.173 ops/s
[info]                  ·gc.alloc.rate:                   1276.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              4110.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4301.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 488118.506 ops/s
[info]                  ·gc.alloc.rate:               1285.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          4146.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4308.507 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 479403.950 ops/s
[info]                  ·gc.alloc.rate:                   1249.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4101.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2195.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 485936.510 ops/s
[info]                  ·gc.alloc.rate:                   1278.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4142.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4325.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   485719.448 ±(99.9%) 14281.989 ops/s [Average]
[info]   (min, avg, max) = (479403.950, 485719.448, 488686.173), stdev = 3708.987
[info]   CI (99.9%): [471437.459, 500001.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1273.712 ±(99.9%) 53.959 MB/sec [Average]
[info]   (min, avg, max) = (1249.528, 1273.712, 1285.955), stdev = 14.013
[info]   CI (99.9%): [1219.753, 1327.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4126.653 ±(99.9%) 75.082 B/op [Average]
[info]   (min, avg, max) = (4101.914, 4126.653, 4146.227), stdev = 19.499
[info]   CI (99.9%): [4051.570, 4201.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.237 ±(99.9%) 1148.191 MB/sec [Average]
[info]   (min, avg, max) = (668.835, 1202.237, 1336.286), stdev = 298.182
[info]   CI (99.9%): [54.046, 2350.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3889.635 ±(99.9%) 3646.638 B/op [Average]
[info]   (min, avg, max) = (2195.632, 3889.635, 4325.817), stdev = 947.020
[info]   CI (99.9%): [242.997, 7536.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.184), stdev = 1.858
[info]   CI (99.9%): [≈ 0, 8.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.828 ±(99.9%) 23.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.828, 13.736), stdev = 6.099
[info]   CI (99.9%): [≈ 0, 26.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.44% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 502684.621 ops/s
[info] # Warmup Iteration   2: 1267926.188 ops/s
[info] # Warmup Iteration   3: 1338703.716 ops/s
[info] # Warmup Iteration   4: 1336587.131 ops/s
[info] # Warmup Iteration   5: 1338684.402 ops/s
[info] Iteration   1: 1347405.858 ops/s
[info]                  ·gc.alloc.rate:                   2718.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              3175.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3137.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1346741.375 ops/s
[info]                  ·gc.alloc.rate:                   2734.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3195.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3137.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1344702.189 ops/s
[info]                  ·gc.alloc.rate:                   2731.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              3196.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3148.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1348008.983 ops/s
[info]                  ·gc.alloc.rate:               2738.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          3196.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3147.150 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1289047.420 ops/s
[info]                  ·gc.alloc.rate:               2610.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          3186.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2473.235 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1335181.165 ±(99.9%) 99422.082 ops/s [Average]
[info]   (min, avg, max) = (1289047.420, 1335181.165, 1348008.983), stdev = 25819.599
[info]   CI (99.9%): [1235759.083, 1434603.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2706.665 ±(99.9%) 209.997 MB/sec [Average]
[info]   (min, avg, max) = (2610.024, 2706.665, 2738.582), stdev = 54.536
[info]   CI (99.9%): [2496.667, 2916.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3190.345 ±(99.9%) 35.679 B/op [Average]
[info]   (min, avg, max) = (3175.597, 3190.345, 3196.791), stdev = 9.266
[info]   CI (99.9%): [3154.666, 3226.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2556.485 ±(99.9%) 1142.778 MB/sec [Average]
[info]   (min, avg, max) = (2025.654, 2556.485, 2696.056), stdev = 296.776
[info]   CI (99.9%): [1413.707, 3699.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3008.725 ±(99.9%) 1152.852 B/op [Average]
[info]   (min, avg, max) = (2473.235, 3008.725, 3148.266), stdev = 299.392
[info]   CI (99.9%): [1855.873, 4161.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.024), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.67% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22397.868 ops/s
[info] # Warmup Iteration   2: 96166.101 ops/s
[info] # Warmup Iteration   3: 99349.318 ops/s
[info] # Warmup Iteration   4: 102302.814 ops/s
[info] # Warmup Iteration   5: 105836.214 ops/s
[info] Iteration   1: 105700.944 ops/s
[info]                  ·gc.alloc.rate:                   3529.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              52558.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49733.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 106622.420 ops/s
[info]                  ·gc.alloc.rate:                   3575.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              52764.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49444.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 106592.145 ops/s
[info]                  ·gc.alloc.rate:               3574.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          52769.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49648.112 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 106627.884 ops/s
[info]                  ·gc.alloc.rate:               3577.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          52802.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49817.242 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 106522.105 ops/s
[info]                  ·gc.alloc.rate:                   3588.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              52968.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59929.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   106413.100 ±(99.9%) 1541.524 ops/s [Average]
[info]   (min, avg, max) = (105700.944, 106413.100, 106627.884), stdev = 400.329
[info]   CI (99.9%): [104871.575, 107954.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3568.922 ±(99.9%) 86.867 MB/sec [Average]
[info]   (min, avg, max) = (3529.843, 3568.922, 3588.209), stdev = 22.559
[info]   CI (99.9%): [3482.055, 3655.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52772.574 ±(99.9%) 561.261 B/op [Average]
[info]   (min, avg, max) = (52558.739, 52772.574, 52968.248), stdev = 145.758
[info]   CI (99.9%): [52211.313, 53333.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497.581 ±(99.9%) 1211.281 MB/sec [Average]
[info]   (min, avg, max) = (3340.090, 3497.581, 4059.798), stdev = 314.566
[info]   CI (99.9%): [2286.300, 4708.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51714.681 ±(99.9%) 17691.502 B/op [Average]
[info]   (min, avg, max) = (49444.991, 51714.681, 59929.719), stdev = 4594.427
[info]   CI (99.9%): [34023.179, 69406.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.308 ±(99.9%) 1.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 0.620), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84250.047 ops/s
[info] # Warmup Iteration   2: 326997.785 ops/s
[info] # Warmup Iteration   3: 337329.100 ops/s
[info] # Warmup Iteration   4: 337898.939 ops/s
[info] # Warmup Iteration   5: 339115.522 ops/s
[info] Iteration   1: 338740.907 ops/s
[info]                  ·gc.alloc.rate:               1173.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          5452.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6225.515 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 338893.140 ops/s
[info]                  ·gc.alloc.rate:               1166.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          5414.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6227.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 345890.967 ops/s
[info]                  ·gc.alloc.rate:                   1186.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              5398.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3052.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 348184.700 ops/s
[info]                  ·gc.alloc.rate:               1196.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          5408.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6064.335 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 334375.081 ops/s
[info]                  ·gc.alloc.rate:                   1160.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              5464.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6320.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   341216.959 ±(99.9%) 21845.238 ops/s [Average]
[info]   (min, avg, max) = (334375.081, 341216.959, 348184.700), stdev = 5673.139
[info]   CI (99.9%): [319371.721, 363062.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1176.759 ±(99.9%) 56.915 MB/sec [Average]
[info]   (min, avg, max) = (1160.917, 1176.759, 1196.882), stdev = 14.781
[info]   CI (99.9%): [1119.844, 1233.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5427.452 ±(99.9%) 111.585 B/op [Average]
[info]   (min, avg, max) = (5398.135, 5427.452, 5464.251), stdev = 28.978
[info]   CI (99.9%): [5315.867, 5539.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.406 ±(99.9%) 1155.017 MB/sec [Average]
[info]   (min, avg, max) = (670.835, 1207.406, 1342.929), stdev = 299.954
[info]   CI (99.9%): [52.389, 2362.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5578.162 ±(99.9%) 5448.731 B/op [Average]
[info]   (min, avg, max) = (3052.292, 5578.162, 6320.954), stdev = 1415.018
[info]   CI (99.9%): [129.431, 11026.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.978 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.476), stdev = 1.552
[info]   CI (99.9%): [≈ 0, 6.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.292 ±(99.9%) 28.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.292, 16.363), stdev = 7.307
[info]   CI (99.9%): [≈ 0, 31.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.13% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184635.001 ops/s
[info] # Warmup Iteration   2: 798675.684 ops/s
[info] # Warmup Iteration   3: 849622.394 ops/s
[info] # Warmup Iteration   4: 851162.908 ops/s
[info] # Warmup Iteration   5: 845810.716 ops/s
[info] Iteration   1: 853745.244 ops/s
[info]                  ·gc.alloc.rate:               638.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          1177.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1227.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 851660.715 ops/s
[info]                  ·gc.alloc.rate:               631.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 838076.705 ops/s
[info]                  ·gc.alloc.rate:                   628.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1180.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 843668.653 ops/s
[info]                  ·gc.alloc.rate:               627.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1244.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 857204.103 ops/s
[info]                  ·gc.alloc.rate:               642.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          1180.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   848871.084 ±(99.9%) 30109.141 ops/s [Average]
[info]   (min, avg, max) = (838076.705, 848871.084, 857204.103), stdev = 7819.248
[info]   CI (99.9%): [818761.943, 878980.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   633.886 ±(99.9%) 25.633 MB/sec [Average]
[info]   (min, avg, max) = (627.606, 633.886, 642.879), stdev = 6.657
[info]   CI (99.9%): [608.253, 659.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1175.276 ±(99.9%) 24.157 B/op [Average]
[info]   (min, avg, max) = (1166.647, 1175.276, 1180.832), stdev = 6.273
[info]   CI (99.9%): [1151.119, 1199.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.859 ±(99.9%) 2.737 MB/sec [Average]
[info]   (min, avg, max) = (666.123, 666.859, 667.765), stdev = 0.711
[info]   CI (99.9%): [664.122, 669.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1236.495 ±(99.9%) 44.797 B/op [Average]
[info]   (min, avg, max) = (1226.111, 1236.495, 1252.813), stdev = 11.634
[info]   CI (99.9%): [1191.698, 1281.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.36% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1145435.283 ops/s
[info] # Warmup Iteration   2: 2011173.701 ops/s
[info] # Warmup Iteration   3: 2067633.311 ops/s
[info] # Warmup Iteration   4: 2083336.191 ops/s
[info] # Warmup Iteration   5: 2082941.414 ops/s
[info] Iteration   1: 2131824.210 ops/s
[info]                  ·gc.alloc.rate:               1002.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          740.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2124734.695 ops/s
[info]                  ·gc.alloc.rate:               1025.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 994.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2140345.373 ops/s
[info]                  ·gc.alloc.rate:               1004.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2130856.641 ops/s
[info]                  ·gc.alloc.rate:               999.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2120326.806 ops/s
[info]                  ·gc.alloc.rate:                   1019.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2129617.545 ±(99.9%) 29303.570 ops/s [Average]
[info]   (min, avg, max) = (2120326.806, 2129617.545, 2140345.373), stdev = 7610.044
[info]   CI (99.9%): [2100313.975, 2158921.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1010.266 ±(99.9%) 42.914 MB/sec [Average]
[info]   (min, avg, max) = (999.701, 1010.266, 1025.079), stdev = 11.145
[info]   CI (99.9%): [967.352, 1053.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.581 ±(99.9%) 39.619 B/op [Average]
[info]   (min, avg, max) = (738.393, 746.581, 759.068), stdev = 10.289
[info]   CI (99.9%): [706.962, 786.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.822 ±(99.9%) 1417.603 MB/sec [Average]
[info]   (min, avg, max) = (671.488, 940.822, 1344.907), stdev = 368.147
[info]   CI (99.9%): [≈ 0, 2358.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   695.897 ±(99.9%) 1056.729 B/op [Average]
[info]   (min, avg, max) = (494.260, 695.897, 998.315), stdev = 274.429
[info]   CI (99.9%): [≈ 0, 1752.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 74.60% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1511404.907 ops/s
[info] # Warmup Iteration   2: 2320926.134 ops/s
[info] # Warmup Iteration   3: 2353793.718 ops/s
[info] # Warmup Iteration   4: 2353764.576 ops/s
[info] # Warmup Iteration   5: 2352186.525 ops/s
[info] Iteration   1: 2352633.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2352114.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2353629.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2354508.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2354568.773 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2353490.970 ±(99.9%) 4237.785 ops/s [Average]
[info]   (min, avg, max) = (2352114.831, 2353490.970, 2354568.773), stdev = 1100.539
[info]   CI (99.9%): [2349253.185, 2357728.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.83% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121609.269 ops/s
[info] # Warmup Iteration   2: 440644.224 ops/s
[info] # Warmup Iteration   3: 465337.229 ops/s
[info] # Warmup Iteration   4: 473632.066 ops/s
[info] # Warmup Iteration   5: 478178.863 ops/s
[info] Iteration   1: 475034.147 ops/s
[info]                  ·gc.alloc.rate:               723.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          2398.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4429.568 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 488901.797 ops/s
[info]                  ·gc.alloc.rate:               729.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          2349.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2153.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 478681.159 ops/s
[info]                  ·gc.alloc.rate:               709.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          2332.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2198.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 488110.033 ops/s
[info]                  ·gc.alloc.rate:               722.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          2329.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2158.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 477034.446 ops/s
[info]                  ·gc.alloc.rate:               703.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          2321.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2208.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   481552.316 ±(99.9%) 24966.887 ops/s [Average]
[info]   (min, avg, max) = (475034.147, 481552.316, 488901.797), stdev = 6483.821
[info]   CI (99.9%): [456585.429, 506519.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   717.963 ±(99.9%) 41.702 MB/sec [Average]
[info]   (min, avg, max) = (703.862, 717.963, 729.893), stdev = 10.830
[info]   CI (99.9%): [676.261, 759.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2346.492 ±(99.9%) 117.581 B/op [Average]
[info]   (min, avg, max) = (2321.982, 2346.492, 2398.040), stdev = 30.535
[info]   CI (99.9%): [2228.911, 2464.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.740 ±(99.9%) 1149.878 MB/sec [Average]
[info]   (min, avg, max) = (668.788, 802.740, 1336.927), stdev = 298.620
[info]   CI (99.9%): [≈ 0, 1952.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2629.786 ±(99.9%) 3875.299 B/op [Average]
[info]   (min, avg, max) = (2153.015, 2629.786, 4429.568), stdev = 1006.403
[info]   CI (99.9%): [≈ 0, 6505.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12109.044 ops/s
[info] # Warmup Iteration   2: 52107.136 ops/s
[info] # Warmup Iteration   3: 57864.076 ops/s
[info] # Warmup Iteration   4: 59794.004 ops/s
[info] # Warmup Iteration   5: 58634.229 ops/s
[info] Iteration   1: 58914.117 ops/s
[info]                  ·gc.alloc.rate:                   2052.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              54770.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53750.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 60565.702 ops/s
[info]                  ·gc.alloc.rate:                   2119.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              55066.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52225.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60526.538 ops/s
[info]                  ·gc.alloc.rate:                   2118.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              55075.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52188.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60695.810 ops/s
[info]                  ·gc.alloc.rate:                   2107.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              54653.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52088.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 60685.718 ops/s
[info]                  ·gc.alloc.rate:               2137.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          55408.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52146.344 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   60277.577 ±(99.9%) 2948.647 ops/s [Average]
[info]   (min, avg, max) = (58914.117, 60277.577, 60695.810), stdev = 765.754
[info]   CI (99.9%): [57328.930, 63226.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2106.819 ±(99.9%) 124.814 MB/sec [Average]
[info]   (min, avg, max) = (2052.024, 2106.819, 2137.176), stdev = 32.414
[info]   CI (99.9%): [1982.005, 2231.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   54995.016 ±(99.9%) 1138.912 B/op [Average]
[info]   (min, avg, max) = (54653.497, 54995.016, 55408.827), stdev = 295.772
[info]   CI (99.9%): [53856.105, 56133.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2010.151 ±(99.9%) 9.871 MB/sec [Average]
[info]   (min, avg, max) = (2007.052, 2010.151, 2013.796), stdev = 2.563
[info]   CI (99.9%): [2000.280, 2020.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52479.858 ±(99.9%) 2741.393 B/op [Average]
[info]   (min, avg, max) = (52088.510, 52479.858, 53750.131), stdev = 711.931
[info]   CI (99.9%): [49738.465, 55221.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.786 ±(99.9%) 6.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.805), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.962 ±(99.9%) 173.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.962, 101.564), stdev = 45.062
[info]   CI (99.9%): [≈ 0, 194.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19164.952 ops/s
[info] # Warmup Iteration   2: 87336.894 ops/s
[info] # Warmup Iteration   3: 95202.683 ops/s
[info] # Warmup Iteration   4: 95921.557 ops/s
[info] # Warmup Iteration   5: 95419.885 ops/s
[info] Iteration   1: 96149.990 ops/s
[info]                  ·gc.alloc.rate:                   1751.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              28671.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21883.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 92808.451 ops/s
[info]                  ·gc.alloc.rate:                   1726.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              29274.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34037.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 93501.149 ops/s
[info]                  ·gc.alloc.rate:                   1716.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              28874.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22470.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95203.279 ops/s
[info]                  ·gc.alloc.rate:                   1768.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              29239.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33037.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 96083.685 ops/s
[info]                  ·gc.alloc.rate:               1787.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          29272.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32735.265 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   94749.311 ±(99.9%) 5863.036 ops/s [Average]
[info]   (min, avg, max) = (92808.451, 94749.311, 96149.990), stdev = 1522.612
[info]   CI (99.9%): [88886.275, 100612.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1750.065 ±(99.9%) 112.874 MB/sec [Average]
[info]   (min, avg, max) = (1716.239, 1750.065, 1787.127), stdev = 29.313
[info]   CI (99.9%): [1637.191, 1862.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29066.628 ±(99.9%) 1069.808 B/op [Average]
[info]   (min, avg, max) = (28671.362, 29066.628, 29274.313), stdev = 277.826
[info]   CI (99.9%): [27996.820, 30136.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1735.376 ±(99.9%) 1402.502 MB/sec [Average]
[info]   (min, avg, max) = (1335.586, 1735.376, 2007.119), stdev = 364.225
[info]   CI (99.9%): [332.874, 3137.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28832.877 ±(99.9%) 23483.118 B/op [Average]
[info]   (min, avg, max) = (21883.723, 28832.877, 34037.486), stdev = 6098.491
[info]   CI (99.9%): [5349.759, 52315.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.476), stdev = 1.992
[info]   CI (99.9%): [≈ 0, 8.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.457 ±(99.9%) 130.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.457, 75.901), stdev = 33.790
[info]   CI (99.9%): [≈ 0, 145.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.52% complete, ETA 00:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37441.049 ops/s
[info] # Warmup Iteration   2: 159552.792 ops/s
[info] # Warmup Iteration   3: 164018.428 ops/s
[info] # Warmup Iteration   4: 165554.011 ops/s
[info] # Warmup Iteration   5: 162391.991 ops/s
[info] Iteration   1: 167190.391 ops/s
[info]                  ·gc.alloc.rate:                   2653.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              24979.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25258.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 167660.195 ops/s
[info]                  ·gc.alloc.rate:                   2662.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              24996.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25169.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 168185.434 ops/s
[info]                  ·gc.alloc.rate:                   2656.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              24855.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18847.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 164320.364 ops/s
[info]                  ·gc.alloc.rate:                   2625.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              25147.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25766.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 163153.871 ops/s
[info]                  ·gc.alloc.rate:               2607.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          25148.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26021.145 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   166102.051 ±(99.9%) 8571.241 ops/s [Average]
[info]   (min, avg, max) = (163153.871, 166102.051, 168185.434), stdev = 2225.924
[info]   CI (99.9%): [157530.810, 174673.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2641.041 ±(99.9%) 91.317 MB/sec [Average]
[info]   (min, avg, max) = (2607.198, 2641.041, 2662.809), stdev = 23.715
[info]   CI (99.9%): [2549.724, 2732.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25025.450 ±(99.9%) 479.292 B/op [Average]
[info]   (min, avg, max) = (24855.385, 25025.450, 25148.338), stdev = 124.471
[info]   CI (99.9%): [24546.158, 25504.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2553.268 ±(99.9%) 1160.617 MB/sec [Average]
[info]   (min, avg, max) = (2014.216, 2553.268, 2697.684), stdev = 301.408
[info]   CI (99.9%): [1392.652, 3713.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24212.648 ±(99.9%) 11628.199 B/op [Average]
[info]   (min, avg, max) = (18847.688, 24212.648, 26021.145), stdev = 3019.806
[info]   CI (99.9%): [12584.449, 35840.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.199), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.75% complete, ETA 00:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2643.976 ops/s
[info] # Warmup Iteration   2: 26908.814 ops/s
[info] # Warmup Iteration   3: 32865.497 ops/s
[info] # Warmup Iteration   4: 33670.879 ops/s
[info] # Warmup Iteration   5: 33506.268 ops/s
[info] Iteration   1: 33811.907 ops/s
[info]                  ·gc.alloc.rate:               2245.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          104515.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93220.881 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 33854.936 ops/s
[info]                  ·gc.alloc.rate:                   2259.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              105048.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93347.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33694.948 ops/s
[info]                  ·gc.alloc.rate:               2250.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          105123.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125393.510 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 33749.546 ops/s
[info]                  ·gc.alloc.rate:               2268.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          105799.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94171.475 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 33803.061 ops/s
[info]                  ·gc.alloc.rate:               2271.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          105747.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94201.579 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33782.880 ±(99.9%) 238.034 ops/s [Average]
[info]   (min, avg, max) = (33694.948, 33782.880, 33854.936), stdev = 61.817
[info]   CI (99.9%): [33544.846, 34020.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2259.132 ±(99.9%) 43.325 MB/sec [Average]
[info]   (min, avg, max) = (2245.318, 2259.132, 2271.422), stdev = 11.251
[info]   CI (99.9%): [2215.808, 2302.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105246.875 ±(99.9%) 2060.818 B/op [Average]
[info]   (min, avg, max) = (104515.452, 105246.875, 105799.079), stdev = 535.188
[info]   CI (99.9%): [103186.057, 107307.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2147.587 ±(99.9%) 1156.272 MB/sec [Average]
[info]   (min, avg, max) = (2002.675, 2147.587, 2684.536), stdev = 300.280
[info]   CI (99.9%): [991.316, 3303.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100066.985 ±(99.9%) 54545.217 B/op [Average]
[info]   (min, avg, max) = (93220.881, 100066.985, 125393.510), stdev = 14165.220
[info]   CI (99.9%): [45521.768, 154612.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.479), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.451 ±(99.9%) 38.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.451, 22.257), stdev = 9.954
[info]   CI (99.9%): [≈ 0, 42.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.98% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49562.393 ops/s
[info] # Warmup Iteration   2: 156151.705 ops/s
[info] # Warmup Iteration   3: 158776.154 ops/s
[info] # Warmup Iteration   4: 162427.958 ops/s
[info] # Warmup Iteration   5: 160277.918 ops/s
[info] Iteration   1: 160904.128 ops/s
[info]                  ·gc.alloc.rate:               1086.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          10627.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13057.436 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 161503.262 ops/s
[info]                  ·gc.alloc.rate:               1069.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          10419.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6507.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 155217.040 ops/s
[info]                  ·gc.alloc.rate:                   1053.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              10686.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13549.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 162060.549 ops/s
[info]                  ·gc.alloc.rate:                   1083.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              10522.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6495.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 157086.607 ops/s
[info]                  ·gc.alloc.rate:                   1051.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10539.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13408.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   159354.317 ±(99.9%) 11648.300 ops/s [Average]
[info]   (min, avg, max) = (155217.040, 159354.317, 162060.549), stdev = 3025.026
[info]   CI (99.9%): [147706.018, 171002.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1069.033 ±(99.9%) 62.117 MB/sec [Average]
[info]   (min, avg, max) = (1051.854, 1069.033, 1086.614), stdev = 16.132
[info]   CI (99.9%): [1006.916, 1131.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10559.079 ±(99.9%) 395.450 B/op [Average]
[info]   (min, avg, max) = (10419.416, 10559.079, 10686.688), stdev = 102.697
[info]   CI (99.9%): [10163.629, 10954.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.233 ±(99.9%) 1409.231 MB/sec [Average]
[info]   (min, avg, max) = (667.858, 1069.233, 1338.155), stdev = 365.973
[info]   CI (99.9%): [≈ 0, 2478.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10603.654 ±(99.9%) 14436.288 B/op [Average]
[info]   (min, avg, max) = (6495.254, 10603.654, 13549.623), stdev = 3749.058
[info]   CI (99.9%): [≈ 0, 25039.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.768), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.633 ±(99.9%) 64.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.633, 37.750), stdev = 16.837
[info]   CI (99.9%): [≈ 0, 72.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.21% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232764.244 ops/s
[info] # Warmup Iteration   2: 450560.194 ops/s
[info] # Warmup Iteration   3: 459853.199 ops/s
[info] # Warmup Iteration   4: 447876.048 ops/s
[info] # Warmup Iteration   5: 446807.187 ops/s
[info] Iteration   1: 446610.161 ops/s
[info]                  ·gc.alloc.rate:               503.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          1773.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1802.863 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 462089.475 ops/s
[info]                  ·gc.alloc.rate:               530.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          1807.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2283.577 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 461033.634 ops/s
[info]                  ·gc.alloc.rate:                   523.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1788.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2288.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 462879.894 ops/s
[info]                  ·gc.alloc.rate:               530.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          1802.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2280.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 458767.612 ops/s
[info]                  ·gc.alloc.rate:      506.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   458276.155 ±(99.9%) 25807.679 ops/s [Average]
[info]   (min, avg, max) = (446610.161, 458276.155, 462879.894), stdev = 6702.172
[info]   CI (99.9%): [432468.476, 484083.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   518.814 ±(99.9%) 50.952 MB/sec [Average]
[info]   (min, avg, max) = (503.300, 518.814, 530.646), stdev = 13.232
[info]   CI (99.9%): [467.862, 569.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1781.533 ±(99.9%) 110.188 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1781.533, 1807.426), stdev = 28.616
[info]   CI (99.9%): [1671.345, 1891.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.719 ±(99.9%) 1118.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.719, 671.111), stdev = 290.437
[info]   CI (99.9%): [≈ 0, 1623.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1731.246 ±(99.9%) 3812.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1731.246, 2288.832), stdev = 990.013
[info]   CI (99.9%): [≈ 0, 5543.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.44% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268357.327 ops/s
[info] # Warmup Iteration   2: 498824.633 ops/s
[info] # Warmup Iteration   3: 511642.342 ops/s
[info] # Warmup Iteration   4: 511434.830 ops/s
[info] # Warmup Iteration   5: 512644.846 ops/s
[info] Iteration   1: 512109.656 ops/s
[info]                  ·gc.alloc.rate:      5.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 510021.856 ops/s
[info]                  ·gc.alloc.rate:      6.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.617 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 511042.423 ops/s
[info]                  ·gc.alloc.rate:      5.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 510998.593 ops/s
[info]                  ·gc.alloc.rate:      5.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 510104.341 ops/s
[info]                  ·gc.alloc.rate:      5.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   510855.374 ±(99.9%) 3271.645 ops/s [Average]
[info]   (min, avg, max) = (510021.856, 510855.374, 512109.656), stdev = 849.636
[info]   CI (99.9%): [507583.728, 514127.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.363 ±(99.9%) 1.442 MB/sec [Average]
[info]   (min, avg, max) = (5.186, 5.363, 6.033), stdev = 0.375
[info]   CI (99.9%): [3.921, 6.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.524 ±(99.9%) 4.506 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.524, 18.617), stdev = 1.170
[info]   CI (99.9%): [12.019, 21.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.67% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14198.124 ops/s
[info] # Warmup Iteration   2: 64638.362 ops/s
[info] # Warmup Iteration   3: 75733.241 ops/s
[info] # Warmup Iteration   4: 76425.824 ops/s
[info] # Warmup Iteration   5: 76211.823 ops/s
[info] Iteration   1: 76146.879 ops/s
[info]                  ·gc.alloc.rate:                   1352.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              27956.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27521.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 76307.107 ops/s
[info]                  ·gc.alloc.rate:                   1350.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              27854.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27519.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 76133.277 ops/s
[info]                  ·gc.alloc.rate:                   1358.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              28071.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27638.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 76190.454 ops/s
[info]                  ·gc.alloc.rate:                   1371.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              28336.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27671.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75404.662 ops/s
[info]                  ·gc.alloc.rate:                   1359.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              28375.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28000.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   76036.476 ±(99.9%) 1385.293 ops/s [Average]
[info]   (min, avg, max) = (75404.662, 76036.476, 76307.107), stdev = 359.756
[info]   CI (99.9%): [74651.183, 77421.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1358.568 ±(99.9%) 31.875 MB/sec [Average]
[info]   (min, avg, max) = (1350.519, 1358.568, 1371.787), stdev = 8.278
[info]   CI (99.9%): [1326.693, 1390.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28118.918 ±(99.9%) 886.173 B/op [Average]
[info]   (min, avg, max) = (27854.509, 28118.918, 28375.934), stdev = 230.136
[info]   CI (99.9%): [27232.746, 29005.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.897 ±(99.9%) 15.279 MB/sec [Average]
[info]   (min, avg, max) = (1331.739, 1336.897, 1341.583), stdev = 3.968
[info]   CI (99.9%): [1321.618, 1352.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27670.500 ±(99.9%) 758.392 B/op [Average]
[info]   (min, avg, max) = (27519.624, 27670.500, 28000.956), stdev = 196.952
[info]   CI (99.9%): [26912.108, 28428.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.119 ±(99.9%) 0.757 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.119, 0.469), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.455 ±(99.9%) 15.625 B/op [Average]
[info]   (min, avg, max) = (0.429, 2.455, 9.682), stdev = 4.058
[info]   CI (99.9%): [≈ 0, 18.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6242809.614 ops/s
[info] # Warmup Iteration   2: 8403559.504 ops/s
[info] # Warmup Iteration   3: 8564367.502 ops/s
[info] # Warmup Iteration   4: 8585994.269 ops/s
[info] # Warmup Iteration   5: 8584899.799 ops/s
[info] Iteration   1: 8587541.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8588338.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8464861.733 ops/s
[info]                  ·gc.alloc.rate:      8.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.656 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8587732.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8578643.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles":
[info]   8561423.451 ±(99.9%) 208428.112 ops/s [Average]
[info]   (min, avg, max) = (8464861.733, 8561423.451, 8588338.187), stdev = 54128.119
[info]   CI (99.9%): [8352995.339, 8769851.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate":
[info]   1.782 ±(99.9%) 15.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.782, 8.908), stdev = 3.984
[info]   CI (99.9%): [≈ 0, 17.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate.norm":
[info]   0.331 ±(99.9%) 2.852 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.331, 1.656), stdev = 0.741
[info]   CI (99.9%): [≈ 0, 3.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 77.14% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12770511.883 ops/s
[info] # Warmup Iteration   2: 18512768.382 ops/s
[info] # Warmup Iteration   3: 19043664.014 ops/s
[info] # Warmup Iteration   4: 19051194.874 ops/s
[info] # Warmup Iteration   5: 18900296.139 ops/s
[info] Iteration   1: 19038708.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19002410.427 ops/s
[info]                  ·gc.alloc.rate:      0.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19047943.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19054753.975 ops/s
[info]                  ·gc.alloc.rate:      0.030 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19049510.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16":
[info]   19038665.618 ±(99.9%) 81160.527 ops/s [Average]
[info]   (min, avg, max) = (19002410.427, 19038665.618, 19054753.975), stdev = 21077.131
[info]   CI (99.9%): [18957505.091, 19119826.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate":
[info]   0.147 ±(99.9%) 1.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.147, 0.702), stdev = 0.311
[info]   CI (99.9%): [≈ 0, 1.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm":
[info]   0.012 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 77.37% complete, ETA 00:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14281101.614 ops/s
[info] # Warmup Iteration   2: 21261990.596 ops/s
[info] # Warmup Iteration   3: 20395307.992 ops/s
[info] # Warmup Iteration   4: 20381649.417 ops/s
[info] # Warmup Iteration   5: 20209092.409 ops/s
[info] Iteration   1: 20391517.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20403968.536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20385195.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20395077.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20371314.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4":
[info]   20389414.481 ±(99.9%) 46913.147 ops/s [Average]
[info]   (min, avg, max) = (20371314.421, 20389414.481, 20403968.536), stdev = 12183.195
[info]   CI (99.9%): [20342501.334, 20436327.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 77.60% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15339002.519 ops/s
[info] # Warmup Iteration   2: 23389776.556 ops/s
[info] # Warmup Iteration   3: 24307521.471 ops/s
[info] # Warmup Iteration   4: 24558115.718 ops/s
[info] # Warmup Iteration   5: 24538888.177 ops/s
[info] Iteration   1: 24549014.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24541028.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23759497.102 ops/s
[info]                  ·gc.alloc.rate:      13.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.915 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 24568131.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24585098.602 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8":
[info]   24400553.914 ±(99.9%) 1381499.060 ops/s [Average]
[info]   (min, avg, max) = (23759497.102, 24400553.914, 24585098.602), stdev = 358770.919
[info]   CI (99.9%): [23019054.854, 25782052.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate":
[info]   2.764 ±(99.9%) 23.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.764, 13.818), stdev = 6.179
[info]   CI (99.9%): [≈ 0, 26.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm":
[info]   0.183 ±(99.9%) 1.576 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.183, 0.915), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs
[info] # Parameters: (size = 128)
[info] # Run progress: 77.83% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4662519.151 ops/s
[info] # Warmup Iteration   2: 8081198.296 ops/s
[info] # Warmup Iteration   3: 8598187.524 ops/s
[info] # Warmup Iteration   4: 8590027.638 ops/s
[info] # Warmup Iteration   5: 8584736.995 ops/s
[info] Iteration   1: 8590686.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8589231.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8594501.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8592040.843 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8589836.497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs":
[info]   8591259.358 ±(99.9%) 8073.212 ops/s [Average]
[info]   (min, avg, max) = (8589231.913, 8591259.358, 8594501.074), stdev = 2096.587
[info]   CI (99.9%): [8583186.147, 8599332.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 78.06% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13349686.263 ops/s
[info] # Warmup Iteration   2: 19011503.398 ops/s
[info] # Warmup Iteration   3: 19114496.212 ops/s
[info] # Warmup Iteration   4: 19104497.303 ops/s
[info] # Warmup Iteration   5: 19105953.734 ops/s
[info] Iteration   1: 19108866.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19111102.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19102708.512 ops/s
[info]                  ·gc.alloc.rate:      0.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19062670.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19004265.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16":
[info]   19077922.560 ±(99.9%) 175730.327 ops/s [Average]
[info]   (min, avg, max) = (19004265.171, 19077922.560, 19111102.187), stdev = 45636.608
[info]   CI (99.9%): [18902192.233, 19253652.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 78.29% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13845558.835 ops/s
[info] # Warmup Iteration   2: 21055980.280 ops/s
[info] # Warmup Iteration   3: 20371824.482 ops/s
[info] # Warmup Iteration   4: 20349818.523 ops/s
[info] # Warmup Iteration   5: 20113822.994 ops/s
[info] Iteration   1: 20337614.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20369396.718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20364392.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20372456.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20367081.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4":
[info]   20362188.396 ±(99.9%) 54117.300 ops/s [Average]
[info]   (min, avg, max) = (20337614.587, 20362188.396, 20372456.815), stdev = 14054.091
[info]   CI (99.9%): [20308071.096, 20416305.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 78.52% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16811906.730 ops/s
[info] # Warmup Iteration   2: 24419583.799 ops/s
[info] # Warmup Iteration   3: 24380283.481 ops/s
[info] # Warmup Iteration   4: 24566600.514 ops/s
[info] # Warmup Iteration   5: 24521390.444 ops/s
[info] Iteration   1: 24566071.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24545767.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 24576548.235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 24586992.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24548126.330 ops/s
[info]                  ·gc.alloc.rate:      0.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8":
[info]   24564701.146 ±(99.9%) 68676.194 ops/s [Average]
[info]   (min, avg, max) = (24545767.319, 24564701.146, 24586992.445), stdev = 17834.990
[info]   CI (99.9%): [24496024.951, 24633377.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.75% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201408.890 ops/s
[info] # Warmup Iteration   2: 2693802.967 ops/s
[info] # Warmup Iteration   3: 2893892.102 ops/s
[info] # Warmup Iteration   4: 2863247.660 ops/s
[info] # Warmup Iteration   5: 2920922.974 ops/s
[info] Iteration   1: 2939616.787 ops/s
[info]                  ·gc.alloc.rate:                   3777.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              2022.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1791.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2927434.891 ops/s
[info]                  ·gc.alloc.rate:                   3790.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              2037.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2167.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2929773.666 ops/s
[info]                  ·gc.alloc.rate:                   3766.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              2023.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1811.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2929979.830 ops/s
[info]                  ·gc.alloc.rate:               3784.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          2031.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4055.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2176.653 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 2937329.387 ops/s
[info]                  ·gc.alloc.rate:               3778.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          2024.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1816.808 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2932826.912 ±(99.9%) 20455.290 ops/s [Average]
[info]   (min, avg, max) = (2927434.891, 2932826.912, 2939616.787), stdev = 5312.174
[info]   CI (99.9%): [2912371.623, 2953282.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3779.554 ±(99.9%) 34.128 MB/sec [Average]
[info]   (min, avg, max) = (3766.746, 3779.554, 3790.333), stdev = 8.863
[info]   CI (99.9%): [3745.426, 3813.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2027.888 ±(99.9%) 25.158 B/op [Average]
[info]   (min, avg, max) = (2022.486, 2027.888, 2037.778), stdev = 6.533
[info]   CI (99.9%): [2002.730, 2053.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3639.232 ±(99.9%) 1422.007 MB/sec [Average]
[info]   (min, avg, max) = (3347.062, 3639.232, 4055.651), stdev = 369.291
[info]   CI (99.9%): [2217.225, 5061.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1952.765 ±(99.9%) 771.204 B/op [Average]
[info]   (min, avg, max) = (1791.962, 1952.765, 2176.653), stdev = 200.279
[info]   CI (99.9%): [1181.561, 2723.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.98% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.702 ops/s
[info] # Warmup Iteration   2: 754321.706 ops/s
[info] # Warmup Iteration   3: 764355.791 ops/s
[info] # Warmup Iteration   4: 815431.390 ops/s
[info] # Warmup Iteration   5: 815410.013 ops/s
[info] Iteration   1: 821960.039 ops/s
[info]                  ·gc.alloc.rate:      476.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 814872.077 ops/s
[info]                  ·gc.alloc.rate:               472.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1286.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 814802.780 ops/s
[info]                  ·gc.alloc.rate:               484.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1286.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 816962.176 ops/s
[info]                  ·gc.alloc.rate:                   486.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1284.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 793195.697 ops/s
[info]                  ·gc.alloc.rate:      459.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.167 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   812358.554 ±(99.9%) 42744.271 ops/s [Average]
[info]   (min, avg, max) = (793195.697, 812358.554, 821960.039), stdev = 11100.552
[info]   CI (99.9%): [769614.283, 855102.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   475.727 ±(99.9%) 40.786 MB/sec [Average]
[info]   (min, avg, max) = (459.714, 475.727, 486.223), stdev = 10.592
[info]   CI (99.9%): [434.941, 516.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   921.571 ±(99.9%) 50.225 B/op [Average]
[info]   (min, avg, max) = (912.001, 921.571, 936.706), stdev = 13.043
[info]   CI (99.9%): [871.346, 971.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.832 ±(99.9%) 1405.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.832, 666.808), stdev = 364.995
[info]   CI (99.9%): [≈ 0, 1805.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   771.605 ±(99.9%) 2712.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 771.605, 1286.776), stdev = 704.376
[info]   CI (99.9%): [≈ 0, 3483.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 79.21% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21701.718 ops/s
[info] # Warmup Iteration   2: 243077.078 ops/s
[info] # Warmup Iteration   3: 331898.009 ops/s
[info] # Warmup Iteration   4: 333409.953 ops/s
[info] # Warmup Iteration   5: 339887.121 ops/s
[info] Iteration   1: 345383.807 ops/s
[info]                  ·gc.alloc.rate:               828.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          3776.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3037.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 347208.301 ops/s
[info]                  ·gc.alloc.rate:               811.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3024.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 344286.033 ops/s
[info]                  ·gc.alloc.rate:                   850.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              3889.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6101.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 350973.048 ops/s
[info]                  ·gc.alloc.rate:               840.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          3768.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2993.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 342380.117 ops/s
[info]                  ·gc.alloc.rate:               813.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          3741.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3071.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   346046.261 ±(99.9%) 12566.532 ops/s [Average]
[info]   (min, avg, max) = (342380.117, 346046.261, 350973.048), stdev = 3263.488
[info]   CI (99.9%): [333479.730, 358612.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   829.114 ±(99.9%) 64.571 MB/sec [Average]
[info]   (min, avg, max) = (811.829, 829.114, 850.827), stdev = 16.769
[info]   CI (99.9%): [764.543, 893.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3770.956 ±(99.9%) 293.549 B/op [Average]
[info]   (min, avg, max) = (3680.001, 3770.956, 3889.445), stdev = 76.234
[info]   CI (99.9%): [3477.407, 4064.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.805 ±(99.9%) 1149.167 MB/sec [Average]
[info]   (min, avg, max) = (666.492, 800.805, 1334.660), stdev = 298.435
[info]   CI (99.9%): [≈ 0, 1949.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3645.411 ±(99.9%) 5287.424 B/op [Average]
[info]   (min, avg, max) = (2993.200, 3645.411, 6101.223), stdev = 1373.127
[info]   CI (99.9%): [≈ 0, 8932.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.45% complete, ETA 00:23:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314971.915 ops/s
[info] # Warmup Iteration   2: 635238.527 ops/s
[info] # Warmup Iteration   3: 741530.714 ops/s
[info] # Warmup Iteration   4: 728278.817 ops/s
[info] # Warmup Iteration   5: 731798.232 ops/s
[info] Iteration   1: 719590.822 ops/s
[info]                  ·gc.alloc.rate:               658.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          1439.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1468.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 724926.323 ops/s
[info]                  ·gc.alloc.rate:               649.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          1410.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1457.848 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 729047.975 ops/s
[info]                  ·gc.alloc.rate:                   674.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1450.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 728097.265 ops/s
[info]                  ·gc.alloc.rate:               664.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          1436.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1452.928 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 708463.386 ops/s
[info]                  ·gc.alloc.rate:               652.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          1450.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1494.704 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   722025.154 ±(99.9%) 32472.075 ops/s [Average]
[info]   (min, avg, max) = (708463.386, 722025.154, 729047.975), stdev = 8432.895
[info]   CI (99.9%): [689553.080, 754497.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   660.084 ±(99.9%) 38.932 MB/sec [Average]
[info]   (min, avg, max) = (649.713, 660.084, 674.974), stdev = 10.111
[info]   CI (99.9%): [621.151, 699.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1438.587 ±(99.9%) 68.190 B/op [Average]
[info]   (min, avg, max) = (1410.366, 1438.587, 1456.446), stdev = 17.709
[info]   CI (99.9%): [1370.397, 1506.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.143 ±(99.9%) 2.285 MB/sec [Average]
[info]   (min, avg, max) = (671.465, 672.143, 672.850), stdev = 0.594
[info]   CI (99.9%): [669.858, 674.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1465.004 ±(99.9%) 69.167 B/op [Average]
[info]   (min, avg, max) = (1450.919, 1465.004, 1494.704), stdev = 17.962
[info]   CI (99.9%): [1395.838, 1534.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.68% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 929732.654 ops/s
[info] # Warmup Iteration   2: 2473968.625 ops/s
[info] # Warmup Iteration   3: 3260964.289 ops/s
[info] # Warmup Iteration   4: 3277174.669 ops/s
[info] # Warmup Iteration   5: 3295147.079 ops/s
[info] Iteration   1: 3278557.815 ops/s
[info]                  ·gc.alloc.rate:                   1995.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     970.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3229566.452 ops/s
[info]                  ·gc.alloc.rate:                   1952.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3204684.843 ops/s
[info]                  ·gc.alloc.rate:               1934.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          950.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 991.602 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3288905.835 ops/s
[info]                  ·gc.alloc.rate:               1999.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 965.886 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3301336.253 ops/s
[info]                  ·gc.alloc.rate:               2010.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          958.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962.555 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3260610.240 ±(99.9%) 159612.919 ops/s [Average]
[info]   (min, avg, max) = (3204684.843, 3260610.240, 3301336.253), stdev = 41450.968
[info]   CI (99.9%): [3100997.321, 3420223.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1978.489 ±(99.9%) 126.744 MB/sec [Average]
[info]   (min, avg, max) = (1934.376, 1978.489, 2010.185), stdev = 32.915
[info]   CI (99.9%): [1851.745, 2105.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   954.973 ±(99.9%) 14.753 B/op [Average]
[info]   (min, avg, max) = (950.003, 954.973, 958.329), stdev = 3.831
[info]   CI (99.9%): [940.220, 969.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2019.842 ±(99.9%) 5.568 MB/sec [Average]
[info]   (min, avg, max) = (2018.347, 2019.842, 2021.730), stdev = 1.446
[info]   CI (99.9%): [2014.274, 2025.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   975.101 ±(99.9%) 48.774 B/op [Average]
[info]   (min, avg, max) = (962.555, 975.101, 991.602), stdev = 12.666
[info]   CI (99.9%): [926.327, 1023.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.512 ±(99.9%) 4.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.540), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 4.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.250 ±(99.9%) 2.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.238), stdev = 0.552
[info]   CI (99.9%): [≈ 0, 2.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.91% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1120203.579 ops/s
[info] # Warmup Iteration   2: 4514753.008 ops/s
[info] # Warmup Iteration   3: 7608985.015 ops/s
[info] # Warmup Iteration   4: 7287447.663 ops/s
[info] # Warmup Iteration   5: 7470625.857 ops/s
[info] Iteration   1: 7639186.520 ops/s
[info]                  ·gc.alloc.rate:               857.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          176.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 276.682 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 7624052.625 ops/s
[info]                  ·gc.alloc.rate:               830.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7595759.141 ops/s
[info]                  ·gc.alloc.rate:                   826.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              171.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7656239.072 ops/s
[info]                  ·gc.alloc.rate:               833.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 7642790.297 ops/s
[info]                  ·gc.alloc.rate:               846.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          174.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 277.166 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7631605.531 ±(99.9%) 88886.338 ops/s [Average]
[info]   (min, avg, max) = (7595759.141, 7631605.531, 7656239.072), stdev = 23083.500
[info]   CI (99.9%): [7542719.193, 7720491.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   838.905 ±(99.9%) 49.146 MB/sec [Average]
[info]   (min, avg, max) = (826.911, 838.905, 857.440), stdev = 12.763
[info]   CI (99.9%): [789.759, 888.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   173.000 ±(99.9%) 9.296 B/op [Average]
[info]   (min, avg, max) = (171.315, 173.000, 176.655), stdev = 2.414
[info]   CI (99.9%): [163.704, 182.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   941.223 ±(99.9%) 1417.419 MB/sec [Average]
[info]   (min, avg, max) = (672.160, 941.223, 1345.961), stdev = 368.099
[info]   CI (99.9%): [≈ 0, 2358.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   194.037 ±(99.9%) 291.365 B/op [Average]
[info]   (min, avg, max) = (138.305, 194.037, 277.166), stdev = 75.667
[info]   CI (99.9%): [≈ 0, 485.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 80.14% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3431.688 ops/s
[info] # Warmup Iteration   2: 85290.110 ops/s
[info] # Warmup Iteration   3: 212202.024 ops/s
[info] # Warmup Iteration   4: 245583.239 ops/s
[info] # Warmup Iteration   5: 242825.417 ops/s
[info] Iteration   1: 242191.416 ops/s
[info]                  ·gc.alloc.rate:                   2145.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              13940.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13027.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 240551.552 ops/s
[info]                  ·gc.alloc.rate:                   2152.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              14082.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17531.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.853 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 238420.663 ops/s
[info]                  ·gc.alloc.rate:               2105.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          13895.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13288.755 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 242045.257 ops/s
[info]                  ·gc.alloc.rate:               2150.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          13981.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13109.528 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 239577.199 ops/s
[info]                  ·gc.alloc.rate:               2140.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          14063.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13261.897 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   240557.217 ±(99.9%) 6212.021 ops/s [Average]
[info]   (min, avg, max) = (238420.663, 240557.217, 242191.416), stdev = 1613.242
[info]   CI (99.9%): [234345.196, 246769.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2139.023 ±(99.9%) 74.398 MB/sec [Average]
[info]   (min, avg, max) = (2105.499, 2139.023, 2152.646), stdev = 19.321
[info]   CI (99.9%): [2064.625, 2213.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13992.848 ±(99.9%) 306.833 B/op [Average]
[info]   (min, avg, max) = (13895.852, 13992.848, 14082.855), stdev = 79.684
[info]   CI (99.9%): [13686.015, 14299.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2146.733 ±(99.9%) 1147.722 MB/sec [Average]
[info]   (min, avg, max) = (2004.690, 2146.733, 2679.831), stdev = 298.060
[info]   CI (99.9%): [999.012, 3294.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14043.920 ±(99.9%) 7519.305 B/op [Average]
[info]   (min, avg, max) = (13027.657, 14043.920, 17531.764), stdev = 1952.740
[info]   CI (99.9%): [6524.615, 21563.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.353), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.798 ±(99.9%) 15.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.798, 8.853), stdev = 3.945
[info]   CI (99.9%): [≈ 0, 16.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.37% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 917963.860 ops/s
[info] # Warmup Iteration   2: 1550929.700 ops/s
[info] # Warmup Iteration   3: 1586494.787 ops/s
[info] # Warmup Iteration   4: 1563931.178 ops/s
[info] # Warmup Iteration   5: 1581945.480 ops/s
[info] Iteration   1: 1580651.800 ops/s
[info]                  ·gc.alloc.rate:      88.378 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1567751.831 ops/s
[info]                  ·gc.alloc.rate:      103.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1576291.145 ops/s
[info]                  ·gc.alloc.rate:      88.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1582846.580 ops/s
[info]                  ·gc.alloc.rate:      88.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1499901.549 ops/s
[info]                  ·gc.alloc.rate:                   95.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1561488.581 ±(99.9%) 134424.152 ops/s [Average]
[info]   (min, avg, max) = (1499901.549, 1561488.581, 1582846.580), stdev = 34909.525
[info]   CI (99.9%): [1427064.429, 1695912.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   92.868 ±(99.9%) 26.235 MB/sec [Average]
[info]   (min, avg, max) = (88.138, 92.868, 103.649), stdev = 6.813
[info]   CI (99.9%): [66.632, 119.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   93.681 ±(99.9%) 30.372 B/op [Average]
[info]   (min, avg, max) = (88.000, 93.681, 104.051), stdev = 7.887
[info]   CI (99.9%): [63.309, 124.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.358 ±(99.9%) 881.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.358, 511.789), stdev = 228.879
[info]   CI (99.9%): [≈ 0, 983.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   107.365 ±(99.9%) 924.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.365, 536.826), stdev = 240.076
[info]   CI (99.9%): [≈ 0, 1031.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.115 ±(99.9%) 0.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.575), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 1.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.603), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.60% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 962.498 ops/s
[info] # Warmup Iteration   2: 46445.147 ops/s
[info] # Warmup Iteration   3: 66719.831 ops/s
[info] # Warmup Iteration   4: 67273.817 ops/s
[info] # Warmup Iteration   5: 67825.845 ops/s
[info] Iteration   1: 68447.946 ops/s
[info]                  ·gc.alloc.rate:                   2987.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              68684.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61794.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 67833.358 ops/s
[info]                  ·gc.alloc.rate:                   2977.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              69067.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62471.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.966 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68014.594 ops/s
[info]                  ·gc.alloc.rate:               3025.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          70000.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3373.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78069.376 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 68211.230 ops/s
[info]                  ·gc.alloc.rate:               3007.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          69402.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62428.594 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 66111.813 ops/s
[info]                  ·gc.alloc.rate:               2931.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          69787.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64527.022 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   67723.788 ±(99.9%) 3579.774 ops/s [Average]
[info]   (min, avg, max) = (66111.813, 67723.788, 68447.946), stdev = 929.656
[info]   CI (99.9%): [64144.014, 71303.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2985.893 ±(99.9%) 136.955 MB/sec [Average]
[info]   (min, avg, max) = (2931.512, 2985.893, 3025.151), stdev = 35.567
[info]   CI (99.9%): [2848.939, 3122.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69388.693 ±(99.9%) 2049.458 B/op [Average]
[info]   (min, avg, max) = (68684.195, 69388.693, 70000.656), stdev = 532.238
[info]   CI (99.9%): [67339.235, 71438.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2834.183 ±(99.9%) 1162.204 MB/sec [Average]
[info]   (min, avg, max) = (2688.032, 2834.183, 3373.849), stdev = 301.821
[info]   CI (99.9%): [1671.979, 3996.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65858.363 ±(99.9%) 26582.296 B/op [Average]
[info]   (min, avg, max) = (61794.915, 65858.363, 78069.376), stdev = 6903.338
[info]   CI (99.9%): [39276.067, 92440.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.480 ±(99.9%) 2.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.480, 1.436), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 3.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.83% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371295.886 ops/s
[info] # Warmup Iteration   2: 1481837.936 ops/s
[info] # Warmup Iteration   3: 1584307.994 ops/s
[info] # Warmup Iteration   4: 1604773.631 ops/s
[info] # Warmup Iteration   5: 1605914.710 ops/s
[info] Iteration   1: 1599061.470 ops/s
[info]                  ·gc.alloc.rate:                   878.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1312.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1605624.978 ops/s
[info]                  ·gc.alloc.rate:               868.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          850.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 653.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1609507.801 ops/s
[info]                  ·gc.alloc.rate:               860.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1605442.052 ops/s
[info]                  ·gc.alloc.rate:               858.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1597517.159 ops/s
[info]                  ·gc.alloc.rate:                   876.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1317.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1603430.692 ±(99.9%) 19238.936 ops/s [Average]
[info]   (min, avg, max) = (1597517.159, 1603430.692, 1609507.801), stdev = 4996.291
[info]   CI (99.9%): [1584191.756, 1622669.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   868.455 ±(99.9%) 35.339 MB/sec [Average]
[info]   (min, avg, max) = (858.061, 868.455, 878.709), stdev = 9.177
[info]   CI (99.9%): [833.116, 903.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   852.414 ±(99.9%) 44.129 B/op [Average]
[info]   (min, avg, max) = (841.184, 852.414, 864.823), stdev = 11.460
[info]   CI (99.9%): [808.285, 896.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   934.720 ±(99.9%) 1408.214 MB/sec [Average]
[info]   (min, avg, max) = (667.145, 934.720, 1336.951), stdev = 365.709
[info]   CI (99.9%): [≈ 0, 2342.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   918.287 ±(99.9%) 1394.181 B/op [Average]
[info]   (min, avg, max) = (652.998, 918.287, 1317.172), stdev = 362.064
[info]   CI (99.9%): [≈ 0, 2312.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.06% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 842139.330 ops/s
[info] # Warmup Iteration   2: 1499692.748 ops/s
[info] # Warmup Iteration   3: 1725940.751 ops/s
[info] # Warmup Iteration   4: 1722232.401 ops/s
[info] # Warmup Iteration   5: 1718353.318 ops/s
[info] Iteration   1: 1686173.494 ops/s
[info]                  ·gc.alloc.rate:               491.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          458.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1670402.005 ops/s
[info]                  ·gc.alloc.rate:               480.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          452.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1661906.433 ops/s
[info]                  ·gc.alloc.rate:      464.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1704136.253 ops/s
[info]                  ·gc.alloc.rate:               494.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 618.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1707519.623 ops/s
[info]                  ·gc.alloc.rate:               502.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          463.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 618.314 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1686027.562 ±(99.9%) 77393.190 ops/s [Average]
[info]   (min, avg, max) = (1661906.433, 1686027.562, 1707519.623), stdev = 20098.766
[info]   CI (99.9%): [1608634.371, 1763420.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.758 ±(99.9%) 56.810 MB/sec [Average]
[info]   (min, avg, max) = (464.716, 486.758, 502.939), stdev = 14.753
[info]   CI (99.9%): [429.948, 543.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   454.269 ±(99.9%) 34.216 B/op [Average]
[info]   (min, avg, max) = (440.000, 454.269, 463.588), stdev = 8.886
[info]   CI (99.9%): [420.053, 488.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.550 ±(99.9%) 1117.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.550, 670.800), stdev = 290.296
[info]   CI (99.9%): [≈ 0, 1622.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   469.228 ±(99.9%) 1038.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 469.228, 631.416), stdev = 269.805
[info]   CI (99.9%): [≈ 0, 1508.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.29% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 761733.460 ops/s
[info] # Warmup Iteration   2: 1770861.485 ops/s
[info] # Warmup Iteration   3: 1805717.223 ops/s
[info] # Warmup Iteration   4: 1791019.253 ops/s
[info] # Warmup Iteration   5: 1788601.476 ops/s
[info] Iteration   1: 1785959.495 ops/s
[info]                  ·gc.alloc.rate:      18.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.251 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1794949.758 ops/s
[info]                  ·gc.alloc.rate:      18.248 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1796270.022 ops/s
[info]                  ·gc.alloc.rate:      18.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1811165.265 ops/s
[info]                  ·gc.alloc.rate:      18.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1793926.770 ops/s
[info]                  ·gc.alloc.rate:      18.237 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1796454.262 ±(99.9%) 35251.768 ops/s [Average]
[info]   (min, avg, max) = (1785959.495, 1796454.262, 1811165.265), stdev = 9154.772
[info]   CI (99.9%): [1761202.493, 1831706.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.321 ±(99.9%) 0.384 MB/sec [Average]
[info]   (min, avg, max) = (18.237, 18.321, 18.442), stdev = 0.100
[info]   CI (99.9%): [17.937, 18.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.050 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.050, 16.251), stdev = 0.112
[info]   CI (99.9%): [15.618, 16.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.52% complete, ETA 00:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8985.176 ops/s
[info] # Warmup Iteration   2: 44504.525 ops/s
[info] # Warmup Iteration   3: 52397.231 ops/s
[info] # Warmup Iteration   4: 52202.458 ops/s
[info] # Warmup Iteration   5: 52398.263 ops/s
[info] Iteration   1: 52821.826 ops/s
[info]                  ·gc.alloc.rate:                   2253.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              67144.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59850.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 52394.104 ops/s
[info]                  ·gc.alloc.rate:                   2261.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              67932.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60503.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 52031.542 ops/s
[info]                  ·gc.alloc.rate:               2234.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          67587.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61065.175 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 52458.206 ops/s
[info]                  ·gc.alloc.rate:                   2294.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              68802.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80949.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 50966.946 ops/s
[info]                  ·gc.alloc.rate:                   2217.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              68468.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62638.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   52134.525 ±(99.9%) 2735.298 ops/s [Average]
[info]   (min, avg, max) = (50966.946, 52134.525, 52821.826), stdev = 710.348
[info]   CI (99.9%): [49399.227, 54869.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2252.220 ±(99.9%) 111.560 MB/sec [Average]
[info]   (min, avg, max) = (2217.476, 2252.220, 2294.030), stdev = 28.972
[info]   CI (99.9%): [2140.660, 2363.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67987.011 ±(99.9%) 2561.132 B/op [Average]
[info]   (min, avg, max) = (67144.102, 67987.011, 68802.091), stdev = 665.118
[info]   CI (99.9%): [65425.879, 70548.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2153.908 ±(99.9%) 1173.803 MB/sec [Average]
[info]   (min, avg, max) = (2008.845, 2153.908, 2699.054), stdev = 304.833
[info]   CI (99.9%): [980.105, 3327.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65001.367 ±(99.9%) 34558.416 B/op [Average]
[info]   (min, avg, max) = (59850.863, 65001.367, 80949.476), stdev = 8974.711
[info]   CI (99.9%): [30442.951, 99559.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.081 ±(99.9%) 0.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.323), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.428 ±(99.9%) 15.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.428, 9.624), stdev = 4.047
[info]   CI (99.9%): [≈ 0, 18.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.76% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109211.903 ops/s
[info] # Warmup Iteration   2: 270089.748 ops/s
[info] # Warmup Iteration   3: 273658.766 ops/s
[info] # Warmup Iteration   4: 272684.345 ops/s
[info] # Warmup Iteration   5: 274853.770 ops/s
[info] Iteration   1: 273821.152 ops/s
[info]                  ·gc.alloc.rate:                   1103.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              6341.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7722.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 274054.462 ops/s
[info]                  ·gc.alloc.rate:               1087.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          6246.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3860.094 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 273818.733 ops/s
[info]                  ·gc.alloc.rate:                   1113.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              6398.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7726.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 273839.378 ops/s
[info]                  ·gc.alloc.rate:               1099.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          6318.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7733.906 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 274465.614 ops/s
[info]                  ·gc.alloc.rate:                   1087.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              6238.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3858.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   273999.868 ±(99.9%) 1072.677 ops/s [Average]
[info]   (min, avg, max) = (273818.733, 273999.868, 274465.614), stdev = 278.571
[info]   CI (99.9%): [272927.191, 275072.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1098.322 ±(99.9%) 41.834 MB/sec [Average]
[info]   (min, avg, max) = (1087.616, 1098.322, 1113.245), stdev = 10.864
[info]   CI (99.9%): [1056.487, 1140.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6308.804 ±(99.9%) 258.010 B/op [Average]
[info]   (min, avg, max) = (6238.880, 6308.804, 6398.114), stdev = 67.004
[info]   CI (99.9%): [6050.794, 6566.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.727 ±(99.9%) 1417.605 MB/sec [Average]
[info]   (min, avg, max) = (672.123, 1075.727, 1345.722), stdev = 368.147
[info]   CI (99.9%): [≈ 0, 2493.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6180.347 ±(99.9%) 8159.524 B/op [Average]
[info]   (min, avg, max) = (3858.106, 6180.347, 7733.906), stdev = 2119.002
[info]   CI (99.9%): [≈ 0, 14339.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.566 ±(99.9%) 4.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.748), stdev = 1.220
[info]   CI (99.9%): [≈ 0, 5.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.247 ±(99.9%) 26.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.247, 15.757), stdev = 6.994
[info]   CI (99.9%): [≈ 0, 30.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.99% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421.451 ops/s
[info] # Warmup Iteration   2: 30308.507 ops/s
[info] # Warmup Iteration   3: 39901.832 ops/s
[info] # Warmup Iteration   4: 39403.232 ops/s
[info] # Warmup Iteration   5: 39898.337 ops/s
[info] Iteration   1: 39943.930 ops/s
[info]                  ·gc.alloc.rate:                   1962.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              77322.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52675.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40076.123 ops/s
[info]                  ·gc.alloc.rate:                   1994.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              78322.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78964.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40157.514 ops/s
[info]                  ·gc.alloc.rate:               1995.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          78194.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78961.710 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 40138.014 ops/s
[info]                  ·gc.alloc.rate:               1984.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          77798.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79181.919 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 40127.307 ops/s
[info]                  ·gc.alloc.rate:               2010.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          78863.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79334.256 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   40088.578 ±(99.9%) 332.218 ops/s [Average]
[info]   (min, avg, max) = (39943.930, 40088.578, 40157.514), stdev = 86.276
[info]   CI (99.9%): [39756.359, 40420.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1989.382 ±(99.9%) 68.619 MB/sec [Average]
[info]   (min, avg, max) = (1962.431, 1989.382, 2010.738), stdev = 17.820
[info]   CI (99.9%): [1920.763, 2058.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78100.313 ±(99.9%) 2227.462 B/op [Average]
[info]   (min, avg, max) = (77322.048, 78100.313, 78863.988), stdev = 578.465
[info]   CI (99.9%): [75872.850, 80327.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1880.914 ±(99.9%) 1171.155 MB/sec [Average]
[info]   (min, avg, max) = (1336.903, 1880.914, 2022.728), stdev = 304.145
[info]   CI (99.9%): [709.759, 3052.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73823.542 ±(99.9%) 45526.748 B/op [Average]
[info]   (min, avg, max) = (52675.511, 73823.542, 79334.256), stdev = 11823.152
[info]   CI (99.9%): [28296.794, 119350.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.560 ±(99.9%) 44.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.560, 26.160), stdev = 11.538
[info]   CI (99.9%): [≈ 0, 49.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.22% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41354.229 ops/s
[info] # Warmup Iteration   2: 117283.890 ops/s
[info] # Warmup Iteration   3: 120834.757 ops/s
[info] # Warmup Iteration   4: 119250.200 ops/s
[info] # Warmup Iteration   5: 120835.894 ops/s
[info] Iteration   1: 120961.487 ops/s
[info]                  ·gc.alloc.rate:               1210.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          15749.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17368.795 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 120888.640 ops/s
[info]                  ·gc.alloc.rate:                   1208.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              15735.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8698.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 120565.679 ops/s
[info]                  ·gc.alloc.rate:               1230.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          16057.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17452.353 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 119953.905 ops/s
[info]                  ·gc.alloc.rate:                   1199.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              15736.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17558.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 121578.746 ops/s
[info]                  ·gc.alloc.rate:                   1240.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              16058.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17306.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   120789.691 ±(99.9%) 2286.706 ops/s [Average]
[info]   (min, avg, max) = (119953.905, 120789.691, 121578.746), stdev = 593.850
[info]   CI (99.9%): [118502.985, 123076.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1217.822 ±(99.9%) 65.120 MB/sec [Average]
[info]   (min, avg, max) = (1199.357, 1217.822, 1240.490), stdev = 16.912
[info]   CI (99.9%): [1152.702, 1282.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15867.599 ±(99.9%) 670.709 B/op [Average]
[info]   (min, avg, max) = (15735.425, 15867.599, 16058.758), stdev = 174.181
[info]   CI (99.9%): [15196.890, 16538.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.025 ±(99.9%) 1151.413 MB/sec [Average]
[info]   (min, avg, max) = (668.129, 1203.025, 1338.209), stdev = 299.018
[info]   CI (99.9%): [51.612, 2354.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15676.868 ±(99.9%) 15025.796 B/op [Average]
[info]   (min, avg, max) = (8698.529, 15676.868, 17558.129), stdev = 3902.151
[info]   CI (99.9%): [651.073, 30702.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.684), stdev = 1.605
[info]   CI (99.9%): [≈ 0, 7.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.962 ±(99.9%) 81.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.962, 48.342), stdev = 21.063
[info]   CI (99.9%): [≈ 0, 92.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.45% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167658.368 ops/s
[info] # Warmup Iteration   2: 311203.273 ops/s
[info] # Warmup Iteration   3: 341569.343 ops/s
[info] # Warmup Iteration   4: 340423.198 ops/s
[info] # Warmup Iteration   5: 340460.682 ops/s
[info] Iteration   1: 338432.529 ops/s
[info]                  ·gc.alloc.rate:               475.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          2209.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2379.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 337340.832 ops/s
[info]                  ·gc.alloc.rate:               478.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          2231.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3126.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 341163.406 ops/s
[info]                  ·gc.alloc.rate:      459.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 338591.642 ops/s
[info]                  ·gc.alloc.rate:                   481.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              2239.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 338891.586 ops/s
[info]                  ·gc.alloc.rate:               479.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          2227.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3115.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   338883.999 ±(99.9%) 5399.976 ops/s [Average]
[info]   (min, avg, max) = (337340.832, 338883.999, 341163.406), stdev = 1402.357
[info]   CI (99.9%): [333484.022, 344283.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   474.840 ±(99.9%) 34.153 MB/sec [Average]
[info]   (min, avg, max) = (459.583, 474.840, 481.742), stdev = 8.869
[info]   CI (99.9%): [440.687, 508.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2205.399 ±(99.9%) 188.650 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2205.399, 2239.320), stdev = 48.992
[info]   CI (99.9%): [2016.748, 2394.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.539 ±(99.9%) 1117.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.539, 670.841), stdev = 290.305
[info]   CI (99.9%): [≈ 0, 1622.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2347.222 ±(99.9%) 5201.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2347.222, 3126.561), stdev = 1350.691
[info]   CI (99.9%): [≈ 0, 7548.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.68% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146303.251 ops/s
[info] # Warmup Iteration   2: 353056.369 ops/s
[info] # Warmup Iteration   3: 367827.112 ops/s
[info] # Warmup Iteration   4: 367815.797 ops/s
[info] # Warmup Iteration   5: 367700.077 ops/s
[info] Iteration   1: 367823.731 ops/s
[info]                  ·gc.alloc.rate:      3.740 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 367671.499 ops/s
[info]                  ·gc.alloc.rate:      3.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 368697.202 ops/s
[info]                  ·gc.alloc.rate:      3.805 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.237 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368769.624 ops/s
[info]                  ·gc.alloc.rate:      3.749 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 367582.761 ops/s
[info]                  ·gc.alloc.rate:      3.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   368108.963 ±(99.9%) 2222.157 ops/s [Average]
[info]   (min, avg, max) = (367582.761, 368108.963, 368769.624), stdev = 577.087
[info]   CI (99.9%): [365886.806, 370331.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.754 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (3.738, 3.754, 3.805), stdev = 0.029
[info]   CI (99.9%): [3.643, 3.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.048 ±(99.9%) 0.406 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.048, 16.237), stdev = 0.106
[info]   CI (99.9%): [15.642, 16.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.91% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11538.114 ops/s
[info] # Warmup Iteration   2: 54565.736 ops/s
[info] # Warmup Iteration   3: 58799.537 ops/s
[info] # Warmup Iteration   4: 60701.597 ops/s
[info] # Warmup Iteration   5: 60909.442 ops/s
[info] Iteration   1: 60855.242 ops/s
[info]                  ·gc.alloc.rate:               1257.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          32527.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34543.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 60743.990 ops/s
[info]                  ·gc.alloc.rate:               1242.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          32180.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17319.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 60354.210 ops/s
[info]                  ·gc.alloc.rate:               1238.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          32276.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34870.893 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 58635.908 ops/s
[info]                  ·gc.alloc.rate:                        1201.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                   32240.457 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.458 B/op
[info]                  ·gc.churn.Metaspace:                   0.052 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1223.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          32847.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      136.333 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              37.000 ms
[info] Iteration   5: 59684.783 ops/s
[info]                  ·gc.alloc.rate:               1229.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          32426.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35238.281 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   60054.827 ±(99.9%) 3526.811 ops/s [Average]
[info]   (min, avg, max) = (58635.908, 60054.827, 60855.242), stdev = 915.902
[info]   CI (99.9%): [56528.015, 63581.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1233.787 ±(99.9%) 80.509 MB/sec [Average]
[info]   (min, avg, max) = (1201.087, 1233.787, 1257.733), stdev = 20.908
[info]   CI (99.9%): [1153.278, 1314.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32330.493 ±(99.9%) 549.812 B/op [Average]
[info]   (min, avg, max) = (32180.666, 32330.493, 32527.654), stdev = 142.785
[info]   CI (99.9%): [31780.681, 32880.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.092 ±(99.9%) 0.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.458), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.277 ±(99.9%) 2.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.385), stdev = 0.620
[info]   CI (99.9%): [≈ 0, 2.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1180.410 ±(99.9%) 1117.904 MB/sec [Average]
[info]   (min, avg, max) = (668.493, 1180.410, 1337.833), stdev = 290.316
[info]   CI (99.9%): [62.506, 2298.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30964.000 ±(99.9%) 29580.935 B/op [Average]
[info]   (min, avg, max) = (17319.782, 30964.000, 35238.281), stdev = 7682.075
[info]   CI (99.9%): [1383.066, 60544.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.016 ±(99.9%) 8.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.016, 5.079), stdev = 2.271
[info]   CI (99.9%): [≈ 0, 9.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.267 ±(99.9%) 234.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.267, 136.333), stdev = 60.970
[info]   CI (99.9%): [≈ 0, 262.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 37.000), stdev = 14.237
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.14% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13603.191 ops/s
[info] # Warmup Iteration   2: 66003.732 ops/s
[info] # Warmup Iteration   3: 71338.498 ops/s
[info] # Warmup Iteration   4: 72291.805 ops/s
[info] # Warmup Iteration   5: 73529.603 ops/s
[info] Iteration   1: 74102.753 ops/s
[info]                  ·gc.alloc.rate:                   1622.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              34453.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28537.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 71945.243 ops/s
[info]                  ·gc.alloc.rate:                   1614.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              35302.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44119.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.668 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 74522.514 ops/s
[info]                  ·gc.alloc.rate:                   1654.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              34939.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28370.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 73077.281 ops/s
[info]                  ·gc.alloc.rate:                   1624.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              34975.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28879.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 74347.397 ops/s
[info]                  ·gc.alloc.rate:                   1649.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              34921.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42531.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73599.038 ±(99.9%) 4162.369 ops/s [Average]
[info]   (min, avg, max) = (71945.243, 73599.038, 74522.514), stdev = 1080.954
[info]   CI (99.9%): [69436.669, 77761.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1633.067 ±(99.9%) 69.726 MB/sec [Average]
[info]   (min, avg, max) = (1614.149, 1633.067, 1654.989), stdev = 18.108
[info]   CI (99.9%): [1563.341, 1702.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34918.513 ±(99.9%) 1167.692 B/op [Average]
[info]   (min, avg, max) = (34453.088, 34918.513, 35302.571), stdev = 303.246
[info]   CI (99.9%): [33750.821, 36086.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.040 ±(99.9%) 1413.917 MB/sec [Average]
[info]   (min, avg, max) = (1341.114, 1611.040, 2017.309), stdev = 367.190
[info]   CI (99.9%): [197.122, 3024.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34487.810 ±(99.9%) 31149.507 B/op [Average]
[info]   (min, avg, max) = (28370.502, 34487.810, 44119.965), stdev = 8089.428
[info]   CI (99.9%): [3338.303, 65637.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.763 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.762, 2.957), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.557 ±(99.9%) 104.343 B/op [Average]
[info]   (min, avg, max) = (0.442, 16.557, 64.668), stdev = 27.097
[info]   CI (99.9%): [≈ 0, 120.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.37% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23588.982 ops/s
[info] # Warmup Iteration   2: 111174.940 ops/s
[info] # Warmup Iteration   3: 127469.338 ops/s
[info] # Warmup Iteration   4: 130918.586 ops/s
[info] # Warmup Iteration   5: 132182.445 ops/s
[info] Iteration   1: 133209.398 ops/s
[info]                  ·gc.alloc.rate:               903.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          10678.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7878.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 132816.497 ops/s
[info]                  ·gc.alloc.rate:               908.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          10770.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7901.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 131365.160 ops/s
[info]                  ·gc.alloc.rate:               911.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          10925.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15993.198 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 131280.784 ops/s
[info]                  ·gc.alloc.rate:               900.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          10786.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8005.890 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 132351.408 ops/s
[info]                  ·gc.alloc.rate:               897.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          10668.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7941.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   132204.649 ±(99.9%) 3314.510 ops/s [Average]
[info]   (min, avg, max) = (131280.784, 132204.649, 133209.398), stdev = 860.768
[info]   CI (99.9%): [128890.140, 135519.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   904.394 ±(99.9%) 23.463 MB/sec [Average]
[info]   (min, avg, max) = (897.134, 904.394, 911.919), stdev = 6.093
[info]   CI (99.9%): [880.931, 927.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10765.714 ±(99.9%) 399.395 B/op [Average]
[info]   (min, avg, max) = (10668.319, 10765.714, 10925.424), stdev = 103.722
[info]   CI (99.9%): [10366.320, 11165.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.902 ±(99.9%) 1149.504 MB/sec [Average]
[info]   (min, avg, max) = (666.816, 800.902, 1334.914), stdev = 298.523
[info]   CI (99.9%): [≈ 0, 1950.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9544.043 ±(99.9%) 13883.543 B/op [Average]
[info]   (min, avg, max) = (7878.231, 9544.043, 15993.198), stdev = 3605.512
[info]   CI (99.9%): [≈ 0, 23427.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.60% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103038.651 ops/s
[info] # Warmup Iteration   2: 271881.326 ops/s
[info] # Warmup Iteration   3: 282913.190 ops/s
[info] # Warmup Iteration   4: 294715.914 ops/s
[info] # Warmup Iteration   5: 293588.085 ops/s
[info] Iteration   1: 294098.324 ops/s
[info]                  ·gc.alloc.rate:                   1254.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              6712.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7194.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 295771.497 ops/s
[info]                  ·gc.alloc.rate:               1233.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          6563.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3576.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 289206.532 ops/s
[info]                  ·gc.alloc.rate:                   1242.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              6760.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7318.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 290486.596 ops/s
[info]                  ·gc.alloc.rate:                   1236.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              6701.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7290.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 296243.563 ops/s
[info]                  ·gc.alloc.rate:                   1259.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              6692.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7141.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   293161.302 ±(99.9%) 12174.631 ops/s [Average]
[info]   (min, avg, max) = (289206.532, 293161.302, 296243.563), stdev = 3161.713
[info]   CI (99.9%): [280986.671, 305335.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1245.355 ±(99.9%) 43.566 MB/sec [Average]
[info]   (min, avg, max) = (1233.556, 1245.355, 1259.936), stdev = 11.314
[info]   CI (99.9%): [1201.789, 1288.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6686.048 ±(99.9%) 281.323 B/op [Average]
[info]   (min, avg, max) = (6563.972, 6686.048, 6760.168), stdev = 73.059
[info]   CI (99.9%): [6404.725, 6967.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.279 ±(99.9%) 1158.350 MB/sec [Average]
[info]   (min, avg, max) = (672.156, 1210.279, 1345.608), stdev = 300.820
[info]   CI (99.9%): [51.928, 2368.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6504.377 ±(99.9%) 6308.155 B/op [Average]
[info]   (min, avg, max) = (3576.665, 6504.377, 7318.884), stdev = 1638.208
[info]   CI (99.9%): [196.222, 12812.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.769), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.577 ±(99.9%) 24.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.577, 15.001), stdev = 6.445
[info]   CI (99.9%): [≈ 0, 28.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.83% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1218.364 ops/s
[info] # Warmup Iteration   2: 24358.797 ops/s
[info] # Warmup Iteration   3: 33049.487 ops/s
[info] # Warmup Iteration   4: 32870.181 ops/s
[info] # Warmup Iteration   5: 32946.266 ops/s
[info] Iteration   1: 33217.962 ops/s
[info]                  ·gc.alloc.rate:                   1668.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              79016.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94635.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.973 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33166.724 ops/s
[info]                  ·gc.alloc.rate:                   1659.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              78768.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63378.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33122.477 ops/s
[info]                  ·gc.alloc.rate:                   1695.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              80566.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95412.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33315.693 ops/s
[info]                  ·gc.alloc.rate:               1666.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          78727.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63348.844 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 33406.925 ops/s
[info]                  ·gc.alloc.rate:               1670.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          78706.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63235.287 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33245.956 ±(99.9%) 443.588 ops/s [Average]
[info]   (min, avg, max) = (33122.477, 33245.956, 33406.925), stdev = 115.198
[info]   CI (99.9%): [32802.368, 33689.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1672.234 ±(99.9%) 52.781 MB/sec [Average]
[info]   (min, avg, max) = (1659.966, 1672.234, 1695.668), stdev = 13.707
[info]   CI (99.9%): [1619.453, 1725.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79157.163 ±(99.9%) 3071.695 B/op [Average]
[info]   (min, avg, max) = (78706.660, 79157.163, 80566.685), stdev = 797.710
[info]   CI (99.9%): [76085.468, 82228.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.013 ±(99.9%) 1399.158 MB/sec [Average]
[info]   (min, avg, max) = (1335.643, 1605.013, 2008.132), stdev = 363.357
[info]   CI (99.9%): [205.855, 3004.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76002.128 ±(99.9%) 66873.102 B/op [Average]
[info]   (min, avg, max) = (63235.287, 76002.128, 95412.851), stdev = 17366.732
[info]   CI (99.9%): [9129.026, 142875.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.196 ±(99.9%) 1.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.874), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.296 ±(99.9%) 69.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.296, 41.542), stdev = 18.072
[info]   CI (99.9%): [≈ 0, 78.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.06% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50934.837 ops/s
[info] # Warmup Iteration   2: 167693.951 ops/s
[info] # Warmup Iteration   3: 180233.032 ops/s
[info] # Warmup Iteration   4: 182471.136 ops/s
[info] # Warmup Iteration   5: 181588.565 ops/s
[info] Iteration   1: 183031.924 ops/s
[info]                  ·gc.alloc.rate:               1031.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          8868.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5736.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 178635.347 ops/s
[info]                  ·gc.alloc.rate:                   1020.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              8993.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11767.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 182486.309 ops/s
[info]                  ·gc.alloc.rate:                   1024.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              8833.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5762.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 180960.835 ops/s
[info]                  ·gc.alloc.rate:                   1028.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              8949.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11628.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 182770.323 ops/s
[info]                  ·gc.alloc.rate:               1024.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          8822.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5758.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   181576.948 ±(99.9%) 7048.008 ops/s [Average]
[info]   (min, avg, max) = (178635.347, 181576.948, 183031.924), stdev = 1830.345
[info]   CI (99.9%): [174528.940, 188624.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.975 ±(99.9%) 15.997 MB/sec [Average]
[info]   (min, avg, max) = (1020.838, 1025.975, 1031.321), stdev = 4.154
[info]   CI (99.9%): [1009.979, 1041.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8893.349 ±(99.9%) 289.081 B/op [Average]
[info]   (min, avg, max) = (8822.146, 8893.349, 8993.944), stdev = 75.073
[info]   CI (99.9%): [8604.268, 9182.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.350 ±(99.9%) 1409.507 MB/sec [Average]
[info]   (min, avg, max) = (667.154, 935.350, 1336.986), stdev = 366.044
[info]   CI (99.9%): [≈ 0, 2344.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8130.779 ±(99.9%) 12540.594 B/op [Average]
[info]   (min, avg, max) = (5736.826, 8130.779, 11767.772), stdev = 3256.752
[info]   CI (99.9%): [≈ 0, 20671.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.359), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.30% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179800.587 ops/s
[info] # Warmup Iteration   2: 454769.450 ops/s
[info] # Warmup Iteration   3: 473808.872 ops/s
[info] # Warmup Iteration   4: 483593.793 ops/s
[info] # Warmup Iteration   5: 481649.875 ops/s
[info] Iteration   1: 483007.947 ops/s
[info]                  ·gc.alloc.rate:                   1456.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              4744.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4378.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 481792.656 ops/s
[info]                  ·gc.alloc.rate:                   1447.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              4727.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4391.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 483548.564 ops/s
[info]                  ·gc.alloc.rate:                   1470.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              4783.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6567.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.841 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 487317.866 ops/s
[info]                  ·gc.alloc.rate:                   1478.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              4773.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4332.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 478399.281 ops/s
[info]                  ·gc.alloc.rate:                   1453.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              4781.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4409.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   482813.263 ±(99.9%) 12387.302 ops/s [Average]
[info]   (min, avg, max) = (478399.281, 482813.263, 487317.866), stdev = 3216.943
[info]   CI (99.9%): [470425.961, 495200.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1461.289 ±(99.9%) 49.283 MB/sec [Average]
[info]   (min, avg, max) = (1447.655, 1461.289, 1478.727), stdev = 12.799
[info]   CI (99.9%): [1412.006, 1510.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4762.192 ±(99.9%) 95.701 B/op [Average]
[info]   (min, avg, max) = (4727.944, 4762.192, 4783.440), stdev = 24.853
[info]   CI (99.9%): [4666.491, 4857.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.959 ±(99.9%) 1163.946 MB/sec [Average]
[info]   (min, avg, max) = (1340.501, 1477.959, 2018.675), stdev = 302.273
[info]   CI (99.9%): [314.013, 2641.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4815.939 ±(99.9%) 3772.212 B/op [Average]
[info]   (min, avg, max) = (4332.861, 4815.939, 6567.626), stdev = 979.632
[info]   CI (99.9%): [1043.727, 8588.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.658 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.704, 3.332), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.291 ±(99.9%) 18.406 B/op [Average]
[info]   (min, avg, max) = (0.134, 2.291, 10.841), stdev = 4.780
[info]   CI (99.9%): [≈ 0, 20.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.53% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234574.170 ops/s
[info] # Warmup Iteration   2: 515170.642 ops/s
[info] # Warmup Iteration   3: 516272.911 ops/s
[info] # Warmup Iteration   4: 519984.344 ops/s
[info] # Warmup Iteration   5: 527818.137 ops/s
[info] Iteration   1: 524221.792 ops/s
[info]                  ·gc.alloc.rate:                   1005.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3018.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4029.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 528145.983 ops/s
[info]                  ·gc.alloc.rate:               986.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          2939.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2000.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 522245.906 ops/s
[info]                  ·gc.alloc.rate:                   989.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              2980.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4048.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 531083.474 ops/s
[info]                  ·gc.alloc.rate:               1001.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          2966.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1990.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 527992.687 ops/s
[info]                  ·gc.alloc.rate:                   1009.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              3008.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4006.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   526737.968 ±(99.9%) 13470.377 ops/s [Average]
[info]   (min, avg, max) = (522245.906, 526737.968, 531083.474), stdev = 3498.214
[info]   CI (99.9%): [513267.592, 540208.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   998.410 ±(99.9%) 38.646 MB/sec [Average]
[info]   (min, avg, max) = (986.580, 998.410, 1009.374), stdev = 10.036
[info]   CI (99.9%): [959.764, 1037.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2982.671 ±(99.9%) 122.950 B/op [Average]
[info]   (min, avg, max) = (2939.949, 2982.671, 3018.988), stdev = 31.930
[info]   CI (99.9%): [2859.721, 3105.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1074.815 ±(99.9%) 1416.767 MB/sec [Average]
[info]   (min, avg, max) = (671.478, 1074.815, 1344.482), stdev = 367.930
[info]   CI (99.9%): [≈ 0, 2491.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3215.358 ±(99.9%) 4287.004 B/op [Average]
[info]   (min, avg, max) = (1990.811, 3215.358, 4048.180), stdev = 1113.321
[info]   CI (99.9%): [≈ 0, 7502.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.063), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.76% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13430.061 ops/s
[info] # Warmup Iteration   2: 69981.276 ops/s
[info] # Warmup Iteration   3: 76098.560 ops/s
[info] # Warmup Iteration   4: 76083.236 ops/s
[info] # Warmup Iteration   5: 75634.419 ops/s
[info] Iteration   1: 74584.470 ops/s
[info]                  ·gc.alloc.rate:               1332.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          28126.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28154.880 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 73566.690 ops/s
[info]                  ·gc.alloc.rate:                   1328.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              28414.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28573.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 74578.208 ops/s
[info]                  ·gc.alloc.rate:               1330.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          28069.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28200.073 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 75624.182 ops/s
[info]                  ·gc.alloc.rate:                   1343.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              27958.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27837.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 75655.151 ops/s
[info]                  ·gc.alloc.rate:               1355.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          28203.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27743.992 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   74801.740 ±(99.9%) 3349.864 ops/s [Average]
[info]   (min, avg, max) = (73566.690, 74801.740, 75655.151), stdev = 869.949
[info]   CI (99.9%): [71451.876, 78151.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1338.182 ±(99.9%) 44.031 MB/sec [Average]
[info]   (min, avg, max) = (1328.495, 1338.182, 1355.699), stdev = 11.435
[info]   CI (99.9%): [1294.151, 1382.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28154.466 ±(99.9%) 656.354 B/op [Average]
[info]   (min, avg, max) = (27958.717, 28154.466, 28414.170), stdev = 170.453
[info]   CI (99.9%): [27498.111, 28810.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.598 ±(99.9%) 6.525 MB/sec [Average]
[info]   (min, avg, max) = (1333.602, 1335.598, 1337.833), stdev = 1.694
[info]   CI (99.9%): [1329.073, 1342.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28102.015 ±(99.9%) 1267.011 B/op [Average]
[info]   (min, avg, max) = (27743.992, 28102.015, 28573.689), stdev = 329.039
[info]   CI (99.9%): [26835.005, 29369.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.956 ±(99.9%) 7.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.956, 4.289), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.944 ±(99.9%) 150.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.944, 89.245), stdev = 39.005
[info]   CI (99.9%): [≈ 0, 170.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.99% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26087.167 ops/s
[info] # Warmup Iteration   2: 91375.727 ops/s
[info] # Warmup Iteration   3: 96933.324 ops/s
[info] # Warmup Iteration   4: 99705.258 ops/s
[info] # Warmup Iteration   5: 100115.857 ops/s
[info] Iteration   1: 99476.412 ops/s
[info]                  ·gc.alloc.rate:                   1633.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31880.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 99941.205 ops/s
[info]                  ·gc.alloc.rate:                   1636.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              25757.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21168.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 100413.102 ops/s
[info]                  ·gc.alloc.rate:                   1642.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              25735.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21049.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 96889.429 ops/s
[info]                  ·gc.alloc.rate:                   1599.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              25977.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32646.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 100281.002 ops/s
[info]                  ·gc.alloc.rate:               1653.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          25945.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21014.385 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   99400.230 ±(99.9%) 5581.525 ops/s [Average]
[info]   (min, avg, max) = (96889.429, 99400.230, 100413.102), stdev = 1449.504
[info]   CI (99.9%): [93818.706, 104981.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1632.831 ±(99.9%) 78.032 MB/sec [Average]
[info]   (min, avg, max) = (1599.223, 1632.831, 1653.134), stdev = 20.265
[info]   CI (99.9%): [1554.799, 1710.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25851.600 ±(99.9%) 418.706 B/op [Average]
[info]   (min, avg, max) = (25735.697, 25851.600, 25977.963), stdev = 108.737
[info]   CI (99.9%): [25432.894, 26270.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.353 ±(99.9%) 1413.535 MB/sec [Average]
[info]   (min, avg, max) = (1338.920, 1610.353, 2015.167), stdev = 367.091
[info]   CI (99.9%): [196.818, 3023.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25552.125 ±(99.9%) 23616.698 B/op [Average]
[info]   (min, avg, max) = (21014.385, 25552.125, 32646.940), stdev = 6133.181
[info]   CI (99.9%): [1935.428, 49168.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.873), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 5.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.125 ±(99.9%) 74.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.125, 45.238), stdev = 19.372
[info]   CI (99.9%): [≈ 0, 86.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.22% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29554.725 ops/s
[info] # Warmup Iteration   2: 148994.356 ops/s
[info] # Warmup Iteration   3: 177524.547 ops/s
[info] # Warmup Iteration   4: 171403.582 ops/s
[info] # Warmup Iteration   5: 180324.429 ops/s
[info] Iteration   1: 179904.084 ops/s
[info]                  ·gc.alloc.rate:               759.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5819.076 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 177552.972 ops/s
[info]                  ·gc.alloc.rate:               743.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          6587.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5904.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 180399.697 ops/s
[info]                  ·gc.alloc.rate:               764.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          6666.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5811.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 180491.278 ops/s
[info]                  ·gc.alloc.rate:                   760.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              6626.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5814.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 180373.502 ops/s
[info]                  ·gc.alloc.rate:               759.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          6622.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5818.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   179744.306 ±(99.9%) 4798.213 ops/s [Average]
[info]   (min, avg, max) = (177552.972, 179744.306, 180491.278), stdev = 1246.081
[info]   CI (99.9%): [174946.094, 184542.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   757.227 ±(99.9%) 30.641 MB/sec [Average]
[info]   (min, avg, max) = (743.516, 757.227, 764.301), stdev = 7.957
[info]   CI (99.9%): [726.587, 787.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6629.033 ±(99.9%) 110.569 B/op [Average]
[info]   (min, avg, max) = (6587.970, 6629.033, 6666.926), stdev = 28.715
[info]   CI (99.9%): [6518.463, 6739.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.333 ±(99.9%) 2.473 MB/sec [Average]
[info]   (min, avg, max) = (665.291, 666.333, 666.867), stdev = 0.642
[info]   CI (99.9%): [663.860, 668.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5833.633 ±(99.9%) 154.018 B/op [Average]
[info]   (min, avg, max) = (5811.475, 5833.633, 5904.975), stdev = 39.998
[info]   CI (99.9%): [5679.615, 5987.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.182), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.45% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127329.743 ops/s
[info] # Warmup Iteration   2: 255890.726 ops/s
[info] # Warmup Iteration   3: 275293.521 ops/s
[info] # Warmup Iteration   4: 274780.108 ops/s
[info] # Warmup Iteration   5: 280047.568 ops/s
[info] Iteration   1: 281718.019 ops/s
[info]                  ·gc.alloc.rate:               1023.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          5714.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3751.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 270102.701 ops/s
[info]                  ·gc.alloc.rate:               1022.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          5954.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7829.278 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 281180.637 ops/s
[info]                  ·gc.alloc.rate:               1016.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          5687.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3762.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 280105.417 ops/s
[info]                  ·gc.alloc.rate:                   1026.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              5768.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7557.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 280250.828 ops/s
[info]                  ·gc.alloc.rate:               1012.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          5684.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3778.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   278671.520 ±(99.9%) 18622.130 ops/s [Average]
[info]   (min, avg, max) = (270102.701, 278671.520, 281718.019), stdev = 4836.108
[info]   CI (99.9%): [260049.391, 297293.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1020.063 ±(99.9%) 22.504 MB/sec [Average]
[info]   (min, avg, max) = (1012.115, 1020.063, 1026.750), stdev = 5.844
[info]   CI (99.9%): [997.560, 1042.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5761.934 ±(99.9%) 434.963 B/op [Average]
[info]   (min, avg, max) = (5684.271, 5761.934, 5954.844), stdev = 112.958
[info]   CI (99.9%): [5326.972, 6196.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.140 ±(99.9%) 1418.272 MB/sec [Average]
[info]   (min, avg, max) = (671.501, 941.140, 1345.171), stdev = 368.321
[info]   CI (99.9%): [≈ 0, 2359.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5335.655 ±(99.9%) 8295.283 B/op [Average]
[info]   (min, avg, max) = (3751.254, 5335.655, 7829.278), stdev = 2154.259
[info]   CI (99.9%): [≈ 0, 13630.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 2.191
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.68% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4819.092 ops/s
[info] # Warmup Iteration   2: 57732.763 ops/s
[info] # Warmup Iteration   3: 63537.564 ops/s
[info] # Warmup Iteration   4: 65261.536 ops/s
[info] # Warmup Iteration   5: 65500.330 ops/s
[info] Iteration   1: 66468.303 ops/s
[info]                  ·gc.alloc.rate:                   2592.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              61364.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63288.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 66393.144 ops/s
[info]                  ·gc.alloc.rate:                   2575.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              61044.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47420.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 66714.902 ops/s
[info]                  ·gc.alloc.rate:                   2571.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              60651.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47223.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 66336.927 ops/s
[info]                  ·gc.alloc.rate:               2563.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          60827.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63484.450 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 66511.017 ops/s
[info]                  ·gc.alloc.rate:               2581.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          61087.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63521.402 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   66484.859 ±(99.9%) 558.587 ops/s [Average]
[info]   (min, avg, max) = (66336.927, 66484.859, 66714.902), stdev = 145.063
[info]   CI (99.9%): [65926.271, 67043.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2576.741 ±(99.9%) 41.371 MB/sec [Average]
[info]   (min, avg, max) = (2563.828, 2576.741, 2592.099), stdev = 10.744
[info]   CI (99.9%): [2535.370, 2618.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60995.010 ±(99.9%) 1044.255 B/op [Average]
[info]   (min, avg, max) = (60651.137, 60995.010, 61364.761), stdev = 271.190
[info]   CI (99.9%): [59950.755, 62039.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.179 ±(99.9%) 1427.462 MB/sec [Average]
[info]   (min, avg, max) = (2000.418, 2407.179, 2684.476), stdev = 370.707
[info]   CI (99.9%): [979.717, 3834.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56987.625 ±(99.9%) 33978.988 B/op [Average]
[info]   (min, avg, max) = (47223.243, 56987.625, 63521.402), stdev = 8824.235
[info]   CI (99.9%): [23008.637, 90966.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.437), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.760 ±(99.9%) 16.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.760, 10.351), stdev = 4.362
[info]   CI (99.9%): [≈ 0, 19.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.91% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70083.364 ops/s
[info] # Warmup Iteration   2: 198604.331 ops/s
[info] # Warmup Iteration   3: 203680.924 ops/s
[info] # Warmup Iteration   4: 205491.595 ops/s
[info] # Warmup Iteration   5: 201240.553 ops/s
[info] Iteration   1: 202819.905 ops/s
[info]                  ·gc.alloc.rate:                   1408.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              10931.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10408.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 198898.247 ops/s
[info]                  ·gc.alloc.rate:               1389.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          10990.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10621.601 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 204132.931 ops/s
[info]                  ·gc.alloc.rate:                   1425.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              10991.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10354.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 206795.115 ops/s
[info]                  ·gc.alloc.rate:                   1444.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              10990.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10210.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 205902.341 ops/s
[info]                  ·gc.alloc.rate:                   1453.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              11111.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10239.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   203709.708 ±(99.9%) 11938.301 ops/s [Average]
[info]   (min, avg, max) = (198898.247, 203709.708, 206795.115), stdev = 3100.339
[info]   CI (99.9%): [191771.407, 215648.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1424.293 ±(99.9%) 100.118 MB/sec [Average]
[info]   (min, avg, max) = (1389.486, 1424.293, 1453.603), stdev = 26.000
[info]   CI (99.9%): [1324.175, 1524.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11002.985 ±(99.9%) 252.611 B/op [Average]
[info]   (min, avg, max) = (10931.950, 11002.985, 11111.184), stdev = 65.602
[info]   CI (99.9%): [10750.373, 11255.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.660 ±(99.9%) 5.372 MB/sec [Average]
[info]   (min, avg, max) = (1339.582, 1341.660, 1342.996), stdev = 1.395
[info]   CI (99.9%): [1336.288, 1347.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10366.889 ±(99.9%) 630.870 B/op [Average]
[info]   (min, avg, max) = (10210.670, 10366.889, 10621.601), stdev = 163.835
[info]   CI (99.9%): [9736.019, 10997.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.060), stdev = 1.326
[info]   CI (99.9%): [≈ 0, 5.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.512 ±(99.9%) 39.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.512, 23.593), stdev = 10.224
[info]   CI (99.9%): [≈ 0, 44.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177291.943 ops/s
[info] # Warmup Iteration   2: 503816.576 ops/s
[info] # Warmup Iteration   3: 509858.605 ops/s
[info] # Warmup Iteration   4: 507310.930 ops/s
[info] # Warmup Iteration   5: 508286.618 ops/s
[info] Iteration   1: 500615.749 ops/s
[info]                  ·gc.alloc.rate:               399.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          1256.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1608.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 507919.993 ops/s
[info]                  ·gc.alloc.rate:               418.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          1297.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1585.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 507593.932 ops/s
[info]                  ·gc.alloc.rate:               419.643 MB/sec
[info]                  ·gc.alloc.rate.norm:          1301.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2065.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 513412.581 ops/s
[info]                  ·gc.alloc.rate:      404.550 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 510229.674 ops/s
[info]                  ·gc.alloc.rate:                   427.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1317.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   507954.386 ±(99.9%) 18158.912 ops/s [Average]
[info]   (min, avg, max) = (500615.749, 507954.386, 513412.581), stdev = 4715.812
[info]   CI (99.9%): [489795.474, 526113.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   413.910 ±(99.9%) 44.194 MB/sec [Average]
[info]   (min, avg, max) = (399.522, 413.910, 427.226), stdev = 11.477
[info]   CI (99.9%): [369.716, 458.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1282.386 ±(99.9%) 126.325 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1282.386, 1317.737), stdev = 32.806
[info]   CI (99.9%): [1156.061, 1408.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.114 ±(99.9%) 1056.853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.114, 666.178), stdev = 274.461
[info]   CI (99.9%): [≈ 0, 1527.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1462.775 ±(99.9%) 3272.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1462.775, 2065.537), stdev = 849.936
[info]   CI (99.9%): [≈ 0, 4735.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.37% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369294.455 ops/s
[info] # Warmup Iteration   2: 626212.345 ops/s
[info] # Warmup Iteration   3: 622422.976 ops/s
[info] # Warmup Iteration   4: 646118.002 ops/s
[info] # Warmup Iteration   5: 647502.707 ops/s
[info] Iteration   1: 644388.985 ops/s
[info]                  ·gc.alloc.rate:                   358.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              874.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 643697.525 ops/s
[info]                  ·gc.alloc.rate:               367.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1250.889 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 647250.068 ops/s
[info]                  ·gc.alloc.rate:      348.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.145 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 645928.524 ops/s
[info]                  ·gc.alloc.rate:                   364.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1634.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 648441.121 ops/s
[info]                  ·gc.alloc.rate:      349.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   645941.245 ±(99.9%) 7557.067 ops/s [Average]
[info]   (min, avg, max) = (643697.525, 645941.245, 648441.121), stdev = 1962.546
[info]   CI (99.9%): [638384.178, 653498.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.758 ±(99.9%) 32.878 MB/sec [Average]
[info]   (min, avg, max) = (348.866, 357.758, 367.463), stdev = 8.538
[info]   CI (99.9%): [324.881, 390.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   871.571 ±(99.9%) 88.719 B/op [Average]
[info]   (min, avg, max) = (848.001, 871.571, 898.406), stdev = 23.040
[info]   CI (99.9%): [782.852, 960.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.866 ±(99.9%) 1217.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.866, 671.102), stdev = 316.119
[info]   CI (99.9%): [≈ 0, 1556.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   826.993 ±(99.9%) 2969.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 826.993, 1634.522), stdev = 771.068
[info]   CI (99.9%): [≈ 0, 3796.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.051), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.61% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403572.085 ops/s
[info] # Warmup Iteration   2: 664730.850 ops/s
[info] # Warmup Iteration   3: 693350.252 ops/s
[info] # Warmup Iteration   4: 693544.277 ops/s
[info] # Warmup Iteration   5: 690694.342 ops/s
[info] Iteration   1: 693821.262 ops/s
[info]                  ·gc.alloc.rate:      7.054 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 693479.065 ops/s
[info]                  ·gc.alloc.rate:      7.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 689254.005 ops/s
[info]                  ·gc.alloc.rate:      7.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 693554.470 ops/s
[info]                  ·gc.alloc.rate:      7.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 689054.229 ops/s
[info]                  ·gc.alloc.rate:      7.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   691832.606 ±(99.9%) 9431.908 ops/s [Average]
[info]   (min, avg, max) = (689054.229, 691832.606, 693821.262), stdev = 2449.437
[info]   CI (99.9%): [682400.698, 701264.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.034 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (7.005, 7.034, 7.054), stdev = 0.025
[info]   CI (99.9%): [6.937, 7.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.84% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9882.254 ops/s
[info] # Warmup Iteration   2: 33025.276 ops/s
[info] # Warmup Iteration   3: 34875.659 ops/s
[info] # Warmup Iteration   4: 34437.543 ops/s
[info] # Warmup Iteration   5: 35727.178 ops/s
[info] Iteration   1: 35883.256 ops/s
[info]                  ·gc.alloc.rate:                   1879.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              82445.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58843.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 35938.641 ops/s
[info]                  ·gc.alloc.rate:                   1884.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              82513.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88130.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 36006.490 ops/s
[info]                  ·gc.alloc.rate:                   1914.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              83636.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87730.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36043.897 ops/s
[info]                  ·gc.alloc.rate:               1875.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          81883.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58349.565 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 35580.478 ops/s
[info]                  ·gc.alloc.rate:                   1892.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              83710.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88736.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35890.552 ±(99.9%) 708.633 ops/s [Average]
[info]   (min, avg, max) = (35580.478, 35890.552, 36043.897), stdev = 184.030
[info]   CI (99.9%): [35181.920, 36599.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1889.200 ±(99.9%) 59.304 MB/sec [Average]
[info]   (min, avg, max) = (1875.232, 1889.200, 1914.303), stdev = 15.401
[info]   CI (99.9%): [1829.895, 1948.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82837.956 ±(99.9%) 3085.725 B/op [Average]
[info]   (min, avg, max) = (81883.884, 82837.956, 83710.361), stdev = 801.353
[info]   CI (99.9%): [79752.230, 85923.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.895 ±(99.9%) 1412.824 MB/sec [Average]
[info]   (min, avg, max) = (1336.270, 1740.895, 2012.404), stdev = 366.906
[info]   CI (99.9%): [328.071, 3153.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76358.121 ±(99.9%) 62453.452 B/op [Average]
[info]   (min, avg, max) = (58349.565, 76358.121, 88736.768), stdev = 16218.963
[info]   CI (99.9%): [13904.669, 138811.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.893), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.826 ±(99.9%) 292.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.826, 170.477), stdev = 75.834
[info]   CI (99.9%): [≈ 0, 326.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.07% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42665.446 ops/s
[info] # Warmup Iteration   2: 674479.252 ops/s
[info] # Warmup Iteration   3: 848693.186 ops/s
[info] # Warmup Iteration   4: 839901.997 ops/s
[info] # Warmup Iteration   5: 845456.134 ops/s
[info] Iteration   1: 867724.598 ops/s
[info]                  ·gc.alloc.rate:                   2325.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3651.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 866514.010 ops/s
[info]                  ·gc.alloc.rate:                   2347.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              4263.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4856.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 866088.609 ops/s
[info]                  ·gc.alloc.rate:                   2306.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3642.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 865779.871 ops/s
[info]                  ·gc.alloc.rate:                   2359.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              4289.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4864.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 867725.728 ops/s
[info]                  ·gc.alloc.rate:                   2338.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              4241.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3647.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   866766.563 ±(99.9%) 3515.911 ops/s [Average]
[info]   (min, avg, max) = (865779.871, 866766.563, 867725.728), stdev = 913.071
[info]   CI (99.9%): [863250.652, 870282.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2335.612 ±(99.9%) 78.524 MB/sec [Average]
[info]   (min, avg, max) = (2306.916, 2335.612, 2359.747), stdev = 20.392
[info]   CI (99.9%): [2257.088, 2414.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4240.608 ±(99.9%) 147.218 B/op [Average]
[info]   (min, avg, max) = (4191.840, 4240.608, 4289.599), stdev = 38.232
[info]   CI (99.9%): [4093.390, 4387.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.798 ±(99.9%) 1403.501 MB/sec [Average]
[info]   (min, avg, max) = (2004.618, 2275.798, 2675.748), stdev = 364.485
[info]   CI (99.9%): [872.297, 3679.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4132.341 ±(99.9%) 2559.076 B/op [Average]
[info]   (min, avg, max) = (3642.541, 4132.341, 4864.033), stdev = 664.584
[info]   CI (99.9%): [1573.265, 6691.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 6.806 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.847, 4.008), stdev = 1.767
[info]   CI (99.9%): [≈ 0, 7.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.537 ±(99.9%) 12.343 B/op [Average]
[info]   (min, avg, max) = (0.038, 1.537, 7.268), stdev = 3.205
[info]   CI (99.9%): [≈ 0, 13.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.30% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43225.573 ops/s
[info] # Warmup Iteration   2: 1617715.696 ops/s
[info] # Warmup Iteration   3: 1847993.147 ops/s
[info] # Warmup Iteration   4: 1809573.845 ops/s
[info] # Warmup Iteration   5: 1800725.889 ops/s
[info] Iteration   1: 1836177.710 ops/s
[info]                  ·gc.alloc.rate:               1178.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          1010.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1143.680 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1848976.863 ops/s
[info]                  ·gc.alloc.rate:               1163.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 568.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1839696.043 ops/s
[info]                  ·gc.alloc.rate:                   1171.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1142.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1839095.827 ops/s
[info]                  ·gc.alloc.rate:                   1168.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              999.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1144.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1865827.864 ops/s
[info]                  ·gc.alloc.rate:                   1170.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              987.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1845954.861 ±(99.9%) 46602.360 ops/s [Average]
[info]   (min, avg, max) = (1836177.710, 1845954.861, 1865827.864), stdev = 12102.485
[info]   CI (99.9%): [1799352.501, 1892557.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1170.371 ±(99.9%) 21.799 MB/sec [Average]
[info]   (min, avg, max) = (1163.034, 1170.371, 1178.599), stdev = 5.661
[info]   CI (99.9%): [1148.572, 1192.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   997.853 ±(99.9%) 35.639 B/op [Average]
[info]   (min, avg, max) = (987.424, 997.853, 1010.122), stdev = 9.255
[info]   CI (99.9%): [962.214, 1033.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.700 ±(99.9%) 1408.102 MB/sec [Average]
[info]   (min, avg, max) = (667.482, 1068.700, 1336.934), stdev = 365.680
[info]   CI (99.9%): [≈ 0, 2476.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   912.548 ±(99.9%) 1217.636 B/op [Average]
[info]   (min, avg, max) = (564.150, 912.548, 1144.132), stdev = 316.216
[info]   CI (99.9%): [≈ 0, 2130.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.402), stdev = 1.961
[info]   CI (99.9%): [≈ 0, 8.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.755 ±(99.9%) 6.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.755, 3.714), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.53% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2119504.284 ops/s
[info] # Warmup Iteration   2: 7796951.134 ops/s
[info] # Warmup Iteration   3: 7980242.615 ops/s
[info] # Warmup Iteration   4: 8248818.815 ops/s
[info] # Warmup Iteration   5: 8181442.594 ops/s
[info] Iteration   1: 7935812.116 ops/s
[info]                  ·gc.alloc.rate:      242.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8251130.398 ops/s
[info]                  ·gc.alloc.rate:               279.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          53.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 8373050.636 ops/s
[info]                  ·gc.alloc.rate:      264.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 49.727 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8339648.770 ops/s
[info]                  ·gc.alloc.rate:                   264.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8382199.502 ops/s
[info]                  ·gc.alloc.rate:      255.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8256368.284 ±(99.9%) 718244.702 ops/s [Average]
[info]   (min, avg, max) = (7935812.116, 8256368.284, 8382199.502), stdev = 186525.868
[info]   CI (99.9%): [7538123.582, 8974612.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   261.310 ±(99.9%) 52.864 MB/sec [Average]
[info]   (min, avg, max) = (242.238, 261.310, 279.731), stdev = 13.729
[info]   CI (99.9%): [208.446, 314.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.797 ±(99.9%) 8.407 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.797, 53.356), stdev = 2.183
[info]   CI (99.9%): [41.390, 58.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.646 ±(99.9%) 1079.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.646, 511.624), stdev = 280.223
[info]   CI (99.9%): [≈ 0, 1283.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   38.827 ±(99.9%) 204.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.827, 97.588), stdev = 53.167
[info]   CI (99.9%): [≈ 0, 243.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.167), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.76% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2320.057 ops/s
[info] # Warmup Iteration   2: 65432.872 ops/s
[info] # Warmup Iteration   3: 128900.760 ops/s
[info] # Warmup Iteration   4: 286655.597 ops/s
[info] # Warmup Iteration   5: 312777.186 ops/s
[info] Iteration   1: 313682.340 ops/s
[info]                  ·gc.alloc.rate:                   2108.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              10580.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10072.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 312112.243 ops/s
[info]                  ·gc.alloc.rate:                   2098.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              10578.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10139.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 311561.674 ops/s
[info]                  ·gc.alloc.rate:                   2089.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              10556.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10176.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 311287.761 ops/s
[info]                  ·gc.alloc.rate:                   2073.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              10481.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10191.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 306678.112 ops/s
[info]                  ·gc.alloc.rate:               2054.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          10543.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10356.808 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   311064.426 ±(99.9%) 10094.321 ops/s [Average]
[info]   (min, avg, max) = (306678.112, 311064.426, 313682.340), stdev = 2621.463
[info]   CI (99.9%): [300970.105, 321158.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2084.947 ±(99.9%) 82.528 MB/sec [Average]
[info]   (min, avg, max) = (2054.455, 2084.947, 2108.814), stdev = 21.432
[info]   CI (99.9%): [2002.419, 2167.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10548.361 ±(99.9%) 155.680 B/op [Average]
[info]   (min, avg, max) = (10481.618, 10548.361, 10580.913), stdev = 40.430
[info]   CI (99.9%): [10392.680, 10704.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.397 ±(99.9%) 16.053 MB/sec [Average]
[info]   (min, avg, max) = (2007.421, 2013.397, 2018.049), stdev = 4.169
[info]   CI (99.9%): [1997.344, 2029.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10187.159 ±(99.9%) 405.794 B/op [Average]
[info]   (min, avg, max) = (10072.177, 10187.159, 10356.808), stdev = 105.383
[info]   CI (99.9%): [9781.365, 10592.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 1.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 0.999), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 1.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.702 ±(99.9%) 7.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.702, 5.039), stdev = 2.036
[info]   CI (99.9%): [≈ 0, 9.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.99% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84204.831 ops/s
[info] # Warmup Iteration   2: 1037994.948 ops/s
[info] # Warmup Iteration   3: 1100878.852 ops/s
[info] # Warmup Iteration   4: 1141813.230 ops/s
[info] # Warmup Iteration   5: 1131181.100 ops/s
[info] Iteration   1: 1142542.633 ops/s
[info]                  ·gc.alloc.rate:                   1866.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              2570.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2768.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1147650.232 ops/s
[info]                  ·gc.alloc.rate:                   1873.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1838.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1146493.836 ops/s
[info]                  ·gc.alloc.rate:                   1885.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              2587.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1131383.361 ops/s
[info]                  ·gc.alloc.rate:               1859.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          2586.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2788.431 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1139778.856 ops/s
[info]                  ·gc.alloc.rate:               1887.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          2606.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2768.621 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1141569.783 ±(99.9%) 25039.196 ops/s [Average]
[info]   (min, avg, max) = (1131383.361, 1141569.783, 1147650.232), stdev = 6502.600
[info]   CI (99.9%): [1116530.587, 1166608.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1874.160 ±(99.9%) 46.617 MB/sec [Average]
[info]   (min, avg, max) = (1859.098, 1874.160, 1887.439), stdev = 12.106
[info]   CI (99.9%): [1827.544, 1920.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2583.842 ±(99.9%) 59.014 B/op [Average]
[info]   (min, avg, max) = (2568.712, 2583.842, 2606.280), stdev = 15.326
[info]   CI (99.9%): [2524.828, 2642.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1873.318 ±(99.9%) 1146.009 MB/sec [Average]
[info]   (min, avg, max) = (1340.945, 1873.318, 2010.459), stdev = 297.615
[info]   CI (99.9%): [727.309, 3019.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2583.686 ±(99.9%) 1603.774 B/op [Average]
[info]   (min, avg, max) = (1838.968, 2583.686, 2788.431), stdev = 416.495
[info]   CI (99.9%): [979.912, 4187.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.872), stdev = 1.722
[info]   CI (99.9%): [≈ 0, 7.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.085 ±(99.9%) 9.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.085, 5.310), stdev = 2.362
[info]   CI (99.9%): [≈ 0, 10.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.22% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219908.107 ops/s
[info] # Warmup Iteration   2: 2638681.688 ops/s
[info] # Warmup Iteration   3: 2691583.981 ops/s
[info] # Warmup Iteration   4: 2751534.882 ops/s
[info] # Warmup Iteration   5: 2746646.687 ops/s
[info] Iteration   1: 2662719.984 ops/s
[info]                  ·gc.alloc.rate:                   1173.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2696554.109 ops/s
[info]                  ·gc.alloc.rate:                   1182.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2758020.814 ops/s
[info]                  ·gc.alloc.rate:               1203.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          686.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2759440.184 ops/s
[info]                  ·gc.alloc.rate:                   1205.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2741795.324 ops/s
[info]                  ·gc.alloc.rate:                   1210.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2723706.083 ±(99.9%) 163801.583 ops/s [Average]
[info]   (min, avg, max) = (2662719.984, 2723706.083, 2759440.184), stdev = 42538.751
[info]   CI (99.9%): [2559904.500, 2887507.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1194.996 ±(99.9%) 63.054 MB/sec [Average]
[info]   (min, avg, max) = (1173.088, 1194.996, 1210.957), stdev = 16.375
[info]   CI (99.9%): [1131.942, 1258.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   690.518 ±(99.9%) 13.873 B/op [Average]
[info]   (min, avg, max) = (686.766, 690.518, 694.970), stdev = 3.603
[info]   CI (99.9%): [676.644, 704.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.891 ±(99.9%) 1151.865 MB/sec [Average]
[info]   (min, avg, max) = (668.788, 1203.891, 1339.895), stdev = 299.136
[info]   CI (99.9%): [52.026, 2355.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   696.736 ±(99.9%) 679.375 B/op [Average]
[info]   (min, avg, max) = (381.645, 696.736, 789.448), stdev = 176.432
[info]   CI (99.9%): [17.361, 1376.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.818 ±(99.9%) 6.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.818, 3.956), stdev = 1.754
[info]   CI (99.9%): [≈ 0, 7.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.470 ±(99.9%) 3.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.470, 2.270), stdev = 1.007
[info]   CI (99.9%): [≈ 0, 4.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.45% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 795844.435 ops/s
[info] # Warmup Iteration   2: 5903855.061 ops/s
[info] # Warmup Iteration   3: 6350561.531 ops/s
[info] # Warmup Iteration   4: 6318587.043 ops/s
[info] # Warmup Iteration   5: 6406191.434 ops/s
[info] Iteration   1: 6300746.031 ops/s
[info]                  ·gc.alloc.rate:               741.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          185.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 334.780 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 6318491.945 ops/s
[info]                  ·gc.alloc.rate:               730.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          182.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6344175.122 ops/s
[info]                  ·gc.alloc.rate:               739.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          183.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6356344.973 ops/s
[info]                  ·gc.alloc.rate:               739.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          183.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6450198.019 ops/s
[info]                  ·gc.alloc.rate:               737.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          179.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6353991.218 ±(99.9%) 223311.560 ops/s [Average]
[info]   (min, avg, max) = (6300746.031, 6353991.218, 6450198.019), stdev = 57993.303
[info]   CI (99.9%): [6130679.658, 6577302.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   737.787 ±(99.9%) 15.845 MB/sec [Average]
[info]   (min, avg, max) = (730.753, 737.787, 741.033), stdev = 4.115
[info]   CI (99.9%): [721.942, 753.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   182.760 ±(99.9%) 7.302 B/op [Average]
[info]   (min, avg, max) = (179.998, 182.760, 185.102), stdev = 1.896
[info]   CI (99.9%): [175.458, 190.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.964 ±(99.9%) 1152.244 MB/sec [Average]
[info]   (min, avg, max) = (670.817, 804.964, 1340.250), stdev = 299.234
[info]   CI (99.9%): [≈ 0, 1957.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   199.678 ±(99.9%) 290.855 B/op [Average]
[info]   (min, avg, max) = (163.845, 199.678, 334.780), stdev = 75.534
[info]   CI (99.9%): [≈ 0, 490.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.68% complete, ETA 00:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1322347.305 ops/s
[info] # Warmup Iteration   2: 6262869.802 ops/s
[info] # Warmup Iteration   3: 6794190.679 ops/s
[info] # Warmup Iteration   4: 6801213.400 ops/s
[info] # Warmup Iteration   5: 6835150.193 ops/s
[info] Iteration   1: 6821715.560 ops/s
[info]                  ·gc.alloc.rate:               428.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          98.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6810743.147 ops/s
[info]                  ·gc.alloc.rate:               435.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6814967.980 ops/s
[info]                  ·gc.alloc.rate:               446.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          103.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6860068.348 ops/s
[info]                  ·gc.alloc.rate:      418.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6833160.997 ops/s
[info]                  ·gc.alloc.rate:               434.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6828131.206 ±(99.9%) 76094.205 ops/s [Average]
[info]   (min, avg, max) = (6810743.147, 6828131.206, 6860068.348), stdev = 19761.424
[info]   CI (99.9%): [6752037.001, 6904225.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   432.782 ±(99.9%) 39.603 MB/sec [Average]
[info]   (min, avg, max) = (418.472, 432.782, 446.677), stdev = 10.285
[info]   CI (99.9%): [393.178, 472.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.758 ±(99.9%) 10.030 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.758, 103.152), stdev = 2.605
[info]   CI (99.9%): [89.728, 109.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.836 ±(99.9%) 1062.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.836, 670.523), stdev = 276.004
[info]   CI (99.9%): [≈ 0, 1535.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   109.106 ±(99.9%) 245.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.106, 154.845), stdev = 63.665
[info]   CI (99.9%): [≈ 0, 354.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.91% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5137.336 ops/s
[info] # Warmup Iteration   2: 330130.600 ops/s
[info] # Warmup Iteration   3: 423682.673 ops/s
[info] # Warmup Iteration   4: 425265.268 ops/s
[info] # Warmup Iteration   5: 426729.647 ops/s
[info] Iteration   1: 426754.978 ops/s
[info]                  ·gc.alloc.rate:                   2350.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              8668.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9856.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 420060.092 ops/s
[info]                  ·gc.alloc.rate:                   2313.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              8665.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7485.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 430173.090 ops/s
[info]                  ·gc.alloc.rate:               2355.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          8616.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2660.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9734.516 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 430649.863 ops/s
[info]                  ·gc.alloc.rate:               2371.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          8666.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7306.934 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 423543.106 ops/s
[info]                  ·gc.alloc.rate:               2333.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          8671.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7447.093 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   426236.226 ±(99.9%) 17289.961 ops/s [Average]
[info]   (min, avg, max) = (420060.092, 426236.226, 430649.863), stdev = 4490.148
[info]   CI (99.9%): [408946.265, 443526.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2344.723 ±(99.9%) 85.434 MB/sec [Average]
[info]   (min, avg, max) = (2313.101, 2344.723, 2371.221), stdev = 22.187
[info]   CI (99.9%): [2259.289, 2430.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8657.671 ±(99.9%) 88.395 B/op [Average]
[info]   (min, avg, max) = (8616.854, 8657.671, 8671.740), stdev = 22.956
[info]   CI (99.9%): [8569.277, 8746.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2266.954 ±(99.9%) 1405.099 MB/sec [Average]
[info]   (min, avg, max) = (1998.173, 2266.954, 2672.609), stdev = 364.900
[info]   CI (99.9%): [861.855, 3672.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8366.023 ±(99.9%) 5033.644 B/op [Average]
[info]   (min, avg, max) = (7306.934, 8366.023, 9856.257), stdev = 1307.221
[info]   CI (99.9%): [3332.379, 13399.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.983 ±(99.9%) 8.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.983, 4.892), stdev = 2.185
[info]   CI (99.9%): [≈ 0, 9.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.624 ±(99.9%) 31.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.624, 18.041), stdev = 8.060
[info]   CI (99.9%): [≈ 0, 34.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.15% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19816.428 ops/s
[info] # Warmup Iteration   2: 68486.990 ops/s
[info] # Warmup Iteration   3: 79192.035 ops/s
[info] # Warmup Iteration   4: 83420.748 ops/s
[info] # Warmup Iteration   5: 80239.387 ops/s
[info] Iteration   1: 81147.866 ops/s
[info]                  ·gc.alloc.rate:                   2251.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              43656.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51962.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 82569.388 ops/s
[info]                  ·gc.alloc.rate:                   2313.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              44096.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38390.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 83360.969 ops/s
[info]                  ·gc.alloc.rate:                   2311.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              43632.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38087.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83357.681 ops/s
[info]                  ·gc.alloc.rate:                   2361.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              44586.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50911.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 80662.407 ops/s
[info]                  ·gc.alloc.rate:                   2263.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              44168.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39537.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   82219.662 ±(99.9%) 4830.128 ops/s [Average]
[info]   (min, avg, max) = (80662.407, 82219.662, 83360.969), stdev = 1254.369
[info]   CI (99.9%): [77389.534, 87049.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2300.171 ±(99.9%) 170.016 MB/sec [Average]
[info]   (min, avg, max) = (2251.048, 2300.171, 2361.521), stdev = 44.153
[info]   CI (99.9%): [2130.155, 2470.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44028.240 ±(99.9%) 1529.679 B/op [Average]
[info]   (min, avg, max) = (43632.508, 44028.240, 44586.773), stdev = 397.253
[info]   CI (99.9%): [42498.561, 45557.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2286.736 ±(99.9%) 1410.499 MB/sec [Average]
[info]   (min, avg, max) = (2014.082, 2286.736, 2696.502), stdev = 366.302
[info]   CI (99.9%): [876.238, 3697.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43777.854 ±(99.9%) 27040.939 B/op [Average]
[info]   (min, avg, max) = (38087.391, 43777.854, 51962.404), stdev = 7022.446
[info]   CI (99.9%): [16736.915, 70818.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.426 ±(99.9%) 4.346 B/op [Average]
[info]   (min, avg, max) = (0.406, 1.426, 3.144), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 5.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.38% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22410.245 ops/s
[info] # Warmup Iteration   2: 100605.127 ops/s
[info] # Warmup Iteration   3: 124916.925 ops/s
[info] # Warmup Iteration   4: 126327.298 ops/s
[info] # Warmup Iteration   5: 127990.512 ops/s
[info] Iteration   1: 128399.991 ops/s
[info]                  ·gc.alloc.rate:                   2018.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              24740.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24601.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 126928.606 ops/s
[info]                  ·gc.alloc.rate:                   2008.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              24891.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24853.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125425.148 ops/s
[info]                  ·gc.alloc.rate:                   1995.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              25027.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25076.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 129344.346 ops/s
[info]                  ·gc.alloc.rate:               2044.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          24878.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24317.625 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 127302.010 ops/s
[info]                  ·gc.alloc.rate:               2000.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          24729.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16496.212 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   127480.020 ±(99.9%) 5737.429 ops/s [Average]
[info]   (min, avg, max) = (125425.148, 127480.020, 129344.346), stdev = 1489.992
[info]   CI (99.9%): [121742.591, 133217.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2013.332 ±(99.9%) 75.692 MB/sec [Average]
[info]   (min, avg, max) = (1995.069, 2013.332, 2044.658), stdev = 19.657
[info]   CI (99.9%): [1937.639, 2089.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24853.606 ±(99.9%) 474.621 B/op [Average]
[info]   (min, avg, max) = (24729.005, 24853.606, 25027.871), stdev = 123.258
[info]   CI (99.9%): [24378.985, 25328.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1868.820 ±(99.9%) 1150.950 MB/sec [Average]
[info]   (min, avg, max) = (1334.178, 1868.820, 2007.311), stdev = 298.898
[info]   CI (99.9%): [717.870, 3019.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23068.996 ±(99.9%) 14190.312 B/op [Average]
[info]   (min, avg, max) = (16496.212, 23068.996, 25076.352), stdev = 3685.179
[info]   CI (99.9%): [8878.684, 37259.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 3.727), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 7.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.304 ±(99.9%) 75.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.304, 45.674), stdev = 19.711
[info]   CI (99.9%): [≈ 0, 87.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.61% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35490.031 ops/s
[info] # Warmup Iteration   2: 169239.158 ops/s
[info] # Warmup Iteration   3: 174407.733 ops/s
[info] # Warmup Iteration   4: 179978.417 ops/s
[info] # Warmup Iteration   5: 179933.731 ops/s
[info] Iteration   1: 178969.860 ops/s
[info]                  ·gc.alloc.rate:                   2707.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              23807.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23608.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 178433.157 ops/s
[info]                  ·gc.alloc.rate:                   2700.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              23817.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23668.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 180990.760 ops/s
[info]                  ·gc.alloc.rate:               2765.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          24046.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23362.578 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 177823.561 ops/s
[info]                  ·gc.alloc.rate:               2719.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          24066.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23830.737 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 175930.108 ops/s
[info]                  ·gc.alloc.rate:               2691.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          24081.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24146.018 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   178429.489 ±(99.9%) 7065.217 ops/s [Average]
[info]   (min, avg, max) = (175930.108, 178429.489, 180990.760), stdev = 1834.814
[info]   CI (99.9%): [171364.272, 185494.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2716.771 ±(99.9%) 111.326 MB/sec [Average]
[info]   (min, avg, max) = (2691.875, 2716.771, 2765.344), stdev = 28.911
[info]   CI (99.9%): [2605.445, 2828.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23963.746 ±(99.9%) 533.573 B/op [Average]
[info]   (min, avg, max) = (23807.670, 23963.746, 24081.288), stdev = 138.567
[info]   CI (99.9%): [23430.173, 24497.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2689.268 ±(99.9%) 24.994 MB/sec [Average]
[info]   (min, avg, max) = (2683.494, 2689.268, 2699.110), stdev = 6.491
[info]   CI (99.9%): [2664.274, 2714.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23723.268 ±(99.9%) 1116.905 B/op [Average]
[info]   (min, avg, max) = (23362.578, 23723.268, 24146.018), stdev = 290.057
[info]   CI (99.9%): [22606.364, 24840.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.330 ±(99.9%) 1.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.102), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.84% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6276.589 ops/s
[info] # Warmup Iteration   2: 54930.237 ops/s
[info] # Warmup Iteration   3: 58675.438 ops/s
[info] # Warmup Iteration   4: 58773.571 ops/s
[info] # Warmup Iteration   5: 60333.548 ops/s
[info] Iteration   1: 59885.593 ops/s
[info]                  ·gc.alloc.rate:                   3004.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              78947.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70167.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 61037.416 ops/s
[info]                  ·gc.alloc.rate:                   3092.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              79728.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86124.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 60092.764 ops/s
[info]                  ·gc.alloc.rate:               3047.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          79790.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70181.314 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 60281.879 ops/s
[info]                  ·gc.alloc.rate:               3083.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          80500.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87752.367 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 60690.331 ops/s
[info]                  ·gc.alloc.rate:               3077.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          79799.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69982.230 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   60397.597 ±(99.9%) 1789.125 ops/s [Average]
[info]   (min, avg, max) = (59885.593, 60397.597, 61037.416), stdev = 464.630
[info]   CI (99.9%): [58608.472, 62186.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3060.928 ±(99.9%) 138.686 MB/sec [Average]
[info]   (min, avg, max) = (3004.082, 3060.928, 3092.136), stdev = 36.016
[info]   CI (99.9%): [2922.242, 3199.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79753.054 ±(99.9%) 2119.689 B/op [Average]
[info]   (min, avg, max) = (78947.198, 79753.054, 80500.426), stdev = 550.477
[info]   CI (99.9%): [77633.364, 81872.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2950.180 ±(99.9%) 1409.583 MB/sec [Average]
[info]   (min, avg, max) = (2670.005, 2950.180, 3361.669), stdev = 366.064
[info]   CI (99.9%): [1540.597, 4359.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76841.629 ±(99.9%) 35562.211 B/op [Average]
[info]   (min, avg, max) = (69982.230, 76841.629, 87752.367), stdev = 9235.393
[info]   CI (99.9%): [41279.418, 112403.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.646 ±(99.9%) 4.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 2.684), stdev = 1.163
[info]   CI (99.9%): [≈ 0, 5.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.07% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47075.163 ops/s
[info] # Warmup Iteration   2: 185247.437 ops/s
[info] # Warmup Iteration   3: 186617.464 ops/s
[info] # Warmup Iteration   4: 188334.944 ops/s
[info] # Warmup Iteration   5: 188885.083 ops/s
[info] Iteration   1: 189754.604 ops/s
[info]                  ·gc.alloc.rate:                   1335.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              11073.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11116.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 189332.457 ops/s
[info]                  ·gc.alloc.rate:                   1330.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              11059.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11146.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 189573.667 ops/s
[info]                  ·gc.alloc.rate:               1339.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          11120.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11137.885 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 184969.688 ops/s
[info]                  ·gc.alloc.rate:                   1338.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              11392.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11426.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 190071.592 ops/s
[info]                  ·gc.alloc.rate:               1341.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          11111.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11098.202 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   188740.402 ±(99.9%) 8182.917 ops/s [Average]
[info]   (min, avg, max) = (184969.688, 188740.402, 190071.592), stdev = 2125.078
[info]   CI (99.9%): [180557.484, 196923.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1337.212 ±(99.9%) 16.884 MB/sec [Average]
[info]   (min, avg, max) = (1330.529, 1337.212, 1341.793), stdev = 4.385
[info]   CI (99.9%): [1320.329, 1354.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11151.499 ±(99.9%) 527.958 B/op [Average]
[info]   (min, avg, max) = (11059.893, 11151.499, 11392.553), stdev = 137.109
[info]   CI (99.9%): [10623.541, 11679.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.245 ±(99.9%) 4.055 MB/sec [Average]
[info]   (min, avg, max) = (1340.227, 1341.245, 1342.919), stdev = 1.053
[info]   CI (99.9%): [1337.190, 1345.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11185.165 ±(99.9%) 525.154 B/op [Average]
[info]   (min, avg, max) = (11098.202, 11185.165, 11426.830), stdev = 136.381
[info]   CI (99.9%): [10660.011, 11710.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.414), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.948 ±(99.9%) 49.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.948, 29.049), stdev = 12.915
[info]   CI (99.9%): [≈ 0, 55.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.30% complete, ETA 00:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156011.201 ops/s
[info] # Warmup Iteration   2: 445191.810 ops/s
[info] # Warmup Iteration   3: 452310.805 ops/s
[info] # Warmup Iteration   4: 467410.010 ops/s
[info] # Warmup Iteration   5: 469759.045 ops/s
[info] Iteration   1: 456293.316 ops/s
[info]                  ·gc.alloc.rate:               409.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          1413.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1764.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 466426.069 ops/s
[info]                  ·gc.alloc.rate:               422.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          1425.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1726.236 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 468876.427 ops/s
[info]                  ·gc.alloc.rate:                   425.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1426.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2234.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 472894.985 ops/s
[info]                  ·gc.alloc.rate:      408.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 456439.433 ops/s
[info]                  ·gc.alloc.rate:               409.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          1410.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2295.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   464186.046 ±(99.9%) 28890.621 ops/s [Average]
[info]   (min, avg, max) = (456293.316, 464186.046, 472894.985), stdev = 7502.803
[info]   CI (99.9%): [435295.425, 493076.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   415.053 ±(99.9%) 30.713 MB/sec [Average]
[info]   (min, avg, max) = (408.700, 415.053, 425.027), stdev = 7.976
[info]   CI (99.9%): [384.340, 445.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1407.282 ±(99.9%) 105.268 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1407.282, 1426.675), stdev = 27.338
[info]   CI (99.9%): [1302.014, 1512.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.010 ±(99.9%) 1056.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.010, 666.029), stdev = 274.376
[info]   CI (99.9%): [≈ 0, 1527.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1604.319 ±(99.9%) 3596.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1604.319, 2295.761), stdev = 934.100
[info]   CI (99.9%): [≈ 0, 5201.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.53% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345831.542 ops/s
[info] # Warmup Iteration   2: 613918.927 ops/s
[info] # Warmup Iteration   3: 622672.907 ops/s
[info] # Warmup Iteration   4: 652820.091 ops/s
[info] # Warmup Iteration   5: 649817.098 ops/s
[info] Iteration   1: 651027.965 ops/s
[info]                  ·gc.alloc.rate:               363.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          878.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1236.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 653166.768 ops/s
[info]                  ·gc.alloc.rate:      352.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 849.212 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 651447.034 ops/s
[info]                  ·gc.alloc.rate:               365.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1235.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 639711.044 ops/s
[info]                  ·gc.alloc.rate:                   363.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1649.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 637205.108 ops/s
[info]                  ·gc.alloc.rate:      343.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   646511.583 ±(99.9%) 28680.556 ops/s [Average]
[info]   (min, avg, max) = (637205.108, 646511.583, 653166.768), stdev = 7448.249
[info]   CI (99.9%): [617831.027, 675192.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.778 ±(99.9%) 37.164 MB/sec [Average]
[info]   (min, avg, max) = (343.318, 357.778, 365.991), stdev = 9.651
[info]   CI (99.9%): [320.615, 394.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   870.946 ±(99.9%) 81.955 B/op [Average]
[info]   (min, avg, max) = (848.001, 870.946, 895.172), stdev = 21.283
[info]   CI (99.9%): [788.992, 952.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.747 ±(99.9%) 1216.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.747, 670.476), stdev = 315.959
[info]   CI (99.9%): [≈ 0, 1555.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   824.454 ±(99.9%) 2969.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 824.454, 1649.555), stdev = 771.293
[info]   CI (99.9%): [≈ 0, 3794.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357353.498 ops/s
[info] # Warmup Iteration   2: 716782.030 ops/s
[info] # Warmup Iteration   3: 708918.250 ops/s
[info] # Warmup Iteration   4: 717492.103 ops/s
[info] # Warmup Iteration   5: 717951.409 ops/s
[info] Iteration   1: 717460.349 ops/s
[info]                  ·gc.alloc.rate:      7.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 714658.493 ops/s
[info]                  ·gc.alloc.rate:      8.535 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.796 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 717518.220 ops/s
[info]                  ·gc.alloc.rate:      7.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 716534.504 ops/s
[info]                  ·gc.alloc.rate:      7.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 716582.874 ops/s
[info]                  ·gc.alloc.rate:      7.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   716550.888 ±(99.9%) 4451.326 ops/s [Average]
[info]   (min, avg, max) = (714658.493, 716550.888, 717518.220), stdev = 1155.995
[info]   CI (99.9%): [712099.562, 721002.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.539 ±(99.9%) 2.144 MB/sec [Average]
[info]   (min, avg, max) = (7.285, 7.539, 8.535), stdev = 0.557
[info]   CI (99.9%): [5.395, 9.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.560 ±(99.9%) 4.813 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.560, 18.796), stdev = 1.250
[info]   CI (99.9%): [11.746, 21.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.99% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9345.832 ops/s
[info] # Warmup Iteration   2: 31461.799 ops/s
[info] # Warmup Iteration   3: 34658.666 ops/s
[info] # Warmup Iteration   4: 33788.057 ops/s
[info] # Warmup Iteration   5: 34927.727 ops/s
[info] Iteration   1: 35208.972 ops/s
[info]                  ·gc.alloc.rate:                   1906.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              85179.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59939.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 35206.425 ops/s
[info]                  ·gc.alloc.rate:                   1910.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              85412.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89897.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34767.854 ops/s
[info]                  ·gc.alloc.rate:                   1912.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              86583.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90796.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35322.647 ops/s
[info]                  ·gc.alloc.rate:                   1915.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              85361.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89313.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35360.152 ops/s
[info]                  ·gc.alloc.rate:               1944.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          86552.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89271.421 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35173.210 ±(99.9%) 911.177 ops/s [Average]
[info]   (min, avg, max) = (34767.854, 35173.210, 35360.152), stdev = 236.630
[info]   CI (99.9%): [34262.033, 36084.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1918.078 ±(99.9%) 58.742 MB/sec [Average]
[info]   (min, avg, max) = (1906.354, 1918.078, 1944.665), stdev = 15.255
[info]   CI (99.9%): [1859.335, 1976.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85818.008 ±(99.9%) 2657.017 B/op [Average]
[info]   (min, avg, max) = (85179.685, 85818.008, 86583.486), stdev = 690.019
[info]   CI (99.9%): [83160.991, 88475.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873.737 ±(99.9%) 1145.770 MB/sec [Average]
[info]   (min, avg, max) = (1341.478, 1873.737, 2011.078), stdev = 297.553
[info]   CI (99.9%): [727.967, 3019.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83843.668 ±(99.9%) 51509.289 B/op [Average]
[info]   (min, avg, max) = (59939.897, 83843.668, 90796.375), stdev = 13376.799
[info]   CI (99.9%): [32334.379, 135352.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.830), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.500 ±(99.9%) 290.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.500, 171.219), stdev = 75.408
[info]   CI (99.9%): [≈ 0, 326.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.22% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 773421.810 ops/s
[info] # Warmup Iteration   2: 3355885.833 ops/s
[info] # Warmup Iteration   3: 3463523.774 ops/s
[info] # Warmup Iteration   4: 3435831.324 ops/s
[info] # Warmup Iteration   5: 3452320.928 ops/s
[info] Iteration   1: 3471451.927 ops/s
[info]                  ·gc.alloc.rate:               2915.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          1321.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1214.006 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3482739.432 ops/s
[info]                  ·gc.alloc.rate:                   2938.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1211.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3479082.260 ops/s
[info]                  ·gc.alloc.rate:               2963.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          1339.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1519.853 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 3487869.866 ops/s
[info]                  ·gc.alloc.rate:                   2944.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1216.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3484538.011 ops/s
[info]                  ·gc.alloc.rate:                   2941.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3481136.299 ±(99.9%) 24161.736 ops/s [Average]
[info]   (min, avg, max) = (3471451.927, 3481136.299, 3487869.866), stdev = 6274.726
[info]   CI (99.9%): [3456974.564, 3505298.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2940.720 ±(99.9%) 65.956 MB/sec [Average]
[info]   (min, avg, max) = (2915.206, 2940.720, 2963.108), stdev = 17.128
[info]   CI (99.9%): [2874.765, 3006.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1329.364 ±(99.9%) 25.523 B/op [Average]
[info]   (min, avg, max) = (1321.635, 1329.364, 1339.996), stdev = 6.628
[info]   CI (99.9%): [1303.841, 1354.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2823.548 ±(99.9%) 1157.205 MB/sec [Average]
[info]   (min, avg, max) = (2677.804, 2823.548, 3360.822), stdev = 300.523
[info]   CI (99.9%): [1666.342, 3980.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1276.420 ±(99.9%) 524.169 B/op [Average]
[info]   (min, avg, max) = (1211.337, 1276.420, 1519.853), stdev = 136.125
[info]   CI (99.9%): [752.250, 1800.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.45% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.715 ops/s
[info] # Warmup Iteration   2: 5923766.521 ops/s
[info] # Warmup Iteration   3: 6052113.011 ops/s
[info] # Warmup Iteration   4: 6169152.798 ops/s
[info] # Warmup Iteration   5: 6297235.376 ops/s
[info] Iteration   1: 6232675.427 ops/s
[info]                  ·gc.alloc.rate:               1208.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 336.751 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 6334710.357 ops/s
[info]                  ·gc.alloc.rate:               1218.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6307993.870 ops/s
[info]                  ·gc.alloc.rate:                   1227.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     333.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6301986.500 ops/s
[info]                  ·gc.alloc.rate:               1236.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 333.561 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 6322200.178 ops/s
[info]                  ·gc.alloc.rate:                   1216.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     332.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6299913.266 ±(99.9%) 152794.229 ops/s [Average]
[info]   (min, avg, max) = (6232675.427, 6299913.266, 6334710.357), stdev = 39680.176
[info]   CI (99.9%): [6147119.037, 6452707.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1221.676 ±(99.9%) 41.466 MB/sec [Average]
[info]   (min, avg, max) = (1208.737, 1221.676, 1236.604), stdev = 10.769
[info]   CI (99.9%): [1180.209, 1263.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.191 ±(99.9%) 9.856 B/op [Average]
[info]   (min, avg, max) = (302.659, 305.191, 308.833), stdev = 2.560
[info]   CI (99.9%): [295.335, 315.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1201.255 ±(99.9%) 1149.552 MB/sec [Average]
[info]   (min, avg, max) = (667.221, 1201.255, 1335.620), stdev = 298.535
[info]   CI (99.9%): [51.702, 2350.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   300.280 ±(99.9%) 289.635 B/op [Average]
[info]   (min, avg, max) = (165.761, 300.280, 336.751), stdev = 75.217
[info]   CI (99.9%): [10.645, 589.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.952 ±(99.9%) 8.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.952, 4.700), stdev = 2.095
[info]   CI (99.9%): [≈ 0, 9.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 2.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.170), stdev = 0.522
[info]   CI (99.9%): [≈ 0, 2.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.69% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1310958.846 ops/s
[info] # Warmup Iteration   2: 3935951.825 ops/s
[info] # Warmup Iteration   3: 3982797.517 ops/s
[info] # Warmup Iteration   4: 4122247.814 ops/s
[info] # Warmup Iteration   5: 4140275.373 ops/s
[info] Iteration   1: 4149523.399 ops/s
[info]                  ·gc.alloc.rate:                   2280.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4143465.446 ops/s
[info]                  ·gc.alloc.rate:                   2277.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4163262.990 ops/s
[info]                  ·gc.alloc.rate:               2301.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.262 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4166221.093 ops/s
[info]                  ·gc.alloc.rate:               2301.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.982 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4154463.100 ops/s
[info]                  ·gc.alloc.rate:                   2324.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4155387.206 ±(99.9%) 36366.046 ops/s [Average]
[info]   (min, avg, max) = (4143465.446, 4155387.206, 4166221.093), stdev = 9444.147
[info]   CI (99.9%): [4119021.159, 4191753.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2297.164 ±(99.9%) 73.340 MB/sec [Average]
[info]   (min, avg, max) = (2277.011, 2297.164, 2324.251), stdev = 19.046
[info]   CI (99.9%): [2223.824, 2370.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   870.008 ±(99.9%) 24.500 B/op [Average]
[info]   (min, avg, max) = (864.757, 870.008, 880.492), stdev = 6.363
[info]   CI (99.9%): [845.508, 894.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2274.311 ±(99.9%) 1414.561 MB/sec [Average]
[info]   (min, avg, max) = (2003.205, 2274.311, 2682.367), stdev = 367.357
[info]   CI (99.9%): [859.749, 3688.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   861.512 ±(99.9%) 540.554 B/op [Average]
[info]   (min, avg, max) = (757.262, 861.512, 1016.157), stdev = 140.380
[info]   CI (99.9%): [320.958, 1402.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.914), stdev = 1.741
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 2.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.484), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.92% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4230699.527 ops/s
[info] # Warmup Iteration   2: 6463756.694 ops/s
[info] # Warmup Iteration   3: 6500292.705 ops/s
[info] # Warmup Iteration   4: 6718331.510 ops/s
[info] # Warmup Iteration   5: 6580173.282 ops/s
[info] Iteration   1: 6679779.786 ops/s
[info]                  ·gc.alloc.rate:               1292.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.668 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 6755294.741 ops/s
[info]                  ·gc.alloc.rate:               1290.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6720991.536 ops/s
[info]                  ·gc.alloc.rate:                   1304.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6567764.730 ops/s
[info]                  ·gc.alloc.rate:                   1288.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6579730.039 ops/s
[info]                  ·gc.alloc.rate:                   1278.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6660712.166 ±(99.9%) 322974.529 ops/s [Average]
[info]   (min, avg, max) = (6567764.730, 6660712.166, 6755294.741), stdev = 83875.460
[info]   CI (99.9%): [6337737.637, 6983686.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1290.925 ±(99.9%) 36.334 MB/sec [Average]
[info]   (min, avg, max) = (1278.400, 1290.925, 1304.724), stdev = 9.436
[info]   CI (99.9%): [1254.591, 1327.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.043 ±(99.9%) 11.220 B/op [Average]
[info]   (min, avg, max) = (300.680, 305.043, 308.753), stdev = 2.914
[info]   CI (99.9%): [293.823, 316.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.130 ±(99.9%) 1157.921 MB/sec [Average]
[info]   (min, avg, max) = (672.211, 1210.130, 1345.680), stdev = 300.708
[info]   CI (99.9%): [52.209, 2368.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   286.414 ±(99.9%) 279.670 B/op [Average]
[info]   (min, avg, max) = (156.606, 286.414, 322.461), stdev = 72.629
[info]   CI (99.9%): [6.744, 566.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 2.956), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 5.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.153 ±(99.9%) 1.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.708), stdev = 0.311
[info]   CI (99.9%): [≈ 0, 1.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.15% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1360210.102 ops/s
[info] # Warmup Iteration   2: 3883166.680 ops/s
[info] # Warmup Iteration   3: 4221336.936 ops/s
[info] # Warmup Iteration   4: 4095160.970 ops/s
[info] # Warmup Iteration   5: 4206581.883 ops/s
[info] Iteration   1: 4236426.291 ops/s
[info]                  ·gc.alloc.rate:                   2507.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              931.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4220316.671 ops/s
[info]                  ·gc.alloc.rate:                   2524.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4209211.072 ops/s
[info]                  ·gc.alloc.rate:               2545.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1000.431 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4277185.810 ops/s
[info]                  ·gc.alloc.rate:                   2558.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     739.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4267435.757 ops/s
[info]                  ·gc.alloc.rate:               2580.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 991.802 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4242115.120 ±(99.9%) 113272.099 ops/s [Average]
[info]   (min, avg, max) = (4209211.072, 4242115.120, 4277185.810), stdev = 29416.404
[info]   CI (99.9%): [4128843.021, 4355387.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2543.213 ±(99.9%) 109.537 MB/sec [Average]
[info]   (min, avg, max) = (2507.628, 2543.213, 2580.424), stdev = 28.446
[info]   CI (99.9%): [2433.676, 2652.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   943.406 ±(99.9%) 32.151 B/op [Average]
[info]   (min, avg, max) = (931.624, 943.406, 951.685), stdev = 8.350
[info]   CI (99.9%): [911.254, 975.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.208 ±(99.9%) 1416.778 MB/sec [Average]
[info]   (min, avg, max) = (2005.707, 2411.208, 2689.199), stdev = 367.933
[info]   CI (99.9%): [994.430, 3827.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   894.789 ±(99.9%) 535.425 B/op [Average]
[info]   (min, avg, max) = (739.887, 894.789, 1000.431), stdev = 139.048
[info]   CI (99.9%): [359.364, 1430.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.354), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.131), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.38% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035927.779 ops/s
[info] # Warmup Iteration   2: 2114374.930 ops/s
[info] # Warmup Iteration   3: 2205026.384 ops/s
[info] # Warmup Iteration   4: 2177871.436 ops/s
[info] # Warmup Iteration   5: 2208876.886 ops/s
[info] Iteration   1: 2215711.969 ops/s
[info]                  ·gc.alloc.rate:               1315.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 952.744 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2216465.507 ops/s
[info]                  ·gc.alloc.rate:               1298.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          921.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 476.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2216826.391 ops/s
[info]                  ·gc.alloc.rate:                   1312.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              931.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2212049.444 ops/s
[info]                  ·gc.alloc.rate:                   1321.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2219125.818 ops/s
[info]                  ·gc.alloc.rate:                   1339.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2216035.826 ±(99.9%) 9883.823 ops/s [Average]
[info]   (min, avg, max) = (2212049.444, 2216035.826, 2219125.818), stdev = 2566.797
[info]   CI (99.9%): [2206152.003, 2225919.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1317.490 ±(99.9%) 57.757 MB/sec [Average]
[info]   (min, avg, max) = (1298.221, 1317.490, 1339.428), stdev = 14.999
[info]   CI (99.9%): [1259.733, 1375.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   935.633 ±(99.9%) 40.238 B/op [Average]
[info]   (min, avg, max) = (921.799, 935.633, 949.969), stdev = 10.450
[info]   CI (99.9%): [895.395, 975.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.122 ±(99.9%) 1156.618 MB/sec [Average]
[info]   (min, avg, max) = (670.807, 1208.122, 1343.631), stdev = 300.370
[info]   CI (99.9%): [51.505, 2364.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   857.982 ±(99.9%) 821.614 B/op [Average]
[info]   (min, avg, max) = (476.305, 857.982, 955.976), stdev = 213.371
[info]   CI (99.9%): [36.368, 1679.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.143), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.456 ±(99.9%) 3.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.236), stdev = 0.995
[info]   CI (99.9%): [≈ 0, 4.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.61% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.709 ops/s
[info] # Warmup Iteration   2: 5621605.422 ops/s
[info] # Warmup Iteration   3: 5828958.730 ops/s
[info] # Warmup Iteration   4: 5960560.547 ops/s
[info] # Warmup Iteration   5: 6029822.735 ops/s
[info] Iteration   1: 5868351.765 ops/s
[info]                  ·gc.alloc.rate:               597.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          160.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.296 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6024385.055 ops/s
[info]                  ·gc.alloc.rate:               606.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5994385.177 ops/s
[info]                  ·gc.alloc.rate:                   602.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6015509.412 ops/s
[info]                  ·gc.alloc.rate:                   606.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6016741.459 ops/s
[info]                  ·gc.alloc.rate:               600.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5983874.574 ±(99.9%) 252342.707 ops/s [Average]
[info]   (min, avg, max) = (5868351.765, 5983874.574, 6024385.055), stdev = 65532.600
[info]   CI (99.9%): [5731531.867, 6236217.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   602.853 ±(99.9%) 14.748 MB/sec [Average]
[info]   (min, avg, max) = (597.922, 602.853, 606.860), stdev = 3.830
[info]   CI (99.9%): [588.104, 617.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   158.570 ±(99.9%) 4.522 B/op [Average]
[info]   (min, avg, max) = (157.116, 158.570, 160.363), stdev = 1.174
[info]   CI (99.9%): [154.049, 163.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.142 ±(99.9%) 1.604 MB/sec [Average]
[info]   (min, avg, max) = (664.786, 665.142, 665.814), stdev = 0.417
[info]   CI (99.9%): [663.538, 666.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   174.962 ±(99.9%) 7.298 B/op [Average]
[info]   (min, avg, max) = (173.683, 174.962, 178.296), stdev = 1.895
[info]   CI (99.9%): [167.664, 182.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.84% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2013389.973 ops/s
[info] # Warmup Iteration   2: 4407574.563 ops/s
[info] # Warmup Iteration   3: 4537842.793 ops/s
[info] # Warmup Iteration   4: 4688906.806 ops/s
[info] # Warmup Iteration   5: 4593688.209 ops/s
[info] Iteration   1: 4660585.721 ops/s
[info]                  ·gc.alloc.rate:                   1263.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4531716.964 ops/s
[info]                  ·gc.alloc.rate:                   1226.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4710415.469 ops/s
[info]                  ·gc.alloc.rate:                   1285.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4632655.081 ops/s
[info]                  ·gc.alloc.rate:                   1251.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4686088.327 ops/s
[info]                  ·gc.alloc.rate:                   1265.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4644292.313 ±(99.9%) 266733.802 ops/s [Average]
[info]   (min, avg, max) = (4531716.964, 4644292.313, 4710415.469), stdev = 69269.921
[info]   CI (99.9%): [4377558.510, 4911026.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1258.557 ±(99.9%) 83.270 MB/sec [Average]
[info]   (min, avg, max) = (1226.814, 1258.557, 1285.678), stdev = 21.625
[info]   CI (99.9%): [1175.287, 1341.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   426.478 ±(99.9%) 7.130 B/op [Average]
[info]   (min, avg, max) = (425.030, 426.478, 429.557), stdev = 1.852
[info]   CI (99.9%): [419.348, 433.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.088 ±(99.9%) 1151.366 MB/sec [Average]
[info]   (min, avg, max) = (670.211, 1205.088, 1339.639), stdev = 299.006
[info]   CI (99.9%): [53.722, 2356.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   408.340 ±(99.9%) 389.803 B/op [Average]
[info]   (min, avg, max) = (227.664, 408.340, 465.031), stdev = 101.231
[info]   CI (99.9%): [18.537, 798.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.671 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.774, 3.394), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 1.927 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.263, 1.153), stdev = 0.500
[info]   CI (99.9%): [≈ 0, 2.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.07% complete, ETA 00:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3874570.192 ops/s
[info] # Warmup Iteration   2: 5980973.307 ops/s
[info] # Warmup Iteration   3: 5986795.434 ops/s
[info] # Warmup Iteration   4: 6062716.760 ops/s
[info] # Warmup Iteration   5: 6041880.122 ops/s
[info] Iteration   1: 6039046.450 ops/s
[info]                  ·gc.alloc.rate:               605.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6040146.389 ops/s
[info]                  ·gc.alloc.rate:               607.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5958130.256 ops/s
[info]                  ·gc.alloc.rate:                   599.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6045762.977 ops/s
[info]                  ·gc.alloc.rate:                   607.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6064483.049 ops/s
[info]                  ·gc.alloc.rate:      585.704 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6029513.824 ±(99.9%) 158607.479 ops/s [Average]
[info]   (min, avg, max) = (5958130.256, 6029513.824, 6064483.049), stdev = 41189.859
[info]   CI (99.9%): [5870906.345, 6188121.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   601.007 ±(99.9%) 35.349 MB/sec [Average]
[info]   (min, avg, max) = (585.704, 601.007, 607.171), stdev = 9.180
[info]   CI (99.9%): [565.658, 636.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.858 ±(99.9%) 10.472 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.858, 158.263), stdev = 2.720
[info]   CI (99.9%): [146.385, 167.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.766 ±(99.9%) 1155.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.766, 671.192), stdev = 300.062
[info]   CI (99.9%): [≈ 0, 1692.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.288 ±(99.9%) 302.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.288, 177.279), stdev = 78.431
[info]   CI (99.9%): [≈ 0, 442.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.30% complete, ETA 00:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4301774.031 ops/s
[info] # Warmup Iteration   2: 6288240.563 ops/s
[info] # Warmup Iteration   3: 6467529.855 ops/s
[info] # Warmup Iteration   4: 6477499.569 ops/s
[info] # Warmup Iteration   5: 6473956.908 ops/s
[info] Iteration   1: 6475104.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6475901.172 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6338217.381 ops/s
[info]                  ·gc.alloc.rate:      0.686 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.170 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6472992.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6458030.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6444049.032 ±(99.9%) 229529.546 ops/s [Average]
[info]   (min, avg, max) = (6338217.381, 6444049.032, 6475901.172), stdev = 59608.094
[info]   CI (99.9%): [6214519.485, 6673578.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.137 ±(99.9%) 1.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.137, 0.686), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.034 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.53% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1901422.782 ops/s
[info] # Warmup Iteration   2: 4476691.839 ops/s
[info] # Warmup Iteration   3: 4511092.590 ops/s
[info] # Warmup Iteration   4: 4528592.070 ops/s
[info] # Warmup Iteration   5: 4566489.969 ops/s
[info] Iteration   1: 4497118.681 ops/s
[info]                  ·gc.alloc.rate:               1268.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.842 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 4609036.269 ops/s
[info]                  ·gc.alloc.rate:                   1304.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4619098.649 ops/s
[info]                  ·gc.alloc.rate:                   1308.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4584758.846 ops/s
[info]                  ·gc.alloc.rate:                   1308.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4616491.505 ops/s
[info]                  ·gc.alloc.rate:               1306.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456.460 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4585300.790 ±(99.9%) 196862.708 ops/s [Average]
[info]   (min, avg, max) = (4497118.681, 4585300.790, 4619098.649), stdev = 51124.620
[info]   CI (99.9%): [4388438.082, 4782163.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1299.512 ±(99.9%) 66.536 MB/sec [Average]
[info]   (min, avg, max) = (1268.719, 1299.512, 1308.801), stdev = 17.279
[info]   CI (99.9%): [1232.975, 1366.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   446.035 ±(99.9%) 7.495 B/op [Average]
[info]   (min, avg, max) = (444.003, 446.035, 449.277), stdev = 1.946
[info]   CI (99.9%): [438.540, 453.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.298 ±(99.9%) 4.099 MB/sec [Average]
[info]   (min, avg, max) = (1338.878, 1340.298, 1341.617), stdev = 1.064
[info]   CI (99.9%): [1336.199, 1344.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   460.086 ±(99.9%) 19.815 B/op [Average]
[info]   (min, avg, max) = (456.460, 460.086, 468.842), stdev = 5.146
[info]   CI (99.9%): [440.271, 479.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.872), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 2.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.329), stdev = 0.593
[info]   CI (99.9%): [≈ 0, 2.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.76% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345315.336 ops/s
[info] # Warmup Iteration   2: 1460474.301 ops/s
[info] # Warmup Iteration   3: 1535930.700 ops/s
[info] # Warmup Iteration   4: 1538614.455 ops/s
[info] # Warmup Iteration   5: 1536835.327 ops/s
[info] Iteration   1: 1542730.176 ops/s
[info]                  ·gc.alloc.rate:                   2136.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2058.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1530045.856 ops/s
[info]                  ·gc.alloc.rate:                   2119.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1539146.138 ops/s
[info]                  ·gc.alloc.rate:                   2118.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              2165.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2055.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1547381.467 ops/s
[info]                  ·gc.alloc.rate:               2155.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          2192.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2045.580 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1546524.146 ops/s
[info]                  ·gc.alloc.rate:                   2155.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              2193.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2049.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1541165.557 ±(99.9%) 27059.224 ops/s [Average]
[info]   (min, avg, max) = (1530045.856, 1541165.557, 1547381.467), stdev = 7027.195
[info]   CI (99.9%): [1514106.333, 1568224.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2137.242 ±(99.9%) 70.788 MB/sec [Average]
[info]   (min, avg, max) = (2118.184, 2137.242, 2155.930), stdev = 18.383
[info]   CI (99.9%): [2066.454, 2208.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2182.303 ±(99.9%) 43.661 B/op [Average]
[info]   (min, avg, max) = (2165.932, 2182.303, 2193.654), stdev = 11.339
[info]   CI (99.9%): [2138.642, 2225.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2013.249 ±(99.9%) 11.086 MB/sec [Average]
[info]   (min, avg, max) = (2010.487, 2013.249, 2017.729), stdev = 2.879
[info]   CI (99.9%): [2002.163, 2024.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2055.750 ±(99.9%) 35.383 B/op [Average]
[info]   (min, avg, max) = (2045.580, 2055.750, 2069.423), stdev = 9.189
[info]   CI (99.9%): [2020.366, 2091.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.731 ±(99.9%) 5.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.362), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.746 ±(99.9%) 5.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.430), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 6.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.00% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.630 ops/s
[info] # Warmup Iteration   2: 2639528.495 ops/s
[info] # Warmup Iteration   3: 2821817.550 ops/s
[info] # Warmup Iteration   4: 2796222.128 ops/s
[info] # Warmup Iteration   5: 2888993.227 ops/s
[info] Iteration   1: 2894736.587 ops/s
[info]                  ·gc.alloc.rate:               561.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2893171.314 ops/s
[info]                  ·gc.alloc.rate:               560.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2887803.268 ops/s
[info]                  ·gc.alloc.rate:                   557.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2904252.247 ops/s
[info]                  ·gc.alloc.rate:      546.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2895007.344 ops/s
[info]                  ·gc.alloc.rate:               569.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2894994.152 ±(99.9%) 22846.554 ops/s [Average]
[info]   (min, avg, max) = (2887803.268, 2894994.152, 2904252.247), stdev = 5933.178
[info]   CI (99.9%): [2872147.598, 2917840.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   558.823 ±(99.9%) 32.396 MB/sec [Average]
[info]   (min, avg, max) = (546.190, 558.823, 569.427), stdev = 8.413
[info]   CI (99.9%): [526.427, 591.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.800 ±(99.9%) 18.932 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.800, 309.558), stdev = 4.917
[info]   CI (99.9%): [284.868, 322.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.287 ±(99.9%) 1145.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.287, 665.513), stdev = 297.557
[info]   CI (99.9%): [≈ 0, 1678.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   289.597 ±(99.9%) 623.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 289.597, 362.701), stdev = 161.890
[info]   CI (99.9%): [≈ 0, 912.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.23% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178861.396 ops/s
[info] # Warmup Iteration   2: 1570083.883 ops/s
[info] # Warmup Iteration   3: 1665589.870 ops/s
[info] # Warmup Iteration   4: 1682629.383 ops/s
[info] # Warmup Iteration   5: 1698122.175 ops/s
[info] Iteration   1: 1705497.809 ops/s
[info]                  ·gc.alloc.rate:               934.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 616.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1704460.233 ops/s
[info]                  ·gc.alloc.rate:               929.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          858.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 616.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1691609.097 ops/s
[info]                  ·gc.alloc.rate:                   936.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1669929.136 ops/s
[info]                  ·gc.alloc.rate:               907.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          855.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 630.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1664599.523 ops/s
[info]                  ·gc.alloc.rate:               914.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          865.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1687219.159 ±(99.9%) 73597.383 ops/s [Average]
[info]   (min, avg, max) = (1664599.523, 1687219.159, 1705497.809), stdev = 19113.007
[info]   CI (99.9%): [1613621.776, 1760816.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   924.644 ±(99.9%) 49.679 MB/sec [Average]
[info]   (min, avg, max) = (907.236, 924.644, 936.686), stdev = 12.901
[info]   CI (99.9%): [874.965, 974.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   862.518 ±(99.9%) 24.313 B/op [Average]
[info]   (min, avg, max) = (855.072, 862.518, 871.512), stdev = 6.314
[info]   CI (99.9%): [838.205, 886.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.437 ±(99.9%) 1152.009 MB/sec [Average]
[info]   (min, avg, max) = (668.130, 802.437, 1337.614), stdev = 299.173
[info]   CI (99.9%): [≈ 0, 1954.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   748.274 ±(99.9%) 1068.644 B/op [Average]
[info]   (min, avg, max) = (616.587, 748.274, 1244.542), stdev = 277.524
[info]   CI (99.9%): [≈ 0, 1816.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.46% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 719504.249 ops/s
[info] # Warmup Iteration   2: 2339041.668 ops/s
[info] # Warmup Iteration   3: 2421993.650 ops/s
[info] # Warmup Iteration   4: 2426681.466 ops/s
[info] # Warmup Iteration   5: 2420620.066 ops/s
[info] Iteration   1: 2425580.205 ops/s
[info]                  ·gc.alloc.rate:               472.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 331.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2435915.805 ops/s
[info]                  ·gc.alloc.rate:      458.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2427551.631 ops/s
[info]                  ·gc.alloc.rate:               477.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 435.326 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2405479.774 ops/s
[info]                  ·gc.alloc.rate:               486.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 439.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2436440.430 ops/s
[info]                  ·gc.alloc.rate:      458.333 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2426193.569 ±(99.9%) 48355.943 ops/s [Average]
[info]   (min, avg, max) = (2405479.774, 2426193.569, 2436440.430), stdev = 12557.885
[info]   CI (99.9%): [2377837.626, 2474549.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   470.722 ±(99.9%) 48.127 MB/sec [Average]
[info]   (min, avg, max) = (458.122, 470.722, 486.966), stdev = 12.498
[info]   CI (99.9%): [422.595, 518.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.356 ±(99.9%) 37.040 B/op [Average]
[info]   (min, avg, max) = (296.000, 305.356, 318.630), stdev = 9.619
[info]   CI (99.9%): [268.316, 342.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.949 ±(99.9%) 1327.868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.949, 671.469), stdev = 344.843
[info]   CI (99.9%): [≈ 0, 1698.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   241.325 ±(99.9%) 864.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 241.325, 439.344), stdev = 224.465
[info]   CI (99.9%): [≈ 0, 1105.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.69% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 355201.583 ops/s
[info] # Warmup Iteration   2: 1593689.369 ops/s
[info] # Warmup Iteration   3: 1712496.772 ops/s
[info] # Warmup Iteration   4: 1686809.096 ops/s
[info] # Warmup Iteration   5: 1731062.647 ops/s
[info] Iteration   1: 1724500.422 ops/s
[info]                  ·gc.alloc.rate:                   1001.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              913.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1731004.017 ops/s
[info]                  ·gc.alloc.rate:               977.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          888.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 608.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1728120.304 ops/s
[info]                  ·gc.alloc.rate:                   971.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              884.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1702908.873 ops/s
[info]                  ·gc.alloc.rate:                   972.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              898.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1730522.885 ops/s
[info]                  ·gc.alloc.rate:               972.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609.474 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1723411.300 ±(99.9%) 45232.136 ops/s [Average]
[info]   (min, avg, max) = (1702908.873, 1723411.300, 1731004.017), stdev = 11746.642
[info]   CI (99.9%): [1678179.163, 1768643.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   978.938 ±(99.9%) 48.707 MB/sec [Average]
[info]   (min, avg, max) = (971.073, 978.938, 1001.133), stdev = 12.649
[info]   CI (99.9%): [930.231, 1027.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   893.939 ±(99.9%) 47.596 B/op [Average]
[info]   (min, avg, max) = (884.409, 893.939, 913.658), stdev = 12.360
[info]   CI (99.9%): [846.343, 941.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   937.232 ±(99.9%) 1411.761 MB/sec [Average]
[info]   (min, avg, max) = (669.146, 937.232, 1340.125), stdev = 366.630
[info]   CI (99.9%): [≈ 0, 2348.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   857.220 ±(99.9%) 1308.478 B/op [Average]
[info]   (min, avg, max) = (608.399, 857.220, 1238.089), stdev = 339.808
[info]   CI (99.9%): [≈ 0, 2165.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.92% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453729.408 ops/s
[info] # Warmup Iteration   2: 1838204.001 ops/s
[info] # Warmup Iteration   3: 1772890.148 ops/s
[info] # Warmup Iteration   4: 1750955.038 ops/s
[info] # Warmup Iteration   5: 1833893.668 ops/s
[info] Iteration   1: 1831067.354 ops/s
[info]                  ·gc.alloc.rate:                   1388.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1153.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1829110.627 ops/s
[info]                  ·gc.alloc.rate:                   1396.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1836652.145 ops/s
[info]                  ·gc.alloc.rate:                   1403.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1836586.536 ops/s
[info]                  ·gc.alloc.rate:                   1403.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1150.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1842513.217 ops/s
[info]                  ·gc.alloc.rate:                   1420.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1835185.976 ±(99.9%) 20345.889 ops/s [Average]
[info]   (min, avg, max) = (1829110.627, 1835185.976, 1842513.217), stdev = 5283.763
[info]   CI (99.9%): [1814840.087, 1855531.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1402.379 ±(99.9%) 46.054 MB/sec [Average]
[info]   (min, avg, max) = (1388.068, 1402.379, 1420.444), stdev = 11.960
[info]   CI (99.9%): [1356.324, 1448.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1202.465 ±(99.9%) 27.345 B/op [Average]
[info]   (min, avg, max) = (1192.881, 1202.465, 1212.886), stdev = 7.101
[info]   CI (99.9%): [1175.120, 1229.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.915 ±(99.9%) 4.081 MB/sec [Average]
[info]   (min, avg, max) = (1341.474, 1342.915, 1344.336), stdev = 1.060
[info]   CI (99.9%): [1338.834, 1346.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1151.500 ±(99.9%) 15.009 B/op [Average]
[info]   (min, avg, max) = (1145.455, 1151.500, 1155.864), stdev = 3.898
[info]   CI (99.9%): [1136.491, 1166.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 4.614 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.637, 2.769), stdev = 1.198
[info]   CI (99.9%): [≈ 0, 5.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.546 ±(99.9%) 3.952 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.546, 2.373), stdev = 1.026
[info]   CI (99.9%): [≈ 0, 4.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.15% complete, ETA 00:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.714 ops/s
[info] # Warmup Iteration   2: 2640004.947 ops/s
[info] # Warmup Iteration   3: 2780512.753 ops/s
[info] # Warmup Iteration   4: 2799167.990 ops/s
[info] # Warmup Iteration   5: 2798676.822 ops/s
[info] Iteration   1: 2792711.972 ops/s
[info]                  ·gc.alloc.rate:               749.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          422.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2802483.852 ops/s
[info]                  ·gc.alloc.rate:               739.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2799019.435 ops/s
[info]                  ·gc.alloc.rate:                   748.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2780419.590 ops/s
[info]                  ·gc.alloc.rate:                   759.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2790065.008 ops/s
[info]                  ·gc.alloc.rate:                   757.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2792939.971 ±(99.9%) 32963.113 ops/s [Average]
[info]   (min, avg, max) = (2780419.590, 2792939.971, 2802483.852), stdev = 8560.416
[info]   CI (99.9%): [2759976.858, 2825903.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   750.748 ±(99.9%) 29.980 MB/sec [Average]
[info]   (min, avg, max) = (739.882, 750.748, 759.055), stdev = 7.786
[info]   CI (99.9%): [720.768, 780.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   423.058 ±(99.9%) 21.561 B/op [Average]
[info]   (min, avg, max) = (415.502, 423.058, 429.662), stdev = 5.599
[info]   CI (99.9%): [401.498, 444.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.314 ±(99.9%) 1149.330 MB/sec [Average]
[info]   (min, avg, max) = (666.154, 800.314, 1334.245), stdev = 298.477
[info]   CI (99.9%): [≈ 0, 1949.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   451.319 ±(99.9%) 654.236 B/op [Average]
[info]   (min, avg, max) = (374.491, 451.319, 755.248), stdev = 169.903
[info]   CI (99.9%): [≈ 0, 1105.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.026), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312124.522 ops/s
[info] # Warmup Iteration   2: 2796982.062 ops/s
[info] # Warmup Iteration   3: 2956163.038 ops/s
[info] # Warmup Iteration   4: 2973108.744 ops/s
[info] # Warmup Iteration   5: 2966593.387 ops/s
[info] Iteration   1: 2904196.984 ops/s
[info]                  ·gc.alloc.rate:                   1273.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2979399.569 ops/s
[info]                  ·gc.alloc.rate:               1301.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          687.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 707.272 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2966032.815 ops/s
[info]                  ·gc.alloc.rate:                   1305.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              692.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2973042.505 ops/s
[info]                  ·gc.alloc.rate:                   1295.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              685.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2962330.111 ops/s
[info]                  ·gc.alloc.rate:               1304.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          693.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 711.565 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2957000.397 ±(99.9%) 116434.442 ops/s [Average]
[info]   (min, avg, max) = (2904196.984, 2957000.397, 2979399.569), stdev = 30237.655
[info]   CI (99.9%): [2840565.955, 3073434.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1296.163 ±(99.9%) 49.785 MB/sec [Average]
[info]   (min, avg, max) = (1273.970, 1296.163, 1305.077), stdev = 12.929
[info]   CI (99.9%): [1246.379, 1345.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   689.800 ±(99.9%) 11.876 B/op [Average]
[info]   (min, avg, max) = (685.945, 689.800, 693.081), stdev = 3.084
[info]   CI (99.9%): [677.923, 701.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.467 ±(99.9%) 1151.487 MB/sec [Average]
[info]   (min, avg, max) = (670.535, 1205.467, 1340.513), stdev = 299.038
[info]   CI (99.9%): [53.980, 2356.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   641.966 ±(99.9%) 618.402 B/op [Average]
[info]   (min, avg, max) = (354.928, 641.966, 724.878), stdev = 160.597
[info]   CI (99.9%): [23.564, 1260.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.718 ±(99.9%) 6.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.570), stdev = 1.594
[info]   CI (99.9%): [≈ 0, 6.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.380 ±(99.9%) 3.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.890), stdev = 0.844
[info]   CI (99.9%): [≈ 0, 3.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.61% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1152156.921 ops/s
[info] # Warmup Iteration   2: 3259555.722 ops/s
[info] # Warmup Iteration   3: 3355248.625 ops/s
[info] # Warmup Iteration   4: 3362581.554 ops/s
[info] # Warmup Iteration   5: 3329747.065 ops/s
[info] Iteration   1: 3362672.792 ops/s
[info]                  ·gc.alloc.rate:               890.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3373628.973 ops/s
[info]                  ·gc.alloc.rate:                   891.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3367987.308 ops/s
[info]                  ·gc.alloc.rate:                   905.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3380129.477 ops/s
[info]                  ·gc.alloc.rate:               890.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3368368.816 ops/s
[info]                  ·gc.alloc.rate:                   888.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3370557.473 ±(99.9%) 25442.060 ops/s [Average]
[info]   (min, avg, max) = (3362672.792, 3370557.473, 3380129.477), stdev = 6607.222
[info]   CI (99.9%): [3345115.413, 3395999.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   893.532 ±(99.9%) 26.813 MB/sec [Average]
[info]   (min, avg, max) = (888.806, 893.532, 905.872), stdev = 6.963
[info]   CI (99.9%): [866.720, 920.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   417.193 ±(99.9%) 13.550 B/op [Average]
[info]   (min, avg, max) = (414.665, 417.193, 423.300), stdev = 3.519
[info]   CI (99.9%): [403.643, 430.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.964 ±(99.9%) 1155.912 MB/sec [Average]
[info]   (min, avg, max) = (671.131, 805.964, 1342.953), stdev = 300.187
[info]   CI (99.9%): [≈ 0, 1961.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   376.357 ±(99.9%) 540.696 B/op [Average]
[info]   (min, avg, max) = (312.972, 376.357, 627.541), stdev = 140.417
[info]   CI (99.9%): [≈ 0, 917.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.019), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.84% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 816285.648 ops/s
[info] # Warmup Iteration   2: 3380876.809 ops/s
[info] # Warmup Iteration   3: 3544330.232 ops/s
[info] # Warmup Iteration   4: 3617754.926 ops/s
[info] # Warmup Iteration   5: 3626215.030 ops/s
[info] Iteration   1: 3642161.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3644383.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3644319.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3643916.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3646522.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3644260.594 ±(99.9%) 5982.787 ops/s [Average]
[info]   (min, avg, max) = (3642161.827, 3644260.594, 3646522.081), stdev = 1553.711
[info]   CI (99.9%): [3638277.806, 3650243.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.07% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 756807.549 ops/s
[info] # Warmup Iteration   2: 2695410.570 ops/s
[info] # Warmup Iteration   3: 2856740.717 ops/s
[info] # Warmup Iteration   4: 2868910.339 ops/s
[info] # Warmup Iteration   5: 2864959.085 ops/s
[info] Iteration   1: 2873504.857 ops/s
[info]                  ·gc.alloc.rate:               1418.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          777.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 734.818 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2866957.753 ops/s
[info]                  ·gc.alloc.rate:               1419.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          779.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 737.053 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2880019.072 ops/s
[info]                  ·gc.alloc.rate:                   1431.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              782.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2888486.914 ops/s
[info]                  ·gc.alloc.rate:                   1433.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2893993.386 ops/s
[info]                  ·gc.alloc.rate:               1438.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 728.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2880592.396 ±(99.9%) 42110.244 ops/s [Average]
[info]   (min, avg, max) = (2866957.753, 2880592.396, 2893993.386), stdev = 10935.897
[info]   CI (99.9%): [2838482.153, 2922702.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1428.303 ±(99.9%) 33.130 MB/sec [Average]
[info]   (min, avg, max) = (1418.904, 1428.303, 1438.256), stdev = 8.604
[info]   CI (99.9%): [1395.173, 1461.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   780.329 ±(99.9%) 8.289 B/op [Average]
[info]   (min, avg, max) = (777.172, 780.329, 782.171), stdev = 2.153
[info]   CI (99.9%): [772.040, 788.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.900 ±(99.9%) 5.441 MB/sec [Average]
[info]   (min, avg, max) = (1339.701, 1341.900, 1343.254), stdev = 1.413
[info]   CI (99.9%): [1336.460, 1347.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   733.138 ±(99.9%) 12.732 B/op [Average]
[info]   (min, avg, max) = (728.551, 733.138, 737.053), stdev = 3.307
[info]   CI (99.9%): [720.406, 745.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 4.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 2.852), stdev = 1.235
[info]   CI (99.9%): [≈ 0, 5.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 2.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.558), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.30% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2217.848 ops/s
[info] # Warmup Iteration   2: 6720.114 ops/s
[info] # Warmup Iteration   3: 11448.205 ops/s
[info] # Warmup Iteration   4: 11656.784 ops/s
[info] # Warmup Iteration   5: 11754.285 ops/s
[info] Iteration   1: 11740.749 ops/s
[info]                  ·gc.alloc.rate:                   1379.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              184871.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179123.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11419.448 ops/s
[info]                  ·gc.alloc.rate:                   1323.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              182357.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184248.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 11714.263 ops/s
[info]                  ·gc.alloc.rate:                   1378.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              185164.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179699.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11750.791 ops/s
[info]                  ·gc.alloc.rate:                   1373.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              184032.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179238.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11734.108 ops/s
[info]                  ·gc.alloc.rate:                   1373.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              184248.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179036.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11671.872 ±(99.9%) 545.789 ops/s [Average]
[info]   (min, avg, max) = (11419.448, 11671.872, 11750.791), stdev = 141.740
[info]   CI (99.9%): [11126.082, 12217.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1365.680 ±(99.9%) 91.619 MB/sec [Average]
[info]   (min, avg, max) = (1323.344, 1365.680, 1379.113), stdev = 23.793
[info]   CI (99.9%): [1274.061, 1457.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   184134.842 ±(99.9%) 4211.149 B/op [Average]
[info]   (min, avg, max) = (182357.713, 184134.842, 185164.058), stdev = 1093.622
[info]   CI (99.9%): [179923.694, 188345.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.783 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (1334.866, 1336.783, 1338.152), stdev = 1.284
[info]   CI (99.9%): [1331.837, 1341.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   180269.259 ±(99.9%) 8623.137 B/op [Average]
[info]   (min, avg, max) = (179036.066, 180269.259, 184248.996), stdev = 2239.401
[info]   CI (99.9%): [171646.122, 188892.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 6.787 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.895, 4.038), stdev = 1.763
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   119.957 ±(99.9%) 909.004 B/op [Average]
[info]   (min, avg, max) = (2.797, 119.957, 540.882), stdev = 236.065
[info]   CI (99.9%): [≈ 0, 1028.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.54% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479.790 ops/s
[info] # Warmup Iteration   2: 15280.921 ops/s
[info] # Warmup Iteration   3: 22704.789 ops/s
[info] # Warmup Iteration   4: 22687.659 ops/s
[info] # Warmup Iteration   5: 22658.232 ops/s
[info] Iteration   1: 21883.741 ops/s
[info]                  ·gc.alloc.rate:                   366.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              26385.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36792.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22398.406 ops/s
[info]                  ·gc.alloc.rate:               354.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          24927.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35947.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 22615.919 ops/s
[info]                  ·gc.alloc.rate:      335.809 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22848.611 ops/s
[info]                  ·gc.alloc.rate:                   354.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              24443.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45447.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22936.522 ops/s
[info]                  ·gc.alloc.rate:      340.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 23371.631 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22536.640 ±(99.9%) 1621.050 ops/s [Average]
[info]   (min, avg, max) = (21883.741, 22536.640, 22936.522), stdev = 420.982
[info]   CI (99.9%): [20915.589, 24157.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   350.651 ±(99.9%) 48.062 MB/sec [Average]
[info]   (min, avg, max) = (335.809, 350.651, 366.998), stdev = 12.482
[info]   CI (99.9%): [302.589, 398.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24499.124 ±(99.9%) 4830.329 B/op [Average]
[info]   (min, avg, max) = (23368.021, 24499.124, 26385.028), stdev = 1254.421
[info]   CI (99.9%): [19668.795, 29329.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.677 ±(99.9%) 1206.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.677, 659.814), stdev = 313.227
[info]   CI (99.9%): [≈ 0, 1542.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23637.546 ±(99.9%) 84313.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23637.546, 45447.623), stdev = 21895.984
[info]   CI (99.9%): [≈ 0, 107951.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.886 ±(99.9%) 5.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 2.994), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 6.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.77% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8047.918 ops/s
[info] # Warmup Iteration   2: 21772.841 ops/s
[info] # Warmup Iteration   3: 22828.912 ops/s
[info] # Warmup Iteration   4: 22668.338 ops/s
[info] # Warmup Iteration   5: 22831.565 ops/s
[info] Iteration   1: 22207.762 ops/s
[info]                  ·gc.alloc.rate:               266.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          18888.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36255.464 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22896.844 ops/s
[info]                  ·gc.alloc.rate:      248.840 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22733.491 ops/s
[info]                  ·gc.alloc.rate:               258.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          17905.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35418.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22824.775 ops/s
[info]                  ·gc.alloc.rate:      248.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22749.115 ops/s
[info]                  ·gc.alloc.rate:                   265.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              18390.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35393.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22682.397 ±(99.9%) 1052.077 ops/s [Average]
[info]   (min, avg, max) = (22207.762, 22682.397, 22896.844), stdev = 273.221
[info]   CI (99.9%): [21630.320, 23734.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   257.593 ±(99.9%) 34.225 MB/sec [Average]
[info]   (min, avg, max) = (248.104, 257.593, 266.535), stdev = 8.888
[info]   CI (99.9%): [223.368, 291.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17878.583 ±(99.9%) 3033.870 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17878.583, 18888.896), stdev = 787.887
[info]   CI (99.9%): [14844.712, 20912.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.965 ±(99.9%) 1079.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.965, 511.666), stdev = 280.219
[info]   CI (99.9%): [≈ 0, 1385.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21413.440 ±(99.9%) 75283.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21413.440, 36255.464), stdev = 19550.786
[info]   CI (99.9%): [≈ 0, 96696.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.152 ±(99.9%) 9.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.152, 5.761), stdev = 2.576
[info]   CI (99.9%): [≈ 0, 11.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 97.00% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262.826 ops/s
[info] # Warmup Iteration   2: 3067.945 ops/s
[info] # Warmup Iteration   3: 7373.684 ops/s
[info] # Warmup Iteration   4: 7506.949 ops/s
[info] # Warmup Iteration   5: 7441.600 ops/s
[info] Iteration   1: 7500.653 ops/s
[info]                  ·gc.alloc.rate:                   2105.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              441594.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420101.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7504.754 ops/s
[info]                  ·gc.alloc.rate:                   2122.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              445037.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420575.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7489.813 ops/s
[info]                  ·gc.alloc.rate:                   2104.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              442162.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421627.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7425.712 ops/s
[info]                  ·gc.alloc.rate:               2100.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          445149.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425684.024 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7417.588 ops/s
[info]                  ·gc.alloc.rate:               2112.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          448171.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 569445.034 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7467.704 ±(99.9%) 163.620 ops/s [Average]
[info]   (min, avg, max) = (7417.588, 7467.704, 7504.754), stdev = 42.492
[info]   CI (99.9%): [7304.084, 7631.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2108.962 ±(99.9%) 33.205 MB/sec [Average]
[info]   (min, avg, max) = (2100.338, 2108.962, 2122.147), stdev = 8.623
[info]   CI (99.9%): [2075.757, 2142.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   444423.013 ±(99.9%) 10199.173 B/op [Average]
[info]   (min, avg, max) = (441594.259, 444423.013, 448171.042), stdev = 2648.693
[info]   CI (99.9%): [434223.840, 454622.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2141.565 ±(99.9%) 1168.594 MB/sec [Average]
[info]   (min, avg, max) = (2002.702, 2141.565, 2684.434), stdev = 303.480
[info]   CI (99.9%): [972.972, 3310.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   451486.763 ±(99.9%) 254055.235 B/op [Average]
[info]   (min, avg, max) = (420101.220, 451486.763, 569445.034), stdev = 65977.338
[info]   CI (99.9%): [197431.528, 705541.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 3.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.915), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 3.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89.937 ±(99.9%) 674.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.937, 401.579), stdev = 175.182
[info]   CI (99.9%): [≈ 0, 764.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.23% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16874.597 ops/s
[info] # Warmup Iteration   2: 60724.301 ops/s
[info] # Warmup Iteration   3: 62884.362 ops/s
[info] # Warmup Iteration   4: 61589.987 ops/s
[info] # Warmup Iteration   5: 61701.611 ops/s
[info] Iteration   1: 63369.145 ops/s
[info]                  ·gc.alloc.rate:                   811.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              20154.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16510.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 63321.564 ops/s
[info]                  ·gc.alloc.rate:               808.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          20105.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16523.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 63488.443 ops/s
[info]                  ·gc.alloc.rate:                   822.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              20376.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16463.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 62679.450 ops/s
[info]                  ·gc.alloc.rate:               807.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          20283.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16676.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 63690.450 ops/s
[info]                  ·gc.alloc.rate:               832.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          20575.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32839.502 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   63309.810 ±(99.9%) 1463.508 ops/s [Average]
[info]   (min, avg, max) = (62679.450, 63309.810, 63690.450), stdev = 380.068
[info]   CI (99.9%): [61846.302, 64773.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   816.590 ±(99.9%) 40.802 MB/sec [Average]
[info]   (min, avg, max) = (807.846, 816.590, 832.675), stdev = 10.596
[info]   CI (99.9%): [775.789, 857.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20299.163 ±(99.9%) 723.494 B/op [Average]
[info]   (min, avg, max) = (20105.739, 20299.163, 20575.847), stdev = 187.889
[info]   CI (99.9%): [19575.669, 21022.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.377 ±(99.9%) 1144.291 MB/sec [Average]
[info]   (min, avg, max) = (664.158, 797.377, 1328.968), stdev = 297.169
[info]   CI (99.9%): [≈ 0, 1941.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19802.652 ±(99.9%) 28064.486 B/op [Average]
[info]   (min, avg, max) = (16463.469, 19802.652, 32839.502), stdev = 7288.258
[info]   CI (99.9%): [≈ 0, 47867.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.207 ±(99.9%) 1.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 0.517), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.46% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28831.152 ops/s
[info] # Warmup Iteration   2: 70308.198 ops/s
[info] # Warmup Iteration   3: 71894.427 ops/s
[info] # Warmup Iteration   4: 72403.319 ops/s
[info] # Warmup Iteration   5: 72504.901 ops/s
[info] Iteration   1: 72591.281 ops/s
[info]                  ·gc.alloc.rate:               477.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          10355.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11091.610 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 72543.161 ops/s
[info]                  ·gc.alloc.rate:               485.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          10532.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14430.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 71622.820 ops/s
[info]                  ·gc.alloc.rate:                   486.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14616.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72620.973 ops/s
[info]                  ·gc.alloc.rate:      473.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 72400.561 ops/s
[info]                  ·gc.alloc.rate:               493.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          10733.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14487.534 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   72355.759 ±(99.9%) 1610.995 ops/s [Average]
[info]   (min, avg, max) = (71622.820, 72355.759, 72620.973), stdev = 418.370
[info]   CI (99.9%): [70744.765, 73966.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   483.386 ±(99.9%) 31.111 MB/sec [Average]
[info]   (min, avg, max) = (473.203, 483.386, 493.763), stdev = 8.079
[info]   CI (99.9%): [452.275, 514.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10514.780 ±(99.9%) 802.752 B/op [Average]
[info]   (min, avg, max) = (10256.006, 10514.780, 10733.879), stdev = 208.472
[info]   CI (99.9%): [9712.028, 11317.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   501.692 ±(99.9%) 1110.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.692, 666.433), stdev = 288.278
[info]   CI (99.9%): [≈ 0, 1611.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10925.165 ±(99.9%) 24200.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10925.165, 14616.008), stdev = 6284.670
[info]   CI (99.9%): [≈ 0, 35125.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 1.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.915), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.69% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32239.746 ops/s
[info] # Warmup Iteration   2: 73906.953 ops/s
[info] # Warmup Iteration   3: 74918.623 ops/s
[info] # Warmup Iteration   4: 75343.445 ops/s
[info] # Warmup Iteration   5: 75270.952 ops/s
[info] Iteration   1: 74387.015 ops/s
[info]                  ·gc.alloc.rate:               35.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10824.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 74744.252 ops/s
[info]                  ·gc.alloc.rate:      20.183 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.957 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74763.982 ops/s
[info]                  ·gc.alloc.rate:      20.143 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74784.841 ops/s
[info]                  ·gc.alloc.rate:      20.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74749.432 ops/s
[info]                  ·gc.alloc.rate:      20.147 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   74685.904 ±(99.9%) 646.231 ops/s [Average]
[info]   (min, avg, max) = (74387.015, 74685.904, 74784.841), stdev = 167.824
[info]   CI (99.9%): [74039.673, 75332.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   23.148 ±(99.9%) 25.765 MB/sec [Average]
[info]   (min, avg, max) = (20.143, 23.148, 35.117), stdev = 6.691
[info]   CI (99.9%): [≈ 0, 48.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   487.987 ±(99.9%) 548.854 B/op [Average]
[info]   (min, avg, max) = (424.006, 487.987, 742.962), stdev = 142.536
[info]   CI (99.9%): [≈ 0, 1036.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.327 ±(99.9%) 881.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.327, 511.637), stdev = 228.811
[info]   CI (99.9%): [≈ 0, 983.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2164.918 ±(99.9%) 18640.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2164.918, 10824.592), stdev = 4840.905
[info]   CI (99.9%): [≈ 0, 20805.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.92% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82050.299 ops/s
[info] # Warmup Iteration   2: 300893.996 ops/s
[info] # Warmup Iteration   3: 313591.457 ops/s
[info] # Warmup Iteration   4: 313511.073 ops/s
[info] # Warmup Iteration   5: 311262.657 ops/s
[info] Iteration   1: 309923.090 ops/s
[info]                  ·gc.alloc.rate:                   1833.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              9308.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6823.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 310377.699 ops/s
[info]                  ·gc.alloc.rate:                   1860.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              9436.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10218.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 310762.348 ops/s
[info]                  ·gc.alloc.rate:                   1863.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              9438.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10185.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 313203.491 ops/s
[info]                  ·gc.alloc.rate:               1851.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          9301.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6728.186 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 314108.854 ops/s
[info]                  ·gc.alloc.rate:                   1896.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              9503.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10075.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   311675.096 ±(99.9%) 7163.917 ops/s [Average]
[info]   (min, avg, max) = (309923.090, 311675.096, 314108.854), stdev = 1860.446
[info]   CI (99.9%): [304511.180, 318839.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1861.262 ±(99.9%) 88.230 MB/sec [Average]
[info]   (min, avg, max) = (1833.915, 1861.262, 1896.544), stdev = 22.913
[info]   CI (99.9%): [1773.032, 1949.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9397.812 ±(99.9%) 341.547 B/op [Average]
[info]   (min, avg, max) = (9301.597, 9397.812, 9503.536), stdev = 88.699
[info]   CI (99.9%): [9056.266, 9739.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744.054 ±(99.9%) 1414.574 MB/sec [Average]
[info]   (min, avg, max) = (1339.035, 1744.054, 2015.264), stdev = 367.360
[info]   CI (99.9%): [329.481, 3158.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8806.136 ±(99.9%) 7140.992 B/op [Average]
[info]   (min, avg, max) = (6728.186, 8806.136, 10218.722), stdev = 1854.493
[info]   CI (99.9%): [1665.144, 15947.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.477), stdev = 1.541
[info]   CI (99.9%): [≈ 0, 6.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.652 ±(99.9%) 30.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.652, 17.629), stdev = 7.814
[info]   CI (99.9%): [≈ 0, 33.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.15% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88062.645 ops/s
[info] # Warmup Iteration   2: 460597.318 ops/s
[info] # Warmup Iteration   3: 486139.149 ops/s
[info] # Warmup Iteration   4: 503877.533 ops/s
[info] # Warmup Iteration   5: 504881.682 ops/s
[info] Iteration   1: 502156.618 ops/s
[info]                  ·gc.alloc.rate:                   584.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1831.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2085.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 504902.924 ops/s
[info]                  ·gc.alloc.rate:      572.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 1784.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 505314.581 ops/s
[info]                  ·gc.alloc.rate:               593.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          1847.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 505441.920 ops/s
[info]                  ·gc.alloc.rate:                   586.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1825.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 503942.527 ops/s
[info]                  ·gc.alloc.rate:               591.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          1845.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2080.463 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   504351.714 ±(99.9%) 5239.344 ops/s [Average]
[info]   (min, avg, max) = (502156.618, 504351.714, 505441.920), stdev = 1360.641
[info]   CI (99.9%): [499112.370, 509591.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   585.420 ±(99.9%) 31.232 MB/sec [Average]
[info]   (min, avg, max) = (572.343, 585.420, 593.095), stdev = 8.111
[info]   CI (99.9%): [554.188, 616.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1826.716 ±(99.9%) 98.589 B/op [Average]
[info]   (min, avg, max) = (1784.001, 1826.716, 1847.116), stdev = 25.603
[info]   CI (99.9%): [1728.127, 1925.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.687 ±(99.9%) 1146.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.687, 666.337), stdev = 297.781
[info]   CI (99.9%): [≈ 0, 1679.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1662.615 ±(99.9%) 3578.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1662.615, 2085.723), stdev = 929.445
[info]   CI (99.9%): [≈ 0, 5241.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.065), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.38% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601526.438 ops/s
[info] # Warmup Iteration   2: 1246432.632 ops/s
[info] # Warmup Iteration   3: 1225265.814 ops/s
[info] # Warmup Iteration   4: 1223576.663 ops/s
[info] # Warmup Iteration   5: 1265376.303 ops/s
[info] Iteration   1: 1237605.519 ops/s
[info]                  ·gc.alloc.rate:               667.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1264716.950 ops/s
[info]                  ·gc.alloc.rate:               689.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          857.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 834.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1270101.497 ops/s
[info]                  ·gc.alloc.rate:                   683.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              846.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1268930.434 ops/s
[info]                  ·gc.alloc.rate:               683.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1269875.854 ops/s
[info]                  ·gc.alloc.rate:                   679.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              842.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1262246.051 ±(99.9%) 53697.644 ops/s [Average]
[info]   (min, avg, max) = (1237605.519, 1262246.051, 1270101.497), stdev = 13945.108
[info]   CI (99.9%): [1208548.407, 1315943.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   680.783 ±(99.9%) 30.778 MB/sec [Average]
[info]   (min, avg, max) = (667.825, 680.783, 689.185), stdev = 7.993
[info]   CI (99.9%): [650.005, 711.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   848.785 ±(99.9%) 21.233 B/op [Average]
[info]   (min, avg, max) = (842.465, 848.785, 857.582), stdev = 5.514
[info]   CI (99.9%): [827.552, 870.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.131 ±(99.9%) 0.816 MB/sec [Average]
[info]   (min, avg, max) = (670.857, 671.131, 671.453), stdev = 0.212
[info]   CI (99.9%): [670.315, 671.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   836.823 ±(99.9%) 35.298 B/op [Average]
[info]   (min, avg, max) = (831.611, 836.823, 853.079), stdev = 9.167
[info]   CI (99.9%): [801.525, 872.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.61% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11063.722 ops/s
[info] # Warmup Iteration   2: 84337.303 ops/s
[info] # Warmup Iteration   3: 100849.985 ops/s
[info] # Warmup Iteration   4: 101767.169 ops/s
[info] # Warmup Iteration   5: 103966.127 ops/s
[info] Iteration   1: 102510.415 ops/s
[info]                  ·gc.alloc.rate:                   3252.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              49936.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51237.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103690.243 ops/s
[info]                  ·gc.alloc.rate:                   3317.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              50329.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50687.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 104520.935 ops/s
[info]                  ·gc.alloc.rate:                   3329.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              50140.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40418.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 104418.366 ops/s
[info]                  ·gc.alloc.rate:               3353.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          50541.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50744.998 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 103657.841 ops/s
[info]                  ·gc.alloc.rate:                   3331.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              50577.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51297.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   103759.560 ±(99.9%) 3098.052 ops/s [Average]
[info]   (min, avg, max) = (102510.415, 103759.560, 104520.935), stdev = 804.554
[info]   CI (99.9%): [100661.508, 106857.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3316.975 ±(99.9%) 147.277 MB/sec [Average]
[info]   (min, avg, max) = (3252.478, 3316.975, 3353.175), stdev = 38.247
[info]   CI (99.9%): [3169.698, 3464.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50305.138 ±(99.9%) 1043.837 B/op [Average]
[info]   (min, avg, max) = (49936.251, 50305.138, 50577.989), stdev = 271.081
[info]   CI (99.9%): [49261.301, 51348.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.687 ±(99.9%) 1158.902 MB/sec [Average]
[info]   (min, avg, max) = (2684.209, 3221.687, 3378.999), stdev = 300.963
[info]   CI (99.9%): [2062.785, 4380.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48877.067 ±(99.9%) 18239.636 B/op [Average]
[info]   (min, avg, max) = (40418.192, 48877.067, 51297.563), stdev = 4736.776
[info]   CI (99.9%): [30637.431, 67116.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.253 ±(99.9%) 0.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.253, 0.320), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.85% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92191.954 ops/s
[info] # Warmup Iteration   2: 309683.792 ops/s
[info] # Warmup Iteration   3: 337480.143 ops/s
[info] # Warmup Iteration   4: 336644.536 ops/s
[info] # Warmup Iteration   5: 342396.290 ops/s
[info] Iteration   1: 337171.975 ops/s
[info]                  ·gc.alloc.rate:               1180.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          5512.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6257.552 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 340959.260 ops/s
[info]                  ·gc.alloc.rate:                   1198.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5533.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6191.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 343859.931 ops/s
[info]                  ·gc.alloc.rate:               1206.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          5522.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6143.720 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 342663.651 ops/s
[info]                  ·gc.alloc.rate:                   1177.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              5409.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3084.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 345124.455 ops/s
[info]                  ·gc.alloc.rate:                   1223.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              5577.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6124.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   341955.854 ±(99.9%) 11875.541 ops/s [Average]
[info]   (min, avg, max) = (337171.975, 341955.854, 345124.455), stdev = 3084.040
[info]   CI (99.9%): [330080.314, 353831.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1197.491 ±(99.9%) 72.485 MB/sec [Average]
[info]   (min, avg, max) = (1177.706, 1197.491, 1223.328), stdev = 18.824
[info]   CI (99.9%): [1125.006, 1269.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5511.031 ±(99.9%) 239.201 B/op [Average]
[info]   (min, avg, max) = (5409.136, 5511.031, 5577.510), stdev = 62.120
[info]   CI (99.9%): [5271.830, 5750.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.801 ±(99.9%) 1154.467 MB/sec [Average]
[info]   (min, avg, max) = (671.485, 1207.801, 1343.225), stdev = 299.811
[info]   CI (99.9%): [53.334, 2362.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5560.178 ±(99.9%) 5333.638 B/op [Average]
[info]   (min, avg, max) = (3084.092, 5560.178, 6257.552), stdev = 1385.129
[info]   CI (99.9%): [226.540, 10893.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.352), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.134 ±(99.9%) 26.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.134, 15.284), stdev = 6.793
[info]   CI (99.9%): [≈ 0, 29.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.08% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130658.633 ops/s
[info] # Warmup Iteration   2: 728669.951 ops/s
[info] # Warmup Iteration   3: 773169.330 ops/s
[info] # Warmup Iteration   4: 767227.912 ops/s
[info] # Warmup Iteration   5: 773350.209 ops/s
[info] Iteration   1: 732990.586 ops/s
[info]                  ·gc.alloc.rate:               575.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1431.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 771932.700 ops/s
[info]                  ·gc.alloc.rate:                   606.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1237.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1359.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 751359.264 ops/s
[info]                  ·gc.alloc.rate:                   586.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1228.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1393.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 775740.004 ops/s
[info]                  ·gc.alloc.rate:                   611.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1241.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1350.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 772574.102 ops/s
[info]                  ·gc.alloc.rate:                   609.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1354.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   760919.331 ±(99.9%) 70693.407 ops/s [Average]
[info]   (min, avg, max) = (732990.586, 760919.331, 775740.004), stdev = 18358.853
[info]   CI (99.9%): [690225.924, 831612.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   598.113 ±(99.9%) 61.459 MB/sec [Average]
[info]   (min, avg, max) = (575.791, 598.113, 611.972), stdev = 15.961
[info]   CI (99.9%): [536.654, 659.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1236.927 ±(99.9%) 19.089 B/op [Average]
[info]   (min, avg, max) = (1228.838, 1236.927, 1241.034), stdev = 4.957
[info]   CI (99.9%): [1217.838, 1256.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.944 ±(99.9%) 3.341 MB/sec [Average]
[info]   (min, avg, max) = (664.785, 665.944, 666.819), stdev = 0.868
[info]   CI (99.9%): [662.603, 669.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1377.936 ±(99.9%) 133.797 B/op [Average]
[info]   (min, avg, max) = (1350.101, 1377.936, 1431.799), stdev = 34.747
[info]   CI (99.9%): [1244.139, 1511.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.059), stdev = 1.808
[info]   CI (99.9%): [≈ 0, 7.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.681 ±(99.9%) 14.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.681, 8.276), stdev = 3.687
[info]   CI (99.9%): [≈ 0, 15.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.31% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918904.204 ops/s
[info] # Warmup Iteration   2: 1595628.476 ops/s
[info] # Warmup Iteration   3: 1618920.077 ops/s
[info] # Warmup Iteration   4: 1621494.590 ops/s
[info] # Warmup Iteration   5: 1599971.871 ops/s
[info] Iteration   1: 1624995.729 ops/s
[info]                  ·gc.alloc.rate:                   766.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1626633.005 ops/s
[info]                  ·gc.alloc.rate:               771.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 649.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1541919.646 ops/s
[info]                  ·gc.alloc.rate:                   751.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              766.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1370.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1617363.484 ops/s
[info]                  ·gc.alloc.rate:                   764.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1617700.177 ops/s
[info]                  ·gc.alloc.rate:               764.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 653.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1605722.408 ±(99.9%) 138281.659 ops/s [Average]
[info]   (min, avg, max) = (1541919.646, 1605722.408, 1626633.005), stdev = 35911.308
[info]   CI (99.9%): [1467440.750, 1744004.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   763.714 ±(99.9%) 28.758 MB/sec [Average]
[info]   (min, avg, max) = (751.468, 763.714, 771.658), stdev = 7.468
[info]   CI (99.9%): [734.956, 792.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.644 ±(99.9%) 39.603 B/op [Average]
[info]   (min, avg, max) = (742.419, 748.644, 766.850), stdev = 10.285
[info]   CI (99.9%): [709.041, 788.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.891 ±(99.9%) 1156.775 MB/sec [Average]
[info]   (min, avg, max) = (670.946, 805.891, 1343.282), stdev = 300.411
[info]   CI (99.9%): [≈ 0, 1962.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   795.503 ±(99.9%) 1238.348 B/op [Average]
[info]   (min, avg, max) = (649.681, 795.503, 1370.778), stdev = 321.595
[info]   CI (99.9%): [≈ 0, 2033.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.041), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.54% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 885487.929 ops/s
[info] # Warmup Iteration   2: 1660953.166 ops/s
[info] # Warmup Iteration   3: 1734203.066 ops/s
[info] # Warmup Iteration   4: 1738224.003 ops/s
[info] # Warmup Iteration   5: 1738409.379 ops/s
[info] Iteration   1: 1739348.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1696238.298 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1723251.945 ops/s
[info]                  ·gc.alloc.rate:      0.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.727 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1728977.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1726690.125 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1722901.165 ±(99.9%) 61874.779 ops/s [Average]
[info]   (min, avg, max) = (1696238.298, 1722901.165, 1739348.140), stdev = 16068.684
[info]   CI (99.9%): [1661026.386, 1784775.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.159 ±(99.9%) 1.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.159, 0.796), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.146 ±(99.9%) 1.251 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.146, 0.727), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.77% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101213.977 ops/s
[info] # Warmup Iteration   2: 423249.180 ops/s
[info] # Warmup Iteration   3: 431496.440 ops/s
[info] # Warmup Iteration   4: 442142.333 ops/s
[info] # Warmup Iteration   5: 444676.701 ops/s
[info] Iteration   1: 446235.462 ops/s
[info]                  ·gc.alloc.rate:               676.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          2385.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2355.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 444636.116 ops/s
[info]                  ·gc.alloc.rate:               677.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2363.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 446553.476 ops/s
[info]                  ·gc.alloc.rate:                   683.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2355.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 432889.696 ops/s
[info]                  ·gc.alloc.rate:               663.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          2412.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2430.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 429606.316 ops/s
[info]                  ·gc.alloc.rate:                   652.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              2388.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2450.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   439984.213 ±(99.9%) 31158.493 ops/s [Average]
[info]   (min, avg, max) = (429606.316, 439984.213, 446553.476), stdev = 8091.762
[info]   CI (99.9%): [408825.720, 471142.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   670.599 ±(99.9%) 48.114 MB/sec [Average]
[info]   (min, avg, max) = (652.274, 670.599, 683.232), stdev = 12.495
[info]   CI (99.9%): [622.485, 718.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2398.544 ±(99.9%) 44.946 B/op [Average]
[info]   (min, avg, max) = (2385.752, 2398.544, 2412.455), stdev = 11.672
[info]   CI (99.9%): [2353.598, 2443.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.330 ±(99.9%) 2.077 MB/sec [Average]
[info]   (min, avg, max) = (667.786, 668.330, 669.062), stdev = 0.539
[info]   CI (99.9%): [666.253, 670.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2391.084 ±(99.9%) 175.275 B/op [Average]
[info]   (min, avg, max) = (2355.260, 2391.084, 2450.143), stdev = 45.518
[info]   CI (99.9%): [2215.809, 2566.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:56:08
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    832419.284 ±   83109.404   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2421.299 ±     296.494  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4577.469 ±     139.166    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2409.631 ±    1406.494  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4550.549 ±    2445.796    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.779 ±       6.569  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.541 ±      13.019    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1885197.244 ±   78673.513   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1302.672 ±      52.468  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1087.368 ±      13.952    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1330.976 ±       9.485  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1111.103 ±      52.026    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.010 ±       0.060    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5870773.543 ±  505385.617   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       401.933 ±      33.919  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.800 ±      16.482    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       339.038 ±    1218.091  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        91.771 ±     328.389    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.002 ±       0.019    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         9.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    273271.731 ±    6728.882   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2344.703 ±      86.294  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13503.247 ±     523.083    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2285.754 ±    1418.714  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13163.104 ±    8150.099    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.262 ±       2.214  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         1.508 ±      12.732    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        26.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    928547.498 ±   27413.560   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2489.467 ±     112.068  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4219.301 ±      98.554    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2411.713 ±    1419.633  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4087.694 ±    2406.908    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.774 ±       6.446  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.325 ±      11.030    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2808395.668 ±  172833.854   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1206.343 ±      81.907  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       676.017 ±      28.913    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1204.117 ±    1150.373  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       675.492 ±     654.057    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.785 ±       6.690  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.432 ±       3.684    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  15049933.760 ±  190467.836   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       790.444 ±      28.456  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.656 ±       3.326    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       805.382 ±    1158.390  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        84.220 ±     121.175    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.011    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        18.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17073773.382 ±   37160.366   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.548 ±       2.892  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.051 ±       0.267    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    707183.449 ±   19335.719   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2098.214 ±      84.703  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4669.078 ±      98.115    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2013.820 ±      16.672  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4481.481 ±     103.717    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.335 ±       2.797  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.744 ±       6.205    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2120829.724 ±   37201.917   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2976.945 ±      44.364  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2208.954 ±      42.906    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2819.026 ±    1135.836  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2092.222 ±     866.248    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.009 ±       0.053    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5   9886072.332 ±  918972.281   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1238.942 ±      89.150  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       197.260 ±       9.487    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1201.823 ±    1149.397  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       191.846 ±     189.493    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.912 ±       7.767  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.143 ±       1.220    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3247177.451 ±   92228.121   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2031.485 ±      62.009  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       984.581 ±      22.758    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2003.641 ±      10.473  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       971.116 ±      26.801    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.849 ±       7.048  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.412 ±       3.420    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13839324.713 ±  438532.694   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1817.132 ±      91.523  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.635 ±       6.791    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1749.640 ±    1417.203  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       198.821 ±     157.989    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.570 ±       4.732  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.066 ±       0.546    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1329844.589 ±   70638.127   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2856.906 ±     197.756  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3380.595 ±      89.044    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2805.373 ±    1134.988  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3320.062 ±    1345.464    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.904 ±       6.877  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.071 ±       8.131    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2526971.400 ±   20499.816   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2234.514 ±      38.442  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1391.592 ±      27.768    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2144.144 ±    1149.078  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1335.563 ±     725.994    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.729 ±       5.879  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.453 ±       3.655    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  20187819.179 ±  347499.084   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       635.705 ±       6.536  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.561 ±       0.908    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.005 ±       2.089  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        51.924 ±       0.997    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.007 ±       0.063  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6369241.228 ±  243767.989   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1812.390 ±      59.249  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       447.825 ±      18.467    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1736.262 ±    1410.753  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       429.404 ±     356.810    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.789 ±       6.705  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.196 ±       1.666    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28058342.439 ± 2657025.046   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       880.241 ±     105.924  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.370 ±       2.140    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       805.924 ±    1156.115  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        45.070 ±      61.911    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34728440.729 ±  183915.264   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1814321.937 ±   79281.732   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2836.474 ±     148.311  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2460.393 ±      41.054    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2675.410 ±      42.789  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2320.881 ±      71.241    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.025 ±       0.174  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.022 ±       0.152    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    309954.003 ±   10610.199   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1902.774 ±      79.710  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9661.489 ±     295.113    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1743.003 ±    1411.798  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8851.846 ±    7199.431    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.729 ±       6.050  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.669 ±      30.453    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    498776.767 ±   21838.892   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       644.937 ±      33.082  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2034.887 ±      51.148    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       666.413 ±       2.248  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2102.883 ±      98.636    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.026 ±       0.139    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1339043.266 ±    7949.026   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       920.290 ±      39.133  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1081.594 ±      47.103    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941.079 ±    1418.281  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1106.262 ±    1670.208    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.015 ±       0.084    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    114074.510 ±    4432.713   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3628.441 ±     128.514  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     50055.636 ±     845.151    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3498.505 ±    1162.674  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     48263.410 ±   15941.698    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.172 ±       0.605    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    352175.161 ±    7520.540   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1219.587 ±      51.691  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5450.207 ±     283.582    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.967 ±    1156.230  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5401.734 ±    5213.434    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.737 ±       5.106  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.300 ±      22.879    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    898960.209 ±   39649.297   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       667.948 ±      38.529  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1169.206 ±      30.096    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.320 ±       2.478  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1166.513 ±      55.987    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2568099.809 ±   99140.907   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1220.743 ±      66.313  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       748.066 ±      16.245    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1209.891 ±    1157.046  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       740.034 ±     690.238    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.641 ±       4.676  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.391 ±       2.856    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2923174.461 ±   16000.053   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.259 ±       2.225  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.140 ±       1.201    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    486518.681 ±   14483.317   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       721.386 ±      24.049  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2333.580 ±      41.923    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.700 ±       1.604  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2163.243 ±      62.279    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.041 ±       0.234    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        17.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17477.308 ±     698.995   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1400.935 ±      54.041  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126155.781 ±    1795.451    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.413 ±       6.449  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    120896.043 ±    5229.603    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.774 ±       4.585  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        69.482 ±     411.887    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     36486.700 ±     576.703   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1009.043 ±      29.290  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43518.924 ±     984.048    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1068.959 ±    1409.433  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     46103.867 ±   60794.942    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.259 ±       7.187    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     45046.524 ±     627.238   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       625.694 ±      18.207  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     21859.625 ±     429.442    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.328 ±       1.693  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     23454.387 ±     367.298    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.145 ±       1.249    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30063.973 ±     575.640   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1519.663 ±      52.973  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79552.664 ±    2751.343    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.271 ±    1153.324  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     77054.201 ±   61408.748    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.933 ±       7.498  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        48.690 ±     391.176    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     25047.300 ±     542.810   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1818.287 ±      15.665  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114254.059 ±    2209.647    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1741.026 ±    1409.762  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    109381.800 ±   88222.040    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.749 ±       6.229  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        46.952 ±     390.170    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24674.123 ±     645.051   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1577.902 ±      63.813  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    100641.667 ±    2750.396    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1469.713 ±    1155.327  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     93718.126 ±   72906.221    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.845 ±       7.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        53.739 ±     454.144    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27691.926 ±     551.454   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1642.694 ±      58.749  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93350.323 ±    1670.356    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1611.135 ±    1419.396  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     91509.051 ±   79511.024    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.704 ±       4.618  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        40.133 ±     264.158    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27538.375 ±    1117.627   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1574.671 ±      91.192  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     89984.829 ±    3161.915    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.173 ±    1163.692  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     84476.086 ±   66491.491    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.708 ±       3.972  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        40.298 ±     226.785    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7539.778 ±     143.539   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1122.365 ±      29.355  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234274.293 ±    7742.668    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1072.517 ±    1413.200  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    224027.419 ±  296956.930    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.645 ±       5.423  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       134.800 ±    1132.610    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     18060.204 ±    1221.976   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1657.329 ±     105.806  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144428.072 ±    3932.764    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.302 ±    1414.644  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    140404.313 ±  124619.957    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.749 ±       4.397  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        66.131 ±     391.408    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     43132.071 ±     301.043   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1214.313 ±      24.729  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44305.967 ±    1036.567    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1072.292 ±    1413.225  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     39135.957 ±   51710.358    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.829 ±       5.272  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        30.213 ±     192.215    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     61440.146 ±    1377.084   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       815.059 ±      41.558  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20875.608 ±    1023.673    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.272 ±    1154.673  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20655.694 ±   29668.331    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.426 ±       2.247    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     33585.884 ±     483.640   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2218.592 ±      58.478  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    103960.867 ±    3206.549    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2152.025 ±    1167.772  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    100855.290 ±   55293.920    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.217 ±       1.349  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10.158 ±      63.361    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     28370.690 ±     110.585   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1825.372 ±      76.083  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101257.074 ±    4295.070    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.436 ±    1409.033  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     96442.403 ±   78331.321    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.779 ±       6.614  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        43.260 ±     367.514    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34595.204 ±     492.569   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1560.914 ±      45.262  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     71010.384 ±    2569.862    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1477.917 ±    1162.557  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67266.162 ±   53851.095    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.683 ±       4.156  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        31.164 ±     190.054    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34630.346 ±     954.606   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1503.767 ±      65.697  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68330.593 ±    2789.232    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1479.469 ±    1154.244  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     67215.380 ±   52083.634    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.629 ±       4.670  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        28.849 ±     214.655    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    332647.494 ±   16525.859   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1889.011 ±     142.442  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8937.034 ±     308.525    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1877.714 ±    1159.812  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8884.654 ±    5496.052    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.770 ±       6.409  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.650 ±      30.359    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1466017.040 ±    9870.414   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       478.248 ±      36.047  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       513.374 ±      41.199    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       531.714 ±    1144.555  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       571.130 ±    1229.404    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.038    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    672018.503 ±   39483.701   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       535.833 ±      16.819  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1255.166 ±      92.464    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.360 ±    1111.887  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1181.409 ±    2607.425    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.037 ±       0.280  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.088 ±       0.660    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1859523.459 ±  137309.459   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       369.229 ±      37.998  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.513 ±      31.883    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.856 ±    1217.217  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       287.895 ±    1040.674    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    100848.008 ±    3157.864   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3393.924 ±     167.146  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52961.001 ±    1100.145    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3355.894 ±      70.771  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     52370.768 ±    1401.796    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.327 ±       1.550    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    352102.024 ±    3262.434   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1214.881 ±      47.708  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5430.290 ±     182.698    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.573 ±    1155.337  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5395.221 ±    5132.287    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.729 ±       5.020  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.252 ±      22.406    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1588112.394 ±   94665.758   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       756.247 ±      58.441  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       749.316 ±      35.706    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800.091 ±    1146.906  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       793.179 ±    1142.332    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.010 ±       0.045  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.046    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1022994.125 ±    8329.854   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       740.536 ±      12.888  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1139.273 ±      21.225    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.620 ±       2.003  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1028.632 ±       5.994    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2780520.174 ±   77701.174   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1321.442 ±      56.242  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       747.998 ±      25.108    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1209.809 ±    1157.401  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       684.740 ±     654.251    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.633 ±       5.315  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.356 ±       2.993    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3249315.888 ±    6191.207   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.159 ±       0.880  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.077 ±       0.426    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    590356.647 ±   98505.019   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       657.164 ±     123.682  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1751.660 ±      45.804    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       668.808 ±       1.534  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1785.738 ±     300.393    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.022 ±       0.185    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    159513.445 ±    5606.247   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2016.580 ±      71.134  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19897.304 ±     576.357    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1876.988 ±    1146.745  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18532.238 ±   11603.356    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.783 ±       4.632  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.682 ±      45.294    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    450486.642 ±   31638.644   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       371.647 ±      26.481  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1298.693 ±     124.026    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.871 ±    1212.254  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1192.723 ±    4305.843    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.015 ±       0.129    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1244516.692 ±   11867.257   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       245.196 ±      24.546  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       310.050 ±      33.103    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       204.690 ±    1079.272  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       259.419 ±    1367.846    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     88626.413 ±     325.762   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3555.935 ±      44.990  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63138.934 ±     887.825    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3358.640 ±      73.165  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59635.940 ±    1479.851    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.296 ±       1.559    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    303422.848 ±   17437.505   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1708.767 ±      98.321  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8863.422 ±     214.462    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1742.347 ±    1413.739  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9036.519 ±    7304.386    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.741 ±       5.357  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.879 ±      28.006    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1851646.844 ±  526873.521   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       977.519 ±     269.611  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       830.947 ±      39.625    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       936.226 ±    1408.731  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       793.632 ±    1132.963    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2744196.684 ±  129249.011   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       762.611 ±      60.789  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       437.265 ±      19.784    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806.037 ±    1156.647  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       461.863 ±     656.089    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3110475.903 ±   17976.134   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.231 ±       1.986  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.117 ±       1.006    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     46918.398 ±    5624.197   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2123.318 ±     296.238  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71212.578 ±    1703.502    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2006.721 ±      13.938  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     67363.249 ±    8160.896    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.829 ±       6.914  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        27.946 ±     233.309    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    245631.489 ±    3244.827   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2704.314 ±      56.018  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17327.298 ±     297.901    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2686.044 ±      26.784  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     17210.311 ±     197.151    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.108 ±       0.804  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.695 ±       5.169    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        20.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    383261.277 ±   24995.140   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1980.205 ±     134.110  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8131.005 ±     141.205    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1871.639 ±    1150.998  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7675.318 ±    4468.393    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.804 ±       6.081  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.342 ±      25.367    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2265275.142 ±  128624.075   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       806.765 ±      47.178  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       560.487 ±      21.550    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.204 ±    1156.309  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       560.385 ±     807.979    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.073    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     88145.057 ±    4238.303   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3485.275 ±     196.567  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62215.083 ±    1057.686    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3381.012 ±    1831.134  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60310.705 ±   31067.698    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.442 ±       3.078    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    265038.951 ±    9491.381   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2150.660 ±      59.084  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12771.600 ±     282.353    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2145.055 ±    1161.449  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12743.436 ±    7095.779    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       6.112  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.302 ±      36.509    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1502574.584 ±   23737.474   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       898.740 ±      32.575  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       941.390 ±      37.964    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.833 ±    1151.199  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       841.252 ±    1212.114    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.009 ±       0.046    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2849047.795 ±   93113.455   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       995.855 ±      17.380  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       550.156 ±      22.966    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       940.793 ±    1418.817  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       520.811 ±     799.122    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.049    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3167215.031 ±   62522.335   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    394720.820 ±   30469.148   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2540.941 ±     131.276  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10132.170 ±     332.566    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2409.438 ±    1415.280  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9616.471 ±    5890.039    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.054 ±       0.251  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.216 ±       1.013    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     25931.456 ±     997.972   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1668.274 ±      65.185  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101250.991 ±    1679.673    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.400 ±    1421.740  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97871.048 ±   89170.889    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.774 ±       4.340  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        47.249 ±     265.033    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5    100779.520 ±    1108.923   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       985.163 ±      38.182  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15384.374 ±     724.898    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1067.898 ±    1408.012  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16683.319 ±   22076.844    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.019 ±       0.105  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.296 ±       1.651    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     68406.147 ±    2963.779   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1231.532 ±      63.257  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28332.507 ±     891.854    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1206.083 ±    1154.655  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27758.561 ±   26714.391    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.808 ±       5.265  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.429 ±     120.234    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    139018.879 ±    4843.979   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       961.728 ±      68.320  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10886.627 ±     656.366    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941.386 ±    1418.335  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10656.202 ±   16046.982    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.331 ±       0.816    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     36953.524 ±    1535.513   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1844.002 ±      94.981  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78525.655 ±     811.734    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1871.660 ±    1151.097  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79758.673 ±   50195.979    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.536 ±       3.094    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32280.932 ±     566.620   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       526.734 ±      43.576  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25679.591 ±    2145.015    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       400.821 ±    1408.942  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19543.343 ±   68698.027    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.203 ±       1.751    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32611.569 ±     291.036   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       408.565 ±      35.798  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19715.539 ±    1830.210    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.350 ±    1321.214  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17842.446 ±   63814.898    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.603 ±       3.463    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34135.076 ±    3253.748   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       419.918 ±      35.509  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19363.940 ±    1679.326    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.575 ±    1326.381  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17192.471 ±   61157.871    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     35046.964 ±     680.975   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       321.680 ±      31.380  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     14444.258 ±    1586.310    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       338.839 ±    1217.137  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     15258.336 ±   54766.682    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.562 ±       4.841    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15398.696 ±    1488.564   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1132.835 ±      65.219  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115804.474 ±    7808.711    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1074.119 ±    1415.211  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    110526.531 ±  153382.389    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.670 ±       5.638  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        66.345 ±     557.401    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15777.186 ±     610.122   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1032.468 ±      90.158  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102998.357 ±    9544.687    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1070.351 ±    1411.012  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    106721.032 ±  140092.509    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.244 ±       7.123    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    107254.242 ±    5679.497   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       287.114 ±      25.234  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4213.370 ±     432.490    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306.961 ±    1079.012  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4519.397 ±   15888.540    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.244 ±       1.285    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13867.357 ±     656.143   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1351.236 ±      68.947  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    153353.631 ±    3454.677    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1332.164 ±       8.646  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    151209.454 ±    8164.619    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.469 ±       4.041    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45369.989 ±     334.709   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1155.666 ±      21.619  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40083.826 ±     874.906    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.614 ±    1156.139  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41925.527 ±   40169.684    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.691 ±       5.817  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        23.967 ±     201.724    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     63204.709 ±    7995.446   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1115.119 ±     139.614  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27768.758 ±    1420.365    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.675 ±    1410.338  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26822.055 ±   37028.254    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.734 ±       6.186  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        17.969 ±     151.248    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    176214.939 ±   10089.787   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       290.026 ±      29.674  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2590.846 ±     352.074    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       307.014 ±    1079.198  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2758.247 ±    9698.248    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    185549.564 ±     527.338   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     57850.333 ±    1691.208   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1120.450 ±      34.339  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30483.186 ±    1208.055    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1073.052 ±    1412.812  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29232.196 ±   38918.391    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.656 ±       5.415  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        17.767 ±     146.638    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     92449.884 ±    2761.058   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2375.041 ±     136.184  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     40430.401 ±    1253.771    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2275.886 ±    1416.796  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     38718.866 ±   23282.802    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.812 ±       6.552  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.766 ±     111.055    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    124968.719 ±    5673.671   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1775.046 ±      48.266  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22355.843 ±     763.696    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1737.152 ±    1407.688  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21906.578 ±   18319.841    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.866 ±       7.234  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        10.880 ±      90.841    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    163689.372 ±    5278.487   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1542.145 ±      78.881  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14824.272 ±     390.741    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478.271 ±    1149.487  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14194.703 ±   10547.467    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.625 ±       5.245  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.996 ±      50.338    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     53916.237 ±    2770.703   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2900.806 ±     229.259  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84653.762 ±    2961.444    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2832.416 ±    1181.803  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     82640.980 ±   33001.706    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.246 ±       1.298    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        21.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    182969.098 ±    3054.658   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1218.463 ±      49.376  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10480.999 ±     312.132    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1207.704 ±    1155.777  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     10384.840 ±    9893.143    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.704 ±       5.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.044 ±      44.237    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    535249.760 ±    5423.425   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       556.090 ±      28.903  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1635.128 ±      96.951    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       534.007 ±    1149.492  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1571.413 ±    3382.630    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.024 ±       0.211    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    710695.679 ±   38196.844   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       565.630 ±      47.495  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1252.565 ±      79.521    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.657 ±    1155.195  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1189.163 ±    2561.011    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.019 ±       0.161    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    758636.579 ±  164584.975   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    323869.525 ±    6427.112   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       915.406 ±      35.142  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4448.094 ±     239.883    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       796.873 ±    1143.321  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      3877.811 ±    5667.598    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.061 ±       0.351    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38445.649 ±    1453.196   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1962.412 ±      73.380  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80335.472 ±    1096.893    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.458 ±    1157.958  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     76867.617 ±   47609.254    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.779 ±       4.458  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.778 ±     182.191    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    299022.364 ±    5922.428   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       317.550 ±      33.531  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1671.465 ±     207.593    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       235.579 ±    1259.817  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1246.297 ±    6669.254    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    112855.246 ±    9719.411   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1352.379 ±     123.256  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18857.716 ±     354.048    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1205.222 ±    1151.796  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16749.006 ±   15267.439    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.824 ±       5.447  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.576 ±      76.216    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    482849.649 ±    6344.509   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       322.215 ±      25.187  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1050.205 ±      92.801    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.794 ±    1216.893  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1106.465 ±    3975.298    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.027 ±       0.235    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     40811.193 ±    2229.060   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2024.593 ±     144.268  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78062.523 ±    1442.366    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2004.176 ±      14.844  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     77291.727 ±    4386.255    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.908 ±       6.264  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        35.404 ±     244.708    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     74643.621 ±    9505.087   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       610.357 ±     116.084  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12862.070 ±     851.487    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.391 ±    1152.470  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11122.789 ±   23942.806    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.346 ±       1.824    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     87491.508 ±     678.590   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       509.831 ±      33.091  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9171.058 ±     636.685    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.071 ±    1147.476  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9596.489 ±   20657.234    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.003 ±       0.020  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.058 ±       0.355    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     78615.898 ±     720.295   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       478.254 ±      33.726  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9573.843 ±     731.449    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       502.978 ±    1113.550  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10074.856 ±   22298.902    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.167 ±       1.436    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     87391.611 ±    1718.974   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       510.431 ±      33.822  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9192.672 ±     696.839    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.745 ±    1118.431  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9094.566 ±   20111.828    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.075 ±       0.644    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87975.247 ±    1145.694   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       438.930 ±      35.689  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7852.023 ±     707.712    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.649 ±    1326.675  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6642.344 ±   23762.067    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.149 ±       1.284    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10213.221 ±     130.544   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1682.820 ±      32.276  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    259313.944 ±    5430.439    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608.771 ±    1414.491  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    247864.787 ±  217082.036    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.820 ±       5.517  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       126.112 ±     846.829    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9780.223 ±     547.041   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1516.646 ±     121.957  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    244045.748 ±    8219.067    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1471.046 ±    1157.856  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    236818.558 ±  188385.647    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.916 ±       6.819  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       147.575 ±    1100.545    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    151751.687 ±    3147.276   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       408.066 ±      36.125  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4232.015 ±     360.503    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       473.124 ±    1063.777  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4910.125 ±   11017.248    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.043 ±       0.371    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5817.720 ±     149.868   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1519.200 ±      45.946  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    410832.687 ±   11378.481    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1470.179 ±    1144.908  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    397966.119 ±  321197.186    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.941 ±       7.061  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       254.035 ±    1906.394    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20303.552 ±     577.020   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1576.255 ±      58.418  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122170.303 ±    3588.344    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1474.032 ±    1159.449  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    114310.809 ±   91687.075    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.779 ±       4.912  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        60.500 ±     382.818    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23374.816 ±     500.436   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1587.215 ±      28.427  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106868.666 ±    4081.990    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1606.421 ±    1409.747  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    108267.233 ±   97374.828    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.801 ±       5.264  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        53.781 ±     353.767    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134577.005 ±    1403.238   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       303.598 ±      28.887  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3550.769 ±     373.688    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.639 ±    1079.002  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2399.998 ±   12654.508    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.049 ±       0.421    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    140634.249 ±     669.797   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.003 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23025.984 ±    1977.968   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1600.966 ±     109.550  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109438.978 ±    5025.882    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1607.140 ±    1410.797  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    110209.861 ±  104117.379    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.816 ±       5.175  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        55.373 ±     351.216    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124180.164 ±    5207.900   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1768.928 ±      86.641  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22419.183 ±     795.551    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1744.972 ±    1415.600  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22138.583 ±   18415.187    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.754 ±       5.881  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.710 ±      75.983    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    565313.161 ±    2964.451   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       604.422 ±      20.728  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1682.484 ±      55.832    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       665.905 ±       1.544  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1853.635 ±      10.412    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.061  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.023 ±       0.171    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    350979.090 ±    1588.079   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       500.789 ±      34.220  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2245.399 ±     159.238    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.406 ±    1111.994  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2253.308 ±    4987.411    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.037 ±       0.197    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    759199.218 ±   30330.240   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       509.248 ±      46.429  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1055.516 ±      68.485    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.807 ±    1118.594  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1043.848 ±    2314.904    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     74799.543 ±    2843.330   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3093.591 ±     101.460  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65090.917 ±    1051.965    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2948.822 ±    1383.106  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     62095.437 ±   31060.368    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.616 ±       3.525    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    200623.273 ±    6493.758   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1468.201 ±      61.898  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11516.575 ±     216.377    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1475.629 ±    1158.436  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11565.343 ±    8782.703    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.716 ±       5.547  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.580 ±      43.169    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    656676.580 ±    9750.424   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       367.438 ±      39.761  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       880.596 ±      96.441    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.825 ±    1319.008  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       884.400 ±    3160.211    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.105    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    647995.833 ±   16960.749   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       497.569 ±      40.575  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1208.419 ±      93.671    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       503.151 ±    1114.049  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1222.013 ±    2702.969    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.010 ±       0.087    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1113221.017 ±   32044.916   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       625.255 ±      25.798  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       883.874 ±      24.359    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       670.542 ±       1.570  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       947.934 ±      25.724    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.051    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1193466.299 ±    8699.791   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34907.425 ±    1147.066   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1987.181 ±      74.336  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89581.442 ±    1130.880    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1873.775 ±    1153.611  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     84520.655 ±   53176.587    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.820 ±       5.282  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        37.375 ±     240.978    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    131369.500 ±    3221.239   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1682.408 ±      73.225  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20155.725 ±     656.804    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1740.595 ±    1412.443  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     20864.781 ±   17164.779    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.783 ±       5.411  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.363 ±      64.747    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    205506.132 ±    3961.234   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1252.912 ±      54.593  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9593.756 ±     415.299    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.794 ±    1150.666  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9224.269 ±    8896.271    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.849 ±       6.090  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.508 ±      46.694    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    253567.494 ±   20047.205   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1367.007 ±      94.775  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8484.986 ±     202.880    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345.140 ±       4.467  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8351.597 ±     659.170    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.625 ±       4.320  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.819 ±      26.411    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     68182.635 ±    2252.426   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2747.636 ±     112.525  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63422.994 ±    1828.866    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2690.581 ±      54.427  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     62108.974 ±    2269.357    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.385 ±       1.561    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    178906.807 ±    9832.353   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1187.989 ±      47.854  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10451.405 ±     291.544    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.436 ±    1415.384  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9475.144 ±   12833.694    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.716 ±       5.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.266 ±      44.735    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    719904.270 ±   11793.435   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       749.753 ±      12.129  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1639.173 ±      46.171    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.737 ±       2.811  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1459.849 ±      21.511    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    708076.441 ±   14716.094   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       559.445 ±      35.202  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1243.522 ±      79.485    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.912 ±    1155.745  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1194.491 ±    2571.382    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.037 ±       0.319    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    776600.161 ±    6770.921   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    346602.308 ±   17568.197   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       978.124 ±      19.546  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4441.278 ±     233.653    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       935.394 ±    1407.019  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4263.240 ±    6613.765    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.114 ±       0.477    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     10821.611 ±     651.894   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1376.068 ±      94.689  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    200119.591 ±    6034.127    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.388 ±       6.599  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    195260.128 ±   11551.528    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.787 ±       5.383  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       116.090 ±     795.173    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10856.459 ±     300.401   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1269.657 ±      61.095  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    184050.101 ±    5190.906    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1203.584 ±    1150.390  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    174360.936 ±  165259.853    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.896 ±       6.140  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       129.457 ±     884.098    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    277896.843 ±    5562.842   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1865.982 ±      38.735  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10567.739 ±     325.574    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1747.757 ±    1416.886  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9906.641 ±    8203.414    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.629 ±       4.038  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.570 ±      22.966    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8263.698 ±     462.994   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1491.534 ±      67.747  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    284076.117 ±    8988.799    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1467.367 ±    1160.480  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    279684.566 ±  226809.591    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.071 ±       0.391  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        13.517 ±      75.070    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25360.212 ±    1876.224   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1331.378 ±      90.220  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82624.768 ±    1193.681    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.791 ±       4.688  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     83292.781 ±    6069.351    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.762 ±       6.337  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        46.281 ±     384.615    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     33182.086 ±    1066.720   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1381.325 ±      63.657  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65510.522 ±    1378.087    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1339.585 ±       5.029  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     63535.692 ±    2115.655    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.797 ±       5.241  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        38.120 ±     251.696    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    631971.084 ±   29736.584   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1173.396 ±      44.530  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2921.969 ±     146.704    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1075.345 ±    1416.193  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2681.642 ±    3576.094    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.667 ±       4.692  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.682 ±      11.881    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    778612.350 ±    4453.902   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.061 ±       0.519  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.123 ±       1.052    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     28215.283 ±    2068.699   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1277.417 ±      94.099  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71250.371 ±    1498.169    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1206.957 ±    1156.871  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     67136.941 ±   62027.392    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.804 ±       6.651  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        44.149 ±     365.113    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     33762.615 ±     601.532   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1790.776 ±      70.531  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83474.479 ±    3195.687    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.817 ±    1419.474  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81290.708 ±   67245.694    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.791 ±       6.544  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        36.974 ±     305.891    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     34622.938 ±    1237.436   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1541.202 ±      60.719  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     70054.741 ±    1782.724    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1604.327 ±    1402.642  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     72908.884 ±   63350.144    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.883 ±       7.470  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        40.441 ±     342.133    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    486603.954 ±    9304.892   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1309.656 ±      20.094  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4235.995 ±     119.710    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1345.333 ±       4.280  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4351.378 ±      96.509    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.595 ±       4.860  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.940 ±      15.848    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     19083.415 ±     978.022   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1928.947 ±     124.999  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    159073.146 ±    6371.811    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1868.626 ±    1143.290  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    154134.553 ±   95044.855    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.947 ±       7.873  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        79.835 ±     664.633    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     55211.288 ±    2247.971   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1697.737 ±      49.695  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48396.212 ±     961.561    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741.804 ±    1412.829  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     49660.111 ±   40435.669    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.741 ±       5.592  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.948 ±     158.054    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    158818.371 ±    8218.425   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1926.291 ±     120.399  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19081.965 ±     388.290    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.946 ±    1154.514  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18582.827 ±   11858.926    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.773 ±       6.518  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.673 ±      64.718    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1186960.407 ±   19571.988   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1310.698 ±      43.786  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1737.814 ±      70.935    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.236 ±    1158.330  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1605.154 ±    1543.141    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.704 ±       5.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.939 ±       7.847    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1390950.247 ±    1747.912   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.018 ±       0.150  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.020 ±       0.169    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     68573.000 ±    3591.215   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1735.988 ±     112.467  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39840.783 ±    1368.438    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1608.075 ±    1412.536  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     36949.490 ±   33345.215    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.479 ±       1.849    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17780.482 ±     713.850   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1561.034 ±      51.209  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    138159.749 ±    3604.023    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1475.528 ±    1159.493  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    130773.709 ±  107904.599    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.774 ±       6.489  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        68.408 ±     573.127    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17978.701 ±     905.723   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1445.416 ±      75.500  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    126510.736 ±    4261.246    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1338.085 ±       7.422  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    117130.518 ±    6232.441    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.892 ±       6.063  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        77.762 ±     526.566    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    675157.255 ±   34386.637   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1818.697 ±     136.767  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4238.984 ±     175.904    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1747.935 ±    1417.536  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4073.580 ±    3286.797    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.616 ±       4.904  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.457 ±      11.620    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     12564.299 ±     186.954   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1737.015 ±      45.230  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    217557.198 ±    5755.043    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1736.233 ±    1408.479  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    217549.737 ±  178304.046    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.920 ±       6.607  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       115.262 ±     827.882    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44880.677 ±    2339.047   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1760.180 ±     146.224  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61714.932 ±    3049.247    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1743.395 ±    1414.658  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     61097.192 ±   48846.497    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.758 ±       5.861  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        26.313 ±     203.116    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     55358.995 ±    5154.857   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1705.599 ±     201.701  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48484.243 ±    2133.007    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1605.513 ±    1412.264  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     45613.851 ±   39205.863    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.771 ±       6.457  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        22.125 ±     185.435    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1346254.868 ±   61252.530   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1264.487 ±      64.984  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1478.227 ±      35.778    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.320 ±    1160.008  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1412.096 ±    1318.486    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.692 ±       5.731  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.812 ±       6.735    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1564558.307 ±    2839.554   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3760.811 ±      25.352   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       512.512 ±      24.333  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    214465.607 ±   10695.996    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       401.180 ±    1410.204  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    168071.698 ±  590795.753    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.744 ±      15.020    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    125730.389 ±    2822.212   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2002.878 ±      44.169  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     25069.315 ±     352.929    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.771 ±      13.268  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     25181.181 ±     606.300    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.733 ±       4.474  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.199 ±      56.229    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    373594.302 ±    2585.420   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       769.713 ±      18.888  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3241.175 ±      93.131    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       799.270 ±    1139.926  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3366.894 ±    4824.902    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.070  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.049 ±       0.295    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    256196.005 ±    3652.012   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       578.142 ±      33.327  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3551.499 ±     229.771    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.470 ±    1148.335  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3280.958 ±    7062.612    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.077 ±       0.662    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    516484.163 ±   15929.969   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       667.615 ±      29.809  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2034.260 ±     136.424    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537.143 ±    1156.242  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1638.779 ±    3527.973    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.013 ±       0.109    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     73662.382 ±     767.053   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3103.613 ±      55.853  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66311.079 ±    1644.221    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2948.653 ±    1410.271  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     63001.087 ±   30186.862    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.042 ±       0.220  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.887 ±       4.678    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    136879.348 ±    1850.610   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1198.744 ±      46.659  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13782.637 ±     598.406    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.511 ±    1415.676  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12353.472 ±   16409.362    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.737 ±       5.523  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.495 ±      63.709    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    206738.916 ±    2597.415   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       165.973 ±      19.830  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1263.631 ±     166.452    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.643 ±    1079.023  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1563.057 ±    8241.570    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.368 ±       3.145  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.802 ±      23.981    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    422027.418 ±   42803.762   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       426.713 ±      44.351  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1591.399 ±     136.087    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.086 ±    1320.067  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1385.492 ±    4923.962    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    471110.654 ±    7696.887   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       377.917 ±      31.001  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1262.442 ±     113.773    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.748 ±    1216.686  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1133.959 ±    4069.255    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    502034.731 ±     498.389   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     29045.490 ±     401.506   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1588.291 ±      50.560  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     86060.682 ±    2211.913    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1472.836 ±    1157.248  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     79813.398 ±   62932.385    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.870 ±       7.091  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        47.187 ±     384.599    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8491.997 ±     179.606   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1226.158 ±      23.722  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    227201.968 ±    5435.407    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.045 ±    1155.043  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    223879.115 ±  214506.301    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.778 ±       5.921  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       145.452 ±    1107.602    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8344.813 ±     338.235   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1116.998 ±      70.909  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    210641.085 ±    8224.332    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1070.280 ±    1410.544  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    201715.930 ±  264422.773    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.811 ±       6.862  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       151.307 ±    1279.264    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    175373.670 ±    3281.921   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1738.427 ±      49.468  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15599.576 ±     233.280    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1612.945 ±    1413.118  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     14474.162 ±   12689.349    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.606 ±       5.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.415 ±      45.819    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7506.405 ±     124.113   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1282.147 ±      57.081  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    268785.550 ±    9224.734    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.744 ±    1151.406  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    252214.619 ±  239575.073    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.904 ±       6.947  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       190.071 ±    1462.342    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     21129.682 ±    1426.107   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1197.675 ±      60.065  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89211.147 ±    2223.598    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1073.603 ±    1415.216  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     80070.108 ±  106623.415    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.762 ±       5.172  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        55.942 ±     379.921    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     23715.077 ±    1246.890   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1048.765 ±      78.706  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69594.843 ±    2757.559    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       936.974 ±    1411.334  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     62124.899 ±   92813.457    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.013 ±       0.055  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.897 ±       3.733    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    375962.638 ±   16017.188   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       876.098 ±      44.737  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3666.825 ±     100.760    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.494 ±    1159.099  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3372.625 ±    4791.087    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.052 ±       0.298    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    429179.724 ±    1440.607   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.205 ±       1.759  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.750 ±       6.451    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     24671.806 ±     279.272   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1185.492 ±      48.827  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75620.063 ±    2696.595    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.547 ±    1414.002  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     68369.987 ±   89625.825    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.841 ±       5.385  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        53.639 ±     342.870    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13870.148 ±     839.574   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1357.236 ±      73.953  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    153986.787 ±    3280.805    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1341.892 ±       5.119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    152271.483 ±    9308.315    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.787 ±       6.247  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        89.881 ±     714.675    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13923.278 ±     570.574   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1251.142 ±      39.065  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    141404.472 ±    2691.653    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.666 ±    1152.772  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    136011.904 ±  129994.027    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.883 ±       6.413  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       101.144 ±     737.825    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    289789.357 ±   27260.076   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1728.533 ±     163.966  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9387.983 ±     301.374    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1613.002 ±    1418.061  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      8775.500 ±    7999.110    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.608 ±       5.010  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.397 ±      28.030    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12383.866 ±    1579.449   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1540.116 ±     211.344  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    195699.333 ±    3477.583    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1473.143 ±    1147.499  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    187132.892 ±  140539.099    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.229 ±       1.256  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        28.642 ±     157.007    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33555.425 ±     996.443   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1456.820 ±      98.694  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68324.737 ±    3236.276    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1475.272 ±    1146.401  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     69162.306 ±   52771.832    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       4.942  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.246 ±     234.469    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     79991.201 ±    2799.485   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2014.732 ±     114.077  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39636.335 ±     907.462    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2007.026 ±       9.457  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39488.943 ±    1415.541    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.754 ±       5.676  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.821 ±     111.398    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    624311.218 ±   29288.799   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       879.924 ±      39.752  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2217.773 ±      65.036    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.402 ±    1157.796  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2036.587 ±    2995.456    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.021 ±       0.183    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    721719.372 ±    9583.436   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.011 ±       0.096  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.025 ±       0.207    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     75037.623 ±    4624.079   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2179.953 ±     105.050  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45722.142 ±    1660.068    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2138.731 ±    1148.469  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     44877.946 ±   24812.718    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.858 ±       6.983  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        17.804 ±     144.894    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16269.590 ±    1328.901   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       865.000 ±      69.205  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83678.602 ±    2031.233    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       938.965 ±    1414.603  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     90775.334 ±  135866.950    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.787 ±       4.151    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     16872.125 ±     207.409   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       740.829 ±      10.830  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69102.578 ±    1527.581    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       667.969 ±       2.165  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62306.129 ±     810.016    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.778 ±       4.102    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    121672.110 ±     457.849   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       310.760 ±      26.941  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4019.152 ±     357.765    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.687 ±    1079.257  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2649.078 ±   13967.822    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.054 ±       0.464    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14736.444 ±    1546.857   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1142.552 ±      51.999  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    122066.520 ±    7683.945    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1068.733 ±    1408.160  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    114870.226 ±  158919.613    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.828 ±       7.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        85.930 ±     730.424    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     48096.926 ±     453.551   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1484.918 ±      32.961  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48589.299 ±    1273.125    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1475.970 ±    1159.141  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     48312.064 ±   38401.305    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.754 ±       6.221  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        24.633 ±     203.331    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     72326.989 ±   13929.118   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1537.974 ±     303.096  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33461.390 ±     934.370    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1472.685 ±    1156.443  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32027.368 ±   23444.422    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.780 ±       6.230  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        16.525 ±     132.067    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    299804.418 ±    6053.200   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       597.998 ±      12.979  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3139.046 ±      67.689    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.858 ±       3.223  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3511.048 ±      74.735    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.637 ±       5.266  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.343 ±      27.616    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    344185.786 ±   93595.326   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     66898.627 ±   10823.526   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1541.794 ±     227.657  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36273.163 ±     814.185    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.504 ±    1149.411  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34668.063 ±   25514.852    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.787 ±       6.462  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        19.943 ±     164.497    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    146259.252 ±    2743.536   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1913.284 ±      72.195  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20586.201 ±     488.769    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1742.421 ±    1410.551  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     18742.723 ±   15060.562    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.758 ±       6.258  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.161 ±      67.414    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    854154.932 ±   10492.366   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       483.294 ±      36.356  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       890.448 ±      64.888    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.599 ±    1404.647  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       736.029 ±    2587.285    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.001 ±       0.008  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.002 ±       0.014    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    387616.618 ±   27655.730   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       408.277 ±      35.321  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1657.890 ±     118.872    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.098 ±    1056.830  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1905.297 ±    4231.432    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.033 ±       0.175    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1153537.623 ±   41217.422   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       414.735 ±      40.640  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       565.866 ±      55.919    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.985 ±    1063.283  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       646.258 ±    1448.207    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     84408.405 ±     281.746   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3300.221 ±      64.889  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     61534.134 ±    1164.229    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3220.801 ±    1160.422  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     60052.971 ±   21619.834    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.054 ±       0.287  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.009 ±       5.346    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    272892.954 ±    5089.980   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1657.816 ±      66.471  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9561.193 ±     244.695    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.044 ±    1410.142  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9273.907 ±    7988.558    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.716 ±       4.906  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.125 ±      28.281    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1238872.966 ±   97836.975   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       436.396 ±      48.038  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       554.383 ±      42.685    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       502.105 ±    1111.177  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       638.886 ±    1402.677    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.003 ±       0.025  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.004 ±       0.032    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1510236.734 ±  121923.270   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       902.963 ±      79.862  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       941.004 ±      34.403    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       799.792 ±    1146.281  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       833.545 ±    1191.656    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1884951.109 ±  111923.369   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       664.970 ±      34.388  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       555.176 ±      18.749    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.226 ±       1.475  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       560.477 ±      33.803    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.060    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2047633.754 ±   70185.677   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     41702.452 ±     674.750   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2080.208 ±      38.278  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78502.264 ±     885.044    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2006.978 ±      14.097  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     75740.112 ±    1702.049    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.829 ±       5.624  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        31.432 ±     213.751    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     14402.899 ±     697.706   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1907.892 ±     108.756  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    208451.295 ±    5238.410    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.536 ±    1159.281  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    205138.233 ±  126596.114    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.766 ±       4.443  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        84.683 ±     491.074    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5    100315.107 ±    1366.318   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1342.952 ±      31.368  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21069.053 ±     343.236    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.325 ±       5.609  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20996.761 ±     338.389    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.837 ±       6.376  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.121 ±      99.986    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    252333.537 ±    1134.334   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       841.700 ±      24.070  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5249.255 ±     144.466    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.364 ±    1157.778  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5027.805 ±    7199.378    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.078 ±       0.447    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     12803.226 ±     242.727   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      1959.871 ±      69.888  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    240903.213 ±    5114.824    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2002.282 ±      14.028  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    246124.333 ±    5258.576    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.920 ±       7.744  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       113.320 ±     953.722    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33040.311 ±     659.127   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2775.361 ±      59.798  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    132200.927 ±    1122.225    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.413 ±      33.413  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    127919.950 ±    3619.788    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.594 ±       3.410    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    104183.791 ±   15596.835   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1474.375 ±     190.850  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22274.890 ±     776.636    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1468.490 ±    1148.781  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     22192.359 ±   17126.589    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.061 ±       0.529    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    174364.875 ±   22514.565   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       574.628 ±      96.408  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5185.779 ±     410.050    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.934 ±    1155.792  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4801.522 ±   10352.089    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    192122.997 ±     887.566   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49052.219 ±    1895.103   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3474.439 ±     122.953  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111459.447 ±     866.762    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3364.611 ±      64.296  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    107945.015 ±    5073.756    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.268 ±       1.412    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26011.936 ±    1017.671   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1400.368 ±      53.047  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84728.781 ±     625.618    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342.072 ±       7.044  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81207.418 ±    2907.525    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.791 ±       5.223  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        47.648 ±     314.891    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     29258.930 ±     367.187   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1196.679 ±      13.052  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64364.981 ±    1268.997    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.149 ±    1152.344  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     64799.595 ±   62410.048    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.858 ±       7.296  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        46.340 ±     394.200    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    630110.029 ±   58361.908   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1692.958 ±     160.320  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4228.308 ±     154.213    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1613.609 ±    1419.486  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4034.573 ±    3623.524    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.579 ±       4.148  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.423 ±      10.155    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     23902.914 ±     953.155   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1792.492 ±      76.988  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    118021.156 ±    1992.634    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1742.735 ±    1420.004  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    114789.742 ±   94386.434    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.337 ±       2.143  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        22.026 ±     139.635    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     73774.425 ±    1639.830   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1963.828 ±      56.961  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41889.054 ±    1114.433    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1877.085 ±    1157.747  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     40055.993 ±   25099.327    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.762 ±       4.772  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.362 ±     102.756    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    182950.762 ±   11539.611   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2049.768 ±     120.776  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17634.023 ±     399.762    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2007.040 ±       8.841  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17269.736 ±    1109.478    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.762 ±       6.516  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.514 ±      55.696    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1505645.702 ±   94457.509   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1295.159 ±      89.655  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1353.636 ±      37.354    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.460 ±       3.936  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1405.472 ±      90.456    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.641 ±       5.343  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.662 ±       5.516    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1770836.485 ±    3217.208   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.012 ±       0.098  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.010 ±       0.087    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    153682.975 ±    6110.315   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2000.004 ±     107.086  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20478.841 ±     410.643    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2006.889 ±      33.609  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20551.095 ±     641.440    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.342 ±       1.257    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     43121.455 ±    1837.338   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1592.224 ±      67.941  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     58108.780 ±    1575.862    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1470.617 ±    1157.436  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     53613.667 ±   40442.412    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.866 ±       7.369  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.229 ±     265.605    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    784839.696 ±   12350.034   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1574.288 ±      25.106  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3156.902 ±      41.527    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1613.177 ±    1413.890  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3235.898 ±    2858.048    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.629 ±       4.211  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.262 ±       8.448    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     32608.070 ±     530.068   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2323.270 ±      48.391  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    112128.464 ±    3847.730    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2286.254 ±    1408.900  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    110394.517 ±   69724.697    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.204 ±       1.622  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.865 ±      78.473    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    379743.860 ±   17717.761   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1082.532 ±      52.916  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4486.506 ±     120.074    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1071.334 ±    1412.021  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4439.814 ±    5846.787    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.658 ±       5.531  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.759 ±      23.196    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1880276.877 ±   57660.695   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1124.936 ±      70.891  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       941.491 ±      33.746    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1075.702 ±    1419.733  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       899.046 ±    1172.295    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.625 ±       5.199  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.519 ±       4.314    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2254744.571 ±    2343.636   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    245088.718 ±   16430.882   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1635.499 ±     143.481  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10501.946 ±     458.563    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1609.142 ±    1428.156  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10317.510 ±    8780.867    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.215 ±       0.949    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     72710.382 ±     926.997   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1610.514 ±      53.918  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34855.433 ±    1323.026    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.436 ±    1412.858  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     34816.881 ±   30731.070    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.783 ±       5.093  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        16.990 ±     110.564    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     78009.160 ±     730.526   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1019.179 ±      31.516  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20561.743 ±     644.429    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935.825 ±    1410.021  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18890.507 ±   28593.311    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.252 ±       1.447    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     89014.014 ±    2942.248   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1099.263 ±      51.738  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19433.729 ±     670.822    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.682 ±    1416.512  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19022.379 ±   25325.918    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.629 ±       5.279  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        11.282 ±      94.776    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     43081.473 ±    1263.986   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2020.740 ±     110.470  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73815.066 ±    2221.039    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2003.103 ±      12.540  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     73177.441 ±    2630.254    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.920 ±       5.937  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        33.924 ±     219.509    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    113300.529 ±    1678.108   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1086.524 ±      44.167  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15091.044 ±     718.172    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1071.900 ±    1413.565  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14896.537 ±   19741.654    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.716 ±       5.944  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.963 ±      82.673    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    322455.257 ±    4962.643   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       492.607 ±      35.483  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2404.229 ±     161.978    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.571 ±    1112.443  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2451.720 ±    5429.760    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    671142.920 ±   23675.308   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       852.263 ±      37.975  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1998.455 ±      60.090    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       805.425 ±    1156.359  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1890.524 ±    2746.621    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.010 ±       0.085    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    614280.640 ±  229588.412   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    226624.535 ±   20064.710   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       743.980 ±      63.235  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5166.265 ±      84.737    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       668.369 ±       2.381  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4643.113 ±     420.390    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.057 ±       0.491    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    124514.966 ±    3475.671   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1753.446 ±      81.077  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22162.546 ±     675.198    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1606.902 ±    1412.589  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20304.129 ±   17696.753    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.820 ±       6.662  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.382 ±      84.374    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    194004.777 ±   11268.121   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1178.255 ±      88.896  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9557.899 ±     297.935    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1198.200 ±    1146.689  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9723.742 ±    9351.074    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.100 ±       0.573    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    448946.639 ±   33252.197   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       301.295 ±      39.286  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1056.179 ±     115.707    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       306.967 ±    1079.033  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1079.835 ±    3797.957    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.014 ±       0.124    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     71033.194 ±    3935.774   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2868.975 ±     198.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63552.279 ±    1283.346    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2831.344 ±    1177.310  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62705.028 ±   24963.545    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.275 ±       0.968    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        21.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    186230.964 ±    5830.438   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1216.320 ±      68.039  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10277.898 ±     344.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.938 ±    1155.862  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10192.785 ±    9573.596    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.674 ±       5.116  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.663 ±      42.938    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    543429.509 ±   21624.313   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       552.455 ±      35.346  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1600.042 ±     111.413    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       534.009 ±    1149.496  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1550.408 ±    3338.058    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1130886.836 ±   37744.852   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       862.268 ±      22.538  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1200.055 ±      46.357    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.038 ±    1157.768  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1121.230 ±    1600.491    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.012 ±       0.061    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1261830.845 ±    1137.795   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    354879.378 ±   32467.958   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       996.461 ±      92.064  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4419.333 ±     193.750    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                          128  thrpt    5         0.002 ±       0.020  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                     128  thrpt    5         0.010 ±       0.088    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace                                       128  thrpt    5         0.007 ±       0.057  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                  128  thrpt    5         0.030 ±       0.255    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1070.203 ±    1416.440  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4749.003 ±    6307.650    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.849 ±       7.223  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.820 ±      32.495    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        46.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       600.064 ±      39.171   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1284.021 ±      21.185  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3366843.305 ±  175151.667    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1336.647 ±      11.860  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3504903.633 ±  199733.846    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.174 ±       9.663  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3048.498 ±   25058.564    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       587.350 ±      25.125   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1246.936 ±      64.174  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3338481.167 ±  110470.640    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1200.130 ±    1146.485  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3214949.487 ± 3091930.326    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.911 ±       6.570  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2419.190 ±   17421.310    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     50099.530 ±    3969.902   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       835.678 ±     100.321  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26243.952 ±    1342.858    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       804.356 ±    1154.747  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     25165.085 ±   34221.137    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.401 ±       2.315    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       572.534 ±      37.453   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1255.414 ±      51.905  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3450307.482 ±   94538.419    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1199.769 ±    1147.163  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3303697.665 ± 3234942.082    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.281 ±       8.839  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3530.967 ±   24295.370    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        36.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14744.295 ±    1836.457   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1168.197 ±     149.855  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    124685.016 ±    8371.992    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.235 ±    1408.858  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    113788.183 ±  146989.414    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.110 ±       9.509  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       117.519 ±    1007.231    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     18480.863 ±     337.264   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1114.858 ±      48.831  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     94931.270 ±    4356.957    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1066.835 ±    1405.962  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     90874.237 ±  120119.590    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.074 ±       8.981  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        90.915 ±     759.863    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    221955.187 ±    8134.888   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       808.409 ±      73.840  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5731.072 ±     429.721    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.594 ±    1147.884  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5689.059 ±    8112.804    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.059 ±       0.310    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    239908.237 ±   26249.264   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         1.792 ±      15.426  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        12.382 ±     106.593    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     18104.676 ±    1524.468   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1164.952 ±      78.509  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101281.104 ±    5275.728    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1201.833 ±    1150.202  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    104680.221 ±  102586.576    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.207 ±      10.216  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       103.537 ±     875.572    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        34.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1485433.504 ±  410121.765   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        65.708 ±      52.307  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        69.438 ±      46.724    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.326 ±     881.060  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       104.990 ±     903.998    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     82261.895 ±    3341.314   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3514.996 ±     119.183  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67252.095 ±    1446.198    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3381.335 ±      46.411  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     64699.548 ±    3066.967    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.080 ±       0.693    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        34.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1875179.998 ±   41399.808   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1011.356 ±      38.606  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       848.780 ±      45.932    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1067.584 ±    1407.359  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       896.700 ±    1190.518    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.010 ±       0.060    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2366279.035 ±  106626.173   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       660.260 ±      27.328  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       439.032 ±       9.188    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.007 ±       1.446  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       446.217 ±      20.051    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.006 ±       0.047    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2397894.075 ±   11605.577   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.452 ±       0.484  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.046 ±       0.393    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51217.348 ±    4217.410   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2211.786 ±     194.874  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     67958.589 ±    2295.356    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2137.349 ±    1159.217  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65646.622 ±   34005.741    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.891 ±       7.230  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.120 ±     219.517    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    873307.071 ±   19144.989   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2819.660 ±      85.202  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5081.242 ±      79.501    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2682.336 ±      30.552  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      4833.942 ±     132.734    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.042 ±       0.139  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.075 ±       0.252    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5176759.124 ±  819817.632   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       322.085 ±      69.711  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        97.887 ±      10.392    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.578 ±    1259.802  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        70.486 ±     376.921    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.002 ±       0.021    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         6.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1000445.445 ±   51738.879   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1178.413 ±      51.989  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1853.866 ±      51.711    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1196.433 ±    1145.010  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1884.483 ±    1830.883    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.007 ±       0.056    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9317073.433 ±  426914.815   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       439.975 ±      43.404  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.333 ±      10.307    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       371.106 ±    1328.622  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        63.084 ±     226.445    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.001 ±       0.012    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    474837.106 ±    8792.577   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2107.201 ±      68.074  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      6984.099 ±     192.194    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2016.003 ±      19.407  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6681.970 ±     159.990    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.212 ±       1.784  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.701 ±       5.889    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        15.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        25.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4632.410 ±     153.965   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2334.340 ±     148.687  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792977.557 ±   29662.011    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2269.823 ±    1399.883  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    770688.543 ±  461612.696    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.967 ±       7.090  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       332.868 ±    2447.643    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6761.322 ±     374.560   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2303.769 ±     188.851  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    536161.537 ±   19133.769    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2281.935 ±    1404.736  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    531307.802 ±  331752.561    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.200 ±       1.319  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        47.272 ±     312.234    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     47636.167 ±     324.020   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       791.402 ±      47.382  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26146.724 ±    1721.487    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       806.153 ±    1156.150  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     26645.210 ±   38421.793    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.275 ±       1.452    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        16.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4936.466 ±     161.214   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1035.380 ±      40.582  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    330094.729 ±   12745.963    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       937.337 ±    1412.600  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    298828.332 ±  450187.659    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.037 ±       0.130  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        11.912 ±      41.171    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5175.559 ±      44.007   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       647.661 ±      35.555  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    196910.118 ±   10352.693    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       530.625 ±    1142.221  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    161335.148 ±  347287.166    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         2.527 ±      13.323    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6467.767 ±     623.855   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       327.012 ±      62.004  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79536.673 ±    9940.531    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.722 ±    1216.554  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81828.144 ±  293111.814    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.004 ±       0.022  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         1.013 ±       5.341    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6655.045 ±      54.910   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       284.090 ±      34.651  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67184.138 ±    8639.356    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.630 ±    1078.955  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48476.062 ±  255600.864    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         1.976 ±      17.012    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      8041.788 ±     345.247   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1709.920 ±      17.737  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334663.177 ±   14058.867    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1740.471 ±    1412.305  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    340876.781 ±  281687.151    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.863 ±       5.071  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       167.420 ±     981.484    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     18946.566 ±     946.231   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       478.901 ±      23.264  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39787.141 ±    3511.879    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.721 ±    1401.560  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     33358.681 ±  117273.965    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.958 ±       8.158  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        79.475 ±     676.868    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     14562.387 ±    3610.255   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       401.318 ±     116.134  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43352.859 ±    4735.530    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       366.816 ±    1310.668  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     38603.381 ±  138067.676    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     23283.487 ±     345.270   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       439.065 ±      34.337  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29673.414 ±    2659.509    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.453 ±    1325.793  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     25080.220 ±   89698.484    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.282 ±       2.425    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4228.355 ±     144.394   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2605.016 ±     114.766  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    969556.988 ±   21882.784    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2419.252 ±    1414.470  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    901015.146 ±  543179.252    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.150 ±       0.738  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        56.081 ±     276.876    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10771.274 ±     252.006   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2182.470 ±      42.517  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    318879.870 ±    8018.074    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2141.058 ±    1147.018  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    312898.070 ±  170460.150    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.812 ±       6.549  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       117.568 ±     946.900    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     55467.402 ±    6514.316   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       533.630 ±      67.942  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15138.458 ±    1036.282    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       531.754 ±    1144.642  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     15160.470 ±   32711.380    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.367 ±       2.135    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     45125.613 ±    2135.519   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       671.053 ±      30.922  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23403.428 ±     305.418    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       663.055 ±       5.833  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     23127.374 ±    1201.981    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.292 ±       1.541    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     95346.533 ±     440.084   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       736.848 ±       8.236  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12162.381 ±     189.178    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       670.821 ±       1.672  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11072.517 ±      59.050    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.206 ±       1.183    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    106273.071 ±     127.939   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.036 ±       0.310  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.537 ±       4.590    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7913.939 ±      51.907   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2391.378 ±      31.881  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    475492.867 ±    7396.412    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2287.597 ±    1397.713  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    454941.089 ±  280613.622    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.183 ±       1.077  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        36.445 ±     214.489    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   8562290.561 ±   66673.241   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4706.567 ±      40.328  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       865.052 ±       9.127    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4482.648 ±    1424.860  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       823.930 ±     263.805    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.046 ±       0.036  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.008 ±       0.007    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        42.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38265902.511 ±  124286.514   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10091889.335 ±  307911.154   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3462.422 ±     136.796  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       539.901 ±       6.408    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3230.504 ±    1137.290  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       503.539 ±     167.072    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.002 ±       0.011    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        32.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  49387513.999 ± 1433381.377   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         2.240 ±      16.722  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.072 ±       0.540    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31545141.332 ±  525047.505   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       824.863 ±      27.559  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.148 ±       1.892    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.772 ±    1156.166  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.268 ±      58.127    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.004    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   8865458.718 ±  271070.998   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3980.663 ±      74.607  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       706.562 ±      12.050    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3777.750 ±    1448.096  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       670.930 ±     274.384    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.001 ±       0.008    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        28.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  14272945.216 ±  351388.406   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1722.041 ±      52.510  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       189.876 ±       4.091    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.707 ±    1416.730  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       177.542 ±     154.819    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.683 ±       5.256  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.075 ±       0.579    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42106807.957 ± 2290900.715   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       879.897 ±      59.764  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.887 ±       1.175    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.615 ±    1148.829  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        29.923 ±      42.846    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.009 ±       0.049  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        18.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13221711.878 ±   70980.987   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2721.168 ±      42.905  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.906 ±       3.938    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2681.481 ±      35.520  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       319.182 ±       3.032    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.021 ±       0.139  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.002 ±       0.017    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  48887050.596 ± 3540722.902   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1022.362 ±      83.811  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.911 ±       1.014    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1074.330 ±    1416.715  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        34.588 ±      45.643    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.003    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62361484.010 ± 3449183.424   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17959658.190 ±  173631.950   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1695.999 ±      34.745  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.628 ±       4.241    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1613.147 ±    1417.818  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       141.428 ±     125.661    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.004    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2715132.200 ±  106024.246   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2185.405 ±      53.732  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1266.797 ±      47.500    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2144.997 ±    1160.011  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1244.690 ±     725.244    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.720 ±       5.765  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.419 ±       3.353    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    171265.690 ±    3394.506   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3262.632 ±      89.857  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29978.402 ±     450.853    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3100.018 ±    1395.234  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28480.247 ±   12641.811    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.088  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.153 ±       0.805    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     35932.335 ±    1232.666   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2579.374 ±     124.667  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    112966.803 ±    3740.714    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2425.877 ±    1415.127  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    106207.445 ±   60790.360    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.150 ±       1.246  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.518 ±      54.182    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    142829.217 ±    8176.418   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1241.834 ±      97.287  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13681.442 ±     653.548    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.385 ±    1151.998  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13255.673 ±   12660.563    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.837 ±       6.017  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.110 ±      65.510    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    438815.408 ±   17750.251   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1760.174 ±     111.357  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6312.235 ±     281.888    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1611.908 ±    1417.673  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5782.674 ±    5125.695    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.666 ±       5.559  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.373 ±      19.792    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    480386.489 ±   23148.307   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1383.488 ±      64.323  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4532.228 ±      71.798    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1344.016 ±       3.577  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4403.442 ±     219.907    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.645 ±       4.785  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.141 ±      15.936    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     73615.142 ±    5637.675   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1527.809 ±      93.314  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     32664.888 ±     797.992    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                            128  thrpt    5         0.004 ±       0.031  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                       128  thrpt    5         0.081 ±       0.698    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace                                         128  thrpt    5         0.011 ±       0.092  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                    128  thrpt    5         0.238 ±       2.048    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1470.059 ±    1177.872  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     31544.135 ±   28329.700    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                        128  thrpt    5         0.333 ±       2.871  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                                   128  thrpt    5         7.388 ±      63.613    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.974 ±       8.344  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        21.587 ±     184.921    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        62.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    322257.453 ±    2356.803   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2411.707 ±      52.397  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11777.633 ±     234.676    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2414.537 ±    1421.862  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11793.124 ±    6992.530    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.745 ±       6.150  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.650 ±      30.126    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        18.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    485719.448 ±   14281.989   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1273.712 ±      53.959  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4126.653 ±      75.082    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202.237 ±    1148.191  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3889.635 ±    3646.638    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.862 ±       7.153  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.828 ±      23.485    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1335181.165 ±   99422.082   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2706.665 ±     209.997  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3190.345 ±      35.679    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2556.485 ±    1142.778  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3008.725 ±    1152.852    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.015 ±       0.051    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    106413.100 ±    1541.524   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3568.922 ±      86.867  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52772.574 ±     561.261    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3497.581 ±    1211.281  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     51714.681 ±   17691.502    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.308 ±       1.188    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        35.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    341216.959 ±   21845.238   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1176.759 ±      56.915  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5427.452 ±     111.585    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1207.406 ±    1155.017  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5578.162 ±    5448.731    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.699 ±       5.978  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.292 ±      28.137    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    848871.084 ±   30109.141   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       633.886 ±      25.633  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1175.276 ±      24.157    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       666.859 ±       2.737  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1236.495 ±      44.797    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±       0.067    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2129617.545 ±   29303.570   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1010.266 ±      42.914  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       746.581 ±      39.619    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.822 ±    1417.603  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       695.897 ±    1056.729    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±       0.027    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        20.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2353490.970 ±    4237.785   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    481552.316 ±   24966.887   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       717.963 ±      41.702  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2346.492 ±     117.581    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.740 ±    1149.878  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2629.786 ±    3875.299    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        18.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     60277.577 ±    2948.647   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2106.819 ±     124.814  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     54995.016 ±    1138.912    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2010.151 ±       9.871  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     52479.858 ±    2741.393    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.786 ±       6.500  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.962 ±     173.519    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     94749.311 ±    5863.036   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1750.065 ±     112.874  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29066.628 ±    1069.808    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1735.376 ±    1402.502  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28832.877 ±   23483.118    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.912 ±       7.672  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.457 ±     130.113    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    166102.051 ±    8571.241   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2641.041 ±      91.317  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25025.450 ±     479.292    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2553.268 ±    1160.617  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24212.648 ±   11628.199    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±       0.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.157 ±       0.338    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33782.880 ±     238.034   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2259.132 ±      43.325  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105246.875 ±    2060.818    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2147.587 ±    1156.272  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100066.985 ±   54545.217    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.096 ±       0.824  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.451 ±      38.328    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    159354.317 ±   11648.300   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1069.033 ±      62.117  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10559.079 ±     395.450    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.233 ±    1409.231  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10603.654 ±   14436.288    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.762 ±       6.470  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.633 ±      64.832    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    458276.155 ±   25807.679   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       518.814 ±      50.952  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1781.533 ±     110.188    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.719 ±    1118.370  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1731.246 ±    3812.186    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.028 ±       0.245    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    510855.374 ±    3271.645   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.363 ±       1.442  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.524 ±       4.506    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     76036.476 ±    1385.293   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1358.568 ±      31.875  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     28118.918 ±     886.173    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1336.897 ±      15.279  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27670.500 ±     758.392    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.119 ±       0.757  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.455 ±      15.625    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] MathBenchmark.sumDoubles                                                                            128  thrpt    5   8561423.451 ±  208428.112   ops/s
[info] MathBenchmark.sumDoubles:·gc.alloc.rate                                                             128  thrpt    5         1.782 ±      15.340  MB/sec
[info] MathBenchmark.sumDoubles:·gc.alloc.rate.norm                                                        128  thrpt    5         0.331 ±       2.852    B/op
[info] MathBenchmark.sumDoubles:·gc.count                                                                  128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled16                                                                  128  thrpt    5  19038665.618 ±   81160.527   ops/s
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate                                                   128  thrpt    5         0.147 ±       1.197  MB/sec
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm                                              128  thrpt    5         0.012 ±       0.099    B/op
[info] MathBenchmark.sumDoublesUnrolled16:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled4                                                                   128  thrpt    5  20389414.481 ±   46913.147   ops/s
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate                                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm                                               128  thrpt    5        ≈ 10⁻⁵                  B/op
[info] MathBenchmark.sumDoublesUnrolled4:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled8                                                                   128  thrpt    5  24400553.914 ± 1381499.060   ops/s
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate                                                    128  thrpt    5         2.764 ±      23.795  MB/sec
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm                                               128  thrpt    5         0.183 ±       1.576    B/op
[info] MathBenchmark.sumDoublesUnrolled8:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongs                                                                              128  thrpt    5   8591259.358 ±    8073.212   ops/s
[info] MathBenchmark.sumLongs:·gc.alloc.rate                                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MathBenchmark.sumLongs:·gc.alloc.rate.norm                                                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] MathBenchmark.sumLongs:·gc.count                                                                    128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled16                                                                    128  thrpt    5  19077922.560 ±  175730.327   ops/s
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate                                                     128  thrpt    5         0.008 ±       0.069  MB/sec
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm                                                128  thrpt    5         0.001 ±       0.006    B/op
[info] MathBenchmark.sumLongsUnrolled16:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled4                                                                     128  thrpt    5  20362188.396 ±   54117.300   ops/s
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate                                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm                                                 128  thrpt    5        ≈ 10⁻⁵                  B/op
[info] MathBenchmark.sumLongsUnrolled4:·gc.count                                                           128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled8                                                                     128  thrpt    5  24564701.146 ±   68676.194   ops/s
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate                                                      128  thrpt    5         0.008 ±       0.069  MB/sec
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm                                                 128  thrpt    5         0.001 ±       0.004    B/op
[info] MathBenchmark.sumLongsUnrolled8:·gc.count                                                           128  thrpt    5           ≈ 0                counts
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2932826.912 ±   20455.290   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3779.554 ±      34.128  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2027.888 ±      25.158    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3639.232 ±    1422.007  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1952.765 ±     771.204    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.009 ±       0.036    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        37.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    812358.554 ±   42744.271   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       475.727 ±      40.786  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       921.571 ±      50.225    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.832 ±    1405.467  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       771.605 ±    2712.303    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.011 ±       0.095  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.021 ±       0.183    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    346046.261 ±   12566.532   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       829.114 ±      64.571  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3770.956 ±     293.549    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.805 ±    1149.167  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3645.411 ±    5287.424    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.002 ±       0.018  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.010 ±       0.082    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    722025.154 ±   32472.075   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       660.084 ±      38.932  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1438.587 ±      68.190    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.143 ±       2.285  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1465.004 ±      69.167    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.077    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3260610.240 ±  159612.919   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      1978.489 ±     126.744  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       954.973 ±      14.753    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2019.842 ±       5.568  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       975.101 ±      48.774    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.512 ±       4.365  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.250 ±       2.127    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7631605.531 ±   88886.338   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       838.905 ±      49.146  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       173.000 ±       9.296    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       941.223 ±    1417.419  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       194.037 ±     291.365    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.001 ±       0.007    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    240557.217 ±    6212.021   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2139.023 ±      74.398  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13992.848 ±     306.833    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2146.733 ±    1147.722  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     14043.920 ±    7519.305    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.275 ±       2.322  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.798 ±      15.189    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1561488.581 ±  134424.152   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        92.868 ±      26.235  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        93.681 ±      30.372    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.358 ±     881.331  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       107.365 ±     924.446    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.115 ±       0.991  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.121 ±       1.039    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     67723.788 ±    3579.774   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2985.893 ±     136.955  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69388.693 ±    2049.458    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2834.183 ±    1162.204  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     65858.363 ±   26582.296    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.021 ±       0.113  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.480 ±       2.612    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        21.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1603430.692 ±   19238.936   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       868.455 ±      35.339  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       852.414 ±      44.129    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       934.720 ±    1408.214  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       918.287 ±    1394.181    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.016 ±       0.103    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1686027.562 ±   77393.190   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       486.758 ±      56.810  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       454.269 ±      34.216    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.550 ±    1117.827  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       469.228 ±    1038.923    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1796454.262 ±   35251.768   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.321 ±       0.384  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.050 ±       0.433    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     52134.525 ±    2735.298   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2252.220 ±     111.560  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67987.011 ±    2561.132    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2153.908 ±    1173.803  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65001.367 ±   34558.416    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.081 ±       0.523  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.428 ±      15.582    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    273999.868 ±    1072.677   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1098.322 ±      41.834  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6308.804 ±     258.010    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.727 ±    1417.605  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6180.347 ±    8159.524    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.566 ±       4.696  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.247 ±      26.933    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     40088.578 ±     332.218   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1989.382 ±      68.619  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     78100.313 ±    2227.462    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1880.914 ±    1171.155  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     73823.542 ±   45526.748    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.142 ±       1.131  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.560 ±      44.427    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        21.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    120789.691 ±    2286.706   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1217.822 ±      65.120  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15867.599 ±     670.709    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.025 ±    1151.413  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15676.868 ±   15025.796    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.837 ±       6.180  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        10.962 ±      81.105    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        33.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    338883.999 ±    5399.976   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       474.840 ±      34.153  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2205.399 ±     188.650    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504.539 ±    1117.862  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2347.222 ±    5201.032    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.039 ±       0.333    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    368108.963 ±    2222.157   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.754 ±       0.111  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.048 ±       0.406    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     60054.827 ±    3526.811   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1233.787 ±      80.509  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     32330.493 ±     549.812    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                    128  thrpt    5         0.003 ±       0.029  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm               128  thrpt    5         0.092 ±       0.790    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace                                 128  thrpt    5         0.010 ±       0.089  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm                            128  thrpt    5         0.277 ±       2.386    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1180.410 ±    1117.904  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     30964.000 ±   29580.935    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.016 ±       8.746  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        27.267 ±     234.774    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        59.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73599.038 ±    4162.369   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1633.067 ±      69.726  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     34918.513 ±    1167.692    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1611.040 ±    1413.917  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34487.810 ±   31149.507    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.762 ±       4.763  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.557 ±     104.343    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        28.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    132204.649 ±    3314.510   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       904.394 ±      23.463  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10765.714 ±     399.395    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       800.902 ±    1149.504  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9544.043 ±   13883.543    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    293161.302 ±   12174.631   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1245.355 ±      43.566  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6686.048 ±     281.323    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1210.279 ±    1158.350  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6504.377 ±    6308.155    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.662 ±       4.579  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.577 ±      24.818    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     33245.956 ±     443.588   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1672.234 ±      52.781  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     79157.163 ±    3071.695    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1605.013 ±    1399.158  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     76002.128 ±   66873.102    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.196 ±       1.465  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         9.296 ±      69.589    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        20.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    181576.948 ±    7048.008   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1025.975 ±      15.997  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8893.349 ±     289.081    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       935.350 ±    1409.507  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8130.779 ±   12540.594    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.145 ±       0.580    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        25.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    482813.263 ±   12387.302   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1461.289 ±      49.283  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4762.192 ±      95.701    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1477.959 ±    1163.946  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4815.939 ±    3772.212    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.704 ±       5.658  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.291 ±      18.406    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        25.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    526737.968 ±   13470.377   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       998.410 ±      38.646  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2982.671 ±     122.950    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1074.815 ±    1416.767  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      3215.358 ±    4287.004    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.037 ±       0.132    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     74801.740 ±    3349.864   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1338.182 ±      44.031  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     28154.466 ±     656.354    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1335.598 ±       6.525  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     28102.015 ±    1267.011    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.956 ±       7.221  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        19.944 ±     150.195    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     99400.230 ±    5581.525   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1632.831 ±      78.032  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25851.600 ±     418.706    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1610.353 ±    1413.535  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25552.125 ±   23616.698    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.770 ±       4.740  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.125 ±      74.596    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    179744.306 ±    4798.213   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       757.227 ±      30.641  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6629.033 ±     110.569    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.333 ±       2.473  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5833.633 ±     154.018    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.036 ±       0.313    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    278671.520 ±   18622.130   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1020.063 ±      22.504  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5761.934 ±     434.963    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.140 ±    1418.272  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5335.655 ±    8295.283    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.023 ±       0.201    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     66484.859 ±     558.587   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2576.741 ±      41.371  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     60995.010 ±    1044.255    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2407.179 ±    1427.462  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56987.625 ±   33978.988    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.117 ±       0.709  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.760 ±      16.796    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    203709.708 ±   11938.301   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1424.293 ±     100.118  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     11002.985 ±     252.611    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.660 ±       5.372  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10366.889 ±     630.870    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.716 ±       5.105  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.512 ±      39.367    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    507954.386 ±   18158.912   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       413.910 ±      44.194  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1282.386 ±     126.325    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.114 ±    1056.853  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1462.775 ±    3272.801    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.013 ±       0.111    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    645941.245 ±    7557.067   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       357.758 ±      32.878  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       871.571 ±      88.719    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.866 ±    1217.262  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       826.993 ±    2969.109    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.020 ±       0.107    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    691832.606 ±    9431.908   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.034 ±       0.097  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35890.552 ±     708.633   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1889.200 ±      59.304  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     82837.956 ±    3085.725    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1740.895 ±    1412.824  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     76358.121 ±   62453.452    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.795 ±       6.668  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        34.826 ±     292.009    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    866766.563 ±    3515.911   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2335.612 ±      78.524  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4240.608 ±     147.218    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2275.798 ±    1403.501  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      4132.341 ±    2559.076    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.847 ±       6.806  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.537 ±      12.343    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1845954.861 ±   46602.360   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1170.371 ±      21.799  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       997.853 ±      35.639    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1068.700 ±    1408.102  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       912.548 ±    1217.636    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.895 ±       7.550  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.755 ±       6.369    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8256368.284 ±  718244.702   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       261.310 ±      52.864  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.797 ±       8.407    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204.646 ±    1079.038  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        38.827 ±     204.729    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.033 ±       0.287  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.006 ±       0.054    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         4.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    311064.426 ±   10094.321   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2084.947 ±      82.528  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10548.361 ±     155.680    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2013.397 ±      16.053  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5     10187.159 ±     405.794    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.337 ±       1.555  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.702 ±       7.840    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1141569.783 ±   25039.196   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1874.160 ±      46.617  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2583.842 ±      59.014    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1873.318 ±    1146.009  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2583.686 ±    1603.774    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.791 ±       6.633  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.085 ±       9.096    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2723706.083 ±  163801.583   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1194.996 ±      63.054  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       690.518 ±      13.873    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1203.891 ±    1151.865  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       696.736 ±     679.375    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.818 ±       6.755  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.470 ±       3.876    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6353991.218 ±  223311.560   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       737.787 ±      15.845  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       182.760 ±       7.302    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       804.964 ±    1152.244  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       199.678 ±     290.855    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6828131.206 ±   76094.205   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       432.782 ±      39.603  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.758 ±      10.030    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.836 ±    1062.792  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       109.106 ±     245.150    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        13.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    426236.226 ±   17289.961   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2344.723 ±      85.434  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8657.671 ±      88.395    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2266.954 ±    1405.099  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8366.023 ±    5033.644    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.983 ±       8.416  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.624 ±      31.035    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     82219.662 ±    4830.128   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2300.171 ±     170.016  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44028.240 ±    1529.679    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2286.736 ±    1410.499  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     43777.854 ±   27040.939    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.075 ±       0.231  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         1.426 ±       4.346    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        17.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    127480.020 ±    5737.429   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2013.332 ±      75.692  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24853.606 ±     474.621    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1868.820 ±    1150.950  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23068.996 ±   14190.312    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.920 ±       6.194  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.304 ±      75.899    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    178429.489 ±    7065.217   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2716.771 ±     111.326  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23963.746 ±     533.573    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2689.268 ±      24.994  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     23723.268 ±    1116.905    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.037 ±       0.215  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.330 ±       1.897    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     60397.597 ±    1789.125   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3060.928 ±     138.686  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79753.054 ±    2119.689    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2950.180 ±    1409.583  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     76841.629 ±   35562.211    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.025 ±       0.174  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.646 ±       4.480    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        29.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    188740.402 ±    8182.917   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1337.212 ±      16.884  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11151.499 ±     527.958    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1341.245 ±       4.055  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     11185.165 ±     525.154    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.699 ±       5.844  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         5.948 ±      49.731    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    464186.046 ±   28890.621   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       415.053 ±      30.713  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1407.282 ±     105.268    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       471.010 ±    1056.523  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1604.319 ±    3596.886    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.108  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.042 ±       0.361    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    646511.583 ±   28680.556   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       357.778 ±      37.164  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       870.946 ±      81.955    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.747 ±    1216.646  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       824.454 ±    2969.974    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.010 ±       0.088    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    716550.888 ±    4451.326   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.539 ±       2.144  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.560 ±       4.813    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35173.210 ±     911.177   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1918.078 ±      58.742  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85818.008 ±    2657.017    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1873.737 ±    1145.770  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     83843.668 ±   51509.289    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.816 ±       6.497  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.500 ±     290.368    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3481136.299 ±   24161.736   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2940.720 ±      65.956  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1329.364 ±      25.523    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2823.548 ±    1157.205  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1276.420 ±     524.169    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.008 ±       0.030    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   6299913.266 ±  152794.229   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1221.676 ±      41.466  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       305.191 ±       9.856    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1201.255 ±    1149.552  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       300.280 ±     289.635    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.952 ±       8.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.237 ±       2.008    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4155387.206 ±   36366.046   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2297.164 ±      73.340  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       870.008 ±      24.500    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2274.311 ±    1414.561  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       861.512 ±     540.554    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.799 ±       6.704  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.303 ±       2.543    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6660712.166 ±  322974.529   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1290.925 ±      36.334  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       305.043 ±      11.220    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.130 ±    1157.921  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       286.414 ±     279.670    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.637 ±       5.003  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.153 ±       1.199    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4242115.120 ±  113272.099   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2543.213 ±     109.537  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       943.406 ±      32.151    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2411.208 ±    1416.778  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       894.789 ±     535.425    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.092 ±       0.574  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.034 ±       0.213    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2216035.826 ±    9883.823   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1317.490 ±      57.757  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       935.633 ±      40.238    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1208.122 ±    1156.618  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       857.982 ±     821.614    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.641 ±       5.387  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.456 ±       3.833    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5983874.574 ±  252342.707   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       602.853 ±      14.748  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       158.570 ±       4.522    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       665.142 ±       1.604  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       174.962 ±       7.298    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.007 ±       0.053  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.002 ±       0.014    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4644292.313 ±  266733.802   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1258.557 ±      83.270  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       426.478 ±       7.130    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1205.088 ±    1151.366  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       408.340 ±     389.803    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.774 ±       5.671  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.263 ±       1.927    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6029513.824 ±  158607.479   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       601.007 ±      35.349  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.858 ±      10.472    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       536.766 ±    1155.430  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.288 ±     302.011    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.003 ±       0.019    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6444049.032 ±  229529.546   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.137 ±       1.181  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.034 ±       0.293    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4585300.790 ±  196862.708   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1299.512 ±      66.536  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       446.035 ±       7.495    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1340.298 ±       4.099  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       460.086 ±      19.815    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.783 ±       6.650  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.269 ±       2.283    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1541165.557 ±   27059.224   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2137.242 ±      70.788  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2182.303 ±      43.661    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2013.249 ±      11.086  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2055.750 ±      35.383    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.731 ±       5.672  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.746 ±       5.787    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2894994.152 ±   22846.554   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       558.823 ±      32.396  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       303.800 ±      18.932    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       532.287 ±    1145.787  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       289.597 ±     623.380    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.010 ±       0.084  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.005 ±       0.046    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1687219.159 ±   73597.383   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       924.644 ±      49.679  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       862.518 ±      24.313    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       802.437 ±    1152.009  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       748.274 ±    1068.644    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.004 ±       0.033    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2426193.569 ±   48355.943   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       470.722 ±      48.127  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       305.356 ±      37.040    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       370.949 ±    1327.868  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       241.325 ±     864.333    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1723411.300 ±   45232.136   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       978.938 ±      48.707  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       893.939 ±      47.596    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       937.232 ±    1411.761  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       857.220 ±    1308.478    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.015 ±       0.054  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.013 ±       0.049    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1835185.976 ±   20345.889   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1402.379 ±      46.054  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1202.465 ±      27.345    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.915 ±       4.081  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1151.500 ±      15.009    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.637 ±       4.614  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.546 ±       3.952    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2792939.971 ±   32963.113   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       750.748 ±      29.980  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       423.058 ±      21.561    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       800.314 ±    1149.330  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       451.319 ±     654.236    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.018 ±       0.092  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.010 ±       0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2957000.397 ±  116434.442   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1296.163 ±      49.785  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       689.800 ±      11.876    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.467 ±    1151.487  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       641.966 ±     618.402    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.718 ±       6.140  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.380 ±       3.250    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3370557.473 ±   25442.060   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       893.532 ±      26.813  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       417.193 ±      13.550    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       805.964 ±    1155.912  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       376.357 ±     540.696    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.010 ±       0.037    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3644260.594 ±    5982.787   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2880592.396 ±   42110.244   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1428.303 ±      33.130  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       780.329 ±       8.289    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1341.900 ±       5.441  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       733.138 ±      12.732    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.699 ±       4.757  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.382 ±       2.599    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11671.872 ±     545.789   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1365.680 ±      91.619  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    184134.842 ±    4211.149    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1336.783 ±       4.946  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    180269.259 ±    8623.137    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.895 ±       6.787  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       119.957 ±     909.004    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        35.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     22536.640 ±    1621.050   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       350.651 ±      48.062  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24499.124 ±    4830.329    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.677 ±    1206.127  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23637.546 ±   84313.638    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.886 ±       5.130    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22682.397 ±    1052.077   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       257.593 ±      34.225  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17878.583 ±    3033.870    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.965 ±    1079.025  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21413.440 ±   75283.115    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.017 ±       0.143  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.152 ±       9.920    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7467.704 ±     163.620   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2108.962 ±      33.205  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    444423.013 ±   10199.173    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2141.565 ±    1168.594  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    451486.763 ±  254055.235    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.429 ±       3.217  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5        89.937 ±     674.563    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     63309.810 ±    1463.508   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       816.590 ±      40.802  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20299.163 ±     723.494    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.377 ±    1144.291  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     19802.652 ±   28064.486    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.207 ±       1.089    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     72355.759 ±    1610.995   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       483.386 ±      31.111  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10514.780 ±     802.752    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       501.692 ±    1110.056  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     10925.165 ±   24200.028    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.183 ±       1.575    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     74685.904 ±     646.231   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        23.148 ±      25.765  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       487.987 ±     548.854    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       102.327 ±     881.069  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      2164.918 ±   18640.601    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    311675.096 ±    7163.917   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1861.262 ±      88.230  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9397.812 ±     341.547    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1744.054 ±    1414.574  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      8806.136 ±    7140.992    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.720 ±       5.934  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.652 ±      30.091    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    504351.714 ±    5239.344   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       585.420 ±      31.232  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1826.716 ±      98.589    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.687 ±    1146.649  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1662.615 ±    3578.960    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.026 ±       0.137    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1262246.051 ±   53697.644   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       680.783 ±      30.778  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       848.785 ±      21.233    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.131 ±       0.816  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       836.823 ±      35.298    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.015 ±       0.089    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    103759.560 ±    3098.052   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3316.975 ±     147.277  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50305.138 ±    1043.837    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3221.687 ±    1158.902  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     48877.067 ±   18239.636    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.017 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.253 ±       0.545    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        33.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    341955.854 ±   11875.541   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1197.491 ±      72.485  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5511.031 ±     239.201    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.801 ±    1154.467  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5560.178 ±    5333.638    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.687 ±       5.738  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.134 ±      26.158    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    760919.331 ±   70693.407   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       598.113 ±      61.459  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1236.927 ±      19.089    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       665.944 ±       3.341  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1377.936 ±     133.797    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.824 ±       6.964  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.681 ±      14.197    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1605722.408 ±  138281.659   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       763.714 ±      28.758  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       748.644 ±      39.603    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       805.891 ±    1156.775  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       795.503 ±    1238.348    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±       0.065    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        16.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1722901.165 ±   61874.779   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.159 ±       1.370  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.146 ±       1.251    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    439984.213 ±   31158.493   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       670.599 ±      48.114  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2398.544 ±      44.946    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       668.330 ±       2.077  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2391.084 ±     175.275    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.045 ±       0.261    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7190 s, completed May 12, 2018 2:09:48 AM
