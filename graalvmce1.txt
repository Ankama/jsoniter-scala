[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 30 черв. 2018 17:48:25
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.28.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d7(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d11(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d10(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e11(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131052,449 ops/s
[info] # Warmup Iteration   2: 778981,917 ops/s
[info] # Warmup Iteration   3: 910998,712 ops/s
[info] # Warmup Iteration   4: 912842,510 ops/s
[info] # Warmup Iteration   5: 914912,173 ops/s
[info] Iteration   1: 912867,027 ops/s
[info]                  ·gc.alloc.rate:                   2656,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              4577,670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4612,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 926060,209 ops/s
[info]                  ·gc.alloc.rate:                   2654,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              4509,718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3407,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 905492,153 ops/s
[info]                  ·gc.alloc.rate:                   2650,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              4605,493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4652,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 919974,773 ops/s
[info]                  ·gc.alloc.rate:                   2692,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4604,412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4591,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 917225,649 ops/s
[info]                  ·gc.alloc.rate:               2685,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          4607,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4618,754 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   916323,962 ±(99.9%) 29715,800 ops/s [Average]
[info]   (min, avg, max) = (905492,153, 916323,962, 926060,209), stdev = 7717,099
[info]   CI (99.9%): [886608,163, 946039,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2667,900 ±(99.9%) 75,829 MB/sec [Average]
[info]   (min, avg, max) = (2650,627, 2667,900, 2692,467), stdev = 19,693
[info]   CI (99.9%): [2592,071, 2743,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4580,892 ±(99.9%) 160,217 B/op [Average]
[info]   (min, avg, max) = (4509,718, 4580,892, 4607,165), stdev = 41,608
[info]   CI (99.9%): [4420,675, 4741,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2547,278 ±(99.9%) 1166,916 MB/sec [Average]
[info]   (min, avg, max) = (2005,305, 2547,278, 2692,715), stdev = 303,044
[info]   CI (99.9%): [1380,362, 3714,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4376,261 ±(99.9%) 2087,964 B/op [Average]
[info]   (min, avg, max) = (3407,066, 4376,261, 4652,130), stdev = 542,238
[info]   CI (99.9%): [2288,297, 6464,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,072), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125921,579 ops/s
[info] # Warmup Iteration   2: 1892279,271 ops/s
[info] # Warmup Iteration   3: 2195700,789 ops/s
[info] # Warmup Iteration   4: 2199314,269 ops/s
[info] # Warmup Iteration   5: 2205075,066 ops/s
[info] Iteration   1: 2195470,107 ops/s
[info]                  ·gc.alloc.rate:                   1467,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1051,741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2175607,160 ops/s
[info]                  ·gc.alloc.rate:                   1432,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1036,169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 2208813,177 ops/s
[info]                  ·gc.alloc.rate:                   1465,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1043,664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 2201028,554 ops/s
[info]                  ·gc.alloc.rate:                   1458,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1042,825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2186301,959 ops/s
[info]                  ·gc.alloc.rate:               1463,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          1053,187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 959,519 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   2193444,191 ±(99.9%) 49724,167 ops/s [Average]
[info]   (min, avg, max) = (2175607,160, 2193444,191, 2208813,177), stdev = 12913,208
[info]   CI (99.9%): [2143720,025, 2243168,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1457,708 ±(99.9%) 54,753 MB/sec [Average]
[info]   (min, avg, max) = (1432,929, 1457,708, 1467,658), stdev = 14,219
[info]   CI (99.9%): [1402,955, 1512,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1045,517 ±(99.9%) 26,930 B/op [Average]
[info]   (min, avg, max) = (1036,169, 1045,517, 1053,187), stdev = 6,994
[info]   CI (99.9%): [1018,587, 1072,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1335,999 ±(99.9%) 6,343 MB/sec [Average]
[info]   (min, avg, max) = (1333,467, 1335,999, 1337,927), stdev = 1,647
[info]   CI (99.9%): [1329,656, 1342,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   958,254 ±(99.9%) 20,462 B/op [Average]
[info]   (min, avg, max) = (952,881, 958,254, 966,666), stdev = 5,314
[info]   CI (99.9%): [937,792, 978,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,875 ±(99.9%) 7,375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,875, 4,301), stdev = 1,915
[info]   CI (99.9%): [≈ 0, 8,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,623 ±(99.9%) 5,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,623, 3,063), stdev = 1,364
[info]   CI (99.9%): [≈ 0, 5,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:10:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2554416,158 ops/s
[info] # Warmup Iteration   2: 6136422,496 ops/s
[info] # Warmup Iteration   3: 6672955,195 ops/s
[info] # Warmup Iteration   4: 6764326,578 ops/s
[info] # Warmup Iteration   5: 6769187,392 ops/s
[info] Iteration   1: 6732966,417 ops/s
[info]                  ·gc.alloc.rate:               462,502 MB/sec
[info]                  ·gc.alloc.rate.norm:          108,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119,587 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 6785425,563 ops/s
[info]                  ·gc.alloc.rate:      448,541 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6761515,391 ops/s
[info]                  ·gc.alloc.rate:               472,214 MB/sec
[info]                  ·gc.alloc.rate.norm:          109,878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156,373 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6743834,517 ops/s
[info]                  ·gc.alloc.rate:                   464,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              108,330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6777868,772 ops/s
[info]                  ·gc.alloc.rate:      448,027 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   6760322,132 ±(99.9%) 85230,403 ops/s [Average]
[info]   (min, avg, max) = (6732966,417, 6760322,132, 6785425,563), stdev = 22134,065
[info]   CI (99.9%): [6675091,730, 6845552,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459,126 ±(99.9%) 40,624 MB/sec [Average]
[info]   (min, avg, max) = (448,027, 459,126, 472,214), stdev = 10,550
[info]   CI (99.9%): [418,503, 499,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106,857 ±(99.9%) 10,387 B/op [Average]
[info]   (min, avg, max) = (104,000, 106,857, 109,878), stdev = 2,697
[info]   CI (99.9%): [96,470, 117,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371,167 ±(99.9%) 1328,807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,167, 672,035), stdev = 345,087
[info]   CI (99.9%): [≈ 0, 1699,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86,549 ±(99.9%) 309,738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86,549, 156,783), stdev = 80,438
[info]   CI (99.9%): [≈ 0, 396,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6535,798 ops/s
[info] # Warmup Iteration   2: 170761,348 ops/s
[info] # Warmup Iteration   3: 309158,367 ops/s
[info] # Warmup Iteration   4: 333846,703 ops/s
[info] # Warmup Iteration   5: 332453,153 ops/s
[info] Iteration   1: 329959,687 ops/s
[info]                  ·gc.alloc.rate:                   2892,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              13794,171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12780,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,688 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 332345,331 ops/s
[info]                  ·gc.alloc.rate:                   2901,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              13731,956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12714,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 324292,633 ops/s
[info]                  ·gc.alloc.rate:               2857,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          13861,219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13068,649 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 332336,277 ops/s
[info]                  ·gc.alloc.rate:               2940,290 MB/sec
[info]                  ·gc.alloc.rate.norm:          13919,559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12786,897 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 331032,257 ops/s
[info]                  ·gc.alloc.rate:                   2956,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              14053,245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16083,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   329993,237 ±(99.9%) 12857,886 ops/s [Average]
[info]   (min, avg, max) = (324292,633, 329993,237, 332345,331), stdev = 3339,152
[info]   CI (99.9%): [317135,351, 342851,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2909,692 ±(99.9%) 152,642 MB/sec [Average]
[info]   (min, avg, max) = (2857,152, 2909,692, 2956,961), stdev = 39,641
[info]   CI (99.9%): [2757,051, 3062,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13872,030 ±(99.9%) 475,119 B/op [Average]
[info]   (min, avg, max) = (13731,956, 13872,030, 14053,245), stdev = 123,387
[info]   CI (99.9%): [13396,911, 14347,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2829,122 ±(99.9%) 1195,062 MB/sec [Average]
[info]   (min, avg, max) = (2680,400, 2829,122, 3384,125), stdev = 310,354
[info]   CI (99.9%): [1634,060, 4024,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13486,931 ±(99.9%) 5613,630 B/op [Average]
[info]   (min, avg, max) = (12714,876, 13486,931, 16083,387), stdev = 1457,842
[info]   CI (99.9%): [7873,301, 19100,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,087, 0,354), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 0,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,417 ±(99.9%) 2,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,417, 1,688), stdev = 0,718
[info]   CI (99.9%): [≈ 0, 3,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 0,707
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72083,847 ops/s
[info] # Warmup Iteration   2: 969694,569 ops/s
[info] # Warmup Iteration   3: 996246,632 ops/s
[info] # Warmup Iteration   4: 987524,051 ops/s
[info] # Warmup Iteration   5: 1003326,508 ops/s
[info] Iteration   1: 1003722,656 ops/s
[info]                  ·gc.alloc.rate:                   2704,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              4239,144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4196,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1005001,271 ops/s
[info]                  ·gc.alloc.rate:                   2671,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              4182,719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4186,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1006941,475 ops/s
[info]                  ·gc.alloc.rate:               2715,802 MB/sec
[info]                  ·gc.alloc.rate.norm:          4243,186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4185,359 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 1006073,935 ops/s
[info]                  ·gc.alloc.rate:               2714,726 MB/sec
[info]                  ·gc.alloc.rate.norm:          4245,178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4200,485 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 1005675,175 ops/s
[info]                  ·gc.alloc.rate:                   2714,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              4246,465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4214,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1005482,902 ±(99.9%) 4654,408 ops/s [Average]
[info]   (min, avg, max) = (1003722,656, 1005482,902, 1006941,475), stdev = 1208,735
[info]   CI (99.9%): [1000828,494, 1010137,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2704,276 ±(99.9%) 71,749 MB/sec [Average]
[info]   (min, avg, max) = (2671,964, 2704,276, 2715,802), stdev = 18,633
[info]   CI (99.9%): [2632,527, 2776,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4231,338 ±(99.9%) 105,199 B/op [Average]
[info]   (min, avg, max) = (4182,719, 4231,338, 4246,465), stdev = 27,320
[info]   CI (99.9%): [4126,140, 4336,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2682,168 ±(99.9%) 30,600 MB/sec [Average]
[info]   (min, avg, max) = (2674,284, 2682,168, 2694,077), stdev = 7,947
[info]   CI (99.9%): [2651,568, 2712,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4196,755 ±(99.9%) 46,075 B/op [Average]
[info]   (min, avg, max) = (4185,359, 4196,755, 4214,661), stdev = 11,966
[info]   CI (99.9%): [4150,680, 4242,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,059 ±(99.9%) 0,313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,059, 0,196), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,00% complete, ETA 02:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520976,259 ops/s
[info] # Warmup Iteration   2: 2691279,463 ops/s
[info] # Warmup Iteration   3: 3172268,830 ops/s
[info] # Warmup Iteration   4: 3214009,900 ops/s
[info] # Warmup Iteration   5: 3221727,648 ops/s
[info] Iteration   1: 3183758,262 ops/s
[info]                  ·gc.alloc.rate:               1368,751 MB/sec
[info]                  ·gc.alloc.rate.norm:          676,367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 660,571 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 3176579,696 ops/s
[info]                  ·gc.alloc.rate:                   1366,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              676,856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3096962,215 ops/s
[info]                  ·gc.alloc.rate:                   1330,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              675,799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 3200132,242 ops/s
[info]                  ·gc.alloc.rate:                   1373,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              675,283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,930 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 3205018,667 ops/s
[info]                  ·gc.alloc.rate:                   1389,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              681,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3172490,216 ±(99.9%) 168620,763 ops/s [Average]
[info]   (min, avg, max) = (3096962,215, 3172490,216, 3205018,667), stdev = 43790,277
[info]   CI (99.9%): [3003869,453, 3341110,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1365,684 ±(99.9%) 83,301 MB/sec [Average]
[info]   (min, avg, max) = (1330,328, 1365,684, 1389,124), stdev = 21,633
[info]   CI (99.9%): [1282,383, 1448,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   677,246 ±(99.9%) 10,329 B/op [Average]
[info]   (min, avg, max) = (675,283, 677,246, 681,926), stdev = 2,682
[info]   CI (99.9%): [666,918, 687,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337,809 ±(99.9%) 4,622 MB/sec [Average]
[info]   (min, avg, max) = (1336,712, 1337,809, 1339,380), stdev = 1,200
[info]   CI (99.9%): [1333,187, 1342,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   663,539 ±(99.9%) 36,695 B/op [Average]
[info]   (min, avg, max) = (656,198, 663,539, 680,078), stdev = 9,529
[info]   CI (99.9%): [626,845, 700,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,802 ±(99.9%) 6,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,802, 3,925), stdev = 1,746
[info]   CI (99.9%): [≈ 0, 7,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,394 ±(99.9%) 3,306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,394, 1,930), stdev = 0,858
[info]   CI (99.9%): [≈ 0, 3,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,20% complete, ETA 02:09:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3035376,067 ops/s
[info] # Warmup Iteration   2: 16290037,475 ops/s
[info] # Warmup Iteration   3: 16762718,909 ops/s
[info] # Warmup Iteration   4: 16823041,907 ops/s
[info] # Warmup Iteration   5: 16757714,194 ops/s
[info] Iteration   1: 16808042,333 ops/s
[info]                  ·gc.alloc.rate:                   877,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              82,171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 16754651,419 ops/s
[info]                  ·gc.alloc.rate:               874,248 MB/sec
[info]                  ·gc.alloc.rate.norm:          82,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63,041 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 16804173,628 ops/s
[info]                  ·gc.alloc.rate:               871,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          81,624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62,889 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 16617738,349 ops/s
[info]                  ·gc.alloc.rate:                   885,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              83,868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 16735100,637 ops/s
[info]                  ·gc.alloc.rate:                   877,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              82,509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   16743941,273 ±(99.9%) 297379,204 ops/s [Average]
[info]   (min, avg, max) = (16617738,349, 16743941,273, 16808042,333), stdev = 77228,435
[info]   CI (99.9%): [16446562,069, 17041320,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   877,511 ±(99.9%) 20,456 MB/sec [Average]
[info]   (min, avg, max) = (871,835, 877,511, 885,868), stdev = 5,312
[info]   CI (99.9%): [857,055, 897,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82,453 ±(99.9%) 3,281 B/op [Average]
[info]   (min, avg, max) = (81,624, 82,453, 83,868), stdev = 0,852
[info]   CI (99.9%): [79,172, 85,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,208 ±(99.9%) 1157,851 MB/sec [Average]
[info]   (min, avg, max) = (671,365, 806,208, 1344,099), stdev = 300,690
[info]   CI (99.9%): [≈ 0, 1964,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75,847 ±(99.9%) 110,651 B/op [Average]
[info]   (min, avg, max) = (62,842, 75,847, 127,251), stdev = 28,736
[info]   CI (99.9%): [≈ 0, 186,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4218108,670 ops/s
[info] # Warmup Iteration   2: 17718484,658 ops/s
[info] # Warmup Iteration   3: 18831860,742 ops/s
[info] # Warmup Iteration   4: 18673351,952 ops/s
[info] # Warmup Iteration   5: 18791628,117 ops/s
[info] Iteration   1: 18850122,197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18142612,576 ops/s
[info]                  ·gc.alloc.rate:      12,673 MB/sec
[info]                  ·gc.alloc.rate.norm: 1,099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18648046,067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18831577,011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17967710,397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   18488013,650 ±(99.9%) 1569800,061 ops/s [Average]
[info]   (min, avg, max) = (17967710,397, 18488013,650, 18850122,197), stdev = 407672,091
[info]   CI (99.9%): [16918213,589, 20057813,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2,535 ±(99.9%) 21,824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2,535, 12,673), stdev = 5,668
[info]   CI (99.9%): [≈ 0, 24,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,220 ±(99.9%) 1,892 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0,220, 1,099), stdev = 0,491
[info]   CI (99.9%): [≈ 0, 2,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16635,563 ops/s
[info] # Warmup Iteration   2: 178015,214 ops/s
[info] # Warmup Iteration   3: 539885,972 ops/s
[info] # Warmup Iteration   4: 539907,282 ops/s
[info] # Warmup Iteration   5: 538469,738 ops/s
[info] Iteration   1: 539979,390 ops/s
[info]                  ·gc.alloc.rate:               1529,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          4456,790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3861,654 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 539194,513 ops/s
[info]                  ·gc.alloc.rate:               1517,998 MB/sec
[info]                  ·gc.alloc.rate.norm:          4429,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3875,045 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 511841,609 ops/s
[info]                  ·gc.alloc.rate:                   1466,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6141,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 501470,431 ops/s
[info]                  ·gc.alloc.rate:                   1433,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              4497,098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4191,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,784 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 539467,922 ops/s
[info]                  ·gc.alloc.rate:               1538,441 MB/sec
[info]                  ·gc.alloc.rate.norm:          4486,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3904,345 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   526390,773 ±(99.9%) 70801,073 ops/s [Average]
[info]   (min, avg, max) = (501470,431, 526390,773, 539979,390), stdev = 18386,814
[info]   CI (99.9%): [455589,700, 597191,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1497,240 ±(99.9%) 174,092 MB/sec [Average]
[info]   (min, avg, max) = (1433,470, 1497,240, 1538,441), stdev = 45,211
[info]   CI (99.9%): [1323,148, 1671,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4475,520 ±(99.9%) 123,828 B/op [Average]
[info]   (min, avg, max) = (4429,215, 4475,520, 4508,012), stdev = 32,158
[info]   CI (99.9%): [4351,692, 4599,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1465,346 ±(99.9%) 1147,430 MB/sec [Average]
[info]   (min, avg, max) = (1325,351, 1465,346, 1998,303), stdev = 297,984
[info]   CI (99.9%): [317,916, 2612,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4394,985 ±(99.9%) 3796,744 B/op [Average]
[info]   (min, avg, max) = (3861,654, 4394,985, 6141,996), stdev = 986,002
[info]   CI (99.9%): [598,242, 8191,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,250), stdev = 0,108
[info]   CI (99.9%): [≈ 0, 0,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,195 ±(99.9%) 1,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,195, 0,784), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 1,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 4,000), stdev = 0,894
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249209,161 ops/s
[info] # Warmup Iteration   2: 1976334,217 ops/s
[info] # Warmup Iteration   3: 2279149,823 ops/s
[info] # Warmup Iteration   4: 2256147,383 ops/s
[info] # Warmup Iteration   5: 2295315,763 ops/s
[info] Iteration   1: 2301199,644 ops/s
[info]                  ·gc.alloc.rate:                   3186,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              2178,247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1829,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 2312426,705 ops/s
[info]                  ·gc.alloc.rate:                   3258,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              2217,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2279,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2306529,269 ops/s
[info]                  ·gc.alloc.rate:                   3251,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              2217,887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2293,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2244426,044 ops/s
[info]                  ·gc.alloc.rate:                   3142,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              2202,582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1891,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 2288641,942 ops/s
[info]                  ·gc.alloc.rate:               3228,419 MB/sec
[info]                  ·gc.alloc.rate.norm:          2219,259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3380,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2324,049 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2290644,721 ±(99.9%) 105073,154 ops/s [Average]
[info]   (min, avg, max) = (2244426,044, 2290644,721, 2312426,705), stdev = 27287,164
[info]   CI (99.9%): [2185571,567, 2395717,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3213,447 ±(99.9%) 188,249 MB/sec [Average]
[info]   (min, avg, max) = (3142,155, 3213,447, 3258,766), stdev = 48,888
[info]   CI (99.9%): [3025,198, 3401,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2207,012 ±(99.9%) 67,159 B/op [Average]
[info]   (min, avg, max) = (2178,247, 2207,012, 2219,259), stdev = 17,441
[info]   CI (99.9%): [2139,853, 2274,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3093,809 ±(99.9%) 1429,544 MB/sec [Average]
[info]   (min, avg, max) = (2676,723, 3093,809, 3380,861), stdev = 371,248
[info]   CI (99.9%): [1664,266, 4523,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2123,702 ±(99.9%) 930,682 B/op [Average]
[info]   (min, avg, max) = (1829,917, 2123,702, 2324,049), stdev = 241,695
[info]   CI (99.9%): [1193,020, 3054,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,058), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,725 ops/s
[info] # Warmup Iteration   2: 10849374,833 ops/s
[info] # Warmup Iteration   3: 11016991,933 ops/s
[info] # Warmup Iteration   4: 11285296,237 ops/s
[info] # Warmup Iteration   5: 11489557,732 ops/s
[info] Iteration   1: 11396883,690 ops/s
[info]                  ·gc.alloc.rate:                   1419,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              195,989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 11448775,737 ops/s
[info]                  ·gc.alloc.rate:                   1465,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              201,323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 11446598,712 ops/s
[info]                  ·gc.alloc.rate:                   1434,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              197,213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,664 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 11471071,216 ops/s
[info]                  ·gc.alloc.rate:                   1450,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              198,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11516958,493 ops/s
[info]                  ·gc.alloc.rate:               1456,671 MB/sec
[info]                  ·gc.alloc.rate.norm:          198,984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181,874 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11456057,570 ±(99.9%) 167606,716 ops/s [Average]
[info]   (min, avg, max) = (11396883,690, 11456057,570, 11516958,493), stdev = 43526,932
[info]   CI (99.9%): [11288450,854, 11623664,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1445,317 ±(99.9%) 69,605 MB/sec [Average]
[info]   (min, avg, max) = (1419,750, 1445,317, 1465,066), stdev = 18,076
[info]   CI (99.9%): [1375,713, 1514,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   198,481 ±(99.9%) 7,779 B/op [Average]
[info]   (min, avg, max) = (195,989, 198,481, 201,323), stdev = 2,020
[info]   CI (99.9%): [190,703, 206,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1468,040 ±(99.9%) 1152,583 MB/sec [Average]
[info]   (min, avg, max) = (1331,416, 1468,040, 2003,473), stdev = 299,322
[info]   CI (99.9%): [315,457, 2620,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   201,619 ±(99.9%) 158,659 B/op [Average]
[info]   (min, avg, max) = (181,874, 201,619, 275,309), stdev = 41,203
[info]   CI (99.9%): [42,960, 360,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,984 ±(99.9%) 8,286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,984, 4,834), stdev = 2,152
[info]   CI (99.9%): [≈ 0, 9,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,135 ±(99.9%) 1,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,135, 0,664), stdev = 0,296
[info]   CI (99.9%): [≈ 0, 1,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 9,000), stdev = 2,739
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193401,353 ops/s
[info] # Warmup Iteration   2: 3478250,041 ops/s
[info] # Warmup Iteration   3: 3681451,339 ops/s
[info] # Warmup Iteration   4: 3578047,000 ops/s
[info] # Warmup Iteration   5: 3667664,087 ops/s
[info] Iteration   1: 3693314,465 ops/s
[info]                  ·gc.alloc.rate:                   2296,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              978,149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,770 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 3696795,949 ops/s
[info]                  ·gc.alloc.rate:                   2302,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              979,785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     851,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3689642,354 ops/s
[info]                  ·gc.alloc.rate:                   2335,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              995,991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1137,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 3695036,948 ops/s
[info]                  ·gc.alloc.rate:               2314,227 MB/sec
[info]                  ·gc.alloc.rate.norm:          985,355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853,723 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 3694097,287 ops/s
[info]                  ·gc.alloc.rate:               2314,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          985,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 855,659 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3693777,401 ±(99.9%) 10208,445 ops/s [Average]
[info]   (min, avg, max) = (3689642,354, 3693777,401, 3696795,949), stdev = 2651,101
[info]   CI (99.9%): [3683568,956, 3703985,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2312,559 ±(99.9%) 58,462 MB/sec [Average]
[info]   (min, avg, max) = (2296,164, 2312,559, 2335,782), stdev = 15,182
[info]   CI (99.9%): [2254,097, 2371,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984,996 ±(99.9%) 26,923 B/op [Average]
[info]   (min, avg, max) = (978,149, 984,996, 995,991), stdev = 6,992
[info]   CI (99.9%): [958,072, 1011,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2138,240 ±(99.9%) 1140,820 MB/sec [Average]
[info]   (min, avg, max) = (2001,759, 2138,240, 2668,197), stdev = 296,267
[info]   CI (99.9%): [997,420, 3279,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   910,808 ±(99.9%) 488,506 B/op [Average]
[info]   (min, avg, max) = (851,926, 910,808, 1137,734), stdev = 126,863
[info]   CI (99.9%): [422,302, 1399,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,839 ±(99.9%) 7,136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,839, 4,154), stdev = 1,853
[info]   CI (99.9%): [≈ 0, 7,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,357 ±(99.9%) 3,040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,357, 1,770), stdev = 0,789
[info]   CI (99.9%): [≈ 0, 3,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5903290,662 ops/s
[info] # Warmup Iteration   2: 14026980,617 ops/s
[info] # Warmup Iteration   3: 15166022,145 ops/s
[info] # Warmup Iteration   4: 14563954,626 ops/s
[info] # Warmup Iteration   5: 15057744,787 ops/s
[info] Iteration   1: 15146523,639 ops/s
[info]                  ·gc.alloc.rate:                   2001,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              207,937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 15210243,807 ops/s
[info]                  ·gc.alloc.rate:                   2013,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 15070906,554 ops/s
[info]                  ·gc.alloc.rate:                   1994,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15199683,623 ops/s
[info]                  ·gc.alloc.rate:                   2010,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 15162988,524 ops/s
[info]                  ·gc.alloc.rate:               2006,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          208,226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209,355 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   15158069,229 ±(99.9%) 212735,239 ops/s [Average]
[info]   (min, avg, max) = (15070906,554, 15158069,229, 15210243,807), stdev = 55246,666
[info]   CI (99.9%): [14945333,990, 15370804,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2005,343 ±(99.9%) 29,022 MB/sec [Average]
[info]   (min, avg, max) = (1994,208, 2005,343, 2013,208), stdev = 7,537
[info]   CI (99.9%): [1976,321, 2034,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208,138 ±(99.9%) 0,472 B/op [Average]
[info]   (min, avg, max) = (207,937, 208,138, 208,232), stdev = 0,123
[info]   CI (99.9%): [207,666, 208,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2018,062 ±(99.9%) 10,705 MB/sec [Average]
[info]   (min, avg, max) = (2015,069, 2018,062, 2021,551), stdev = 2,780
[info]   CI (99.9%): [2007,358, 2028,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   209,460 ±(99.9%) 2,727 B/op [Average]
[info]   (min, avg, max) = (208,650, 209,460, 210,364), stdev = 0,708
[info]   CI (99.9%): [206,734, 212,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,612 ±(99.9%) 4,040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,612, 2,437), stdev = 1,049
[info]   CI (99.9%): [≈ 0, 4,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,064 ±(99.9%) 0,420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,064, 0,253), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 6,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,61% complete, ETA 02:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2265,381 ops/s
[info] # Warmup Iteration   2: 253002,386 ops/s
[info] # Warmup Iteration   3: 664952,325 ops/s
[info] # Warmup Iteration   4: 1271941,077 ops/s
[info] # Warmup Iteration   5: 1274209,344 ops/s
[info] Iteration   1: 1271714,570 ops/s
[info]                  ·gc.alloc.rate:                   3002,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              3714,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3320,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,803 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 1277661,593 ops/s
[info]                  ·gc.alloc.rate:                   3037,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              3740,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3308,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,205 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1270606,787 ops/s
[info]                  ·gc.alloc.rate:               3018,935 MB/sec
[info]                  ·gc.alloc.rate.norm:          3738,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4167,456 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 1207834,201 ops/s
[info]                  ·gc.alloc.rate:               2887,528 MB/sec
[info]                  ·gc.alloc.rate.norm:          3761,194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3516,151 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 1274025,056 ops/s
[info]                  ·gc.alloc.rate:               3041,960 MB/sec
[info]                  ·gc.alloc.rate.norm:          3756,499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3340,916 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1260368,441 ±(99.9%) 113560,722 ops/s [Average]
[info]   (min, avg, max) = (1207834,201, 1260368,441, 1277661,593), stdev = 29491,359
[info]   CI (99.9%): [1146807,720, 1373929,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2997,635 ±(99.9%) 244,601 MB/sec [Average]
[info]   (min, avg, max) = (2887,528, 2997,635, 3041,960), stdev = 63,522
[info]   CI (99.9%): [2753,034, 3242,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3742,061 ±(99.9%) 70,837 B/op [Average]
[info]   (min, avg, max) = (3714,514, 3742,061, 3761,194), stdev = 18,396
[info]   CI (99.9%): [3671,224, 3812,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2828,359 ±(99.9%) 1157,304 MB/sec [Average]
[info]   (min, avg, max) = (2684,116, 2828,359, 3365,769), stdev = 300,548
[info]   CI (99.9%): [1671,055, 3985,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3530,807 ±(99.9%) 1408,282 B/op [Average]
[info]   (min, avg, max) = (3308,803, 3530,807, 4167,456), stdev = 365,726
[info]   CI (99.9%): [2122,525, 4939,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,325 ±(99.9%) 2,454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,325, 1,458), stdev = 0,637
[info]   CI (99.9%): [≈ 0, 2,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,402 ±(99.9%) 3,037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,402, 1,803), stdev = 0,789
[info]   CI (99.9%): [≈ 0, 3,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,81% complete, ETA 02:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302454,583 ops/s
[info] # Warmup Iteration   2: 2516772,471 ops/s
[info] # Warmup Iteration   3: 2728526,480 ops/s
[info] # Warmup Iteration   4: 2724951,337 ops/s
[info] # Warmup Iteration   5: 2717355,809 ops/s
[info] Iteration   1: 2731408,856 ops/s
[info]                  ·gc.alloc.rate:                   2421,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1394,649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545,339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,147 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 2743272,325 ops/s
[info]                  ·gc.alloc.rate:                   2406,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1380,146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2724840,050 ops/s
[info]                  ·gc.alloc.rate:               2431,305 MB/sec
[info]                  ·gc.alloc.rate.norm:          1403,815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1545,577 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 2746062,904 ops/s
[info]                  ·gc.alloc.rate:               2424,612 MB/sec
[info]                  ·gc.alloc.rate.norm:          1389,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1152,191 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 2722654,620 ops/s
[info]                  ·gc.alloc.rate:               2432,120 MB/sec
[info]                  ·gc.alloc.rate.norm:          1405,333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1553,248 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2733647,751 ±(99.9%) 40851,578 ops/s [Average]
[info]   (min, avg, max) = (2722654,620, 2733647,751, 2746062,904), stdev = 10609,025
[info]   CI (99.9%): [2692796,173, 2774499,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2423,166 ±(99.9%) 39,900 MB/sec [Average]
[info]   (min, avg, max) = (2406,510, 2423,166, 2432,120), stdev = 10,362
[info]   CI (99.9%): [2383,265, 2463,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1394,607 ±(99.9%) 40,356 B/op [Average]
[info]   (min, avg, max) = (1380,146, 1394,607, 1405,333), stdev = 10,480
[info]   CI (99.9%): [1354,251, 1434,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2413,205 ±(99.9%) 1420,588 MB/sec [Average]
[info]   (min, avg, max) = (2007,088, 2413,205, 2688,107), stdev = 368,922
[info]   CI (99.9%): [992,617, 3833,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1389,486 ±(99.9%) 836,178 B/op [Average]
[info]   (min, avg, max) = (1151,075, 1389,486, 1553,248), stdev = 217,153
[info]   CI (99.9%): [553,308, 2225,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,750 ±(99.9%) 6,410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,750, 3,728), stdev = 1,665
[info]   CI (99.9%): [≈ 0, 7,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,432 ±(99.9%) 3,692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,432, 2,147), stdev = 0,959
[info]   CI (99.9%): [≈ 0, 4,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 7,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,01% complete, ETA 02:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,826 ops/s
[info] # Warmup Iteration   2: 20191537,595 ops/s
[info] # Warmup Iteration   3: 21956506,915 ops/s
[info] # Warmup Iteration   4: 22663126,633 ops/s
[info] # Warmup Iteration   5: 19695757,403 ops/s
[info] Iteration   1: 22786342,714 ops/s
[info]                  ·gc.alloc.rate:               719,650 MB/sec
[info]                  ·gc.alloc.rate.norm:          49,688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46,010 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 22743631,040 ops/s
[info]                  ·gc.alloc.rate:               706,969 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46,119 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 22601157,559 ops/s
[info]                  ·gc.alloc.rate:                   724,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              50,404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 22854315,446 ops/s
[info]                  ·gc.alloc.rate:               714,956 MB/sec
[info]                  ·gc.alloc.rate.norm:          49,218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45,920 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 22422745,799 ops/s
[info]                  ·gc.alloc.rate:                   701,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              49,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   22681638,512 ±(99.9%) 661722,790 ops/s [Average]
[info]   (min, avg, max) = (22422745,799, 22681638,512, 22854315,446), stdev = 171847,307
[info]   CI (99.9%): [22019915,721, 23343361,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   713,448 ±(99.9%) 35,301 MB/sec [Average]
[info]   (min, avg, max) = (701,591, 713,448, 724,072), stdev = 9,168
[info]   CI (99.9%): [678,146, 748,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49,488 ±(99.9%) 2,246 B/op [Average]
[info]   (min, avg, max) = (48,904, 49,488, 50,404), stdev = 0,583
[info]   CI (99.9%): [47,242, 51,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666,778 ±(99.9%) 1,078 MB/sec [Average]
[info]   (min, avg, max) = (666,376, 666,778, 667,047), stdev = 0,280
[info]   CI (99.9%): [665,700, 667,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46,253 ±(99.9%) 1,383 B/op [Average]
[info]   (min, avg, max) = (45,920, 46,253, 46,803), stdev = 0,359
[info]   CI (99.9%): [44,869, 47,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,022 ±(99.9%) 0,114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,058), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,21% complete, ETA 02:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1598482,666 ops/s
[info] # Warmup Iteration   2: 6833612,898 ops/s
[info] # Warmup Iteration   3: 6992104,494 ops/s
[info] # Warmup Iteration   4: 7104785,615 ops/s
[info] # Warmup Iteration   5: 7013885,251 ops/s
[info] Iteration   1: 7037948,932 ops/s
[info]                  ·gc.alloc.rate:                   1984,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              443,566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,749 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 6320976,778 ops/s
[info]                  ·gc.alloc.rate:                   1787,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              444,814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,140 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 6907183,580 ops/s
[info]                  ·gc.alloc.rate:               1973,462 MB/sec
[info]                  ·gc.alloc.rate.norm:          449,492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456,196 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 6877634,494 ops/s
[info]                  ·gc.alloc.rate:               1953,272 MB/sec
[info]                  ·gc.alloc.rate.norm:          446,818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458,132 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 6931628,033 ops/s
[info]                  ·gc.alloc.rate:               1955,242 MB/sec
[info]                  ·gc.alloc.rate.norm:          443,803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 303,560 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6815074,364 ±(99.9%) 1088765,967 ops/s [Average]
[info]   (min, avg, max) = (6320976,778, 6815074,364, 7037948,932), stdev = 282749,064
[info]   CI (99.9%): [5726308,397, 7903840,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1930,678 ±(99.9%) 312,793 MB/sec [Average]
[info]   (min, avg, max) = (1787,206, 1930,678, 1984,209), stdev = 81,231
[info]   CI (99.9%): [1617,885, 2243,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445,699 ±(99.9%) 9,543 B/op [Average]
[info]   (min, avg, max) = (443,566, 445,699, 449,492), stdev = 2,478
[info]   CI (99.9%): [436,155, 455,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871,579 ±(99.9%) 1149,941 MB/sec [Average]
[info]   (min, avg, max) = (1337,380, 1871,579, 2008,355), stdev = 298,636
[info]   CI (99.9%): [721,638, 3021,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   433,251 ±(99.9%) 289,365 B/op [Average]
[info]   (min, avg, max) = (303,560, 433,251, 499,403), stdev = 75,147
[info]   CI (99.9%): [143,886, 722,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,783 ±(99.9%) 5,610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,783, 3,353), stdev = 1,457
[info]   CI (99.9%): [≈ 0, 6,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,178 ±(99.9%) 1,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,178, 0,749), stdev = 0,325
[info]   CI (99.9%): [≈ 0, 1,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 8,000), stdev = 2,168
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,41% complete, ETA 02:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12055568,785 ops/s
[info] # Warmup Iteration   2: 31371968,610 ops/s
[info] # Warmup Iteration   3: 31247527,479 ops/s
[info] # Warmup Iteration   4: 32007218,942 ops/s
[info] # Warmup Iteration   5: 31627925,228 ops/s
[info] Iteration   1: 32028354,659 ops/s
[info]                  ·gc.alloc.rate:               991,259 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32,996 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 31984203,974 ops/s
[info]                  ·gc.alloc.rate:               993,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33,057 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 31789444,654 ops/s
[info]                  ·gc.alloc.rate:                   999,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              49,467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 30685875,161 ops/s
[info]                  ·gc.alloc.rate:                   962,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              49,345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31825214,374 ops/s
[info]                  ·gc.alloc.rate:               1011,738 MB/sec
[info]                  ·gc.alloc.rate.norm:          50,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66,541 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   31662618,564 ±(99.9%) 2138520,549 ops/s [Average]
[info]   (min, avg, max) = (30685875,161, 31662618,564, 32028354,659), stdev = 555366,995
[info]   CI (99.9%): [29524098,016, 33801139,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   991,748 ±(99.9%) 70,031 MB/sec [Average]
[info]   (min, avg, max) = (962,443, 991,748, 1011,738), stdev = 18,187
[info]   CI (99.9%): [921,717, 1061,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49,281 ±(99.9%) 2,001 B/op [Average]
[info]   (min, avg, max) = (48,694, 49,281, 50,016), stdev = 0,520
[info]   CI (99.9%): [47,280, 51,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,302 ±(99.9%) 1419,806 MB/sec [Average]
[info]   (min, avg, max) = (671,692, 941,302, 1346,028), stdev = 368,719
[info]   CI (99.9%): [≈ 0, 2361,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46,721 ±(99.9%) 69,701 B/op [Average]
[info]   (min, avg, max) = (32,996, 46,721, 66,541), stdev = 18,101
[info]   CI (99.9%): [≈ 0, 116,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,61% complete, ETA 02:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15245494,913 ops/s
[info] # Warmup Iteration   2: 37816034,567 ops/s
[info] # Warmup Iteration   3: 38331133,697 ops/s
[info] # Warmup Iteration   4: 38301293,464 ops/s
[info] # Warmup Iteration   5: 38273225,108 ops/s
[info] Iteration   1: 38266096,153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38337878,729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38318410,655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38296435,249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38272629,869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   38298290,131 ±(99.9%) 116643,919 ops/s [Average]
[info]   (min, avg, max) = (38266096,153, 38298290,131, 38337878,729), stdev = 30292,055
[info]   CI (99.9%): [38181646,212, 38414934,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90313,776 ops/s
[info] # Warmup Iteration   2: 1891816,161 ops/s
[info] # Warmup Iteration   3: 2123167,177 ops/s
[info] # Warmup Iteration   4: 2114422,284 ops/s
[info] # Warmup Iteration   5: 2141454,894 ops/s
[info] Iteration   1: 2150996,618 ops/s
[info]                  ·gc.alloc.rate:               3216,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          2352,813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2665,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1949,861 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 2151103,751 ops/s
[info]                  ·gc.alloc.rate:                   3259,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              2383,604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2442,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2140194,189 ops/s
[info]                  ·gc.alloc.rate:               3245,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          2386,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3353,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2465,174 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 2141980,132 ops/s
[info]                  ·gc.alloc.rate:               3221,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          2365,934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1978,067 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 2132129,847 ops/s
[info]                  ·gc.alloc.rate:                   3234,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              2386,473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2491,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2143280,907 ±(99.9%) 30822,899 ops/s [Average]
[info]   (min, avg, max) = (2132129,847, 2143280,907, 2151103,751), stdev = 8004,609
[info]   CI (99.9%): [2112458,008, 2174103,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3235,452 ±(99.9%) 67,331 MB/sec [Average]
[info]   (min, avg, max) = (3216,777, 3235,452, 3259,078), stdev = 17,486
[info]   CI (99.9%): [3168,121, 3302,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2374,981 ±(99.9%) 57,855 B/op [Average]
[info]   (min, avg, max) = (2352,813, 2374,981, 2386,473), stdev = 15,025
[info]   CI (99.9%): [2317,127, 2432,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3085,816 ±(99.9%) 1429,780 MB/sec [Average]
[info]   (min, avg, max) = (2665,860, 3085,816, 3377,109), stdev = 371,309
[info]   CI (99.9%): [1656,036, 4515,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2265,472 ±(99.9%) 1062,676 B/op [Average]
[info]   (min, avg, max) = (1949,861, 2265,472, 2491,845), stdev = 275,974
[info]   CI (99.9%): [1202,796, 3328,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,061), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126521,165 ops/s
[info] # Warmup Iteration   2: 333803,304 ops/s
[info] # Warmup Iteration   3: 355668,766 ops/s
[info] # Warmup Iteration   4: 352350,603 ops/s
[info] # Warmup Iteration   5: 355992,371 ops/s
[info] Iteration   1: 330511,938 ops/s
[info]                  ·gc.alloc.rate:                   2028,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              9654,409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9595,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,149 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 353847,444 ops/s
[info]                  ·gc.alloc.rate:                   2166,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              9632,902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8938,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 353284,857 ops/s
[info]                  ·gc.alloc.rate:                   2177,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              9697,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8948,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 355625,803 ops/s
[info]                  ·gc.alloc.rate:                   2166,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              9584,271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8898,179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 355813,716 ops/s
[info]                  ·gc.alloc.rate:                   2181,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              9645,373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8908,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   349816,752 ±(99.9%) 41769,226 ops/s [Average]
[info]   (min, avg, max) = (330511,938, 349816,752, 355813,716), stdev = 10847,335
[info]   CI (99.9%): [308047,526, 391585,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2144,026 ±(99.9%) 250,639 MB/sec [Average]
[info]   (min, avg, max) = (2028,190, 2144,026, 2181,353), stdev = 65,090
[info]   CI (99.9%): [1893,387, 2394,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9642,852 ±(99.9%) 156,836 B/op [Average]
[info]   (min, avg, max) = (9584,271, 9642,852, 9697,304), stdev = 40,730
[info]   CI (99.9%): [9486,016, 9799,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2012,347 ±(99.9%) 10,705 MB/sec [Average]
[info]   (min, avg, max) = (2009,409, 2012,347, 2015,788), stdev = 2,780
[info]   CI (99.9%): [2001,642, 2023,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9057,871 ±(99.9%) 1159,756 B/op [Average]
[info]   (min, avg, max) = (8898,179, 9057,871, 9595,373), stdev = 301,185
[info]   CI (99.9%): [7898,114, 10217,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,750 ±(99.9%) 6,141 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,750, 3,603), stdev = 1,595
[info]   CI (99.9%): [≈ 0, 6,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,559 ±(99.9%) 29,253 B/op [Average]
[info]   (min, avg, max) = (0,093, 3,559, 17,149), stdev = 7,597
[info]   CI (99.9%): [≈ 0, 32,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,22% complete, ETA 02:06:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180372,115 ops/s
[info] # Warmup Iteration   2: 551121,093 ops/s
[info] # Warmup Iteration   3: 548149,872 ops/s
[info] # Warmup Iteration   4: 552964,073 ops/s
[info] # Warmup Iteration   5: 553910,254 ops/s
[info] Iteration   1: 557111,043 ops/s
[info]                  ·gc.alloc.rate:               715,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          2020,959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1879,023 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 556479,711 ops/s
[info]                  ·gc.alloc.rate:               712,949 MB/sec
[info]                  ·gc.alloc.rate.norm:          2015,626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1883,011 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 556237,189 ops/s
[info]                  ·gc.alloc.rate:                   717,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              2028,536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1883,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 479198,759 ops/s
[info]                  ·gc.alloc.rate:               619,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          2035,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2189,934 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 557054,241 ops/s
[info]                  ·gc.alloc.rate:                   713,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              2014,928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1883,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   541216,188 ±(99.9%) 133504,905 ops/s [Average]
[info]   (min, avg, max) = (479198,759, 541216,188, 557111,043), stdev = 34670,800
[info]   CI (99.9%): [407711,283, 674721,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   695,819 ±(99.9%) 163,619 MB/sec [Average]
[info]   (min, avg, max) = (619,871, 695,819, 717,202), stdev = 42,491
[info]   CI (99.9%): [532,200, 859,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2023,029 ±(99.9%) 33,386 B/op [Average]
[info]   (min, avg, max) = (2014,928, 2023,029, 2035,097), stdev = 8,670
[info]   CI (99.9%): [1989,644, 2056,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666,303 ±(99.9%) 2,745 MB/sec [Average]
[info]   (min, avg, max) = (665,384, 666,303, 667,032), stdev = 0,713
[info]   CI (99.9%): [663,558, 669,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1943,928 ±(99.9%) 529,602 B/op [Average]
[info]   (min, avg, max) = (1879,023, 1943,928, 2189,934), stdev = 137,536
[info]   CI (99.9%): [1414,326, 2473,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,035, 0,118), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,42% complete, ETA 02:05:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 763934,134 ops/s
[info] # Warmup Iteration   2: 1448816,800 ops/s
[info] # Warmup Iteration   3: 1466765,861 ops/s
[info] # Warmup Iteration   4: 1464033,426 ops/s
[info] # Warmup Iteration   5: 1461816,695 ops/s
[info] Iteration   1: 1484942,626 ops/s
[info]                  ·gc.alloc.rate:               1004,836 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064,655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 708,849 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1476571,368 ops/s
[info]                  ·gc.alloc.rate:               1012,782 MB/sec
[info]                  ·gc.alloc.rate.norm:          1079,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 712,876 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1482032,582 ops/s
[info]                  ·gc.alloc.rate:                   1017,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1420,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1465288,361 ops/s
[info]                  ·gc.alloc.rate:               1002,326 MB/sec
[info]                  ·gc.alloc.rate.norm:          1076,219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718,706 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1481277,555 ops/s
[info]                  ·gc.alloc.rate:                   1042,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1107,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1478022,498 ±(99.9%) 29754,066 ops/s [Average]
[info]   (min, avg, max) = (1465288,361, 1478022,498, 1484942,626), stdev = 7727,036
[info]   CI (99.9%): [1448268,432, 1507776,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1015,965 ±(99.9%) 61,502 MB/sec [Average]
[info]   (min, avg, max) = (1002,326, 1015,965, 1042,385), stdev = 15,972
[info]   CI (99.9%): [954,464, 1077,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1081,461 ±(99.9%) 60,163 B/op [Average]
[info]   (min, avg, max) = (1064,655, 1081,461, 1107,141), stdev = 15,624
[info]   CI (99.9%): [1021,299, 1141,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936,974 ±(99.9%) 1412,225 MB/sec [Average]
[info]   (min, avg, max) = (669,021, 936,974, 1339,387), stdev = 366,750
[info]   CI (99.9%): [≈ 0, 2349,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   996,693 ±(99.9%) 1493,378 B/op [Average]
[info]   (min, avg, max) = (708,849, 996,693, 1422,594), stdev = 387,826
[info]   CI (99.9%): [≈ 0, 2490,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,044), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,62% complete, ETA 02:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31686,951 ops/s
[info] # Warmup Iteration   2: 125034,614 ops/s
[info] # Warmup Iteration   3: 123073,387 ops/s
[info] # Warmup Iteration   4: 131257,154 ops/s
[info] # Warmup Iteration   5: 131867,797 ops/s
[info] Iteration   1: 132078,864 ops/s
[info]                  ·gc.alloc.rate:                   4032,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              48028,607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4015,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47833,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 131587,230 ops/s
[info]                  ·gc.alloc.rate:                   4021,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              48075,996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48232,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,498 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 131362,935 ops/s
[info]                  ·gc.alloc.rate:               4015,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          48085,856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4051,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48522,647 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 132327,682 ops/s
[info]                  ·gc.alloc.rate:               4017,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          47759,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40272,867 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 130533,269 ops/s
[info]                  ·gc.alloc.rate:                   3996,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              48168,205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49094,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   131577,996 ±(99.9%) 2689,041 ops/s [Average]
[info]   (min, avg, max) = (130533,269, 131577,996, 132327,682), stdev = 698,335
[info]   CI (99.9%): [128888,955, 134267,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4016,368 ±(99.9%) 49,634 MB/sec [Average]
[info]   (min, avg, max) = (3996,515, 4016,368, 4032,058), stdev = 12,890
[info]   CI (99.9%): [3966,734, 4066,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48023,590 ±(99.9%) 600,931 B/op [Average]
[info]   (min, avg, max) = (47759,286, 48023,590, 48168,205), stdev = 156,060
[info]   CI (99.9%): [47422,660, 48624,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3912,416 ±(99.9%) 1132,928 MB/sec [Average]
[info]   (min, avg, max) = (3387,486, 3912,416, 4073,330), stdev = 294,218
[info]   CI (99.9%): [2779,488, 5045,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46790,986 ±(99.9%) 14141,851 B/op [Average]
[info]   (min, avg, max) = (40272,867, 46790,986, 49094,021), stdev = 3672,594
[info]   CI (99.9%): [32649,135, 60932,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,199 ±(99.9%) 0,802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,199, 0,498), stdev = 0,208
[info]   CI (99.9%): [≈ 0, 1,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 7,000), stdev = 0,837
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,82% complete, ETA 02:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336119,197 ops/s
[info] # Warmup Iteration   2: 591542,689 ops/s
[info] # Warmup Iteration   3: 564398,300 ops/s
[info] # Warmup Iteration   4: 599417,611 ops/s
[info] # Warmup Iteration   5: 602032,542 ops/s
[info] Iteration   1: 600690,398 ops/s
[info]                  ·gc.alloc.rate:                   1897,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              4970,740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5288,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 603669,340 ops/s
[info]                  ·gc.alloc.rate:                   1907,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              4972,510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5255,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,248 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 601645,981 ops/s
[info]                  ·gc.alloc.rate:               1901,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          4972,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5264,252 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 605152,930 ops/s
[info]                  ·gc.alloc.rate:                   1883,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              4897,937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3489,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 599402,870 ops/s
[info]                  ·gc.alloc.rate:               1907,768 MB/sec
[info]                  ·gc.alloc.rate.norm:          5007,940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5285,618 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   602112,304 ±(99.9%) 8875,311 ops/s [Average]
[info]   (min, avg, max) = (599402,870, 602112,304, 605152,930), stdev = 2304,890
[info]   CI (99.9%): [593236,992, 610987,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1899,744 ±(99.9%) 38,182 MB/sec [Average]
[info]   (min, avg, max) = (1883,791, 1899,744, 1907,998), stdev = 9,916
[info]   CI (99.9%): [1861,562, 1937,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4964,248 ±(99.9%) 154,967 B/op [Average]
[info]   (min, avg, max) = (4897,937, 4964,248, 5007,940), stdev = 40,245
[info]   CI (99.9%): [4809,281, 5119,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880,813 ±(99.9%) 1159,958 MB/sec [Average]
[info]   (min, avg, max) = (1341,961, 1880,813, 2019,064), stdev = 301,237
[info]   CI (99.9%): [720,855, 3040,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4916,488 ±(99.9%) 3072,919 B/op [Average]
[info]   (min, avg, max) = (3489,155, 4916,488, 5288,311), stdev = 798,027
[info]   CI (99.9%): [1843,569, 7989,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,671 ±(99.9%) 4,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 2,853), stdev = 1,237
[info]   CI (99.9%): [≈ 0, 5,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,755 ±(99.9%) 12,477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,755, 7,472), stdev = 3,240
[info]   CI (99.9%): [≈ 0, 14,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 8,000), stdev = 2,387
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,02% complete, ETA 02:05:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177378,692 ops/s
[info] # Warmup Iteration   2: 373893,226 ops/s
[info] # Warmup Iteration   3: 360912,142 ops/s
[info] # Warmup Iteration   4: 377855,469 ops/s
[info] # Warmup Iteration   5: 378047,843 ops/s
[info] Iteration   1: 377536,608 ops/s
[info]                  ·gc.alloc.rate:               1309,642 MB/sec
[info]                  ·gc.alloc.rate.norm:          5457,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5590,043 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 378159,807 ops/s
[info]                  ·gc.alloc.rate:               1283,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          5339,505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2791,885 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 378270,752 ops/s
[info]                  ·gc.alloc.rate:               1308,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          5441,649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5582,058 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 377413,469 ops/s
[info]                  ·gc.alloc.rate:                   1320,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              5502,542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5600,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 378492,304 ops/s
[info]                  ·gc.alloc.rate:                   1304,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              5422,258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5567,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   377974,588 ±(99.9%) 1823,200 ops/s [Average]
[info]   (min, avg, max) = (377413,469, 377974,588, 378492,304), stdev = 473,479
[info]   CI (99.9%): [376151,389, 379797,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1305,173 ±(99.9%) 51,789 MB/sec [Average]
[info]   (min, avg, max) = (1283,431, 1305,173, 1320,011), stdev = 13,449
[info]   CI (99.9%): [1253,384, 1356,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5432,703 ±(99.9%) 230,801 B/op [Average]
[info]   (min, avg, max) = (5339,505, 5432,703, 5502,542), stdev = 59,938
[info]   CI (99.9%): [5201,902, 5663,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207,471 ±(99.9%) 1154,654 MB/sec [Average]
[info]   (min, avg, max) = (671,072, 1207,471, 1343,398), stdev = 299,860
[info]   CI (99.9%): [52,817, 2362,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5026,280 ±(99.9%) 4809,924 B/op [Average]
[info]   (min, avg, max) = (2791,885, 5026,280, 5600,035), stdev = 1249,122
[info]   CI (99.9%): [216,356, 9836,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 6,446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,748), stdev = 1,674
[info]   CI (99.9%): [≈ 0, 7,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,142 ±(99.9%) 26,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,142, 15,625), stdev = 6,978
[info]   CI (99.9%): [≈ 0, 30,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,789
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,22% complete, ETA 02:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321654,827 ops/s
[info] # Warmup Iteration   2: 992015,292 ops/s
[info] # Warmup Iteration   3: 998823,633 ops/s
[info] # Warmup Iteration   4: 993845,080 ops/s
[info] # Warmup Iteration   5: 1001647,801 ops/s
[info] Iteration   1: 996101,487 ops/s
[info]                  ·gc.alloc.rate:               744,349 MB/sec
[info]                  ·gc.alloc.rate.norm:          1175,747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1051,961 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 964795,221 ops/s
[info]                  ·gc.alloc.rate:               721,369 MB/sec
[info]                  ·gc.alloc.rate.norm:          1176,282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1087,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 949431,254 ops/s
[info]                  ·gc.alloc.rate:                   703,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1165,507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 997792,739 ops/s
[info]                  ·gc.alloc.rate:               744,657 MB/sec
[info]                  ·gc.alloc.rate.norm:          1174,125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1052,826 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 994158,791 ops/s
[info]                  ·gc.alloc.rate:               743,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          1176,482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1056,637 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   980455,898 ±(99.9%) 84821,416 ops/s [Average]
[info]   (min, avg, max) = (949431,254, 980455,898, 997792,739), stdev = 22027,852
[info]   CI (99.9%): [895634,482, 1065277,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   731,422 ±(99.9%) 71,317 MB/sec [Average]
[info]   (min, avg, max) = (703,381, 731,422, 744,657), stdev = 18,521
[info]   CI (99.9%): [660,105, 802,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1173,628 ±(99.9%) 17,841 B/op [Average]
[info]   (min, avg, max) = (1165,507, 1173,628, 1176,482), stdev = 4,633
[info]   CI (99.9%): [1155,788, 1191,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666,968 ±(99.9%) 2,780 MB/sec [Average]
[info]   (min, avg, max) = (665,982, 666,968, 667,727), stdev = 0,722
[info]   CI (99.9%): [664,188, 669,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1070,690 ±(99.9%) 92,447 B/op [Average]
[info]   (min, avg, max) = (1051,961, 1070,690, 1104,834), stdev = 24,008
[info]   CI (99.9%): [978,243, 1163,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,035), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,42% complete, ETA 02:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1722480,693 ops/s
[info] # Warmup Iteration   2: 2762163,081 ops/s
[info] # Warmup Iteration   3: 2785964,164 ops/s
[info] # Warmup Iteration   4: 2806163,680 ops/s
[info] # Warmup Iteration   5: 2825532,939 ops/s
[info] Iteration   1: 2822932,181 ops/s
[info]                  ·gc.alloc.rate:                   1348,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              751,667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2836162,121 ops/s
[info]                  ·gc.alloc.rate:                   1363,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              756,470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2830335,213 ops/s
[info]                  ·gc.alloc.rate:                   1337,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              743,368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,470 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2829617,756 ops/s
[info]                  ·gc.alloc.rate:                   1348,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              749,741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,266 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2836037,636 ops/s
[info]                  ·gc.alloc.rate:               1350,423 MB/sec
[info]                  ·gc.alloc.rate.norm:          749,142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 744,864 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2831016,981 ±(99.9%) 21043,873 ops/s [Average]
[info]   (min, avg, max) = (2822932,181, 2831016,981, 2836162,121), stdev = 5465,027
[info]   CI (99.9%): [2809973,109, 2852060,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1349,704 ±(99.9%) 35,988 MB/sec [Average]
[info]   (min, avg, max) = (1337,334, 1349,704, 1363,607), stdev = 9,346
[info]   CI (99.9%): [1313,716, 1385,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750,077 ±(99.9%) 18,204 B/op [Average]
[info]   (min, avg, max) = (743,368, 750,077, 756,470), stdev = 4,727
[info]   CI (99.9%): [731,874, 768,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344,652 ±(99.9%) 4,877 MB/sec [Average]
[info]   (min, avg, max) = (1342,712, 1344,652, 1346,059), stdev = 1,267
[info]   CI (99.9%): [1339,775, 1349,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   747,274 ±(99.9%) 6,540 B/op [Average]
[info]   (min, avg, max) = (744,864, 747,274, 749,244), stdev = 1,698
[info]   CI (99.9%): [740,733, 753,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,637 ±(99.9%) 4,389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,637, 2,645), stdev = 1,140
[info]   CI (99.9%): [≈ 0, 5,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,354 ±(99.9%) 2,439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,354, 1,470), stdev = 0,634
[info]   CI (99.9%): [≈ 0, 2,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,62% complete, ETA 02:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2275547,043 ops/s
[info] # Warmup Iteration   2: 3219621,125 ops/s
[info] # Warmup Iteration   3: 3224211,130 ops/s
[info] # Warmup Iteration   4: 3156953,356 ops/s
[info] # Warmup Iteration   5: 3154431,614 ops/s
[info] Iteration   1: 3225315,107 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3222155,560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3221871,073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3221968,013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3215417,881 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3221345,527 ±(99.9%) 13912,285 ops/s [Average]
[info]   (min, avg, max) = (3215417,881, 3221345,527, 3225315,107), stdev = 3612,976
[info]   CI (99.9%): [3207433,241, 3235257,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,82% complete, ETA 02:04:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218990,100 ops/s
[info] # Warmup Iteration   2: 512143,874 ops/s
[info] # Warmup Iteration   3: 524485,443 ops/s
[info] # Warmup Iteration   4: 525233,448 ops/s
[info] # Warmup Iteration   5: 526038,364 ops/s
[info] Iteration   1: 526030,030 ops/s
[info]                  ·gc.alloc.rate:                   772,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              2311,734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1996,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 523467,617 ops/s
[info]                  ·gc.alloc.rate:               801,122 MB/sec
[info]                  ·gc.alloc.rate.norm:          2407,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4015,461 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 525916,737 ops/s
[info]                  ·gc.alloc.rate:               777,285 MB/sec
[info]                  ·gc.alloc.rate.norm:          2325,237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2000,411 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 524273,261 ops/s
[info]                  ·gc.alloc.rate:               771,211 MB/sec
[info]                  ·gc.alloc.rate.norm:          2314,326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2006,686 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 524386,653 ops/s
[info]                  ·gc.alloc.rate:                   773,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              2319,979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2008,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   524814,860 ±(99.9%) 4297,621 ops/s [Average]
[info]   (min, avg, max) = (523467,617, 524814,860, 526030,030), stdev = 1116,078
[info]   CI (99.9%): [520517,239, 529112,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   779,157 ±(99.9%) 48,054 MB/sec [Average]
[info]   (min, avg, max) = (771,211, 779,157, 801,122), stdev = 12,479
[info]   CI (99.9%): [731,103, 827,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2335,844 ±(99.9%) 156,499 B/op [Average]
[info]   (min, avg, max) = (2311,734, 2335,844, 2407,946), stdev = 40,642
[info]   CI (99.9%): [2179,345, 2492,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802,009 ±(99.9%) 1149,333 MB/sec [Average]
[info]   (min, avg, max) = (667,365, 802,009, 1335,941), stdev = 298,478
[info]   CI (99.9%): [≈ 0, 1951,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2405,363 ±(99.9%) 3465,907 B/op [Average]
[info]   (min, avg, max) = (1996,041, 2405,363, 4015,461), stdev = 900,085
[info]   CI (99.9%): [≈ 0, 5871,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,02% complete, ETA 02:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104812,426 ops/s
[info] # Warmup Iteration   2: 172687,394 ops/s
[info] # Warmup Iteration   3: 176766,046 ops/s
[info] # Warmup Iteration   4: 175361,748 ops/s
[info] # Warmup Iteration   5: 177021,821 ops/s
[info] Iteration   1: 176569,836 ops/s
[info]                  ·gc.alloc.rate:               1055,718 MB/sec
[info]                  ·gc.alloc.rate.norm:          9406,630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11972,716 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 177440,329 ops/s
[info]                  ·gc.alloc.rate:               1043,475 MB/sec
[info]                  ·gc.alloc.rate.norm:          9252,693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5958,490 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 176652,128 ops/s
[info]                  ·gc.alloc.rate:                   1065,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              9489,512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11975,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,371 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 177376,305 ops/s
[info]                  ·gc.alloc.rate:               1051,406 MB/sec
[info]                  ·gc.alloc.rate.norm:          9325,467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5963,594 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 176645,936 ops/s
[info]                  ·gc.alloc.rate:                   1073,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              9557,417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11982,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,521 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   176936,907 ±(99.9%) 1664,049 ops/s [Average]
[info]   (min, avg, max) = (176569,836, 176936,907, 177440,329), stdev = 432,148
[info]   CI (99.9%): [175272,858, 178600,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1057,842 ±(99.9%) 44,907 MB/sec [Average]
[info]   (min, avg, max) = (1043,475, 1057,842, 1073,102), stdev = 11,662
[info]   CI (99.9%): [1012,935, 1102,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9406,344 ±(99.9%) 471,172 B/op [Average]
[info]   (min, avg, max) = (9252,693, 9406,344, 9557,417), stdev = 122,362
[info]   CI (99.9%): [8935,172, 9877,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,625 ±(99.9%) 1418,204 MB/sec [Average]
[info]   (min, avg, max) = (671,970, 1075,625, 1345,370), stdev = 368,303
[info]   CI (99.9%): [≈ 0, 2493,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9570,626 ±(99.9%) 12688,205 B/op [Average]
[info]   (min, avg, max) = (5958,490, 9570,626, 11982,335), stdev = 3295,087
[info]   CI (99.9%): [≈ 0, 22258,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,604 ±(99.9%) 5,110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 2,978), stdev = 1,327
[info]   CI (99.9%): [≈ 0, 5,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,378 ±(99.9%) 45,515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,378, 26,521), stdev = 11,820
[info]   CI (99.9%): [≈ 0, 50,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,22% complete, ETA 02:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7434,401 ops/s
[info] # Warmup Iteration   2: 17730,122 ops/s
[info] # Warmup Iteration   3: 19126,874 ops/s
[info] # Warmup Iteration   4: 19116,233 ops/s
[info] # Warmup Iteration   5: 18983,419 ops/s
[info] Iteration   1: 18783,294 ops/s
[info]                  ·gc.alloc.rate:                   1510,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              126533,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112520,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,744 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 18740,810 ops/s
[info]                  ·gc.alloc.rate:                   1516,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              127317,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112772,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,748 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 19152,907 ops/s
[info]                  ·gc.alloc.rate:                   1547,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              127077,191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165466,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311,311 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 19197,708 ops/s
[info]                  ·gc.alloc.rate:               1547,183 MB/sec
[info]                  ·gc.alloc.rate.norm:          126787,581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109761,367 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 19001,374 ops/s
[info]                  ·gc.alloc.rate:                   1517,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              125654,216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110788,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,448 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   18975,219 ±(99.9%) 802,056 ops/s [Average]
[info]   (min, avg, max) = (18740,810, 18975,219, 19197,708), stdev = 208,291
[info]   CI (99.9%): [18173,162, 19777,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1527,839 ±(99.9%) 68,479 MB/sec [Average]
[info]   (min, avg, max) = (1510,761, 1527,839, 1547,183), stdev = 17,784
[info]   CI (99.9%): [1459,360, 1596,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126673,822 ±(99.9%) 2472,302 B/op [Average]
[info]   (min, avg, max) = (125654,216, 126673,822, 127317,120), stdev = 642,049
[info]   CI (99.9%): [124201,520, 129146,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475,737 ±(99.9%) 1159,520 MB/sec [Average]
[info]   (min, avg, max) = (1338,047, 1475,737, 2014,387), stdev = 301,124
[info]   CI (99.9%): [316,218, 2635,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122262,127 ±(99.9%) 93124,248 B/op [Average]
[info]   (min, avg, max) = (109761,367, 122262,127, 165466,683), stdev = 24184,071
[info]   CI (99.9%): [29137,880, 215386,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 6,491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,790), stdev = 1,686
[info]   CI (99.9%): [≈ 0, 7,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63,650 ±(99.9%) 533,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63,650, 311,311), stdev = 138,452
[info]   CI (99.9%): [≈ 0, 596,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 6,000), stdev = 1,871
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,43% complete, ETA 02:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12629,409 ops/s
[info] # Warmup Iteration   2: 38517,407 ops/s
[info] # Warmup Iteration   3: 38966,959 ops/s
[info] # Warmup Iteration   4: 38255,549 ops/s
[info] # Warmup Iteration   5: 39152,823 ops/s
[info] Iteration   1: 38871,013 ops/s
[info]                  ·gc.alloc.rate:                   1082,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              43802,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54129,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,686 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 37385,474 ops/s
[info]                  ·gc.alloc.rate:               1019,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          42918,728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28154,208 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 39067,282 ops/s
[info]                  ·gc.alloc.rate:                   1087,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              43806,516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53912,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,839 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 39579,269 ops/s
[info]                  ·gc.alloc.rate:                   1088,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              43258,452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26621,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,828 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 39383,364 ops/s
[info]                  ·gc.alloc.rate:                   1108,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              44281,111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53530,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139,750 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   38857,280 ±(99.9%) 3339,496 ops/s [Average]
[info]   (min, avg, max) = (37385,474, 38857,280, 39579,269), stdev = 867,257
[info]   CI (99.9%): [35517,784, 42196,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1077,372 ±(99.9%) 129,559 MB/sec [Average]
[info]   (min, avg, max) = (1019,883, 1077,372, 1108,500), stdev = 33,646
[info]   CI (99.9%): [947,812, 1206,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43613,472 ±(99.9%) 2044,352 B/op [Average]
[info]   (min, avg, max) = (42918,728, 43613,472, 44281,111), stdev = 530,912
[info]   CI (99.9%): [41569,121, 45657,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071,019 ±(99.9%) 1411,695 MB/sec [Average]
[info]   (min, avg, max) = (669,032, 1071,019, 1340,051), stdev = 366,613
[info]   CI (99.9%): [≈ 0, 2482,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43269,758 ±(99.9%) 55871,895 B/op [Average]
[info]   (min, avg, max) = (26621,672, 43269,758, 54129,274), stdev = 14509,754
[info]   CI (99.9%): [≈ 0, 99141,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,716 ±(99.9%) 5,989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,716, 3,498), stdev = 1,555
[info]   CI (99.9%): [≈ 0, 6,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28,620 ±(99.9%) 239,225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28,620, 139,750), stdev = 62,126
[info]   CI (99.9%): [≈ 0, 267,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 6,000), stdev = 1,517
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,63% complete, ETA 02:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24235,095 ops/s
[info] # Warmup Iteration   2: 43589,514 ops/s
[info] # Warmup Iteration   3: 43700,286 ops/s
[info] # Warmup Iteration   4: 43633,266 ops/s
[info] # Warmup Iteration   5: 44129,726 ops/s
[info] Iteration   1: 43917,694 ops/s
[info]                  ·gc.alloc.rate:                   649,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              23260,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24051,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43943,604 ops/s
[info]                  ·gc.alloc.rate:               653,611 MB/sec
[info]                  ·gc.alloc.rate.norm:          23400,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24036,229 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 43954,292 ops/s
[info]                  ·gc.alloc.rate:               648,252 MB/sec
[info]                  ·gc.alloc.rate.norm:          23202,976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24041,593 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 43975,379 ops/s
[info]                  ·gc.alloc.rate:                   653,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              23374,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24030,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,745 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 43965,356 ops/s
[info]                  ·gc.alloc.rate:               652,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          23347,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24059,424 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   43951,265 ±(99.9%) 85,561 ops/s [Average]
[info]   (min, avg, max) = (43917,694, 43951,265, 43975,379), stdev = 22,220
[info]   CI (99.9%): [43865,704, 44036,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   651,389 ±(99.9%) 9,465 MB/sec [Average]
[info]   (min, avg, max) = (648,252, 651,389, 653,611), stdev = 2,458
[info]   CI (99.9%): [641,924, 660,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23317,083 ±(99.9%) 318,726 B/op [Average]
[info]   (min, avg, max) = (23202,976, 23317,083, 23400,483), stdev = 82,772
[info]   CI (99.9%): [22998,358, 23635,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,690 ±(99.9%) 1,546 MB/sec [Average]
[info]   (min, avg, max) = (671,358, 671,690, 672,347), stdev = 0,402
[info]   CI (99.9%): [670,144, 673,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24043,782 ±(99.9%) 44,359 B/op [Average]
[info]   (min, avg, max) = (24030,661, 24043,782, 24059,424), stdev = 11,520
[info]   CI (99.9%): [23999,423, 24088,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,298 ±(99.9%) 1,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,298, 0,746), stdev = 0,408
[info]   CI (99.9%): [≈ 0, 1,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,83% complete, ETA 02:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6164,686 ops/s
[info] # Warmup Iteration   2: 29655,543 ops/s
[info] # Warmup Iteration   3: 32577,492 ops/s
[info] # Warmup Iteration   4: 32474,061 ops/s
[info] # Warmup Iteration   5: 32281,314 ops/s
[info] Iteration   1: 32511,308 ops/s
[info]                  ·gc.alloc.rate:                   1654,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              80077,194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97218,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 32698,722 ops/s
[info]                  ·gc.alloc.rate:                   1657,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              79755,701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64475,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170,327 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 32699,372 ops/s
[info]                  ·gc.alloc.rate:                   1671,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              80438,785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96569,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 32745,654 ops/s
[info]                  ·gc.alloc.rate:                   1660,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              79759,537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64095,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,000 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 32425,589 ops/s
[info]                  ·gc.alloc.rate:                   1645,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              79847,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64729,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   32616,129 ±(99.9%) 537,095 ops/s [Average]
[info]   (min, avg, max) = (32425,589, 32616,129, 32745,654), stdev = 139,482
[info]   CI (99.9%): [32079,035, 33153,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1657,997 ±(99.9%) 36,582 MB/sec [Average]
[info]   (min, avg, max) = (1645,568, 1657,997, 1671,849), stdev = 9,500
[info]   CI (99.9%): [1621,415, 1694,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79975,755 ±(99.9%) 1116,513 B/op [Average]
[info]   (min, avg, max) = (79755,701, 79975,755, 80438,785), stdev = 289,955
[info]   CI (99.9%): [78859,242, 81092,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1604,866 ±(99.9%) 1417,478 MB/sec [Average]
[info]   (min, avg, max) = (1334,006, 1604,866, 2009,096), stdev = 368,114
[info]   CI (99.9%): [187,388, 3022,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77417,877 ±(99.9%) 68473,275 B/op [Average]
[info]   (min, avg, max) = (64095,297, 77417,877, 97218,753), stdev = 17782,292
[info]   CI (99.9%): [8944,602, 145891,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,929 ±(99.9%) 5,860 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,929, 3,540), stdev = 1,522
[info]   CI (99.9%): [≈ 0, 6,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44,690 ±(99.9%) 281,926 B/op [Average]
[info]   (min, avg, max) = (1,000, 44,690, 170,327), stdev = 73,215
[info]   CI (99.9%): [≈ 0, 326,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,800, 9,000), stdev = 2,775
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,03% complete, ETA 02:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11931,931 ops/s
[info] # Warmup Iteration   2: 27003,807 ops/s
[info] # Warmup Iteration   3: 26238,456 ops/s
[info] # Warmup Iteration   4: 27074,067 ops/s
[info] # Warmup Iteration   5: 26267,873 ops/s
[info] Iteration   1: 27339,259 ops/s
[info]                  ·gc.alloc.rate:                   2027,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              116657,719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115958,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186,938 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 27527,313 ops/s
[info]                  ·gc.alloc.rate:                   2039,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              116577,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114862,355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 27483,866 ops/s
[info]                  ·gc.alloc.rate:                   2051,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              117444,459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114893,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,576 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 27542,014 ops/s
[info]                  ·gc.alloc.rate:               2041,707 MB/sec
[info]                  ·gc.alloc.rate.norm:          116638,637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114670,750 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 27417,479 ops/s
[info]                  ·gc.alloc.rate:               2046,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          117455,819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115342,213 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27461,986 ±(99.9%) 323,281 ops/s [Average]
[info]   (min, avg, max) = (27339,259, 27461,986, 27542,014), stdev = 83,955
[info]   CI (99.9%): [27138,706, 27785,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2041,467 ±(99.9%) 35,598 MB/sec [Average]
[info]   (min, avg, max) = (2027,234, 2041,467, 2051,755), stdev = 9,245
[info]   CI (99.9%): [2005,869, 2077,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   116954,746 ±(99.9%) 1745,219 B/op [Average]
[info]   (min, avg, max) = (116577,097, 116954,746, 117455,819), stdev = 453,228
[info]   CI (99.9%): [115209,528, 118699,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2009,868 ±(99.9%) 12,376 MB/sec [Average]
[info]   (min, avg, max) = (2007,192, 2009,868, 2015,089), stdev = 3,214
[info]   CI (99.9%): [1997,492, 2022,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115145,552 ±(99.9%) 1990,803 B/op [Average]
[info]   (min, avg, max) = (114670,750, 115145,552, 115958,816), stdev = 517,005
[info]   CI (99.9%): [113154,749, 117136,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,795 ±(99.9%) 5,390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,795, 3,249), stdev = 1,400
[info]   CI (99.9%): [≈ 0, 6,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45,720 ±(99.9%) 310,195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45,720, 186,938), stdev = 80,557
[info]   CI (99.9%): [≈ 0, 355,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 8,000), stdev = 2,168
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,23% complete, ETA 02:02:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10726,435 ops/s
[info] # Warmup Iteration   2: 25705,557 ops/s
[info] # Warmup Iteration   3: 27062,904 ops/s
[info] # Warmup Iteration   4: 27073,859 ops/s
[info] # Warmup Iteration   5: 27096,919 ops/s
[info] Iteration   1: 27010,555 ops/s
[info]                  ·gc.alloc.rate:               1736,504 MB/sec
[info]                  ·gc.alloc.rate.norm:          101147,265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116866,388 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Iteration   2: 27140,443 ops/s
[info]                  ·gc.alloc.rate:                   1723,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              99892,549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77602,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235,385 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 27203,508 ops/s
[info]                  ·gc.alloc.rate:                   1738,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              100528,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115806,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 27284,673 ops/s
[info]                  ·gc.alloc.rate:               1730,073 MB/sec
[info]                  ·gc.alloc.rate.norm:          99754,994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76920,932 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 27204,510 ops/s
[info]                  ·gc.alloc.rate:                   1765,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              102082,202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115763,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,204 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27168,738 ±(99.9%) 393,408 ops/s [Average]
[info]   (min, avg, max) = (27010,555, 27168,738, 27284,673), stdev = 102,167
[info]   CI (99.9%): [26775,330, 27562,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1738,643 ±(99.9%) 61,461 MB/sec [Average]
[info]   (min, avg, max) = (1723,247, 1738,643, 1765,173), stdev = 15,961
[info]   CI (99.9%): [1677,182, 1800,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100681,023 ±(99.9%) 3695,058 B/op [Average]
[info]   (min, avg, max) = (99754,994, 100681,023, 102082,202), stdev = 959,595
[info]   CI (99.9%): [96985,965, 104376,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736,656 ±(99.9%) 1407,033 MB/sec [Average]
[info]   (min, avg, max) = (1334,057, 1736,656, 2006,371), stdev = 365,402
[info]   CI (99.9%): [329,623, 3143,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100591,824 ±(99.9%) 82032,042 B/op [Average]
[info]   (min, avg, max) = (76920,932, 100591,824, 116866,388), stdev = 21303,461
[info]   CI (99.9%): [18559,782, 182623,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,837 ±(99.9%) 6,941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,837, 4,061), stdev = 1,803
[info]   CI (99.9%): [≈ 0, 7,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48,522 ±(99.9%) 402,350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48,522, 235,385), stdev = 104,489
[info]   CI (99.9%): [≈ 0, 450,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 8,000), stdev = 2,302
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,43% complete, ETA 02:02:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15512,492 ops/s
[info] # Warmup Iteration   2: 29455,430 ops/s
[info] # Warmup Iteration   3: 29615,284 ops/s
[info] # Warmup Iteration   4: 29625,107 ops/s
[info] # Warmup Iteration   5: 29463,136 ops/s
[info] Iteration   1: 29430,838 ops/s
[info]                  ·gc.alloc.rate:                   1808,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              96698,522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107935,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130,244 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 29381,996 ops/s
[info]                  ·gc.alloc.rate:                   1780,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              95310,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72000,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 29362,475 ops/s
[info]                  ·gc.alloc.rate:               1808,241 MB/sec
[info]                  ·gc.alloc.rate.norm:          96883,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107895,968 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 29582,132 ops/s
[info]                  ·gc.alloc.rate:               1793,137 MB/sec
[info]                  ·gc.alloc.rate.norm:          95362,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71303,735 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 29729,009 ops/s
[info]                  ·gc.alloc.rate:                   1828,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              96760,291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106515,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,102 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   29497,290 ±(99.9%) 598,944 ops/s [Average]
[info]   (min, avg, max) = (29362,475, 29497,290, 29729,009), stdev = 155,544
[info]   CI (99.9%): [28898,346, 30096,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1803,746 ±(99.9%) 70,224 MB/sec [Average]
[info]   (min, avg, max) = (1780,056, 1803,746, 1828,451), stdev = 18,237
[info]   CI (99.9%): [1733,522, 1873,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96202,894 ±(99.9%) 3057,877 B/op [Average]
[info]   (min, avg, max) = (95310,483, 96202,894, 96883,140), stdev = 794,121
[info]   CI (99.9%): [93145,017, 99260,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746,216 ±(99.9%) 1418,334 MB/sec [Average]
[info]   (min, avg, max) = (1340,757, 1746,216, 2019,043), stdev = 368,337
[info]   CI (99.9%): [327,882, 3164,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   93130,140 ±(99.9%) 75536,133 B/op [Average]
[info]   (min, avg, max) = (71303,735, 93130,140, 107935,361), stdev = 19616,494
[info]   CI (99.9%): [17594,007, 168666,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,683 ±(99.9%) 4,094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 2,436), stdev = 1,063
[info]   CI (99.9%): [≈ 0, 4,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36,527 ±(99.9%) 218,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,527, 130,244), stdev = 56,842
[info]   CI (99.9%): [≈ 0, 255,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 7,000), stdev = 1,949
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,63% complete, ETA 02:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12330,720 ops/s
[info] # Warmup Iteration   2: 29378,825 ops/s
[info] # Warmup Iteration   3: 30385,645 ops/s
[info] # Warmup Iteration   4: 30237,980 ops/s
[info] # Warmup Iteration   5: 29386,775 ops/s
[info] Iteration   1: 29845,631 ops/s
[info]                  ·gc.alloc.rate:                   1714,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              90349,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106364,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 30450,020 ops/s
[info]                  ·gc.alloc.rate:                   1732,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              89501,564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69544,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172,140 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 30428,771 ops/s
[info]                  ·gc.alloc.rate:                   1756,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              90809,883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104151,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 30461,121 ops/s
[info]                  ·gc.alloc.rate:               1731,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          89415,225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69278,702 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 30453,870 ops/s
[info]                  ·gc.alloc.rate:                   1772,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              91589,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103931,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,152 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30327,883 ±(99.9%) 1039,118 ops/s [Average]
[info]   (min, avg, max) = (29845,631, 30327,883, 30461,121), stdev = 269,856
[info]   CI (99.9%): [29288,765, 31367,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1741,389 ±(99.9%) 89,113 MB/sec [Average]
[info]   (min, avg, max) = (1714,153, 1741,389, 1772,854), stdev = 23,142
[info]   CI (99.9%): [1652,277, 1830,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90333,127 ±(99.9%) 3518,190 B/op [Average]
[info]   (min, avg, max) = (89415,225, 90333,127, 91589,113), stdev = 913,663
[info]   CI (99.9%): [86814,937, 93851,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1746,318 ±(99.9%) 1415,288 MB/sec [Average]
[info]   (min, avg, max) = (1341,366, 1746,318, 2017,990), stdev = 367,546
[info]   CI (99.9%): [331,029, 3161,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   90654,166 ±(99.9%) 74760,952 B/op [Average]
[info]   (min, avg, max) = (69278,702, 90654,166, 106364,548), stdev = 19415,182
[info]   CI (99.9%): [15893,214, 165415,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,687 ±(99.9%) 5,693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,332), stdev = 1,478
[info]   CI (99.9%): [≈ 0, 6,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   35,509 ±(99.9%) 294,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35,509, 172,140), stdev = 76,385
[info]   CI (99.9%): [≈ 0, 329,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 8,000), stdev = 2,387
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,83% complete, ETA 02:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2466,102 ops/s
[info] # Warmup Iteration   2: 8079,524 ops/s
[info] # Warmup Iteration   3: 8663,916 ops/s
[info] # Warmup Iteration   4: 8685,199 ops/s
[info] # Warmup Iteration   5: 8486,503 ops/s
[info] Iteration   1: 8670,715 ops/s
[info]                  ·gc.alloc.rate:                   1291,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              234330,520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243011,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 8676,123 ops/s
[info]                  ·gc.alloc.rate:               1295,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          234983,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242992,203 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 8629,135 ops/s
[info]                  ·gc.alloc.rate:               1300,653 MB/sec
[info]                  ·gc.alloc.rate.norm:          237133,882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244436,903 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 8547,092 ops/s
[info]                  ·gc.alloc.rate:                   1275,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              234843,117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246875,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 8671,017 ops/s
[info]                  ·gc.alloc.rate:                   1308,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              237335,596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242769,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8638,816 ±(99.9%) 210,497 ops/s [Average]
[info]   (min, avg, max) = (8547,092, 8638,816, 8676,123), stdev = 54,665
[info]   CI (99.9%): [8428,320, 8849,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1294,370 ±(99.9%) 46,321 MB/sec [Average]
[info]   (min, avg, max) = (1275,862, 1294,370, 1308,026), stdev = 12,029
[info]   CI (99.9%): [1248,049, 1340,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   235725,233 ±(99.9%) 5394,940 B/op [Average]
[info]   (min, avg, max) = (234330,520, 235725,233, 237335,596), stdev = 1401,049
[info]   CI (99.9%): [230330,292, 241120,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1339,846 ±(99.9%) 4,884 MB/sec [Average]
[info]   (min, avg, max) = (1337,974, 1339,846, 1341,231), stdev = 1,268
[info]   CI (99.9%): [1334,963, 1344,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   244017,068 ±(99.9%) 6659,357 B/op [Average]
[info]   (min, avg, max) = (242769,585, 244017,068, 246875,262), stdev = 1729,414
[info]   CI (99.9%): [237357,711, 250676,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,841 ±(99.9%) 6,711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,841, 3,956), stdev = 1,743
[info]   CI (99.9%): [≈ 0, 7,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   154,703 ±(99.9%) 1235,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 154,703, 728,178), stdev = 320,882
[info]   CI (99.9%): [≈ 0, 1390,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,03% complete, ETA 02:01:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8379,262 ops/s
[info] # Warmup Iteration   2: 17716,305 ops/s
[info] # Warmup Iteration   3: 19188,682 ops/s
[info] # Warmup Iteration   4: 19334,607 ops/s
[info] # Warmup Iteration   5: 19284,104 ops/s
[info] Iteration   1: 19008,528 ops/s
[info]                  ·gc.alloc.rate:                   1789,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              148124,409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166949,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,447 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 19427,106 ops/s
[info]                  ·gc.alloc.rate:                   1801,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              145905,602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163232,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301,846 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 19537,123 ops/s
[info]                  ·gc.alloc.rate:                   1764,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              142087,510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108012,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,677 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19495,824 ops/s
[info]                  ·gc.alloc.rate:                   1799,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              145183,443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162171,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 19578,968 ops/s
[info]                  ·gc.alloc.rate:               1780,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          143037,566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107625,888 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19409,510 ±(99.9%) 889,715 ops/s [Average]
[info]   (min, avg, max) = (19008,528, 19409,510, 19578,968), stdev = 231,056
[info]   CI (99.9%): [18519,795, 20299,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1787,002 ±(99.9%) 58,496 MB/sec [Average]
[info]   (min, avg, max) = (1764,520, 1787,002, 1801,620), stdev = 15,191
[info]   CI (99.9%): [1728,507, 1845,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144867,706 ±(99.9%) 9205,765 B/op [Average]
[info]   (min, avg, max) = (142087,510, 144867,706, 148124,409), stdev = 2390,708
[info]   CI (99.9%): [135661,941, 154073,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744,620 ±(99.9%) 1421,114 MB/sec [Average]
[info]   (min, avg, max) = (1339,338, 1744,620, 2017,146), stdev = 369,059
[info]   CI (99.9%): [323,506, 3165,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141598,439 ±(99.9%) 118936,021 B/op [Average]
[info]   (min, avg, max) = (107625,888, 141598,439, 166949,272), stdev = 30887,307
[info]   CI (99.9%): [22662,418, 260534,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,783 ±(99.9%) 6,340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,783, 3,727), stdev = 1,647
[info]   CI (99.9%): [≈ 0, 7,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63,410 ±(99.9%) 513,462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63,410, 301,846), stdev = 133,344
[info]   CI (99.9%): [≈ 0, 576,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 8,000), stdev = 2,608
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,23% complete, ETA 02:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14426,949 ops/s
[info] # Warmup Iteration   2: 43667,401 ops/s
[info] # Warmup Iteration   3: 44510,040 ops/s
[info] # Warmup Iteration   4: 44800,492 ops/s
[info] # Warmup Iteration   5: 42351,798 ops/s
[info] Iteration   1: 44838,882 ops/s
[info]                  ·gc.alloc.rate:                   1271,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              44601,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46880,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,461 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 44636,502 ops/s
[info]                  ·gc.alloc.rate:                   1272,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              44855,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47114,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 44736,337 ops/s
[info]                  ·gc.alloc.rate:               1260,285 MB/sec
[info]                  ·gc.alloc.rate.norm:          44320,919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47056,444 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 44737,411 ops/s
[info]                  ·gc.alloc.rate:                   1271,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              44713,522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47101,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 44924,672 ops/s
[info]                  ·gc.alloc.rate:               1264,849 MB/sec
[info]                  ·gc.alloc.rate.norm:          44294,172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23382,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   44774,761 ±(99.9%) 424,323 ops/s [Average]
[info]   (min, avg, max) = (44636,502, 44774,761, 44924,672), stdev = 110,195
[info]   CI (99.9%): [44350,438, 45199,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1268,108 ±(99.9%) 20,540 MB/sec [Average]
[info]   (min, avg, max) = (1260,285, 1268,108, 1272,629), stdev = 5,334
[info]   CI (99.9%): [1247,569, 1288,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44556,960 ±(99.9%) 943,484 B/op [Average]
[info]   (min, avg, max) = (44294,172, 44556,960, 44855,139), stdev = 245,020
[info]   CI (99.9%): [43613,475, 45500,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,629 ±(99.9%) 1153,658 MB/sec [Average]
[info]   (min, avg, max) = (667,690, 1203,629, 1339,361), stdev = 299,601
[info]   CI (99.9%): [49,971, 2357,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42306,982 ±(99.9%) 40738,906 B/op [Average]
[info]   (min, avg, max) = (23382,066, 42306,982, 47114,872), stdev = 10579,764
[info]   CI (99.9%): [1568,077, 83045,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,837 ±(99.9%) 7,029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,837, 4,102), stdev = 1,825
[info]   CI (99.9%): [≈ 0, 7,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29,438 ±(99.9%) 247,183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29,438, 144,262), stdev = 64,193
[info]   CI (99.9%): [≈ 0, 276,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,600, 6,000), stdev = 2,191
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,43% complete, ETA 02:01:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40551,460 ops/s
[info] # Warmup Iteration   2: 69983,044 ops/s
[info] # Warmup Iteration   3: 70237,037 ops/s
[info] # Warmup Iteration   4: 71012,368 ops/s
[info] # Warmup Iteration   5: 69407,019 ops/s
[info] Iteration   1: 70737,713 ops/s
[info]                  ·gc.alloc.rate:               811,361 MB/sec
[info]                  ·gc.alloc.rate.norm:          18045,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14932,230 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 69199,749 ops/s
[info]                  ·gc.alloc.rate:                   789,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              17948,312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15263,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,473 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 70705,892 ops/s
[info]                  ·gc.alloc.rate:                   801,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              17844,708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14953,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 70725,628 ops/s
[info]                  ·gc.alloc.rate:               801,129 MB/sec
[info]                  ·gc.alloc.rate.norm:          17820,545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14948,952 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 70042,663 ops/s
[info]                  ·gc.alloc.rate:               794,364 MB/sec
[info]                  ·gc.alloc.rate.norm:          17842,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15101,530 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   70282,329 ±(99.9%) 2592,198 ops/s [Average]
[info]   (min, avg, max) = (69199,749, 70282,329, 70737,713), stdev = 673,185
[info]   CI (99.9%): [67690,131, 72874,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799,654 ±(99.9%) 32,018 MB/sec [Average]
[info]   (min, avg, max) = (789,455, 799,654, 811,361), stdev = 8,315
[info]   CI (99.9%): [767,636, 831,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17900,287 ±(99.9%) 366,432 B/op [Average]
[info]   (min, avg, max) = (17820,545, 17900,287, 18045,568), stdev = 95,161
[info]   CI (99.9%): [17533,855, 18266,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,831 ±(99.9%) 1,692 MB/sec [Average]
[info]   (min, avg, max) = (671,359, 671,831, 672,341), stdev = 0,440
[info]   CI (99.9%): [670,139, 673,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15039,983 ±(99.9%) 548,028 B/op [Average]
[info]   (min, avg, max) = (14932,230, 15039,983, 15263,391), stdev = 142,321
[info]   CI (99.9%): [14491,955, 15588,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,187 ±(99.9%) 0,988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,187, 0,473), stdev = 0,257
[info]   CI (99.9%): [≈ 0, 1,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,63% complete, ETA 02:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4767,021 ops/s
[info] # Warmup Iteration   2: 28713,129 ops/s
[info] # Warmup Iteration   3: 35247,166 ops/s
[info] # Warmup Iteration   4: 35365,603 ops/s
[info] # Warmup Iteration   5: 35351,815 ops/s
[info] Iteration   1: 34202,518 ops/s
[info]                  ·gc.alloc.rate:                   2249,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              103471,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92492,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,852 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 35406,811 ops/s
[info]                  ·gc.alloc.rate:                   2326,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              103393,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89478,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,925 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 35468,138 ops/s
[info]                  ·gc.alloc.rate:                   2347,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              104123,865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119334,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,847 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 35485,091 ops/s
[info]                  ·gc.alloc.rate:               2346,433 MB/sec
[info]                  ·gc.alloc.rate.norm:          104039,408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89624,279 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 33946,630 ops/s
[info]                  ·gc.alloc.rate:               2249,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          104261,668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93887,578 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   34901,838 ±(99.9%) 2930,887 ops/s [Average]
[info]   (min, avg, max) = (33946,630, 34901,838, 35485,091), stdev = 761,142
[info]   CI (99.9%): [31970,951, 37832,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2304,004 ±(99.9%) 193,828 MB/sec [Average]
[info]   (min, avg, max) = (2249,457, 2304,004, 2347,491), stdev = 50,336
[info]   CI (99.9%): [2110,176, 2497,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103857,801 ±(99.9%) 1531,177 B/op [Average]
[info]   (min, avg, max) = (103393,059, 103857,801, 104261,668), stdev = 397,642
[info]   CI (99.9%): [102326,624, 105388,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152,433 ±(99.9%) 1158,275 MB/sec [Average]
[info]   (min, avg, max) = (2010,786, 2152,433, 2690,414), stdev = 300,800
[info]   CI (99.9%): [994,158, 3310,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   96963,487 ±(99.9%) 48699,376 B/op [Average]
[info]   (min, avg, max) = (89478,643, 96963,487, 119334,374), stdev = 12647,073
[info]   CI (99.9%): [48264,112, 145662,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,225 ±(99.9%) 1,803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,225, 1,062), stdev = 0,468
[info]   CI (99.9%): [≈ 0, 2,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10,325 ±(99.9%) 82,984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,325, 48,852), stdev = 21,551
[info]   CI (99.9%): [≈ 0, 93,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,84% complete, ETA 02:00:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11028,096 ops/s
[info] # Warmup Iteration   2: 28707,448 ops/s
[info] # Warmup Iteration   3: 29894,619 ops/s
[info] # Warmup Iteration   4: 29779,371 ops/s
[info] # Warmup Iteration   5: 29954,150 ops/s
[info] Iteration   1: 29907,079 ops/s
[info]                  ·gc.alloc.rate:                   1925,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              101271,351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105719,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166,502 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 30203,046 ops/s
[info]                  ·gc.alloc.rate:                   1942,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              101182,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104552,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 29989,078 ops/s
[info]                  ·gc.alloc.rate:               1931,457 MB/sec
[info]                  ·gc.alloc.rate.norm:          101322,527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105088,333 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 29875,638 ops/s
[info]                  ·gc.alloc.rate:               1923,533 MB/sec
[info]                  ·gc.alloc.rate.norm:          101293,245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105520,834 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 30111,123 ops/s
[info]                  ·gc.alloc.rate:               1925,166 MB/sec
[info]                  ·gc.alloc.rate.norm:          100592,648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69874,893 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   30017,193 ±(99.9%) 531,882 ops/s [Average]
[info]   (min, avg, max) = (29875,638, 30017,193, 30203,046), stdev = 138,128
[info]   CI (99.9%): [29485,310, 30549,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1929,551 ±(99.9%) 30,191 MB/sec [Average]
[info]   (min, avg, max) = (1923,533, 1929,551, 1942,480), stdev = 7,840
[info]   CI (99.9%): [1899,360, 1959,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101132,369 ±(99.9%) 1179,214 B/op [Average]
[info]   (min, avg, max) = (100592,648, 101132,369, 101322,527), stdev = 306,238
[info]   CI (99.9%): [99953,156, 102311,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872,240 ±(99.9%) 1151,581 MB/sec [Average]
[info]   (min, avg, max) = (1337,282, 1872,240, 2009,683), stdev = 299,062
[info]   CI (99.9%): [720,659, 3023,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   98151,220 ±(99.9%) 60891,396 B/op [Average]
[info]   (min, avg, max) = (69874,893, 98151,220, 105719,904), stdev = 15813,302
[info]   CI (99.9%): [37259,824, 159042,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,787 ±(99.9%) 5,278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,787, 3,165), stdev = 1,371
[info]   CI (99.9%): [≈ 0, 6,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41,327 ±(99.9%) 277,633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,327, 166,502), stdev = 72,100
[info]   CI (99.9%): [≈ 0, 318,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 9,000), stdev = 2,775
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,04% complete, ETA 02:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20057,759 ops/s
[info] # Warmup Iteration   2: 37170,583 ops/s
[info] # Warmup Iteration   3: 37576,699 ops/s
[info] # Warmup Iteration   4: 37758,128 ops/s
[info] # Warmup Iteration   5: 38208,238 ops/s
[info] Iteration   1: 37699,344 ops/s
[info]                  ·gc.alloc.rate:                   1705,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              71184,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84248,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,869 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 38185,110 ops/s
[info]                  ·gc.alloc.rate:                   1727,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              71168,363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55458,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119,256 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 38238,258 ops/s
[info]                  ·gc.alloc.rate:                   1726,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              71051,528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82878,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,421 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38301,124 ops/s
[info]                  ·gc.alloc.rate:                   1717,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              70532,827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55126,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,855 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 38284,768 ops/s
[info]                  ·gc.alloc.rate:                   1757,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              72213,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82730,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,567 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   38141,721 ±(99.9%) 967,982 ops/s [Average]
[info]   (min, avg, max) = (37699,344, 38141,721, 38301,124), stdev = 251,382
[info]   CI (99.9%): [37173,739, 39109,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1726,895 ±(99.9%) 73,903 MB/sec [Average]
[info]   (min, avg, max) = (1705,700, 1726,895, 1757,366), stdev = 19,192
[info]   CI (99.9%): [1652,992, 1800,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   71230,043 ±(99.9%) 2350,270 B/op [Average]
[info]   (min, avg, max) = (70532,827, 71230,043, 72213,041), stdev = 610,358
[info]   CI (99.9%): [68879,774, 73580,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746,910 ±(99.9%) 1416,205 MB/sec [Average]
[info]   (min, avg, max) = (1342,050, 1746,910, 2018,728), stdev = 367,784
[info]   CI (99.9%): [330,705, 3163,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   72088,309 ±(99.9%) 59085,869 B/op [Average]
[info]   (min, avg, max) = (55126,264, 72088,309, 84248,157), stdev = 15344,412
[info]   CI (99.9%): [13002,440, 131174,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,675 ±(99.9%) 4,812 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,675, 2,894), stdev = 1,250
[info]   CI (99.9%): [≈ 0, 5,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27,794 ±(99.9%) 198,275 B/op [Average]
[info]   (min, avg, max) = (0,855, 27,794, 119,256), stdev = 51,491
[info]   CI (99.9%): [≈ 0, 226,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 8,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,24% complete, ETA 01:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23171,927 ops/s
[info] # Warmup Iteration   2: 37421,682 ops/s
[info] # Warmup Iteration   3: 37619,440 ops/s
[info] # Warmup Iteration   4: 36947,563 ops/s
[info] # Warmup Iteration   5: 37840,722 ops/s
[info] Iteration   1: 37861,455 ops/s
[info]                  ·gc.alloc.rate:                   1644,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              68338,595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55945,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,731 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 37893,767 ops/s
[info]                  ·gc.alloc.rate:                   1661,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              68987,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83897,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125,362 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 37888,741 ops/s
[info]                  ·gc.alloc.rate:                   1648,440 MB/sec
[info]                  ·gc.alloc.rate.norm:              68449,271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55837,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,865 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36001,296 ops/s
[info]                  ·gc.alloc.rate:                   1553,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              67873,654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58703,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,460 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37141,470 ops/s
[info]                  ·gc.alloc.rate:                   1641,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              69522,449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85358,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,175 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   37357,346 ±(99.9%) 3169,321 ops/s [Average]
[info]   (min, avg, max) = (36001,296, 37357,346, 37893,767), stdev = 823,062
[info]   CI (99.9%): [34188,025, 40526,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1629,852 ±(99.9%) 167,640 MB/sec [Average]
[info]   (min, avg, max) = (1553,205, 1629,852, 1661,637), stdev = 43,536
[info]   CI (99.9%): [1462,212, 1797,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68634,297 ±(99.9%) 2445,862 B/op [Average]
[info]   (min, avg, max) = (67873,654, 68634,297, 69522,449), stdev = 635,183
[info]   CI (99.9%): [66188,434, 71080,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1614,086 ±(99.9%) 1419,731 MB/sec [Average]
[info]   (min, avg, max) = (1343,367, 1614,086, 2020,764), stdev = 368,700
[info]   CI (99.9%): [194,354, 3033,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   67948,611 ±(99.9%) 58830,841 B/op [Average]
[info]   (min, avg, max) = (55837,723, 67948,611, 85358,399), stdev = 15278,183
[info]   CI (99.9%): [9117,770, 126779,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,671 ±(99.9%) 5,060 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,671, 3,019), stdev = 1,314
[info]   CI (99.9%): [≈ 0, 5,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   27,918 ±(99.9%) 209,941 B/op [Average]
[info]   (min, avg, max) = (0,865, 27,918, 125,362), stdev = 54,521
[info]   CI (99.9%): [≈ 0, 237,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,789
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,44% complete, ETA 01:59:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135744,795 ops/s
[info] # Warmup Iteration   2: 365903,164 ops/s
[info] # Warmup Iteration   3: 379175,706 ops/s
[info] # Warmup Iteration   4: 376745,202 ops/s
[info] # Warmup Iteration   5: 378174,819 ops/s
[info] Iteration   1: 377713,694 ops/s
[info]                  ·gc.alloc.rate:                   2124,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              8847,371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8393,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 378099,098 ops/s
[info]                  ·gc.alloc.rate:                   2150,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              8949,676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8362,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 380208,753 ops/s
[info]                  ·gc.alloc.rate:                   2165,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              8960,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8313,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 380622,641 ops/s
[info]                  ·gc.alloc.rate:               2167,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          8958,110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8309,768 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 379762,773 ops/s
[info]                  ·gc.alloc.rate:               2163,202 MB/sec
[info]                  ·gc.alloc.rate.norm:          8961,911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8346,922 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   379281,392 ±(99.9%) 5000,714 ops/s [Average]
[info]   (min, avg, max) = (377713,694, 379281,392, 380622,641), stdev = 1298,669
[info]   CI (99.9%): [374280,678, 384282,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2154,130 ±(99.9%) 69,382 MB/sec [Average]
[info]   (min, avg, max) = (2124,030, 2154,130, 2167,244), stdev = 18,018
[info]   CI (99.9%): [2084,747, 2223,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8935,454 ±(99.9%) 190,466 B/op [Average]
[info]   (min, avg, max) = (8847,371, 8935,454, 8961,911), stdev = 49,463
[info]   CI (99.9%): [8744,988, 9125,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011,801 ±(99.9%) 11,104 MB/sec [Average]
[info]   (min, avg, max) = (2009,088, 2011,801, 2015,076), stdev = 2,884
[info]   CI (99.9%): [2000,697, 2022,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8345,250 ±(99.9%) 134,921 B/op [Average]
[info]   (min, avg, max) = (8309,768, 8345,250, 8393,538), stdev = 35,039
[info]   CI (99.9%): [8210,329, 8480,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,729 ±(99.9%) 6,186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,729, 3,603), stdev = 1,606
[info]   CI (99.9%): [≈ 0, 6,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,036 ±(99.9%) 25,767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,036, 15,006), stdev = 6,692
[info]   CI (99.9%): [≈ 0, 28,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 5,000), stdev = 0,894
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,64% complete, ETA 01:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,937 ops/s
[info] # Warmup Iteration   2: 1594414,800 ops/s
[info] # Warmup Iteration   3: 1641834,668 ops/s
[info] # Warmup Iteration   4: 1652525,729 ops/s
[info] # Warmup Iteration   5: 1666557,025 ops/s
[info] Iteration   1: 1669340,808 ops/s
[info]                  ·gc.alloc.rate:                   548,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              516,943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1682730,472 ops/s
[info]                  ·gc.alloc.rate:               556,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          519,896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 622,418 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1677849,591 ops/s
[info]                  ·gc.alloc.rate:                   554,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              519,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1678305,052 ops/s
[info]                  ·gc.alloc.rate:      529,099 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1671292,720 ops/s
[info]                  ·gc.alloc.rate:               540,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          508,775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 627,282 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1675903,728 ±(99.9%) 21133,905 ops/s [Average]
[info]   (min, avg, max) = (1669340,808, 1675903,728, 1682730,472), stdev = 5488,408
[info]   CI (99.9%): [1654769,823, 1697037,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   545,695 ±(99.9%) 42,726 MB/sec [Average]
[info]   (min, avg, max) = (529,099, 545,695, 556,062), stdev = 11,096
[info]   CI (99.9%): [502,969, 588,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   512,282 ±(99.9%) 39,154 B/op [Average]
[info]   (min, avg, max) = (496,000, 512,282, 519,896), stdev = 10,168
[info]   CI (99.9%): [473,129, 551,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532,835 ±(99.9%) 1146,967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532,835, 666,377), stdev = 297,864
[info]   CI (99.9%): [≈ 0, 1679,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   500,394 ±(99.9%) 1077,164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 500,394, 627,415), stdev = 279,736
[info]   CI (99.9%): [≈ 0, 1577,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,014 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,059), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,84% complete, ETA 01:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326465,042 ops/s
[info] # Warmup Iteration   2: 712613,194 ops/s
[info] # Warmup Iteration   3: 744186,687 ops/s
[info] # Warmup Iteration   4: 740747,375 ops/s
[info] # Warmup Iteration   5: 741705,588 ops/s
[info] Iteration   1: 742310,570 ops/s
[info]                  ·gc.alloc.rate:               630,531 MB/sec
[info]                  ·gc.alloc.rate.norm:          1336,382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1413,065 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 741959,389 ops/s
[info]                  ·gc.alloc.rate:               633,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          1342,637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1413,676 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 741651,486 ops/s
[info]                  ·gc.alloc.rate:                   640,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359,206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 742578,047 ops/s
[info]                  ·gc.alloc.rate:               630,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          1335,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1413,906 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 742369,898 ops/s
[info]                  ·gc.alloc.rate:               633,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          1342,842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1415,809 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   742173,878 ±(99.9%) 1413,979 ops/s [Average]
[info]   (min, avg, max) = (741651,486, 742173,878, 742578,047), stdev = 367,206
[info]   CI (99.9%): [740759,899, 743587,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   633,654 ±(99.9%) 16,350 MB/sec [Average]
[info]   (min, avg, max) = (630,182, 633,654, 640,732), stdev = 4,246
[info]   CI (99.9%): [617,304, 650,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1343,242 ±(99.9%) 36,938 B/op [Average]
[info]   (min, avg, max) = (1335,140, 1343,242, 1359,206), stdev = 9,593
[info]   CI (99.9%): [1306,304, 1380,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667,236 ±(99.9%) 2,171 MB/sec [Average]
[info]   (min, avg, max) = (666,699, 667,236, 668,060), stdev = 0,564
[info]   CI (99.9%): [665,065, 669,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1414,427 ±(99.9%) 4,780 B/op [Average]
[info]   (min, avg, max) = (1413,065, 1414,427, 1415,809), stdev = 1,241
[info]   CI (99.9%): [1409,647, 1419,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,044), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,04% complete, ETA 01:58:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1332690,464 ops/s
[info] # Warmup Iteration   2: 2054105,684 ops/s
[info] # Warmup Iteration   3: 2083552,746 ops/s
[info] # Warmup Iteration   4: 2084046,872 ops/s
[info] # Warmup Iteration   5: 2070832,640 ops/s
[info] Iteration   1: 2084086,631 ops/s
[info]                  ·gc.alloc.rate:      402,705 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2028796,553 ops/s
[info]                  ·gc.alloc.rate:               427,370 MB/sec
[info]                  ·gc.alloc.rate.norm:          331,412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 519,843 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 2043303,977 ops/s
[info]                  ·gc.alloc.rate:      394,847 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1995851,044 ops/s
[info]                  ·gc.alloc.rate:                   407,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              321,200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,397 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2081126,630 ops/s
[info]                  ·gc.alloc.rate:                   419,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              317,392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2046632,967 ±(99.9%) 142793,660 ops/s [Average]
[info]   (min, avg, max) = (1995851,044, 2046632,967, 2084086,631), stdev = 37083,060
[info]   CI (99.9%): [1903839,307, 2189426,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   410,457 ±(99.9%) 50,446 MB/sec [Average]
[info]   (min, avg, max) = (394,847, 410,457, 427,370), stdev = 13,101
[info]   CI (99.9%): [360,011, 460,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315,601 ±(99.9%) 45,304 B/op [Average]
[info]   (min, avg, max) = (304,000, 315,601, 331,412), stdev = 11,765
[info]   CI (99.9%): [270,297, 360,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402,094 ±(99.9%) 1413,418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402,094, 670,434), stdev = 367,060
[info]   CI (99.9%): [≈ 0, 1815,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   310,906 ±(99.9%) 1093,301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 310,906, 528,423), stdev = 283,927
[info]   CI (99.9%): [≈ 0, 1404,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,616 ±(99.9%) 5,219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 3,041), stdev = 1,355
[info]   CI (99.9%): [≈ 0, 5,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,486 ±(99.9%) 4,114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,486, 2,397), stdev = 1,068
[info]   CI (99.9%): [≈ 0, 4,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,24% complete, ETA 01:58:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19229,836 ops/s
[info] # Warmup Iteration   2: 102710,485 ops/s
[info] # Warmup Iteration   3: 108599,277 ops/s
[info] # Warmup Iteration   4: 112005,608 ops/s
[info] # Warmup Iteration   5: 112580,653 ops/s
[info] Iteration   1: 113218,143 ops/s
[info]                  ·gc.alloc.rate:               3799,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          52799,194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3339,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46409,952 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 112484,182 ops/s
[info]                  ·gc.alloc.rate:                   3804,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              53210,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4024,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56293,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,583 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 112956,499 ops/s
[info]                  ·gc.alloc.rate:                   3796,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              52875,256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3369,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46925,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,580 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 113000,035 ops/s
[info]                  ·gc.alloc.rate:               3796,532 MB/sec
[info]                  ·gc.alloc.rate.norm:          52856,678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3380,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47064,571 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 111917,149 ops/s
[info]                  ·gc.alloc.rate:                   3789,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              53276,849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57179,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,464 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   112715,202 ±(99.9%) 2003,226 ops/s [Average]
[info]   (min, avg, max) = (111917,149, 112715,202, 113218,143), stdev = 520,231
[info]   CI (99.9%): [110711,976, 114718,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3797,374 ±(99.9%) 20,395 MB/sec [Average]
[info]   (min, avg, max) = (3789,899, 3797,374, 3804,478), stdev = 5,297
[info]   CI (99.9%): [3776,978, 3817,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53003,765 ±(99.9%) 855,540 B/op [Average]
[info]   (min, avg, max) = (52799,194, 53003,765, 53276,849), stdev = 222,181
[info]   CI (99.9%): [52148,226, 53859,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3636,377 ±(99.9%) 1442,886 MB/sec [Average]
[info]   (min, avg, max) = (3339,694, 3636,377, 4067,521), stdev = 374,713
[info]   CI (99.9%): [2193,491, 5079,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50774,599 ±(99.9%) 21012,499 B/op [Average]
[info]   (min, avg, max) = (46409,952, 50774,599, 57179,555), stdev = 5456,879
[info]   CI (99.9%): [29762,100, 71787,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,525 ±(99.9%) 2,309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,525, 1,464), stdev = 0,600
[info]   CI (99.9%): [≈ 0, 2,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 6,000), stdev = 0,894
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,44% complete, ETA 01:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315900,150 ops/s
[info] # Warmup Iteration   2: 725837,800 ops/s
[info] # Warmup Iteration   3: 749690,294 ops/s
[info] # Warmup Iteration   4: 752047,715 ops/s
[info] # Warmup Iteration   5: 752015,785 ops/s
[info] Iteration   1: 753762,927 ops/s
[info]                  ·gc.alloc.rate:                   2026,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              4229,763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4214,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,563 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 756723,952 ops/s
[info]                  ·gc.alloc.rate:                   2032,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226,426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4187,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,563 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 754983,548 ops/s
[info]                  ·gc.alloc.rate:               2030,123 MB/sec
[info]                  ·gc.alloc.rate.norm:          4230,469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4192,232 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 754257,067 ops/s
[info]                  ·gc.alloc.rate:                   2041,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              4259,127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4197,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 753478,084 ops/s
[info]                  ·gc.alloc.rate:               2041,076 MB/sec
[info]                  ·gc.alloc.rate.norm:          4261,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4207,712 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   754641,116 ±(99.9%) 4993,537 ops/s [Average]
[info]   (min, avg, max) = (753478,084, 754641,116, 756723,952), stdev = 1296,806
[info]   CI (99.9%): [749647,578, 759634,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2034,461 ±(99.9%) 25,925 MB/sec [Average]
[info]   (min, avg, max) = (2026,479, 2034,461, 2041,715), stdev = 6,733
[info]   CI (99.9%): [2008,536, 2060,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4241,492 ±(99.9%) 66,816 B/op [Average]
[info]   (min, avg, max) = (4226,426, 4241,492, 4261,674), stdev = 17,352
[info]   CI (99.9%): [4174,675, 4308,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2014,537 ±(99.9%) 11,129 MB/sec [Average]
[info]   (min, avg, max) = (2011,774, 2014,537, 2019,041), stdev = 2,890
[info]   CI (99.9%): [2003,408, 2025,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4199,953 ±(99.9%) 42,018 B/op [Average]
[info]   (min, avg, max) = (4187,799, 4199,953, 4214,237), stdev = 10,912
[info]   CI (99.9%): [4157,935, 4241,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,687 ±(99.9%) 5,308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,144), stdev = 1,378
[info]   CI (99.9%): [≈ 0, 5,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,434 ±(99.9%) 11,079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,434, 6,563), stdev = 2,877
[info]   CI (99.9%): [≈ 0, 12,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,64% complete, ETA 01:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192050,040 ops/s
[info] # Warmup Iteration   2: 384344,660 ops/s
[info] # Warmup Iteration   3: 401831,855 ops/s
[info] # Warmup Iteration   4: 403075,481 ops/s
[info] # Warmup Iteration   5: 401981,727 ops/s
[info] Iteration   1: 401069,644 ops/s
[info]                  ·gc.alloc.rate:               1388,439 MB/sec
[info]                  ·gc.alloc.rate.norm:          5446,579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5263,177 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 400715,831 ops/s
[info]                  ·gc.alloc.rate:                   1395,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5478,601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5270,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 385746,777 ops/s
[info]                  ·gc.alloc.rate:                   1333,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              5438,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5477,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,655 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 376432,644 ops/s
[info]                  ·gc.alloc.rate:                   1312,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              5484,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5609,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 402589,602 ops/s
[info]                  ·gc.alloc.rate:                   1404,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5486,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5234,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   393310,900 ±(99.9%) 44873,506 ops/s [Average]
[info]   (min, avg, max) = (376432,644, 393310,900, 402589,602), stdev = 11653,507
[info]   CI (99.9%): [348437,394, 438184,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1366,673 ±(99.9%) 158,522 MB/sec [Average]
[info]   (min, avg, max) = (1312,148, 1366,673, 1404,035), stdev = 41,168
[info]   CI (99.9%): [1208,150, 1525,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5466,821 ±(99.9%) 87,685 B/op [Average]
[info]   (min, avg, max) = (5438,043, 5466,821, 5486,870), stdev = 22,771
[info]   CI (99.9%): [5379,136, 5554,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341,711 ±(99.9%) 5,397 MB/sec [Average]
[info]   (min, avg, max) = (1339,372, 1341,711, 1343,059), stdev = 1,402
[info]   CI (99.9%): [1336,314, 1347,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5370,894 ±(99.9%) 634,169 B/op [Average]
[info]   (min, avg, max) = (5234,169, 5370,894, 5609,011), stdev = 164,692
[info]   CI (99.9%): [4736,725, 6005,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 5,149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,103), stdev = 1,337
[info]   CI (99.9%): [≈ 0, 5,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,085 ±(99.9%) 21,000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,085, 12,655), stdev = 5,454
[info]   CI (99.9%): [≈ 0, 24,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,84% complete, ETA 01:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31709,137 ops/s
[info] # Warmup Iteration   2: 1778420,193 ops/s
[info] # Warmup Iteration   3: 1832663,847 ops/s
[info] # Warmup Iteration   4: 1845063,080 ops/s
[info] # Warmup Iteration   5: 1841882,062 ops/s
[info] Iteration   1: 1849495,670 ops/s
[info]                  ·gc.alloc.rate:                   881,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              749,777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1852836,596 ops/s
[info]                  ·gc.alloc.rate:                   897,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              761,777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1793584,220 ops/s
[info]                  ·gc.alloc.rate:               848,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 585,100 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1855631,609 ops/s
[info]                  ·gc.alloc.rate:                   883,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              748,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1827763,722 ops/s
[info]                  ·gc.alloc.rate:               869,493 MB/sec
[info]                  ·gc.alloc.rate.norm:          748,383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 574,747 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1835862,363 ±(99.9%) 100372,707 ops/s [Average]
[info]   (min, avg, max) = (1793584,220, 1835862,363, 1855631,609), stdev = 26066,473
[info]   CI (99.9%): [1735489,656, 1936235,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   875,942 ±(99.9%) 70,055 MB/sec [Average]
[info]   (min, avg, max) = (848,541, 875,942, 897,162), stdev = 18,193
[info]   CI (99.9%): [805,886, 945,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   750,578 ±(99.9%) 25,414 B/op [Average]
[info]   (min, avg, max) = (744,274, 750,578, 761,777), stdev = 6,600
[info]   CI (99.9%): [725,164, 775,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800,471 ±(99.9%) 1147,092 MB/sec [Average]
[info]   (min, avg, max) = (666,366, 800,471, 1333,363), stdev = 297,896
[info]   CI (99.9%): [≈ 0, 1947,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   685,000 ±(99.9%) 962,983 B/op [Average]
[info]   (min, avg, max) = (566,135, 685,000, 1132,153), stdev = 250,084
[info]   CI (99.9%): [≈ 0, 1647,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,029), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,04% complete, ETA 01:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 565643,934 ops/s
[info] # Warmup Iteration   2: 1080945,551 ops/s
[info] # Warmup Iteration   3: 1105682,455 ops/s
[info] # Warmup Iteration   4: 1109385,137 ops/s
[info] # Warmup Iteration   5: 1118363,257 ops/s
[info] Iteration   1: 1124555,008 ops/s
[info]                  ·gc.alloc.rate:               817,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          1143,869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 935,507 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1130325,563 ops/s
[info]                  ·gc.alloc.rate:               819,746 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140,978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1118887,228 ops/s
[info]                  ·gc.alloc.rate:                   807,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              1135,499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1133825,821 ops/s
[info]                  ·gc.alloc.rate:                   817,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1134,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1121662,919 ops/s
[info]                  ·gc.alloc.rate:               820,127 MB/sec
[info]                  ·gc.alloc.rate.norm:          1150,302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 939,392 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1125851,308 ±(99.9%) 23684,843 ops/s [Average]
[info]   (min, avg, max) = (1118887,228, 1125851,308, 1133825,821), stdev = 6150,878
[info]   CI (99.9%): [1102166,465, 1149536,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   816,468 ±(99.9%) 19,781 MB/sec [Average]
[info]   (min, avg, max) = (807,556, 816,468, 820,127), stdev = 5,137
[info]   CI (99.9%): [796,687, 836,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1140,938 ±(99.9%) 25,351 B/op [Average]
[info]   (min, avg, max) = (1134,044, 1140,938, 1150,302), stdev = 6,584
[info]   CI (99.9%): [1115,587, 1166,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   669,041 ±(99.9%) 1,672 MB/sec [Average]
[info]   (min, avg, max) = (668,685, 669,041, 669,755), stdev = 0,434
[info]   CI (99.9%): [667,369, 670,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   934,937 ±(99.9%) 20,643 B/op [Average]
[info]   (min, avg, max) = (928,325, 934,937, 940,721), stdev = 5,361
[info]   CI (99.9%): [914,293, 955,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,029), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,24% complete, ETA 01:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1845989,928 ops/s
[info] # Warmup Iteration   2: 3032378,709 ops/s
[info] # Warmup Iteration   3: 3064704,111 ops/s
[info] # Warmup Iteration   4: 3067508,694 ops/s
[info] # Warmup Iteration   5: 3062384,173 ops/s
[info] Iteration   1: 3084890,545 ops/s
[info]                  ·gc.alloc.rate:                   1467,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              748,132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3073051,125 ops/s
[info]                  ·gc.alloc.rate:                   1461,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              748,433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3073439,136 ops/s
[info]                  ·gc.alloc.rate:                   1473,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              754,297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,482 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3088353,971 ops/s
[info]                  ·gc.alloc.rate:                   1468,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              748,223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     684,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3072399,879 ops/s
[info]                  ·gc.alloc.rate:               1499,175 MB/sec
[info]                  ·gc.alloc.rate.norm:          767,692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1030,858 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   3078426,931 ±(99.9%) 29226,057 ops/s [Average]
[info]   (min, avg, max) = (3072399,879, 3078426,931, 3088353,971), stdev = 7589,914
[info]   CI (99.9%): [3049200,875, 3107652,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1474,099 ±(99.9%) 56,285 MB/sec [Average]
[info]   (min, avg, max) = (1461,940, 1474,099, 1499,175), stdev = 14,617
[info]   CI (99.9%): [1417,814, 1530,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   753,355 ±(99.9%) 32,461 B/op [Average]
[info]   (min, avg, max) = (748,132, 753,355, 767,692), stdev = 8,430
[info]   CI (99.9%): [720,894, 785,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478,573 ±(99.9%) 1150,605 MB/sec [Average]
[info]   (min, avg, max) = (1343,383, 1478,573, 2013,095), stdev = 298,808
[info]   CI (99.9%): [327,968, 2629,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   755,772 ±(99.9%) 592,192 B/op [Average]
[info]   (min, avg, max) = (684,336, 755,772, 1030,858), stdev = 153,790
[info]   CI (99.9%): [163,581, 1347,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 4,862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 2,894), stdev = 1,263
[info]   CI (99.9%): [≈ 0, 5,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,328 ±(99.9%) 2,489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,328, 1,482), stdev = 0,646
[info]   CI (99.9%): [≈ 0, 2,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,140
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,45% complete, ETA 01:57:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2128979,017 ops/s
[info] # Warmup Iteration   2: 3566110,334 ops/s
[info] # Warmup Iteration   3: 3576077,074 ops/s
[info] # Warmup Iteration   4: 3576827,340 ops/s
[info] # Warmup Iteration   5: 3577399,646 ops/s
[info] Iteration   1: 3567584,743 ops/s
[info]                  ·gc.alloc.rate:      10,999 MB/sec
[info]                  ·gc.alloc.rate.norm: 4,851 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3572678,300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3582178,982 ops/s
[info]                  ·gc.alloc.rate:      0,280 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3577382,488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3576613,794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3575287,662 ±(99.9%) 21071,586 ops/s [Average]
[info]   (min, avg, max) = (3567584,743, 3575287,662, 3582178,982), stdev = 5472,224
[info]   CI (99.9%): [3554216,076, 3596359,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2,256 ±(99.9%) 18,826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2,256, 10,999), stdev = 4,889
[info]   CI (99.9%): [≈ 0, 21,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,995 ±(99.9%) 8,302 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,995, 4,851), stdev = 2,156
[info]   CI (99.9%): [≈ 0, 9,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,65% complete, ETA 01:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145023,548 ops/s
[info] # Warmup Iteration   2: 510844,242 ops/s
[info] # Warmup Iteration   3: 522647,597 ops/s
[info] # Warmup Iteration   4: 522902,046 ops/s
[info] # Warmup Iteration   5: 528712,066 ops/s
[info] Iteration   1: 505159,731 ops/s
[info]                  ·gc.alloc.rate:               607,601 MB/sec
[info]                  ·gc.alloc.rate.norm:          1892,320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2081,558 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 522242,518 ops/s
[info]                  ·gc.alloc.rate:               633,074 MB/sec
[info]                  ·gc.alloc.rate.norm:          1907,167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2013,481 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 525446,612 ops/s
[info]                  ·gc.alloc.rate:                   633,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1896,364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2002,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 528231,374 ops/s
[info]                  ·gc.alloc.rate:               632,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          1884,638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1991,627 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 528495,882 ops/s
[info]                  ·gc.alloc.rate:               629,295 MB/sec
[info]                  ·gc.alloc.rate.norm:          1873,459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1992,634 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   521915,224 ±(99.9%) 37359,342 ops/s [Average]
[info]   (min, avg, max) = (505159,731, 521915,224, 528495,882), stdev = 9702,102
[info]   CI (99.9%): [484555,882, 559274,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   627,218 ±(99.9%) 42,701 MB/sec [Average]
[info]   (min, avg, max) = (607,601, 627,218, 633,348), stdev = 11,089
[info]   CI (99.9%): [584,518, 669,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1890,790 ±(99.9%) 48,701 B/op [Average]
[info]   (min, avg, max) = (1873,459, 1890,790, 1907,167), stdev = 12,647
[info]   CI (99.9%): [1842,089, 1939,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668,687 ±(99.9%) 1,513 MB/sec [Average]
[info]   (min, avg, max) = (668,363, 668,687, 669,326), stdev = 0,393
[info]   CI (99.9%): [667,175, 670,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2016,296 ±(99.9%) 144,524 B/op [Average]
[info]   (min, avg, max) = (1991,627, 2016,296, 2081,558), stdev = 37,532
[info]   CI (99.9%): [1871,772, 2160,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,85% complete, ETA 01:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99332,142 ops/s
[info] # Warmup Iteration   2: 186852,245 ops/s
[info] # Warmup Iteration   3: 188728,964 ops/s
[info] # Warmup Iteration   4: 189153,481 ops/s
[info] # Warmup Iteration   5: 189711,093 ops/s
[info] Iteration   1: 190032,768 ops/s
[info]                  ·gc.alloc.rate:               1115,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          9234,730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5566,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 189238,562 ops/s
[info]                  ·gc.alloc.rate:               1126,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          9365,362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11179,581 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 190144,959 ops/s
[info]                  ·gc.alloc.rate:               1126,219 MB/sec
[info]                  ·gc.alloc.rate.norm:          9317,703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5563,542 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 189217,360 ops/s
[info]                  ·gc.alloc.rate:                   1123,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              9340,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11186,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,346 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 183351,543 ops/s
[info]                  ·gc.alloc.rate:                   1101,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              9455,559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11550,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28,412 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   188397,039 ±(99.9%) 10987,661 ops/s [Average]
[info]   (min, avg, max) = (183351,543, 188397,039, 190144,959), stdev = 2853,461
[info]   CI (99.9%): [177409,378, 199384,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1118,698 ±(99.9%) 39,968 MB/sec [Average]
[info]   (min, avg, max) = (1101,933, 1118,698, 1126,541), stdev = 10,380
[info]   CI (99.9%): [1078,730, 1158,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9342,782 ±(99.9%) 307,676 B/op [Average]
[info]   (min, avg, max) = (9234,730, 9342,782, 9455,559), stdev = 79,903
[info]   CI (99.9%): [9035,105, 9650,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076,209 ±(99.9%) 1419,386 MB/sec [Average]
[info]   (min, avg, max) = (672,376, 1076,209, 1346,070), stdev = 368,610
[info]   CI (99.9%): [≈ 0, 2495,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9009,383 ±(99.9%) 12121,285 B/op [Average]
[info]   (min, avg, max) = (5563,542, 9009,383, 11550,461), stdev = 3147,859
[info]   CI (99.9%): [≈ 0, 21130,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,671 ±(99.9%) 5,684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,311), stdev = 1,476
[info]   CI (99.9%): [≈ 0, 6,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,752 ±(99.9%) 48,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,752, 28,412), stdev = 12,668
[info]   CI (99.9%): [≈ 0, 54,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,05% complete, ETA 01:56:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55569,151 ops/s
[info] # Warmup Iteration   2: 168138,521 ops/s
[info] # Warmup Iteration   3: 176310,723 ops/s
[info] # Warmup Iteration   4: 178609,899 ops/s
[info] # Warmup Iteration   5: 179078,283 ops/s
[info] Iteration   1: 170188,906 ops/s
[info]                  ·gc.alloc.rate:                   2163,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              20003,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18573,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,385 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 178189,858 ops/s
[info]                  ·gc.alloc.rate:                   2265,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              20005,561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17774,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,919 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 178784,305 ops/s
[info]                  ·gc.alloc.rate:               2272,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          20001,662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23679,339 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 178141,659 ops/s
[info]                  ·gc.alloc.rate:               2265,018 MB/sec
[info]                  ·gc.alloc.rate.norm:          20003,382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17866,934 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 178942,554 ops/s
[info]                  ·gc.alloc.rate:                   2276,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              20014,212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17822,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   176849,456 ±(99.9%) 14401,883 ops/s [Average]
[info]   (min, avg, max) = (170188,906, 176849,456, 178942,554), stdev = 3740,123
[info]   CI (99.9%): [162447,574, 191251,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2248,814 ±(99.9%) 183,894 MB/sec [Average]
[info]   (min, avg, max) = (2163,811, 2248,814, 2276,356), stdev = 47,757
[info]   CI (99.9%): [2064,919, 2432,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20005,582 ±(99.9%) 19,337 B/op [Average]
[info]   (min, avg, max) = (20001,662, 20005,582, 20014,212), stdev = 5,022
[info]   CI (99.9%): [19986,244, 20024,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2152,664 ±(99.9%) 1158,985 MB/sec [Average]
[info]   (min, avg, max) = (2009,123, 2152,664, 2690,926), stdev = 300,985
[info]   CI (99.9%): [993,679, 3311,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19143,093 ±(99.9%) 9845,617 B/op [Average]
[info]   (min, avg, max) = (17774,070, 19143,093, 23679,339), stdev = 2556,875
[info]   CI (99.9%): [9297,476, 28988,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,297 ±(99.9%) 1,472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,297, 0,919), stdev = 0,382
[info]   CI (99.9%): [≈ 0, 1,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,25% complete, ETA 01:56:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187992,496 ops/s
[info] # Warmup Iteration   2: 468896,003 ops/s
[info] # Warmup Iteration   3: 501749,794 ops/s
[info] # Warmup Iteration   4: 497991,171 ops/s
[info] # Warmup Iteration   5: 502222,702 ops/s
[info] Iteration   1: 503777,116 ops/s
[info]                  ·gc.alloc.rate:      404,749 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 497699,889 ops/s
[info]                  ·gc.alloc.rate:               413,354 MB/sec
[info]                  ·gc.alloc.rate.norm:          1306,618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1617,715 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 502107,895 ops/s
[info]                  ·gc.alloc.rate:                   424,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1329,275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2087,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 488304,025 ops/s
[info]                  ·gc.alloc.rate:      392,310 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 500445,031 ops/s
[info]                  ·gc.alloc.rate:               420,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          1323,341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2094,814 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   498466,791 ±(99.9%) 23520,515 ops/s [Average]
[info]   (min, avg, max) = (488304,025, 498466,791, 503777,116), stdev = 6108,203
[info]   CI (99.9%): [474946,276, 521987,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   411,119 ±(99.9%) 49,763 MB/sec [Average]
[info]   (min, avg, max) = (392,310, 411,119, 424,243), stdev = 12,923
[info]   CI (99.9%): [361,356, 460,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1297,447 ±(99.9%) 121,842 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1297,447, 1329,275), stdev = 31,642
[info]   CI (99.9%): [1175,605, 1419,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368,896 ±(99.9%) 1319,294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368,896, 666,372), stdev = 342,616
[info]   CI (99.9%): [≈ 0, 1688,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1160,092 ±(99.9%) 4145,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1160,092, 2094,814), stdev = 1076,527
[info]   CI (99.9%): [≈ 0, 5305,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,065), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,643
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,45% complete, ETA 01:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 889449,922 ops/s
[info] # Warmup Iteration   2: 1343301,952 ops/s
[info] # Warmup Iteration   3: 1371923,857 ops/s
[info] # Warmup Iteration   4: 1372102,700 ops/s
[info] # Warmup Iteration   5: 1376386,514 ops/s
[info] Iteration   1: 1372361,029 ops/s
[info]                  ·gc.alloc.rate:               279,790 MB/sec
[info]                  ·gc.alloc.rate.norm:          320,725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 586,730 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1367334,740 ops/s
[info]                  ·gc.alloc.rate:      273,445 MB/sec
[info]                  ·gc.alloc.rate.norm: 314,596 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1352361,989 ops/s
[info]                  ·gc.alloc.rate:               267,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          310,894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 595,388 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1371380,979 ops/s
[info]                  ·gc.alloc.rate:                   281,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              322,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     587,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1375093,656 ops/s
[info]                  ·gc.alloc.rate:      265,695 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1367706,479 ±(99.9%) 34726,784 ops/s [Average]
[info]   (min, avg, max) = (1352361,989, 1367706,479, 1375093,656), stdev = 9018,436
[info]   CI (99.9%): [1332979,695, 1402433,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   273,536 ±(99.9%) 27,471 MB/sec [Average]
[info]   (min, avg, max) = (265,695, 273,536, 281,500), stdev = 7,134
[info]   CI (99.9%): [246,065, 301,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   314,635 ±(99.9%) 29,417 B/op [Average]
[info]   (min, avg, max) = (304,000, 314,635, 322,958), stdev = 7,639
[info]   CI (99.9%): [285,218, 344,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,081 ±(99.9%) 1079,431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,081, 511,845), stdev = 280,325
[info]   CI (99.9%): [≈ 0, 1386,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   353,849 ±(99.9%) 1243,899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 353,849, 595,388), stdev = 323,037
[info]   CI (99.9%): [≈ 0, 1597,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,072), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,65% complete, ETA 01:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10906,270 ops/s
[info] # Warmup Iteration   2: 83566,873 ops/s
[info] # Warmup Iteration   3: 87707,903 ops/s
[info] # Warmup Iteration   4: 88749,454 ops/s
[info] # Warmup Iteration   5: 89751,786 ops/s
[info] Iteration   1: 89995,829 ops/s
[info]                  ·gc.alloc.rate:                   3596,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              62862,751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58352,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,728 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 88003,082 ops/s
[info]                  ·gc.alloc.rate:                   3563,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              63708,721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4020,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71872,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,745 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 90073,506 ops/s
[info]                  ·gc.alloc.rate:                   3618,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              63192,772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58776,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 89726,527 ops/s
[info]                  ·gc.alloc.rate:                   3602,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              63168,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59213,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,095 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 90142,654 ops/s
[info]                  ·gc.alloc.rate:                   3621,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              63199,296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59096,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   89588,320 ±(99.9%) 3466,026 ops/s [Average]
[info]   (min, avg, max) = (88003,082, 89588,320, 90142,654), stdev = 900,116
[info]   CI (99.9%): [86122,294, 93054,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3600,374 ±(99.9%) 88,326 MB/sec [Average]
[info]   (min, avg, max) = (3563,878, 3600,374, 3621,269), stdev = 22,938
[info]   CI (99.9%): [3512,048, 3688,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63226,315 ±(99.9%) 1171,359 B/op [Average]
[info]   (min, avg, max) = (62862,751, 63226,315, 63708,721), stdev = 304,198
[info]   CI (99.9%): [62054,956, 64397,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497,412 ±(99.9%) 1128,258 MB/sec [Average]
[info]   (min, avg, max) = (3338,017, 3497,412, 4020,553), stdev = 293,005
[info]   CI (99.9%): [2369,154, 4625,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61462,257 ±(99.9%) 22445,264 B/op [Average]
[info]   (min, avg, max) = (58352,596, 61462,257, 71872,333), stdev = 5828,964
[info]   CI (99.9%): [39016,993, 83907,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,659 ±(99.9%) 1,182 B/op [Average]
[info]   (min, avg, max) = (0,363, 0,659, 1,095), stdev = 0,307
[info]   CI (99.9%): [≈ 0, 1,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,85% complete, ETA 01:55:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197965,212 ops/s
[info] # Warmup Iteration   2: 324590,353 ops/s
[info] # Warmup Iteration   3: 337300,733 ops/s
[info] # Warmup Iteration   4: 334719,476 ops/s
[info] # Warmup Iteration   5: 334935,397 ops/s
[info] Iteration   1: 336311,530 ops/s
[info]                  ·gc.alloc.rate:               1570,760 MB/sec
[info]                  ·gc.alloc.rate.norm:          7347,862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6293,738 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 337235,921 ops/s
[info]                  ·gc.alloc.rate:                   1588,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              7410,440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6279,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,407 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 337452,213 ops/s
[info]                  ·gc.alloc.rate:                   1576,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              7350,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6269,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,718 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 337533,042 ops/s
[info]                  ·gc.alloc.rate:               1601,345 MB/sec
[info]                  ·gc.alloc.rate.norm:          7464,251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9380,312 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 337288,952 ops/s
[info]                  ·gc.alloc.rate:               1575,821 MB/sec
[info]                  ·gc.alloc.rate.norm:          7351,082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6253,327 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   337164,331 ±(99.9%) 1893,042 ops/s [Average]
[info]   (min, avg, max) = (336311,530, 337164,331, 337533,042), stdev = 491,617
[info]   CI (99.9%): [335271,289, 339057,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1582,574 ±(99.9%) 47,451 MB/sec [Average]
[info]   (min, avg, max) = (1570,760, 1582,574, 1601,345), stdev = 12,323
[info]   CI (99.9%): [1535,123, 1630,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7384,767 ±(99.9%) 198,861 B/op [Average]
[info]   (min, avg, max) = (7347,862, 7384,767, 7464,251), stdev = 51,643
[info]   CI (99.9%): [7185,906, 7583,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477,811 ±(99.9%) 1150,790 MB/sec [Average]
[info]   (min, avg, max) = (1340,500, 1477,811, 2012,408), stdev = 298,857
[info]   CI (99.9%): [327,021, 2628,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6895,275 ±(99.9%) 5349,532 B/op [Average]
[info]   (min, avg, max) = (6253,327, 6895,275, 9380,312), stdev = 1389,256
[info]   CI (99.9%): [1545,743, 12244,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,691 ±(99.9%) 4,797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 2,874), stdev = 1,246
[info]   CI (99.9%): [≈ 0, 5,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,225 ±(99.9%) 22,381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,225, 13,407), stdev = 5,812
[info]   CI (99.9%): [≈ 0, 25,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,949
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,05% complete, ETA 01:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118922,549 ops/s
[info] # Warmup Iteration   2: 328530,686 ops/s
[info] # Warmup Iteration   3: 328821,320 ops/s
[info] # Warmup Iteration   4: 331978,212 ops/s
[info] # Warmup Iteration   5: 330181,341 ops/s
[info] Iteration   1: 332576,779 ops/s
[info]                  ·gc.alloc.rate:               1865,158 MB/sec
[info]                  ·gc.alloc.rate.norm:          8823,325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6315,546 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 330134,309 ops/s
[info]                  ·gc.alloc.rate:                   1848,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              8811,270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9556,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 332611,823 ops/s
[info]                  ·gc.alloc.rate:                   1872,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              8858,303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9514,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 333071,647 ops/s
[info]                  ·gc.alloc.rate:                   1873,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              8851,223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9520,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 332929,540 ops/s
[info]                  ·gc.alloc.rate:                   1872,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              8850,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6364,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   332264,820 ±(99.9%) 4656,586 ops/s [Average]
[info]   (min, avg, max) = (330134,309, 332264,820, 333071,647), stdev = 1209,301
[info]   CI (99.9%): [327608,234, 336921,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1866,699 ±(99.9%) 40,490 MB/sec [Average]
[info]   (min, avg, max) = (1848,950, 1866,699, 1873,875), stdev = 10,515
[info]   CI (99.9%): [1826,209, 1907,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8838,848 ±(99.9%) 78,449 B/op [Average]
[info]   (min, avg, max) = (8811,270, 8838,848, 8858,303), stdev = 20,373
[info]   CI (99.9%): [8760,399, 8917,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742,811 ±(99.9%) 1412,964 MB/sec [Average]
[info]   (min, avg, max) = (1335,040, 1742,811, 2015,467), stdev = 366,942
[info]   CI (99.9%): [329,847, 3155,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8254,177 ±(99.9%) 6729,462 B/op [Average]
[info]   (min, avg, max) = (6315,546, 8254,177, 9556,845), stdev = 1747,620
[info]   CI (99.9%): [1524,715, 14983,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,198), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,25% complete, ETA 01:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1007930,228 ops/s
[info] # Warmup Iteration   2: 1975552,617 ops/s
[info] # Warmup Iteration   3: 2059336,640 ops/s
[info] # Warmup Iteration   4: 2053676,087 ops/s
[info] # Warmup Iteration   5: 2004374,429 ops/s
[info] Iteration   1: 2030331,902 ops/s
[info]                  ·gc.alloc.rate:                   1080,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              837,402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1035,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 2009601,451 ops/s
[info]                  ·gc.alloc.rate:               1048,165 MB/sec
[info]                  ·gc.alloc.rate.norm:          820,576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523,533 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 2056344,519 ops/s
[info]                  ·gc.alloc.rate:                   1095,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              837,898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2065289,285 ops/s
[info]                  ·gc.alloc.rate:               1086,290 MB/sec
[info]                  ·gc.alloc.rate.norm:          827,486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510,404 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 2061429,604 ops/s
[info]                  ·gc.alloc.rate:                   1099,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              838,813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2044599,353 ±(99.9%) 91886,339 ops/s [Average]
[info]   (min, avg, max) = (2009601,451, 2044599,353, 2065289,285), stdev = 23862,590
[info]   CI (99.9%): [1952713,014, 2136485,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1081,874 ±(99.9%) 77,742 MB/sec [Average]
[info]   (min, avg, max) = (1048,165, 1081,874, 1099,059), stdev = 20,189
[info]   CI (99.9%): [1004,132, 1159,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832,435 ±(99.9%) 31,064 B/op [Average]
[info]   (min, avg, max) = (820,576, 832,435, 838,813), stdev = 8,067
[info]   CI (99.9%): [801,371, 863,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,937 ±(99.9%) 1411,514 MB/sec [Average]
[info]   (min, avg, max) = (668,737, 1070,937, 1340,391), stdev = 366,566
[info]   CI (99.9%): [≈ 0, 2482,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   823,407 ±(99.9%) 1077,495 B/op [Average]
[info]   (min, avg, max) = (510,404, 823,407, 1035,876), stdev = 279,822
[info]   CI (99.9%): [≈ 0, 1900,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,679 ±(99.9%) 5,666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,679, 3,311), stdev = 1,472
[info]   CI (99.9%): [≈ 0, 6,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,518 ±(99.9%) 4,324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,518, 2,527), stdev = 1,123
[info]   CI (99.9%): [≈ 0, 4,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 9,000), stdev = 2,739
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,45% complete, ETA 01:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1902721,852 ops/s
[info] # Warmup Iteration   2: 2918978,195 ops/s
[info] # Warmup Iteration   3: 2960696,691 ops/s
[info] # Warmup Iteration   4: 2955997,198 ops/s
[info] # Warmup Iteration   5: 2949677,902 ops/s
[info] Iteration   1: 2958308,589 ops/s
[info]                  ·gc.alloc.rate:               818,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          435,281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357,054 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 2937072,612 ops/s
[info]                  ·gc.alloc.rate:               810,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          434,248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359,618 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 2931830,284 ops/s
[info]                  ·gc.alloc.rate:               819,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          439,570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 360,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2969365,446 ops/s
[info]                  ·gc.alloc.rate:                   826,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              438,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2963655,299 ops/s
[info]                  ·gc.alloc.rate:                   839,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              445,459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     713,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2952046,446 ±(99.9%) 64053,831 ops/s [Average]
[info]   (min, avg, max) = (2931830,284, 2952046,446, 2969365,446), stdev = 16634,577
[info]   CI (99.9%): [2887992,615, 3016100,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   822,825 ±(99.9%) 41,306 MB/sec [Average]
[info]   (min, avg, max) = (810,679, 822,825, 839,099), stdev = 10,727
[info]   CI (99.9%): [781,518, 864,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   438,520 ±(99.9%) 17,027 B/op [Average]
[info]   (min, avg, max) = (434,248, 438,520, 445,459), stdev = 4,422
[info]   CI (99.9%): [421,492, 455,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,161 ±(99.9%) 1159,178 MB/sec [Average]
[info]   (min, avg, max) = (671,355, 806,161, 1344,669), stdev = 301,035
[info]   CI (99.9%): [≈ 0, 1965,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   429,375 ±(99.9%) 612,405 B/op [Average]
[info]   (min, avg, max) = (355,889, 429,375, 713,854), stdev = 159,040
[info]   CI (99.9%): [≈ 0, 1041,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,011), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,65% complete, ETA 01:54:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2202546,394 ops/s
[info] # Warmup Iteration   2: 3152907,554 ops/s
[info] # Warmup Iteration   3: 3226913,576 ops/s
[info] # Warmup Iteration   4: 3233270,413 ops/s
[info] # Warmup Iteration   5: 3228282,224 ops/s
[info] Iteration   1: 3222641,739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3226093,247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3242017,215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3237214,403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3229817,705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3231556,862 ±(99.9%) 30671,408 ops/s [Average]
[info]   (min, avg, max) = (3222641,739, 3231556,862, 3242017,215), stdev = 7965,267
[info]   CI (99.9%): [3200885,454, 3262228,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,86% complete, ETA 01:54:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20733,643 ops/s
[info] # Warmup Iteration   2: 51580,962 ops/s
[info] # Warmup Iteration   3: 52438,980 ops/s
[info] # Warmup Iteration   4: 53094,088 ops/s
[info] # Warmup Iteration   5: 52928,546 ops/s
[info] Iteration   1: 53186,394 ops/s
[info]                  ·gc.alloc.rate:                   2418,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              71541,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79278,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,647 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 53439,192 ops/s
[info]                  ·gc.alloc.rate:                   2405,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              70808,118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59048,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,613 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 53454,011 ops/s
[info]                  ·gc.alloc.rate:                   2435,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              71669,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78742,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,613 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 53339,916 ops/s
[info]                  ·gc.alloc.rate:               2415,279 MB/sec
[info]                  ·gc.alloc.rate.norm:          71238,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59305,707 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 53098,042 ops/s
[info]                  ·gc.alloc.rate:               2432,643 MB/sec
[info]                  ·gc.alloc.rate.norm:          72077,856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79625,438 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   53303,511 ±(99.9%) 603,701 ops/s [Average]
[info]   (min, avg, max) = (53098,042, 53303,511, 53454,011), stdev = 156,779
[info]   CI (99.9%): [52699,810, 53907,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2421,329 ±(99.9%) 48,288 MB/sec [Average]
[info]   (min, avg, max) = (2405,047, 2421,329, 2435,163), stdev = 12,540
[info]   CI (99.9%): [2373,041, 2469,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71466,929 ±(99.9%) 1832,832 B/op [Average]
[info]   (min, avg, max) = (70808,118, 71466,929, 72077,856), stdev = 475,981
[info]   CI (99.9%): [69634,097, 73299,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2411,857 ±(99.9%) 1419,103 MB/sec [Average]
[info]   (min, avg, max) = (2005,631, 2411,857, 2687,375), stdev = 368,537
[info]   CI (99.9%): [992,754, 3830,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71200,102 ±(99.9%) 42280,936 B/op [Average]
[info]   (min, avg, max) = (59048,732, 71200,102, 79625,438), stdev = 10980,225
[info]   CI (99.9%): [28919,166, 113481,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,229 ±(99.9%) 1,883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,229, 1,104), stdev = 0,489
[info]   CI (99.9%): [≈ 0, 2,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,775 ±(99.9%) 55,704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,775, 32,647), stdev = 14,466
[info]   CI (99.9%): [≈ 0, 62,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,06% complete, ETA 01:53:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91409,551 ops/s
[info] # Warmup Iteration   2: 159808,562 ops/s
[info] # Warmup Iteration   3: 161869,106 ops/s
[info] # Warmup Iteration   4: 162631,368 ops/s
[info] # Warmup Iteration   5: 156445,487 ops/s
[info] Iteration   1: 161113,578 ops/s
[info]                  ·gc.alloc.rate:                   1171,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              11434,421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13132,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 162413,975 ops/s
[info]                  ·gc.alloc.rate:               1163,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          11270,433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6512,975 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 162320,392 ops/s
[info]                  ·gc.alloc.rate:                   1198,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              11614,357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13040,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,606 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 162537,751 ops/s
[info]                  ·gc.alloc.rate:                   1190,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              11519,347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13029,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,816 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 161916,944 ops/s
[info]                  ·gc.alloc.rate:                   1171,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              11387,301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6539,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,440 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   162060,528 ±(99.9%) 2226,664 ops/s [Average]
[info]   (min, avg, max) = (161113,578, 162060,528, 162537,751), stdev = 578,257
[info]   CI (99.9%): [159833,864, 164287,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1178,961 ±(99.9%) 56,214 MB/sec [Average]
[info]   (min, avg, max) = (1163,459, 1178,961, 1198,326), stdev = 14,599
[info]   CI (99.9%): [1122,747, 1235,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11445,172 ±(99.9%) 502,520 B/op [Average]
[info]   (min, avg, max) = (11270,433, 11445,172, 11614,357), stdev = 130,503
[info]   CI (99.9%): [10942,652, 11947,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076,362 ±(99.9%) 1419,061 MB/sec [Average]
[info]   (min, avg, max) = (672,341, 1076,362, 1346,107), stdev = 368,526
[info]   CI (99.9%): [≈ 0, 2495,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10450,867 ±(99.9%) 13796,362 B/op [Average]
[info]   (min, avg, max) = (6512,975, 10450,867, 13132,336), stdev = 3582,871
[info]   CI (99.9%): [≈ 0, 24247,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 4,792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 2,874), stdev = 1,245
[info]   CI (99.9%): [≈ 0, 5,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,413 ±(99.9%) 46,382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,413, 27,816), stdev = 12,045
[info]   CI (99.9%): [≈ 0, 52,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,400, 5,000), stdev = 1,817
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,26% complete, ETA 01:53:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108997,394 ops/s
[info] # Warmup Iteration   2: 257529,764 ops/s
[info] # Warmup Iteration   3: 268039,935 ops/s
[info] # Warmup Iteration   4: 267125,422 ops/s
[info] # Warmup Iteration   5: 269362,022 ops/s
[info] Iteration   1: 267699,104 ops/s
[info]                  ·gc.alloc.rate:               2926,912 MB/sec
[info]                  ·gc.alloc.rate.norm:          17201,391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15743,150 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 269169,342 ops/s
[info]                  ·gc.alloc.rate:                   2958,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              17290,177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15672,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 268373,442 ops/s
[info]                  ·gc.alloc.rate:               2978,782 MB/sec
[info]                  ·gc.alloc.rate.norm:          17462,667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19699,839 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 269643,675 ops/s
[info]                  ·gc.alloc.rate:               2964,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          17296,696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15735,172 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 268062,142 ops/s
[info]                  ·gc.alloc.rate:                   2949,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              17309,125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15866,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   268589,541 ±(99.9%) 3083,579 ops/s [Average]
[info]   (min, avg, max) = (267699,104, 268589,541, 269643,675), stdev = 800,796
[info]   CI (99.9%): [265505,962, 271673,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2955,513 ±(99.9%) 74,224 MB/sec [Average]
[info]   (min, avg, max) = (2926,912, 2955,513, 2978,782), stdev = 19,276
[info]   CI (99.9%): [2881,289, 3029,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17312,011 ±(99.9%) 363,543 B/op [Average]
[info]   (min, avg, max) = (17201,391, 17312,011, 17462,667), stdev = 94,411
[info]   CI (99.9%): [16948,468, 17675,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2824,181 ±(99.9%) 1154,933 MB/sec [Average]
[info]   (min, avg, max) = (2678,784, 2824,181, 3360,399), stdev = 299,932
[info]   CI (99.9%): [1669,249, 3979,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16543,494 ±(99.9%) 6799,654 B/op [Average]
[info]   (min, avg, max) = (15672,769, 16543,494, 19699,839), stdev = 1765,848
[info]   CI (99.9%): [9743,840, 23343,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,049 ±(99.9%) 0,257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,049, 0,122), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,46% complete, ETA 01:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181528,891 ops/s
[info] # Warmup Iteration   2: 415302,856 ops/s
[info] # Warmup Iteration   3: 427219,734 ops/s
[info] # Warmup Iteration   4: 425324,021 ops/s
[info] # Warmup Iteration   5: 424724,873 ops/s
[info] Iteration   1: 426453,306 ops/s
[info]                  ·gc.alloc.rate:                   2188,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              8074,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7386,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 427314,262 ops/s
[info]                  ·gc.alloc.rate:                   2201,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              8105,266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7390,817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 425840,051 ops/s
[info]                  ·gc.alloc.rate:               2205,403 MB/sec
[info]                  ·gc.alloc.rate.norm:          8147,781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9921,141 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 428105,406 ops/s
[info]                  ·gc.alloc.rate:               2218,578 MB/sec
[info]                  ·gc.alloc.rate.norm:          8153,115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7424,126 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 428213,565 ops/s
[info]                  ·gc.alloc.rate:                   2205,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104,710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7439,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   427185,318 ±(99.9%) 3976,648 ops/s [Average]
[info]   (min, avg, max) = (425840,051, 427185,318, 428213,565), stdev = 1032,723
[info]   CI (99.9%): [423208,670, 431161,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2203,995 ±(99.9%) 41,321 MB/sec [Average]
[info]   (min, avg, max) = (2188,637, 2203,995, 2218,578), stdev = 10,731
[info]   CI (99.9%): [2162,675, 2245,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8117,087 ±(99.9%) 126,858 B/op [Average]
[info]   (min, avg, max) = (8074,562, 8117,087, 8153,115), stdev = 32,945
[info]   CI (99.9%): [7990,229, 8243,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2147,976 ±(99.9%) 1157,403 MB/sec [Average]
[info]   (min, avg, max) = (2002,122, 2147,976, 2685,408), stdev = 300,574
[info]   CI (99.9%): [990,573, 3305,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7912,323 ±(99.9%) 4324,977 B/op [Average]
[info]   (min, avg, max) = (7386,450, 7912,323, 9921,141), stdev = 1123,183
[info]   CI (99.9%): [3587,346, 12237,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,046 ±(99.9%) 0,162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,077), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,66% complete, ETA 01:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1633330,884 ops/s
[info] # Warmup Iteration   2: 2465439,446 ops/s
[info] # Warmup Iteration   3: 2527955,322 ops/s
[info] # Warmup Iteration   4: 2536469,896 ops/s
[info] # Warmup Iteration   5: 2539693,005 ops/s
[info] Iteration   1: 2533712,390 ops/s
[info]                  ·gc.alloc.rate:               893,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          554,506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 416,866 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2533146,052 ops/s
[info]                  ·gc.alloc.rate:                   920,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              571,957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2519769,973 ops/s
[info]                  ·gc.alloc.rate:               887,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          553,959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 419,593 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2540554,921 ops/s
[info]                  ·gc.alloc.rate:                   904,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2448863,213 ops/s
[info]                  ·gc.alloc.rate:                   887,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              570,185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     864,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2515209,310 ±(99.9%) 145729,130 ops/s [Average]
[info]   (min, avg, max) = (2448863,213, 2515209,310, 2540554,921), stdev = 37845,392
[info]   CI (99.9%): [2369480,180, 2660938,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   898,609 ±(99.9%) 54,954 MB/sec [Average]
[info]   (min, avg, max) = (887,233, 898,609, 920,915), stdev = 14,271
[info]   CI (99.9%): [843,655, 953,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562,134 ±(99.9%) 32,822 B/op [Average]
[info]   (min, avg, max) = (553,959, 562,134, 571,957), stdev = 8,524
[info]   CI (99.9%): [529,312, 594,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940,837 ±(99.9%) 1417,965 MB/sec [Average]
[info]   (min, avg, max) = (671,350, 940,837, 1345,048), stdev = 368,241
[info]   CI (99.9%): [≈ 0, 2358,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   590,265 ±(99.9%) 911,256 B/op [Average]
[info]   (min, avg, max) = (416,380, 590,265, 864,133), stdev = 236,650
[info]   CI (99.9%): [≈ 0, 1501,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,208), stdev = 0,089
[info]   CI (99.9%): [≈ 0, 0,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,129), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,643
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,86% complete, ETA 01:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9998,414 ops/s
[info] # Warmup Iteration   2: 82832,694 ops/s
[info] # Warmup Iteration   3: 97028,371 ops/s
[info] # Warmup Iteration   4: 98515,918 ops/s
[info] # Warmup Iteration   5: 89153,209 ops/s
[info] Iteration   1: 93003,221 ops/s
[info]                  ·gc.alloc.rate:                   3613,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              61125,189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57045,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,352 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 98193,942 ops/s
[info]                  ·gc.alloc.rate:                   3842,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              61565,730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54171,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,334 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 98072,603 ops/s
[info]                  ·gc.alloc.rate:                   3852,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              61805,461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65255,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,334 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 98357,472 ops/s
[info]                  ·gc.alloc.rate:               3875,850 MB/sec
[info]                  ·gc.alloc.rate.norm:          61998,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54323,984 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 98555,977 ops/s
[info]                  ·gc.alloc.rate:                   3911,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              62444,287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65142,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,997 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   97236,643 ±(99.9%) 9139,505 ops/s [Average]
[info]   (min, avg, max) = (93003,221, 97236,643, 98555,977), stdev = 2373,500
[info]   CI (99.9%): [88097,138, 106376,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3819,374 ±(99.9%) 454,430 MB/sec [Average]
[info]   (min, avg, max) = (3613,699, 3819,374, 3911,894), stdev = 118,014
[info]   CI (99.9%): [3364,945, 4273,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61787,735 ±(99.9%) 1890,194 B/op [Average]
[info]   (min, avg, max) = (61125,189, 61787,735, 62444,287), stdev = 490,878
[info]   CI (99.9%): [59897,540, 63677,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3659,704 ±(99.9%) 1458,096 MB/sec [Average]
[info]   (min, avg, max) = (3372,512, 3659,704, 4080,921), stdev = 378,663
[info]   CI (99.9%): [2201,609, 5117,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59187,810 ±(99.9%) 21584,257 B/op [Average]
[info]   (min, avg, max) = (54171,711, 59187,810, 65255,395), stdev = 5605,363
[info]   CI (99.9%): [37603,553, 80772,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,403 ±(99.9%) 1,399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,403, 0,997), stdev = 0,363
[info]   CI (99.9%): [≈ 0, 1,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   31,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,06% complete, ETA 01:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159101,037 ops/s
[info] # Warmup Iteration   2: 456869,181 ops/s
[info] # Warmup Iteration   3: 462783,171 ops/s
[info] # Warmup Iteration   4: 460315,819 ops/s
[info] # Warmup Iteration   5: 463376,093 ops/s
[info] Iteration   1: 463547,137 ops/s
[info]                  ·gc.alloc.rate:                   2272,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              7712,982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9128,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,945 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 463714,014 ops/s
[info]                  ·gc.alloc.rate:                   2258,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              7662,675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6823,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 463995,251 ops/s
[info]                  ·gc.alloc.rate:               2264,287 MB/sec
[info]                  ·gc.alloc.rate.norm:          7677,620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6818,941 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 464908,330 ops/s
[info]                  ·gc.alloc.rate:               2294,799 MB/sec
[info]                  ·gc.alloc.rate.norm:          7765,591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9087,600 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 464941,173 ops/s
[info]                  ·gc.alloc.rate:               2268,568 MB/sec
[info]                  ·gc.alloc.rate.norm:          7676,563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6830,927 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   464221,181 ±(99.9%) 2549,261 ops/s [Average]
[info]   (min, avg, max) = (463547,137, 464221,181, 464941,173), stdev = 662,035
[info]   CI (99.9%): [461671,920, 466770,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2271,700 ±(99.9%) 53,667 MB/sec [Average]
[info]   (min, avg, max) = (2258,358, 2271,700, 2294,799), stdev = 13,937
[info]   CI (99.9%): [2218,033, 2325,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7699,086 ±(99.9%) 160,043 B/op [Average]
[info]   (min, avg, max) = (7662,675, 7699,086, 7765,591), stdev = 41,563
[info]   CI (99.9%): [7539,043, 7859,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2283,114 ±(99.9%) 1421,424 MB/sec [Average]
[info]   (min, avg, max) = (2010,921, 2283,114, 2689,472), stdev = 369,139
[info]   CI (99.9%): [861,690, 3704,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7737,769 ±(99.9%) 4816,655 B/op [Average]
[info]   (min, avg, max) = (6818,941, 7737,769, 9128,259), stdev = 1250,870
[info]   CI (99.9%): [2921,113, 12554,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,708 ±(99.9%) 6,052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,708, 3,519), stdev = 1,572
[info]   CI (99.9%): [≈ 0, 6,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,403 ±(99.9%) 20,539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,403, 11,945), stdev = 5,334
[info]   CI (99.9%): [≈ 0, 22,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,26% complete, ETA 01:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106419,254 ops/s
[info] # Warmup Iteration   2: 288418,534 ops/s
[info] # Warmup Iteration   3: 291703,326 ops/s
[info] # Warmup Iteration   4: 290703,795 ops/s
[info] # Warmup Iteration   5: 291753,074 ops/s
[info] Iteration   1: 287858,819 ops/s
[info]                  ·gc.alloc.rate:                   2314,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              12651,879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10998,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,301 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 286466,422 ops/s
[info]                  ·gc.alloc.rate:                   2332,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              12811,461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14697,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 288223,024 ops/s
[info]                  ·gc.alloc.rate:                   2336,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              12754,244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10964,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 288237,629 ops/s
[info]                  ·gc.alloc.rate:                   2361,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              12888,687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14645,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 287313,225 ops/s
[info]                  ·gc.alloc.rate:                   2328,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              12752,416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11045,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   287619,824 ±(99.9%) 2873,178 ops/s [Average]
[info]   (min, avg, max) = (286466,422, 287619,824, 288237,629), stdev = 746,155
[info]   CI (99.9%): [284746,646, 290493,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2334,841 ±(99.9%) 65,239 MB/sec [Average]
[info]   (min, avg, max) = (2314,908, 2334,841, 2361,378), stdev = 16,942
[info]   CI (99.9%): [2269,603, 2400,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12771,738 ±(99.9%) 335,142 B/op [Average]
[info]   (min, avg, max) = (12651,879, 12771,738, 12888,687), stdev = 87,035
[info]   CI (99.9%): [12436,595, 13106,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2279,474 ±(99.9%) 1406,760 MB/sec [Average]
[info]   (min, avg, max) = (2008,747, 2279,474, 2683,164), stdev = 365,331
[info]   CI (99.9%): [872,714, 3686,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12470,243 ±(99.9%) 7737,382 B/op [Average]
[info]   (min, avg, max) = (10964,799, 12470,243, 14697,133), stdev = 2009,373
[info]   CI (99.9%): [4732,862, 20207,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,142 ±(99.9%) 0,996 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,142, 0,604), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,774 ±(99.9%) 5,442 B/op [Average]
[info]   (min, avg, max) = (0,114, 0,774, 3,301), stdev = 1,413
[info]   CI (99.9%): [≈ 0, 6,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,46% complete, ETA 01:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 880378,838 ops/s
[info] # Warmup Iteration   2: 1730283,556 ops/s
[info] # Warmup Iteration   3: 1738309,236 ops/s
[info] # Warmup Iteration   4: 1742393,955 ops/s
[info] # Warmup Iteration   5: 1728350,242 ops/s
[info] Iteration   1: 1734293,092 ops/s
[info]                  ·gc.alloc.rate:               1048,094 MB/sec
[info]                  ·gc.alloc.rate.norm:          950,785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1212,621 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 1733426,323 ops/s
[info]                  ·gc.alloc.rate:               1039,902 MB/sec
[info]                  ·gc.alloc.rate.norm:          943,854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 606,936 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1722563,640 ops/s
[info]                  ·gc.alloc.rate:                   1047,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              957,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1743228,071 ops/s
[info]                  ·gc.alloc.rate:               1045,286 MB/sec
[info]                  ·gc.alloc.rate.norm:          943,435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 604,728 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1732218,639 ops/s
[info]                  ·gc.alloc.rate:                   1053,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              956,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1733145,953 ±(99.9%) 28289,060 ops/s [Average]
[info]   (min, avg, max) = (1722563,640, 1733145,953, 1743228,071), stdev = 7346,579
[info]   CI (99.9%): [1704856,893, 1761435,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1046,846 ±(99.9%) 18,469 MB/sec [Average]
[info]   (min, avg, max) = (1039,902, 1046,846, 1053,071), stdev = 4,796
[info]   CI (99.9%): [1028,377, 1065,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   950,329 ±(99.9%) 25,337 B/op [Average]
[info]   (min, avg, max) = (943,435, 950,329, 957,085), stdev = 6,580
[info]   CI (99.9%): [924,992, 975,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,914 ±(99.9%) 1411,545 MB/sec [Average]
[info]   (min, avg, max) = (668,698, 1070,914, 1340,372), stdev = 366,574
[info]   CI (99.9%): [≈ 0, 2482,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   972,897 ±(99.9%) 1290,363 B/op [Average]
[info]   (min, avg, max) = (604,728, 972,897, 1222,766), stdev = 335,103
[info]   CI (99.9%): [≈ 0, 2263,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,671 ±(99.9%) 5,684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,311), stdev = 1,476
[info]   CI (99.9%): [≈ 0, 6,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,609 ±(99.9%) 5,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,609, 3,007), stdev = 1,341
[info]   CI (99.9%): [≈ 0, 5,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,66% complete, ETA 01:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1679979,744 ops/s
[info] # Warmup Iteration   2: 3119290,123 ops/s
[info] # Warmup Iteration   3: 3121200,260 ops/s
[info] # Warmup Iteration   4: 3096930,089 ops/s
[info] # Warmup Iteration   5: 3099462,174 ops/s
[info] Iteration   1: 3088662,084 ops/s
[info]                  ·gc.alloc.rate:                   1091,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              555,847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     684,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 3133873,655 ops/s
[info]                  ·gc.alloc.rate:                   1109,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              557,189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 3148397,791 ops/s
[info]                  ·gc.alloc.rate:               1099,118 MB/sec
[info]                  ·gc.alloc.rate.norm:          549,254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 335,988 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 3128026,763 ops/s
[info]                  ·gc.alloc.rate:               1105,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          555,962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 677,038 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 3141097,163 ops/s
[info]                  ·gc.alloc.rate:                   1098,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              550,188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,450 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3128011,491 ±(99.9%) 89679,032 ops/s [Average]
[info]   (min, avg, max) = (3088662,084, 3128011,491, 3148397,791), stdev = 23289,360
[info]   CI (99.9%): [3038332,459, 3217690,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1100,806 ±(99.9%) 27,393 MB/sec [Average]
[info]   (min, avg, max) = (1091,255, 1100,806, 1109,860), stdev = 7,114
[info]   CI (99.9%): [1073,413, 1128,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553,688 ±(99.9%) 14,148 B/op [Average]
[info]   (min, avg, max) = (549,254, 553,688, 557,189), stdev = 3,674
[info]   CI (99.9%): [539,540, 567,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,918 ±(99.9%) 1417,404 MB/sec [Average]
[info]   (min, avg, max) = (672,350, 1075,918, 1346,085), stdev = 368,095
[info]   CI (99.9%): [≈ 0, 2493,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   541,904 ±(99.9%) 721,979 B/op [Average]
[info]   (min, avg, max) = (335,988, 541,904, 684,450), stdev = 187,496
[info]   CI (99.9%): [≈ 0, 1263,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,591 ±(99.9%) 4,958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,591, 2,895), stdev = 1,288
[info]   CI (99.9%): [≈ 0, 5,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,296 ±(99.9%) 2,483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,296, 1,450), stdev = 0,645
[info]   CI (99.9%): [≈ 0, 2,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,86% complete, ETA 01:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2505795,069 ops/s
[info] # Warmup Iteration   2: 3442442,754 ops/s
[info] # Warmup Iteration   3: 3500342,357 ops/s
[info] # Warmup Iteration   4: 3493598,932 ops/s
[info] # Warmup Iteration   5: 3483800,044 ops/s
[info] Iteration   1: 3495633,787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3452626,220 ops/s
[info]                  ·gc.alloc.rate:      6,122 MB/sec
[info]                  ·gc.alloc.rate.norm: 2,790 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3499502,316 ops/s
[info]                  ·gc.alloc.rate:      0,278 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,125 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3495696,948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3497532,139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3488198,282 ±(99.9%) 76815,048 ops/s [Average]
[info]   (min, avg, max) = (3452626,220, 3488198,282, 3499502,316), stdev = 19948,624
[info]   CI (99.9%): [3411383,234, 3565013,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,280 ±(99.9%) 10,433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,280, 6,122), stdev = 2,710
[info]   CI (99.9%): [≈ 0, 11,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,583 ±(99.9%) 4,755 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,583, 2,790), stdev = 1,235
[info]   CI (99.9%): [≈ 0, 5,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,06% complete, ETA 01:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148039,103 ops/s
[info] # Warmup Iteration   2: 418847,410 ops/s
[info] # Warmup Iteration   3: 441390,687 ops/s
[info] # Warmup Iteration   4: 438604,932 ops/s
[info] # Warmup Iteration   5: 436547,765 ops/s
[info] Iteration   1: 437672,311 ops/s
[info]                  ·gc.alloc.rate:               2800,143 MB/sec
[info]                  ·gc.alloc.rate.norm:          10065,296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9652,705 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 440182,903 ops/s
[info]                  ·gc.alloc.rate:                   2844,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              10164,773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9633,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 434208,430 ops/s
[info]                  ·gc.alloc.rate:               2808,269 MB/sec
[info]                  ·gc.alloc.rate.norm:          10175,250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9792,893 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 440274,473 ops/s
[info]                  ·gc.alloc.rate:               2846,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          10172,851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9679,779 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 441043,204 ops/s
[info]                  ·gc.alloc.rate:               2851,955 MB/sec
[info]                  ·gc.alloc.rate.norm:          10173,540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9679,543 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   438676,264 ±(99.9%) 10788,006 ops/s [Average]
[info]   (min, avg, max) = (434208,430, 438676,264, 441043,204), stdev = 2801,611
[info]   CI (99.9%): [427888,258, 449464,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2830,214 ±(99.9%) 92,746 MB/sec [Average]
[info]   (min, avg, max) = (2800,143, 2830,214, 2851,955), stdev = 24,086
[info]   CI (99.9%): [2737,468, 2922,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10150,342 ±(99.9%) 183,728 B/op [Average]
[info]   (min, avg, max) = (10065,296, 10150,342, 10175,250), stdev = 47,713
[info]   CI (99.9%): [9966,614, 10334,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2701,152 ±(99.9%) 42,768 MB/sec [Average]
[info]   (min, avg, max) = (2685,361, 2701,152, 2713,473), stdev = 11,107
[info]   CI (99.9%): [2658,383, 2743,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9687,756 ±(99.9%) 238,292 B/op [Average]
[info]   (min, avg, max) = (9633,860, 9687,756, 9792,893), stdev = 61,884
[info]   CI (99.9%): [9449,465, 9926,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,030, 0,149), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,27% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64695,309 ops/s
[info] # Warmup Iteration   2: 104632,760 ops/s
[info] # Warmup Iteration   3: 105437,719 ops/s
[info] # Warmup Iteration   4: 106114,416 ops/s
[info] # Warmup Iteration   5: 105843,639 ops/s
[info] Iteration   1: 106142,040 ops/s
[info]                  ·gc.alloc.rate:                   815,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              12091,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9956,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,309 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 105883,551 ops/s
[info]                  ·gc.alloc.rate:               810,071 MB/sec
[info]                  ·gc.alloc.rate.norm:          12036,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9980,403 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 105501,756 ops/s
[info]                  ·gc.alloc.rate:                   804,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              12004,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10021,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,932 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 106246,843 ops/s
[info]                  ·gc.alloc.rate:               810,631 MB/sec
[info]                  ·gc.alloc.rate.norm:          12003,362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9950,870 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 106075,416 ops/s
[info]                  ·gc.alloc.rate:               823,064 MB/sec
[info]                  ·gc.alloc.rate.norm:          12207,949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19944,826 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   105969,921 ±(99.9%) 1129,359 ops/s [Average]
[info]   (min, avg, max) = (105501,756, 105969,921, 106246,843), stdev = 293,291
[info]   CI (99.9%): [104840,563, 107099,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   812,902 ±(99.9%) 26,329 MB/sec [Average]
[info]   (min, avg, max) = (804,997, 812,902, 823,064), stdev = 6,838
[info]   CI (99.9%): [786,573, 839,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12068,545 ±(99.9%) 329,923 B/op [Average]
[info]   (min, avg, max) = (12003,362, 12068,545, 12207,949), stdev = 85,680
[info]   CI (99.9%): [11738,622, 12398,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,431 ±(99.9%) 1158,637 MB/sec [Average]
[info]   (min, avg, max) = (671,713, 806,431, 1344,687), stdev = 300,894
[info]   CI (99.9%): [≈ 0, 1965,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11970,712 ±(99.9%) 17165,216 B/op [Average]
[info]   (min, avg, max) = (9950,870, 11970,712, 19944,826), stdev = 4457,752
[info]   CI (99.9%): [≈ 0, 29135,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,248 ±(99.9%) 1,559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,248, 0,932), stdev = 0,405
[info]   CI (99.9%): [≈ 0, 1,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,47% complete, ETA 01:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12214,598 ops/s
[info] # Warmup Iteration   2: 27385,656 ops/s
[info] # Warmup Iteration   3: 28648,104 ops/s
[info] # Warmup Iteration   4: 28640,417 ops/s
[info] # Warmup Iteration   5: 28734,170 ops/s
[info] Iteration   1: 28913,457 ops/s
[info]                  ·gc.alloc.rate:                   1855,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              100989,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109796,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140,509 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 29159,182 ops/s
[info]                  ·gc.alloc.rate:                   1859,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              100303,614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72517,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 28885,412 ops/s
[info]                  ·gc.alloc.rate:                   1879,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              102385,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109572,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 28965,683 ops/s
[info]                  ·gc.alloc.rate:                   1884,930 MB/sec
[info]                  ·gc.alloc.rate.norm:              102378,690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109139,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,262 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 29113,301 ops/s
[info]                  ·gc.alloc.rate:                   1895,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              102428,798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108663,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,877 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   29007,407 ±(99.9%) 470,422 ops/s [Average]
[info]   (min, avg, max) = (28885,412, 29007,407, 29159,182), stdev = 122,167
[info]   CI (99.9%): [28536,985, 29477,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1875,010 ±(99.9%) 65,345 MB/sec [Average]
[info]   (min, avg, max) = (1855,952, 1875,010, 1895,385), stdev = 16,970
[info]   CI (99.9%): [1809,665, 1940,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101697,036 ±(99.9%) 3810,201 B/op [Average]
[info]   (min, avg, max) = (100303,614, 101697,036, 102428,798), stdev = 989,497
[info]   CI (99.9%): [97886,835, 105507,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878,740 ±(99.9%) 1150,939 MB/sec [Average]
[info]   (min, avg, max) = (1344,091, 1878,740, 2017,810), stdev = 298,895
[info]   CI (99.9%): [727,801, 3029,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   101937,867 ±(99.9%) 63351,157 B/op [Average]
[info]   (min, avg, max) = (72517,668, 101937,867, 109796,256), stdev = 16452,094
[info]   CI (99.9%): [38586,709, 165289,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,783 ±(99.9%) 4,238 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,783, 2,582), stdev = 1,101
[info]   CI (99.9%): [≈ 0, 5,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   42,493 ±(99.9%) 230,498 B/op [Average]
[info]   (min, avg, max) = (2,262, 42,493, 140,509), stdev = 59,860
[info]   CI (99.9%): [≈ 0, 272,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 9,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,67% complete, ETA 01:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29,977 ops/s
[info] # Warmup Iteration   2: 98257,811 ops/s
[info] # Warmup Iteration   3: 109521,291 ops/s
[info] # Warmup Iteration   4: 109878,541 ops/s
[info] # Warmup Iteration   5: 110848,949 ops/s
[info] Iteration   1: 110052,072 ops/s
[info]                  ·gc.alloc.rate:                   1085,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              15524,787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19076,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,298 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 110515,121 ops/s
[info]                  ·gc.alloc.rate:               1057,141 MB/sec
[info]                  ·gc.alloc.rate.norm:          15049,221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9500,514 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 110306,928 ops/s
[info]                  ·gc.alloc.rate:                   1070,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              15265,194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19047,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,891 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 109415,146 ops/s
[info]                  ·gc.alloc.rate:               1045,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          15033,252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9610,821 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 108377,943 ops/s
[info]                  ·gc.alloc.rate:               1063,139 MB/sec
[info]                  ·gc.alloc.rate.norm:          15433,619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19409,297 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   109733,442 ±(99.9%) 3323,690 ops/s [Average]
[info]   (min, avg, max) = (108377,943, 109733,442, 110515,121), stdev = 863,152
[info]   CI (99.9%): [106409,752, 113057,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1064,406 ±(99.9%) 58,153 MB/sec [Average]
[info]   (min, avg, max) = (1045,484, 1064,406, 1085,975), stdev = 15,102
[info]   CI (99.9%): [1006,253, 1122,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15261,215 ±(99.9%) 852,632 B/op [Average]
[info]   (min, avg, max) = (15033,252, 15261,215, 15524,787), stdev = 221,426
[info]   CI (99.9%): [14408,583, 16113,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068,520 ±(99.9%) 1408,328 MB/sec [Average]
[info]   (min, avg, max) = (667,369, 1068,520, 1337,002), stdev = 365,738
[info]   CI (99.9%): [≈ 0, 2476,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15328,774 ±(99.9%) 20301,234 B/op [Average]
[info]   (min, avg, max) = (9500,514, 15328,774, 19409,297), stdev = 5272,166
[info]   CI (99.9%): [≈ 0, 35630,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,238 ±(99.9%) 1,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,238, 0,891), stdev = 0,387
[info]   CI (99.9%): [≈ 0, 1,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 2,049
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,87% complete, ETA 01:50:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31807,773 ops/s
[info] # Warmup Iteration   2: 70243,410 ops/s
[info] # Warmup Iteration   3: 74550,102 ops/s
[info] # Warmup Iteration   4: 74867,522 ops/s
[info] # Warmup Iteration   5: 74690,040 ops/s
[info] Iteration   1: 71840,837 ops/s
[info]                  ·gc.alloc.rate:                   1285,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              28146,703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29333,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,912 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 74914,479 ops/s
[info]                  ·gc.alloc.rate:               1361,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          28597,130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28143,586 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 74934,795 ops/s
[info]                  ·gc.alloc.rate:                   1337,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              28075,198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28155,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66,890 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 75169,211 ops/s
[info]                  ·gc.alloc.rate:                   1352,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              28315,228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28040,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20,920 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 74865,216 ops/s
[info]                  ·gc.alloc.rate:               1350,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          28373,942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28092,734 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   74344,908 ±(99.9%) 5409,073 ops/s [Average]
[info]   (min, avg, max) = (71840,837, 74344,908, 75169,211), stdev = 1404,719
[info]   CI (99.9%): [68935,834, 79753,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1337,504 ±(99.9%) 117,281 MB/sec [Average]
[info]   (min, avg, max) = (1285,342, 1337,504, 1361,762), stdev = 30,458
[info]   CI (99.9%): [1220,222, 1454,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28301,640 ±(99.9%) 789,166 B/op [Average]
[info]   (min, avg, max) = (28075,198, 28301,640, 28597,130), stdev = 204,944
[info]   CI (99.9%): [27512,474, 29090,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339,486 ±(99.9%) 6,014 MB/sec [Average]
[info]   (min, avg, max) = (1336,871, 1339,486, 1341,016), stdev = 1,562
[info]   CI (99.9%): [1333,472, 1345,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28353,154 ±(99.9%) 2118,310 B/op [Average]
[info]   (min, avg, max) = (28040,409, 28353,154, 29333,859), stdev = 550,118
[info]   CI (99.9%): [26234,844, 30471,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,845 ±(99.9%) 5,300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,845, 3,186), stdev = 1,376
[info]   CI (99.9%): [≈ 0, 6,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17,745 ±(99.9%) 111,244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17,745, 66,890), stdev = 28,890
[info]   CI (99.9%): [≈ 0, 128,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,07% complete, ETA 01:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68756,407 ops/s
[info] # Warmup Iteration   2: 147939,077 ops/s
[info] # Warmup Iteration   3: 152492,728 ops/s
[info] # Warmup Iteration   4: 153131,059 ops/s
[info] # Warmup Iteration   5: 153014,133 ops/s
[info] Iteration   1: 152195,592 ops/s
[info]                  ·gc.alloc.rate:               1059,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          10957,325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13890,317 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 152560,018 ops/s
[info]                  ·gc.alloc.rate:               1042,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          10749,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6930,263 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 151926,371 ops/s
[info]                  ·gc.alloc.rate:                   1075,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              11139,163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13925,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 152612,461 ops/s
[info]                  ·gc.alloc.rate:               1050,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          10826,629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6934,772 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 152346,301 ops/s
[info]                  ·gc.alloc.rate:                   1064,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              10992,344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13897,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30,323 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   152328,149 ±(99.9%) 1078,736 ops/s [Average]
[info]   (min, avg, max) = (151926,371, 152328,149, 152612,461), stdev = 280,144
[info]   CI (99.9%): [151249,413, 153406,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1058,528 ±(99.9%) 49,530 MB/sec [Average]
[info]   (min, avg, max) = (1042,339, 1058,528, 1075,678), stdev = 12,863
[info]   CI (99.9%): [1008,998, 1108,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10932,906 ±(99.9%) 583,223 B/op [Average]
[info]   (min, avg, max) = (10749,068, 10932,906, 11139,163), stdev = 151,461
[info]   CI (99.9%): [10349,683, 11516,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,781 ±(99.9%) 1418,071 MB/sec [Average]
[info]   (min, avg, max) = (672,029, 1075,781, 1345,725), stdev = 368,268
[info]   CI (99.9%): [≈ 0, 2493,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11115,652 ±(99.9%) 14704,395 B/op [Average]
[info]   (min, avg, max) = (6930,263, 11115,652, 13925,257), stdev = 3818,685
[info]   CI (99.9%): [≈ 0, 25820,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,591 ±(99.9%) 5,047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,591, 2,936), stdev = 1,311
[info]   CI (99.9%): [≈ 0, 5,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,108 ±(99.9%) 52,126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,108, 30,323), stdev = 13,537
[info]   CI (99.9%): [≈ 0, 58,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 6,000), stdev = 1,871
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,27% complete, ETA 01:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4099,923 ops/s
[info] # Warmup Iteration   2: 38202,669 ops/s
[info] # Warmup Iteration   3: 40220,568 ops/s
[info] # Warmup Iteration   4: 39778,936 ops/s
[info] # Warmup Iteration   5: 40942,155 ops/s
[info] Iteration   1: 41039,007 ops/s
[info]                  ·gc.alloc.rate:                   2025,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              77639,805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77045,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   2: 41521,369 ops/s
[info]                  ·gc.alloc.rate:                   2049,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              77634,148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76054,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,829 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 41354,494 ops/s
[info]                  ·gc.alloc.rate:                   2043,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              77735,880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76131,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,584 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 41393,078 ops/s
[info]                  ·gc.alloc.rate:                   2043,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              77660,441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76085,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,791 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 41120,662 ops/s
[info]                  ·gc.alloc.rate:               2045,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          78253,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76704,863 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   41285,722 ±(99.9%) 769,882 ops/s [Average]
[info]   (min, avg, max) = (41039,007, 41285,722, 41521,369), stdev = 199,936
[info]   CI (99.9%): [40515,840, 42055,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2041,296 ±(99.9%) 35,513 MB/sec [Average]
[info]   (min, avg, max) = (2025,314, 2041,296, 2049,003), stdev = 9,222
[info]   CI (99.9%): [2005,784, 2076,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77784,836 ±(99.9%) 1021,762 B/op [Average]
[info]   (min, avg, max) = (77634,148, 77784,836, 78253,907), stdev = 265,348
[info]   CI (99.9%): [76763,074, 78806,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2005,037 ±(99.9%) 13,894 MB/sec [Average]
[info]   (min, avg, max) = (2001,248, 2005,037, 2009,823), stdev = 3,608
[info]   CI (99.9%): [1991,142, 2018,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76404,352 ±(99.9%) 1722,950 B/op [Average]
[info]   (min, avg, max) = (76054,396, 76404,352, 77045,953), stdev = 447,445
[info]   CI (99.9%): [74681,403, 78127,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,895 ±(99.9%) 6,159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,895, 3,707), stdev = 1,600
[info]   CI (99.9%): [≈ 0, 7,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34,261 ±(99.9%) 236,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34,261, 142,098), stdev = 61,331
[info]   CI (99.9%): [≈ 0, 270,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 10,000), stdev = 3,130
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,47% complete, ETA 01:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43445,792 ops/s
[info] # Warmup Iteration   2: 73488,346 ops/s
[info] # Warmup Iteration   3: 74701,511 ops/s
[info] # Warmup Iteration   4: 75512,227 ops/s
[info] # Warmup Iteration   5: 75733,532 ops/s
[info] Iteration   1: 75653,491 ops/s
[info]                  ·gc.alloc.rate:               1478,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          30739,363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27977,732 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 73117,618 ops/s
[info]                  ·gc.alloc.rate:                   1456,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              31331,364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28963,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,896 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 75543,535 ops/s
[info]                  ·gc.alloc.rate:                   1477,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              30766,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28032,339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62,448 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 75609,339 ops/s
[info]                  ·gc.alloc.rate:                   1490,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              31002,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41861,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,356 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 74945,709 ops/s
[info]                  ·gc.alloc.rate:                   1464,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              30737,574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28158,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   74973,939 ±(99.9%) 4145,790 ops/s [Average]
[info]   (min, avg, max) = (73117,618, 74973,939, 75653,491), stdev = 1076,649
[info]   CI (99.9%): [70828,149, 79119,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1473,281 ±(99.9%) 51,399 MB/sec [Average]
[info]   (min, avg, max) = (1456,187, 1473,281, 1490,572), stdev = 13,348
[info]   CI (99.9%): [1421,882, 1524,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30915,277 ±(99.9%) 991,970 B/op [Average]
[info]   (min, avg, max) = (30737,574, 30915,277, 31331,364), stdev = 257,611
[info]   CI (99.9%): [29923,307, 31907,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1478,313 ±(99.9%) 1150,272 MB/sec [Average]
[info]   (min, avg, max) = (1341,395, 1478,313, 2012,672), stdev = 298,722
[info]   CI (99.9%): [328,041, 2628,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30998,748 ±(99.9%) 23432,227 B/op [Average]
[info]   (min, avg, max) = (27977,732, 30998,748, 41861,063), stdev = 6085,275
[info]   CI (99.9%): [7566,521, 54430,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,683 ±(99.9%) 5,015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 2,998), stdev = 1,302
[info]   CI (99.9%): [≈ 0, 5,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   14,228 ±(99.9%) 104,444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,228, 62,448), stdev = 27,124
[info]   CI (99.9%): [≈ 0, 118,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,483
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,67% complete, ETA 01:49:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13673,429 ops/s
[info] # Warmup Iteration   2: 34863,924 ops/s
[info] # Warmup Iteration   3: 34705,944 ops/s
[info] # Warmup Iteration   4: 34960,306 ops/s
[info] # Warmup Iteration   5: 34622,861 ops/s
[info] Iteration   1: 35100,806 ops/s
[info]                  ·gc.alloc.rate:               577,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          25900,477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29986,621 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 35123,082 ops/s
[info]                  ·gc.alloc.rate:               588,865 MB/sec
[info]                  ·gc.alloc.rate.norm:          26376,518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29969,549 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 35288,038 ops/s
[info]                  ·gc.alloc.rate:      563,103 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35145,647 ops/s
[info]                  ·gc.alloc.rate:                   585,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              26222,945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29979,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,864 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 35203,290 ops/s
[info]                  ·gc.alloc.rate:               582,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          26010,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29930,384 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   35172,173 ±(99.9%) 289,438 ops/s [Average]
[info]   (min, avg, max) = (35100,806, 35172,173, 35288,038), stdev = 75,166
[info]   CI (99.9%): [34882,734, 35461,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   579,544 ±(99.9%) 38,781 MB/sec [Average]
[info]   (min, avg, max) = (563,103, 579,544, 588,865), stdev = 10,071
[info]   CI (99.9%): [540,763, 618,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25922,947 ±(99.9%) 1900,711 B/op [Average]
[info]   (min, avg, max) = (25104,013, 25922,947, 26376,518), stdev = 493,609
[info]   CI (99.9%): [24022,236, 27823,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535,527 ±(99.9%) 1152,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535,527, 669,772), stdev = 299,369
[info]   CI (99.9%): [≈ 0, 1688,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23973,265 ±(99.9%) 51604,328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23973,265, 29986,621), stdev = 13401,480
[info]   CI (99.9%): [≈ 0, 75577,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,373 ±(99.9%) 3,211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,373, 1,864), stdev = 0,834
[info]   CI (99.9%): [≈ 0, 3,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,87% complete, ETA 01:48:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19245,311 ops/s
[info] # Warmup Iteration   2: 35054,597 ops/s
[info] # Warmup Iteration   3: 35992,099 ops/s
[info] # Warmup Iteration   4: 35991,762 ops/s
[info] # Warmup Iteration   5: 36079,843 ops/s
[info] Iteration   1: 36011,104 ops/s
[info]                  ·gc.alloc.rate:               452,805 MB/sec
[info]                  ·gc.alloc.rate.norm:          19782,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22357,821 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 36175,964 ops/s
[info]                  ·gc.alloc.rate:      454,373 MB/sec
[info]                  ·gc.alloc.rate.norm: 19759,383 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 36044,876 ops/s
[info]                  ·gc.alloc.rate:               451,790 MB/sec
[info]                  ·gc.alloc.rate.norm:          19718,934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29142,461 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 36095,957 ops/s
[info]                  ·gc.alloc.rate:                   457,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              19922,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29101,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,908 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 35989,941 ops/s
[info]                  ·gc.alloc.rate:               473,952 MB/sec
[info]                  ·gc.alloc.rate.norm:          20718,666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29217,739 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   36063,568 ±(99.9%) 286,898 ops/s [Average]
[info]   (min, avg, max) = (35989,941, 36063,568, 36175,964), stdev = 74,506
[info]   CI (99.9%): [35776,671, 36350,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   457,999 ±(99.9%) 35,188 MB/sec [Average]
[info]   (min, avg, max) = (451,790, 457,999, 473,952), stdev = 9,138
[info]   CI (99.9%): [422,811, 493,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19980,247 ±(99.9%) 1616,526 B/op [Average]
[info]   (min, avg, max) = (19718,934, 19980,247, 20718,666), stdev = 419,807
[info]   CI (99.9%): [18363,721, 21596,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503,102 ±(99.9%) 1113,824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,102, 668,374), stdev = 289,257
[info]   CI (99.9%): [≈ 0, 1616,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21963,863 ±(99.9%) 48618,112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21963,863, 29217,739), stdev = 12625,969
[info]   CI (99.9%): [≈ 0, 70581,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,182 ±(99.9%) 1,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,182, 0,908), stdev = 0,406
[info]   CI (99.9%): [≈ 0, 1,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,07% complete, ETA 01:48:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24002,998 ops/s
[info] # Warmup Iteration   2: 37366,534 ops/s
[info] # Warmup Iteration   3: 36772,014 ops/s
[info] # Warmup Iteration   4: 37453,292 ops/s
[info] # Warmup Iteration   5: 37963,269 ops/s
[info] Iteration   1: 37980,615 ops/s
[info]                  ·gc.alloc.rate:               474,162 MB/sec
[info]                  ·gc.alloc.rate.norm:          19641,628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21199,525 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 37890,830 ops/s
[info]                  ·gc.alloc.rate:               478,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          19883,462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27848,217 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 37782,302 ops/s
[info]                  ·gc.alloc.rate:      453,851 MB/sec
[info]                  ·gc.alloc.rate.norm: 18898,347 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37780,699 ops/s
[info]                  ·gc.alloc.rate:               468,432 MB/sec
[info]                  ·gc.alloc.rate.norm:          19505,874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27928,544 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 34543,350 ops/s
[info]                  ·gc.alloc.rate:                   447,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              20388,971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30561,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,948 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   37195,559 ±(99.9%) 5718,103 ops/s [Average]
[info]   (min, avg, max) = (34543,350, 37195,559, 37980,615), stdev = 1484,973
[info]   CI (99.9%): [31477,456, 42913,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   464,600 ±(99.9%) 51,377 MB/sec [Average]
[info]   (min, avg, max) = (447,674, 464,600, 478,881), stdev = 13,342
[info]   CI (99.9%): [413,223, 515,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19663,656 ±(99.9%) 2096,281 B/op [Average]
[info]   (min, avg, max) = (18898,347, 19663,656, 20388,971), stdev = 544,398
[info]   CI (99.9%): [17567,375, 21759,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504,840 ±(99.9%) 1118,593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504,840, 671,020), stdev = 290,495
[info]   CI (99.9%): [≈ 0, 1623,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21507,474 ±(99.9%) 48174,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21507,474, 30561,085), stdev = 12510,688
[info]   CI (99.9%): [≈ 0, 69681,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,190 ±(99.9%) 1,633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,190, 0,948), stdev = 0,424
[info]   CI (99.9%): [≈ 0, 1,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,27% complete, ETA 01:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23560,647 ops/s
[info] # Warmup Iteration   2: 37340,673 ops/s
[info] # Warmup Iteration   3: 38094,482 ops/s
[info] # Warmup Iteration   4: 37950,780 ops/s
[info] # Warmup Iteration   5: 38070,608 ops/s
[info] Iteration   1: 38198,116 ops/s
[info]                  ·gc.alloc.rate:      415,081 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38092,743 ops/s
[info]                  ·gc.alloc.rate:               432,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          17845,429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27687,537 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 38068,967 ops/s
[info]                  ·gc.alloc.rate:                   438,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              18107,153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27704,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136,835 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 38272,165 ops/s
[info]                  ·gc.alloc.rate:      416,947 MB/sec
[info]                  ·gc.alloc.rate.norm: 17139,509 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38175,278 ops/s
[info]                  ·gc.alloc.rate:                   430,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              17723,487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27599,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,858 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   38161,454 ±(99.9%) 316,756 ops/s [Average]
[info]   (min, avg, max) = (38068,967, 38161,454, 38272,165), stdev = 82,261
[info]   CI (99.9%): [37844,697, 38478,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   426,456 ±(99.9%) 38,533 MB/sec [Average]
[info]   (min, avg, max) = (415,081, 426,456, 438,131), stdev = 10,007
[info]   CI (99.9%): [387,923, 464,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17582,319 ±(99.9%) 1719,019 B/op [Average]
[info]   (min, avg, max) = (17096,016, 17582,319, 18107,153), stdev = 446,424
[info]   CI (99.9%): [15863,299, 19301,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   402,082 ±(99.9%) 1413,375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402,082, 670,362), stdev = 367,049
[info]   CI (99.9%): [≈ 0, 1815,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16598,337 ±(99.9%) 58345,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16598,337, 27704,261), stdev = 15152,191
[info]   CI (99.9%): [≈ 0, 74944,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,311), stdev = 1,478
[info]   CI (99.9%): [≈ 0, 6,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   27,539 ±(99.9%) 235,272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,539, 136,835), stdev = 61,099
[info]   CI (99.9%): [≈ 0, 262,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,517
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,47% complete, ETA 01:47:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17229,946 ops/s
[info] # Warmup Iteration   2: 29215,902 ops/s
[info] # Warmup Iteration   3: 29811,435 ops/s
[info] # Warmup Iteration   4: 30170,602 ops/s
[info] # Warmup Iteration   5: 29074,154 ops/s
[info] Iteration   1: 30222,637 ops/s
[info]                  ·gc.alloc.rate:                   730,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              38041,804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34965,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30220,353 ops/s
[info]                  ·gc.alloc.rate:               727,150 MB/sec
[info]                  ·gc.alloc.rate.norm:          37855,196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34984,911 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 30170,576 ops/s
[info]                  ·gc.alloc.rate:               730,415 MB/sec
[info]                  ·gc.alloc.rate.norm:          38087,857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35041,716 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 30214,919 ops/s
[info]                  ·gc.alloc.rate:                   728,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              37940,977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35010,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 30005,144 ops/s
[info]                  ·gc.alloc.rate:               720,855 MB/sec
[info]                  ·gc.alloc.rate.norm:          37796,501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35253,005 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   30166,726 ±(99.9%) 357,344 ops/s [Average]
[info]   (min, avg, max) = (30005,144, 30166,726, 30222,637), stdev = 92,801
[info]   CI (99.9%): [29809,382, 30524,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   727,576 ±(99.9%) 15,519 MB/sec [Average]
[info]   (min, avg, max) = (720,855, 727,576, 730,797), stdev = 4,030
[info]   CI (99.9%): [712,057, 743,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   37944,467 ±(99.9%) 471,254 B/op [Average]
[info]   (min, avg, max) = (37796,501, 37944,467, 38087,857), stdev = 122,383
[info]   CI (99.9%): [37473,214, 38415,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672,087 ±(99.9%) 1,085 MB/sec [Average]
[info]   (min, avg, max) = (671,696, 672,087, 672,378), stdev = 0,282
[info]   CI (99.9%): [671,002, 673,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35051,049 ±(99.9%) 448,497 B/op [Average]
[info]   (min, avg, max) = (34965,252, 35051,049, 35253,005), stdev = 116,473
[info]   CI (99.9%): [34602,553, 35499,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,434 ±(99.9%) 2,287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,434, 1,084), stdev = 0,594
[info]   CI (99.9%): [≈ 0, 2,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,67% complete, ETA 01:47:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5423,134 ops/s
[info] # Warmup Iteration   2: 15539,597 ops/s
[info] # Warmup Iteration   3: 16640,698 ops/s
[info] # Warmup Iteration   4: 16646,779 ops/s
[info] # Warmup Iteration   5: 16112,713 ops/s
[info] Iteration   1: 16480,736 ops/s
[info]                  ·gc.alloc.rate:                   1213,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              115840,967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128241,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,976 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 16561,251 ops/s
[info]                  ·gc.alloc.rate:               1210,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          115034,776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127614,200 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 15728,115 ops/s
[info]                  ·gc.alloc.rate:                   1146,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              114716,136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67189,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,494 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 16734,266 ops/s
[info]                  ·gc.alloc.rate:                   1232,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              115891,372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126357,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268,205 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 16746,775 ops/s
[info]                  ·gc.alloc.rate:                   1227,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              115275,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126142,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101,728 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   16450,228 ±(99.9%) 1614,657 ops/s [Average]
[info]   (min, avg, max) = (15728,115, 16450,228, 16746,775), stdev = 419,321
[info]   CI (99.9%): [14835,571, 18064,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1206,174 ±(99.9%) 132,618 MB/sec [Average]
[info]   (min, avg, max) = (1146,771, 1206,174, 1232,732), stdev = 34,441
[info]   CI (99.9%): [1073,555, 1338,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115351,790 ±(99.9%) 1964,194 B/op [Average]
[info]   (min, avg, max) = (114716,136, 115351,790, 115891,372), stdev = 510,095
[info]   CI (99.9%): [113387,596, 117315,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1209,015 ±(99.9%) 1156,677 MB/sec [Average]
[info]   (min, avg, max) = (671,670, 1209,015, 1344,064), stdev = 300,385
[info]   CI (99.9%): [52,338, 2365,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115109,076 ±(99.9%) 103204,114 B/op [Average]
[info]   (min, avg, max) = (67189,919, 115109,076, 128241,277), stdev = 26801,781
[info]   CI (99.9%): [11904,962, 218313,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,870 ±(99.9%) 4,583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,870, 2,853), stdev = 1,190
[info]   CI (99.9%): [≈ 0, 5,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82,281 ±(99.9%) 429,884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82,281, 268,205), stdev = 111,640
[info]   CI (99.9%): [≈ 0, 512,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 6,000), stdev = 1,414
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,88% complete, ETA 01:47:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2790,932 ops/s
[info] # Warmup Iteration   2: 14405,789 ops/s
[info] # Warmup Iteration   3: 16903,760 ops/s
[info] # Warmup Iteration   4: 16962,639 ops/s
[info] # Warmup Iteration   5: 16913,618 ops/s
[info] Iteration   1: 16915,765 ops/s
[info]                  ·gc.alloc.rate:                   1116,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              103817,693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124448,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,937 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 16892,572 ops/s
[info]                  ·gc.alloc.rate:               1093,127 MB/sec
[info]                  ·gc.alloc.rate.norm:          101802,574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62305,161 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 16887,367 ops/s
[info]                  ·gc.alloc.rate:               1130,605 MB/sec
[info]                  ·gc.alloc.rate.norm:          105324,680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124771,357 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 17052,722 ops/s
[info]                  ·gc.alloc.rate:               1104,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          101893,480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61812,931 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 16951,795 ops/s
[info]                  ·gc.alloc.rate:                   1113,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              103307,844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124393,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301,475 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16940,044 ±(99.9%) 261,535 ops/s [Average]
[info]   (min, avg, max) = (16887,367, 16940,044, 17052,722), stdev = 67,920
[info]   CI (99.9%): [16678,509, 17201,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1111,507 ±(99.9%) 53,701 MB/sec [Average]
[info]   (min, avg, max) = (1093,127, 1111,507, 1130,605), stdev = 13,946
[info]   CI (99.9%): [1057,806, 1165,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   103229,254 ±(99.9%) 5633,977 B/op [Average]
[info]   (min, avg, max) = (101802,574, 103229,254, 105324,680), stdev = 1463,126
[info]   CI (99.9%): [97595,277, 108863,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071,351 ±(99.9%) 1412,569 MB/sec [Average]
[info]   (min, avg, max) = (669,015, 1071,351, 1340,342), stdev = 366,840
[info]   CI (99.9%): [≈ 0, 2483,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99546,182 ±(99.9%) 131775,443 B/op [Average]
[info]   (min, avg, max) = (61812,931, 99546,182, 124771,357), stdev = 34221,664
[info]   CI (99.9%): [≈ 0, 231321,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,248), stdev = 1,450
[info]   CI (99.9%): [≈ 0, 6,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60,682 ±(99.9%) 518,334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60,682, 301,475), stdev = 134,610
[info]   CI (99.9%): [≈ 0, 579,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,200, 7,000), stdev = 1,643
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,08% complete, ETA 01:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83201,169 ops/s
[info] # Warmup Iteration   2: 113202,713 ops/s
[info] # Warmup Iteration   3: 116667,578 ops/s
[info] # Warmup Iteration   4: 116742,585 ops/s
[info] # Warmup Iteration   5: 118054,554 ops/s
[info] Iteration   1: 118106,705 ops/s
[info]                  ·gc.alloc.rate:      307,493 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 118025,111 ops/s
[info]                  ·gc.alloc.rate:               319,004 MB/sec
[info]                  ·gc.alloc.rate.norm:          4252,233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6821,797 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 117748,649 ops/s
[info]                  ·gc.alloc.rate:               320,899 MB/sec
[info]                  ·gc.alloc.rate.norm:          4287,790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6837,842 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 118428,558 ops/s
[info]                  ·gc.alloc.rate:      308,314 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 117861,986 ops/s
[info]                  ·gc.alloc.rate:               330,728 MB/sec
[info]                  ·gc.alloc.rate.norm:          4414,786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8957,246 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   118034,202 ±(99.9%) 1004,225 ops/s [Average]
[info]   (min, avg, max) = (117748,649, 118034,202, 118428,558), stdev = 260,794
[info]   CI (99.9%): [117029,976, 119038,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   317,288 ±(99.9%) 37,189 MB/sec [Average]
[info]   (min, avg, max) = (307,493, 317,288, 330,728), stdev = 9,658
[info]   CI (99.9%): [280,099, 354,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4229,363 ±(99.9%) 523,346 B/op [Average]
[info]   (min, avg, max) = (4096,004, 4229,363, 4414,786), stdev = 135,911
[info]   CI (99.9%): [3706,017, 4752,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,908 ±(99.9%) 1217,332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,908, 671,020), stdev = 316,137
[info]   CI (99.9%): [≈ 0, 1556,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4523,377 ±(99.9%) 16248,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4523,377, 8957,246), stdev = 4219,614
[info]   CI (99.9%): [≈ 0, 20771,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,28% complete, ETA 01:46:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2812,072 ops/s
[info] # Warmup Iteration   2: 12331,442 ops/s
[info] # Warmup Iteration   3: 15316,450 ops/s
[info] # Warmup Iteration   4: 15377,233 ops/s
[info] # Warmup Iteration   5: 15386,599 ops/s
[info] Iteration   1: 15359,086 ops/s
[info]                  ·gc.alloc.rate:                   1503,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              154021,263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137155,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 15337,989 ops/s
[info]                  ·gc.alloc.rate:                   1533,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              157326,886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206133,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,272 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 15306,833 ops/s
[info]                  ·gc.alloc.rate:                   1518,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              156076,933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137801,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415,218 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 15417,888 ops/s
[info]                  ·gc.alloc.rate:                   1528,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              155976,309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136401,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 15174,046 ops/s
[info]                  ·gc.alloc.rate:               1504,312 MB/sec
[info]                  ·gc.alloc.rate.norm:          155971,772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138317,794 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15319,168 ±(99.9%) 349,254 ops/s [Average]
[info]   (min, avg, max) = (15174,046, 15319,168, 15417,888), stdev = 90,700
[info]   CI (99.9%): [14969,914, 15668,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1517,785 ±(99.9%) 52,875 MB/sec [Average]
[info]   (min, avg, max) = (1503,691, 1517,785, 1533,853), stdev = 13,731
[info]   CI (99.9%): [1464,910, 1570,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155874,633 ±(99.9%) 4558,063 B/op [Average]
[info]   (min, avg, max) = (154021,263, 155874,633, 157326,886), stdev = 1183,715
[info]   CI (99.9%): [151316,569, 160432,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472,038 ±(99.9%) 1157,387 MB/sec [Average]
[info]   (min, avg, max) = (1334,043, 1472,038, 2009,695), stdev = 300,570
[info]   CI (99.9%): [314,651, 2629,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151161,808 ±(99.9%) 118363,672 B/op [Average]
[info]   (min, avg, max) = (136401,236, 151161,808, 206133,830), stdev = 30738,670
[info]   CI (99.9%): [32798,137, 269525,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,904 ±(99.9%) 6,783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,904, 4,040), stdev = 1,762
[info]   CI (99.9%): [≈ 0, 7,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   92,824 ±(99.9%) 697,258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92,824, 415,218), stdev = 181,076
[info]   CI (99.9%): [≈ 0, 790,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 9,000), stdev = 2,739
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,48% complete, ETA 01:46:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2754,610 ops/s
[info] # Warmup Iteration   2: 14549,587 ops/s
[info] # Warmup Iteration   3: 15020,530 ops/s
[info] # Warmup Iteration   4: 15406,569 ops/s
[info] # Warmup Iteration   5: 15363,997 ops/s
[info] Iteration   1: 15492,764 ops/s
[info]                  ·gc.alloc.rate:                   1104,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              112202,636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136544,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 15543,900 ops/s
[info]                  ·gc.alloc.rate:               1078,723 MB/sec
[info]                  ·gc.alloc.rate.norm:          109177,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68048,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 15254,167 ops/s
[info]                  ·gc.alloc.rate:                   1083,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              111764,588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138820,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 15495,611 ops/s
[info]                  ·gc.alloc.rate:               1081,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          109844,414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68330,974 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 15411,352 ops/s
[info]                  ·gc.alloc.rate:                   1078,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              110118,816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137406,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218,949 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   15439,559 ±(99.9%) 439,149 ops/s [Average]
[info]   (min, avg, max) = (15254,167, 15439,559, 15543,900), stdev = 114,046
[info]   CI (99.9%): [15000,410, 15878,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1085,632 ±(99.9%) 42,490 MB/sec [Average]
[info]   (min, avg, max) = (1078,721, 1085,632, 1104,989), stdev = 11,034
[info]   CI (99.9%): [1043,142, 1128,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   110621,501 ±(99.9%) 5001,992 B/op [Average]
[info]   (min, avg, max) = (109177,054, 110621,501, 112202,636), stdev = 1299,001
[info]   CI (99.9%): [105619,509, 115623,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1076,449 ±(99.9%) 1419,187 MB/sec [Average]
[info]   (min, avg, max) = (672,349, 1076,449, 1346,077), stdev = 368,558
[info]   CI (99.9%): [≈ 0, 2495,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   109830,118 ±(99.9%) 146406,308 B/op [Average]
[info]   (min, avg, max) = (68048,185, 109830,118, 138820,522), stdev = 38021,253
[info]   CI (99.9%): [≈ 0, 256236,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,441 ±(99.9%) 3,667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,441, 2,145), stdev = 0,952
[info]   CI (99.9%): [≈ 0, 4,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   45,072 ±(99.9%) 374,347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45,072, 218,949), stdev = 97,217
[info]   CI (99.9%): [≈ 0, 419,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,68% complete, ETA 01:46:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24754,627 ops/s
[info] # Warmup Iteration   2: 47553,979 ops/s
[info] # Warmup Iteration   3: 48048,574 ops/s
[info] # Warmup Iteration   4: 47167,850 ops/s
[info] # Warmup Iteration   5: 47099,414 ops/s
[info] Iteration   1: 48615,603 ops/s
[info]                  ·gc.alloc.rate:               1236,102 MB/sec
[info]                  ·gc.alloc.rate.norm:          39999,953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43409,429 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 47814,448 ops/s
[info]                  ·gc.alloc.rate:               1245,007 MB/sec
[info]                  ·gc.alloc.rate.norm:          40965,393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44160,262 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 48623,626 ops/s
[info]                  ·gc.alloc.rate:                   1243,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              40228,717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43443,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,674 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 48849,403 ops/s
[info]                  ·gc.alloc.rate:                   1233,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              39727,586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21633,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97,248 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 48458,911 ops/s
[info]                  ·gc.alloc.rate:                   1251,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              40624,788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43572,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,691 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   48472,398 ±(99.9%) 1514,275 ops/s [Average]
[info]   (min, avg, max) = (47814,448, 48472,398, 48849,403), stdev = 393,252
[info]   CI (99.9%): [46958,123, 49986,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1241,826 ±(99.9%) 27,583 MB/sec [Average]
[info]   (min, avg, max) = (1233,435, 1241,826, 1251,303), stdev = 7,163
[info]   CI (99.9%): [1214,244, 1269,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40309,287 ±(99.9%) 1896,780 B/op [Average]
[info]   (min, avg, max) = (39727,586, 40309,287, 40965,393), stdev = 492,588
[info]   CI (99.9%): [38412,508, 42206,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207,994 ±(99.9%) 1154,503 MB/sec [Average]
[info]   (min, avg, max) = (671,659, 1207,994, 1342,644), stdev = 299,821
[info]   CI (99.9%): [53,491, 2362,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39243,858 ±(99.9%) 37925,770 B/op [Average]
[info]   (min, avg, max) = (21633,399, 39243,858, 44160,262), stdev = 9849,202
[info]   CI (99.9%): [1318,088, 77169,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 5,023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,019), stdev = 1,304
[info]   CI (99.9%): [≈ 0, 5,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24,723 ±(99.9%) 161,792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24,723, 97,248), stdev = 42,017
[info]   CI (99.9%): [≈ 0, 186,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,88% complete, ETA 01:46:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28891,874 ops/s
[info] # Warmup Iteration   2: 66101,898 ops/s
[info] # Warmup Iteration   3: 65698,021 ops/s
[info] # Warmup Iteration   4: 67605,131 ops/s
[info] # Warmup Iteration   5: 67638,363 ops/s
[info] Iteration   1: 67789,740 ops/s
[info]                  ·gc.alloc.rate:               1191,584 MB/sec
[info]                  ·gc.alloc.rate.norm:          27654,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31037,874 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 67851,025 ops/s
[info]                  ·gc.alloc.rate:               1174,848 MB/sec
[info]                  ·gc.alloc.rate.norm:          27241,628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15521,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 67467,741 ops/s
[info]                  ·gc.alloc.rate:                   1193,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              27842,452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31233,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,971 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 67434,896 ops/s
[info]                  ·gc.alloc.rate:                   1194,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              27858,213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31271,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 66596,155 ops/s
[info]                  ·gc.alloc.rate:                   1163,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              27487,655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15837,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,412 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   67427,911 ±(99.9%) 1928,592 ops/s [Average]
[info]   (min, avg, max) = (66596,155, 67427,911, 67851,025), stdev = 500,849
[info]   CI (99.9%): [65499,320, 69356,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1183,604 ±(99.9%) 53,131 MB/sec [Average]
[info]   (min, avg, max) = (1163,517, 1183,604, 1194,077), stdev = 13,798
[info]   CI (99.9%): [1130,474, 1236,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27616,797 ±(99.9%) 996,748 B/op [Average]
[info]   (min, avg, max) = (27241,628, 27616,797, 27858,213), stdev = 258,852
[info]   CI (99.9%): [26620,049, 28613,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071,384 ±(99.9%) 1411,375 MB/sec [Average]
[info]   (min, avg, max) = (669,379, 1071,384, 1340,386), stdev = 366,530
[info]   CI (99.9%): [≈ 0, 2482,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24980,179 ±(99.9%) 32699,020 B/op [Average]
[info]   (min, avg, max) = (15521,125, 24980,179, 31271,656), stdev = 8491,832
[info]   CI (99.9%): [≈ 0, 57679,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,750 ±(99.9%) 5,883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,750, 3,478), stdev = 1,528
[info]   CI (99.9%): [≈ 0, 6,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17,503 ±(99.9%) 137,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17,503, 81,133), stdev = 35,641
[info]   CI (99.9%): [≈ 0, 154,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,000, 6,000), stdev = 2,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,08% complete, ETA 01:45:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128938,362 ops/s
[info] # Warmup Iteration   2: 188618,633 ops/s
[info] # Warmup Iteration   3: 194283,782 ops/s
[info] # Warmup Iteration   4: 195351,085 ops/s
[info] # Warmup Iteration   5: 194863,537 ops/s
[info] Iteration   1: 195276,628 ops/s
[info]                  ·gc.alloc.rate:      309,800 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194076,501 ops/s
[info]                  ·gc.alloc.rate:                   318,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              2580,818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4148,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 193796,517 ops/s
[info]                  ·gc.alloc.rate:               326,395 MB/sec
[info]                  ·gc.alloc.rate.norm:          2649,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4154,619 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 195410,045 ops/s
[info]                  ·gc.alloc.rate:      310,016 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194111,251 ops/s
[info]                  ·gc.alloc.rate:                   328,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              2665,843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5438,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   194534,188 ±(99.9%) 2888,531 ops/s [Average]
[info]   (min, avg, max) = (193796,517, 194534,188, 195410,045), stdev = 750,142
[info]   CI (99.9%): [191645,657, 197422,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   318,696 ±(99.9%) 34,329 MB/sec [Average]
[info]   (min, avg, max) = (309,800, 318,696, 328,898), stdev = 8,915
[info]   CI (99.9%): [284,366, 353,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2577,670 ±(99.9%) 312,292 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2577,670, 2665,843), stdev = 81,101
[info]   CI (99.9%): [2265,378, 2889,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,916 ±(99.9%) 1217,360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,916, 671,035), stdev = 316,145
[info]   CI (99.9%): [≈ 0, 1556,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2748,440 ±(99.9%) 9870,854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2748,440, 5438,997), stdev = 2563,429
[info]   CI (99.9%): [≈ 0, 12619,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,101 ±(99.9%) 0,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,101, 0,338), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,28% complete, ETA 01:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144547,502 ops/s
[info] # Warmup Iteration   2: 198266,660 ops/s
[info] # Warmup Iteration   3: 204038,047 ops/s
[info] # Warmup Iteration   4: 203416,034 ops/s
[info] # Warmup Iteration   5: 203524,065 ops/s
[info] Iteration   1: 203618,407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 203435,897 ops/s
[info]                  ·gc.alloc.rate:      5,454 MB/sec
[info]                  ·gc.alloc.rate.norm: 42,180 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 203788,419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 203688,980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 203685,140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   203643,368 ±(99.9%) 504,025 ops/s [Average]
[info]   (min, avg, max) = (203435,897, 203643,368, 203788,419), stdev = 130,894
[info]   CI (99.9%): [203139,344, 204147,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,091 ±(99.9%) 9,392 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,091, 5,454), stdev = 2,439
[info]   CI (99.9%): [≈ 0, 10,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8,438 ±(99.9%) 72,632 B/op [Average]
[info]   (min, avg, max) = (0,002, 8,438, 42,180), stdev = 18,862
[info]   CI (99.9%): [≈ 0, 81,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,48% complete, ETA 01:45:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27516,171 ops/s
[info] # Warmup Iteration   2: 62233,132 ops/s
[info] # Warmup Iteration   3: 62074,531 ops/s
[info] # Warmup Iteration   4: 63618,159 ops/s
[info] # Warmup Iteration   5: 63353,331 ops/s
[info] Iteration   1: 63606,108 ops/s
[info]                  ·gc.alloc.rate:                   1235,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              30554,788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33162,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,545 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 63536,249 ops/s
[info]                  ·gc.alloc.rate:               1225,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          30357,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33215,054 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 63274,331 ops/s
[info]                  ·gc.alloc.rate:               1233,074 MB/sec
[info]                  ·gc.alloc.rate.norm:          30659,605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33369,129 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 63686,261 ops/s
[info]                  ·gc.alloc.rate:                   1224,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              30255,604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16584,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 63572,011 ops/s
[info]                  ·gc.alloc.rate:                   1251,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              30979,470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33189,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   63534,992 ±(99.9%) 600,428 ops/s [Average]
[info]   (min, avg, max) = (63274,331, 63534,992, 63686,261), stdev = 155,929
[info]   CI (99.9%): [62934,564, 64135,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1234,179 ±(99.9%) 41,691 MB/sec [Average]
[info]   (min, avg, max) = (1224,774, 1234,179, 1251,781), stdev = 10,827
[info]   CI (99.9%): [1192,488, 1275,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30561,315 ±(99.9%) 1088,645 B/op [Average]
[info]   (min, avg, max) = (30255,604, 30561,315, 30979,470), stdev = 282,718
[info]   CI (99.9%): [29472,669, 31649,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,320 ±(99.9%) 1153,696 MB/sec [Average]
[info]   (min, avg, max) = (671,360, 1207,320, 1342,046), stdev = 299,611
[info]   CI (99.9%): [53,624, 2361,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29904,184 ±(99.9%) 28673,026 B/op [Average]
[info]   (min, avg, max) = (16584,620, 29904,184, 33369,129), stdev = 7446,294
[info]   CI (99.9%): [1231,158, 58577,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,804 ±(99.9%) 5,279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 3,186), stdev = 1,371
[info]   CI (99.9%): [≈ 0, 6,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19,864 ±(99.9%) 130,406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,864, 78,705), stdev = 33,866
[info]   CI (99.9%): [≈ 0, 150,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,68% complete, ETA 01:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12074,531 ops/s
[info] # Warmup Iteration   2: 18342,608 ops/s
[info] # Warmup Iteration   3: 18507,444 ops/s
[info] # Warmup Iteration   4: 18824,171 ops/s
[info] # Warmup Iteration   5: 17808,540 ops/s
[info] Iteration   1: 18531,207 ops/s
[info]                  ·gc.alloc.rate:                   668,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              56786,342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56965,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289,920 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 18743,977 ops/s
[info]                  ·gc.alloc.rate:               670,885 MB/sec
[info]                  ·gc.alloc.rate.norm:          56308,875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56265,599 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 18754,496 ops/s
[info]                  ·gc.alloc.rate:                   673,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              56495,501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56235,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,747 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18744,661 ops/s
[info]                  ·gc.alloc.rate:               671,120 MB/sec
[info]                  ·gc.alloc.rate.norm:          56326,522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56150,744 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 17405,894 ops/s
[info]                  ·gc.alloc.rate:               621,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          56180,127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60469,288 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   18436,047 ±(99.9%) 2246,731 ops/s [Average]
[info]   (min, avg, max) = (17405,894, 18436,047, 18754,496), stdev = 583,469
[info]   CI (99.9%): [16189,316, 20682,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   661,185 ±(99.9%) 85,522 MB/sec [Average]
[info]   (min, avg, max) = (621,563, 661,185, 673,484), stdev = 22,210
[info]   CI (99.9%): [575,663, 746,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   56419,473 ±(99.9%) 900,037 B/op [Average]
[info]   (min, avg, max) = (56180,127, 56419,473, 56786,342), stdev = 233,737
[info]   CI (99.9%): [55519,436, 57319,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   669,957 ±(99.9%) 3,424 MB/sec [Average]
[info]   (min, avg, max) = (669,017, 669,957, 670,986), stdev = 0,889
[info]   CI (99.9%): [666,533, 673,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   57217,385 ±(99.9%) 7112,165 B/op [Average]
[info]   (min, avg, max) = (56150,744, 57217,385, 60469,288), stdev = 1847,007
[info]   CI (99.9%): [50105,220, 64329,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,687 ±(99.9%) 5,872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,415), stdev = 1,525
[info]   CI (99.9%): [≈ 0, 6,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   58,333 ±(99.9%) 498,516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58,333, 289,920), stdev = 129,463
[info]   CI (99.9%): [≈ 0, 556,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,88% complete, ETA 01:44:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20793,134 ops/s
[info] # Warmup Iteration   2: 94810,389 ops/s
[info] # Warmup Iteration   3: 100227,550 ops/s
[info] # Warmup Iteration   4: 102558,290 ops/s
[info] # Warmup Iteration   5: 102252,694 ops/s
[info] Iteration   1: 102974,394 ops/s
[info]                  ·gc.alloc.rate:                   2641,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              40350,881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672,176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40824,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,954 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 102474,727 ops/s
[info]                  ·gc.alloc.rate:                   2630,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              40387,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40983,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 103172,409 ops/s
[info]                  ·gc.alloc.rate:               2636,975 MB/sec
[info]                  ·gc.alloc.rate.norm:          40211,416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30592,104 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 102954,958 ops/s
[info]                  ·gc.alloc.rate:               2657,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          40610,922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40977,264 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 102881,508 ops/s
[info]                  ·gc.alloc.rate:               2657,103 MB/sec
[info]                  ·gc.alloc.rate.norm:          40631,367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41137,211 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   102891,599 ±(99.9%) 988,513 ops/s [Average]
[info]   (min, avg, max) = (102474,727, 102891,599, 103172,409), stdev = 256,714
[info]   CI (99.9%): [101903,087, 103880,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2644,688 ±(99.9%) 46,818 MB/sec [Average]
[info]   (min, avg, max) = (2630,602, 2644,688, 2657,604), stdev = 12,158
[info]   CI (99.9%): [2597,870, 2691,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   40438,363 ±(99.9%) 690,974 B/op [Average]
[info]   (min, avg, max) = (40211,416, 40438,363, 40631,367), stdev = 179,444
[info]   CI (99.9%): [39747,389, 41129,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2543,901 ±(99.9%) 1157,954 MB/sec [Average]
[info]   (min, avg, max) = (2006,162, 2543,901, 2690,183), stdev = 300,717
[info]   CI (99.9%): [1385,948, 3701,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38902,877 ±(99.9%) 17894,622 B/op [Average]
[info]   (min, avg, max) = (30592,104, 38902,877, 41137,211), stdev = 4647,177
[info]   CI (99.9%): [21008,255, 56797,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,255 ±(99.9%) 1,598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,255, 0,954), stdev = 0,415
[info]   CI (99.9%): [≈ 0, 1,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,08% complete, ETA 01:44:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53370,262 ops/s
[info] # Warmup Iteration   2: 128321,184 ops/s
[info] # Warmup Iteration   3: 136006,507 ops/s
[info] # Warmup Iteration   4: 131937,823 ops/s
[info] # Warmup Iteration   5: 138866,243 ops/s
[info] Iteration   1: 138756,820 ops/s
[info]                  ·gc.alloc.rate:                   1984,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504,746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22771,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,193 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 139722,601 ops/s
[info]                  ·gc.alloc.rate:                   1997,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              22496,893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22591,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,613 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 138589,592 ops/s
[info]                  ·gc.alloc.rate:               1970,826 MB/sec
[info]                  ·gc.alloc.rate.norm:          22372,825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22716,197 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 139966,923 ops/s
[info]                  ·gc.alloc.rate:               1987,598 MB/sec
[info]                  ·gc.alloc.rate.norm:          22341,598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22493,241 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 140176,838 ops/s
[info]                  ·gc.alloc.rate:               2006,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          22512,601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22500,203 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   139442,555 ±(99.9%) 2783,630 ops/s [Average]
[info]   (min, avg, max) = (138589,592, 139442,555, 140176,838), stdev = 722,900
[info]   CI (99.9%): [136658,924, 142226,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1989,458 ±(99.9%) 51,584 MB/sec [Average]
[info]   (min, avg, max) = (1970,826, 1989,458, 2006,029), stdev = 13,396
[info]   CI (99.9%): [1937,874, 2041,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22445,733 ±(99.9%) 314,782 B/op [Average]
[info]   (min, avg, max) = (22341,598, 22445,733, 22512,601), stdev = 81,748
[info]   CI (99.9%): [22130,950, 22760,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2004,378 ±(99.9%) 12,558 MB/sec [Average]
[info]   (min, avg, max) = (2001,074, 2004,378, 2008,457), stdev = 3,261
[info]   CI (99.9%): [1991,820, 2016,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22614,603 ±(99.9%) 484,712 B/op [Average]
[info]   (min, avg, max) = (22493,241, 22614,603, 22771,807), stdev = 125,878
[info]   CI (99.9%): [22129,891, 23099,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,862 ±(99.9%) 5,764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,862, 3,457), stdev = 1,497
[info]   CI (99.9%): [≈ 0, 6,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9,761 ±(99.9%) 65,351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,761, 39,193), stdev = 16,971
[info]   CI (99.9%): [≈ 0, 75,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 9,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,29% complete, ETA 01:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88759,166 ops/s
[info] # Warmup Iteration   2: 182931,844 ops/s
[info] # Warmup Iteration   3: 166803,851 ops/s
[info] # Warmup Iteration   4: 184171,811 ops/s
[info] # Warmup Iteration   5: 180940,744 ops/s
[info] Iteration   1: 179912,798 ops/s
[info]                  ·gc.alloc.rate:                   1690,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              14786,423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17638,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,182 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 181302,428 ops/s
[info]                  ·gc.alloc.rate:                   1703,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              14786,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11680,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,382 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 181424,324 ops/s
[info]                  ·gc.alloc.rate:                   1733,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              15029,987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17444,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,165 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 186449,315 ops/s
[info]                  ·gc.alloc.rate:                   1735,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              14647,858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11313,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 186086,323 ops/s
[info]                  ·gc.alloc.rate:                   1775,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              15007,235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17008,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   183035,038 ±(99.9%) 11601,938 ops/s [Average]
[info]   (min, avg, max) = (179912,798, 183035,038, 186449,315), stdev = 3012,986
[info]   CI (99.9%): [171433,100, 194636,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1727,904 ±(99.9%) 125,667 MB/sec [Average]
[info]   (min, avg, max) = (1690,948, 1727,904, 1775,032), stdev = 32,635
[info]   CI (99.9%): [1602,238, 1853,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14851,512 ±(99.9%) 627,132 B/op [Average]
[info]   (min, avg, max) = (14647,858, 14851,512, 15029,987), stdev = 162,864
[info]   CI (99.9%): [14224,380, 15478,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1745,565 ±(99.9%) 1413,817 MB/sec [Average]
[info]   (min, avg, max) = (1340,708, 1745,565, 2017,112), stdev = 367,164
[info]   CI (99.9%): [331,748, 3159,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15016,993 ±(99.9%) 12414,822 B/op [Average]
[info]   (min, avg, max) = (11313,343, 15016,993, 17638,551), stdev = 3224,090
[info]   CI (99.9%): [2602,171, 27431,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,679 ±(99.9%) 5,096 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,679, 3,040), stdev = 1,323
[info]   CI (99.9%): [≈ 0, 5,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,886 ±(99.9%) 44,232 B/op [Average]
[info]   (min, avg, max) = (0,176, 5,886, 26,382), stdev = 11,487
[info]   CI (99.9%): [≈ 0, 50,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 8,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,49% complete, ETA 01:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7798,555 ops/s
[info] # Warmup Iteration   2: 55897,463 ops/s
[info] # Warmup Iteration   3: 60721,808 ops/s
[info] # Warmup Iteration   4: 61653,538 ops/s
[info] # Warmup Iteration   5: 61115,436 ops/s
[info] Iteration   1: 61672,842 ops/s
[info]                  ·gc.alloc.rate:                   3294,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              84050,802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85800,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,656 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 61606,700 ops/s
[info]                  ·gc.alloc.rate:                   3321,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              84813,268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86164,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,532 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 61501,025 ops/s
[info]                  ·gc.alloc.rate:               3305,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          84548,414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2706,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69244,781 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 59103,413 ops/s
[info]                  ·gc.alloc.rate:                   3206,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              85349,450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90243,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,554 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 61267,915 ops/s
[info]                  ·gc.alloc.rate:                   3319,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              85229,754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87191,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   61030,379 ±(99.9%) 4189,969 ops/s [Average]
[info]   (min, avg, max) = (59103,413, 61030,379, 61672,842), stdev = 1088,122
[info]   CI (99.9%): [56840,410, 65220,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3289,310 ±(99.9%) 183,468 MB/sec [Average]
[info]   (min, avg, max) = (3206,271, 3289,310, 3321,272), stdev = 47,646
[info]   CI (99.9%): [3105,842, 3472,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84798,338 ±(99.9%) 2029,676 B/op [Average]
[info]   (min, avg, max) = (84050,802, 84798,338, 85349,450), stdev = 527,100
[info]   CI (99.9%): [82768,662, 86828,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3246,015 ±(99.9%) 1161,720 MB/sec [Average]
[info]   (min, avg, max) = (2706,804, 3246,015, 3395,464), stdev = 301,695
[info]   CI (99.9%): [2084,295, 4407,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83728,930 ±(99.9%) 31895,297 B/op [Average]
[info]   (min, avg, max) = (69244,781, 83728,930, 90243,096), stdev = 8283,107
[info]   CI (99.9%): [51833,633, 115624,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,855 ±(99.9%) 3,980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,855, 2,656), stdev = 1,033
[info]   CI (99.9%): [≈ 0, 4,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,69% complete, ETA 01:43:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30048,954 ops/s
[info] # Warmup Iteration   2: 117000,159 ops/s
[info] # Warmup Iteration   3: 122177,411 ops/s
[info] # Warmup Iteration   4: 123147,110 ops/s
[info] # Warmup Iteration   5: 121014,044 ops/s
[info] Iteration   1: 123682,975 ops/s
[info]                  ·gc.alloc.rate:                   2361,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              30036,716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25623,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,946 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 122297,120 ops/s
[info]                  ·gc.alloc.rate:                   2364,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              30419,809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25843,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 122518,843 ops/s
[info]                  ·gc.alloc.rate:                   2335,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              29992,662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34406,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 123555,039 ops/s
[info]                  ·gc.alloc.rate:               2346,733 MB/sec
[info]                  ·gc.alloc.rate.norm:          29881,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25632,763 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 121428,416 ops/s
[info]                  ·gc.alloc.rate:                   2347,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              30409,364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34853,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,079 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   122696,479 ±(99.9%) 3606,743 ops/s [Average]
[info]   (min, avg, max) = (121428,416, 122696,479, 123682,975), stdev = 936,660
[info]   CI (99.9%): [119089,736, 126303,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2351,120 ±(99.9%) 45,696 MB/sec [Average]
[info]   (min, avg, max) = (2335,704, 2351,120, 2364,724), stdev = 11,867
[info]   CI (99.9%): [2305,425, 2396,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30147,927 ±(99.9%) 962,561 B/op [Average]
[info]   (min, avg, max) = (29881,086, 30147,927, 30419,809), stdev = 249,974
[info]   CI (99.9%): [29185,367, 31110,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2281,209 ±(99.9%) 1418,695 MB/sec [Average]
[info]   (min, avg, max) = (2008,992, 2281,209, 2690,110), stdev = 368,431
[info]   CI (99.9%): [862,514, 3699,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29272,055 ±(99.9%) 18847,589 B/op [Average]
[info]   (min, avg, max) = (25623,400, 29272,055, 34853,823), stdev = 4894,659
[info]   CI (99.9%): [10424,466, 48119,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,154 ±(99.9%) 1,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,625), stdev = 0,265
[info]   CI (99.9%): [≈ 0, 1,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,966 ±(99.9%) 12,965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,966, 7,946), stdev = 3,367
[info]   CI (99.9%): [≈ 0, 14,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,89% complete, ETA 01:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103029,405 ops/s
[info] # Warmup Iteration   2: 196103,145 ops/s
[info] # Warmup Iteration   3: 198912,019 ops/s
[info] # Warmup Iteration   4: 198239,073 ops/s
[info] # Warmup Iteration   5: 198220,657 ops/s
[info] Iteration   1: 198101,165 ops/s
[info]                  ·gc.alloc.rate:                   1328,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              10548,490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10650,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 198169,888 ops/s
[info]                  ·gc.alloc.rate:                   1336,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              10610,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10651,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 198656,335 ops/s
[info]                  ·gc.alloc.rate:                   1316,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              10424,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10633,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,902 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 198822,123 ops/s
[info]                  ·gc.alloc.rate:                   1342,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              10619,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10614,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 195919,512 ops/s
[info]                  ·gc.alloc.rate:                   1308,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              10506,394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10738,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   197933,805 ±(99.9%) 4495,649 ops/s [Average]
[info]   (min, avg, max) = (195919,512, 197933,805, 198822,123), stdev = 1167,506
[info]   CI (99.9%): [193438,155, 202429,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1326,399 ±(99.9%) 53,072 MB/sec [Average]
[info]   (min, avg, max) = (1308,857, 1326,399, 1342,108), stdev = 13,783
[info]   CI (99.9%): [1273,327, 1379,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10541,944 ±(99.9%) 309,042 B/op [Average]
[info]   (min, avg, max) = (10424,780, 10541,944, 10619,944), stdev = 80,257
[info]   CI (99.9%): [10232,902, 10850,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340,930 ±(99.9%) 7,235 MB/sec [Average]
[info]   (min, avg, max) = (1337,763, 1340,930, 1342,728), stdev = 1,879
[info]   CI (99.9%): [1333,695, 1348,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10657,717 ±(99.9%) 183,272 B/op [Average]
[info]   (min, avg, max) = (10614,366, 10657,717, 10738,426), stdev = 47,595
[info]   CI (99.9%): [10474,445, 10840,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,745 ±(99.9%) 5,231 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,745, 3,144), stdev = 1,358
[info]   CI (99.9%): [≈ 0, 5,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,904 ±(99.9%) 41,423 B/op [Average]
[info]   (min, avg, max) = (0,165, 5,904, 24,902), stdev = 10,757
[info]   CI (99.9%): [≈ 0, 47,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 6,000), stdev = 1,225
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,09% complete, ETA 01:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312745,942 ops/s
[info] # Warmup Iteration   2: 563307,565 ops/s
[info] # Warmup Iteration   3: 591144,357 ops/s
[info] # Warmup Iteration   4: 591428,819 ops/s
[info] # Warmup Iteration   5: 590824,576 ops/s
[info] Iteration   1: 594225,200 ops/s
[info]                  ·gc.alloc.rate:               614,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          1626,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1767,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 590998,748 ops/s
[info]                  ·gc.alloc.rate:               625,352 MB/sec
[info]                  ·gc.alloc.rate.norm:          1664,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1776,673 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 592726,058 ops/s
[info]                  ·gc.alloc.rate:               625,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          1658,919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1773,263 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 592867,063 ops/s
[info]                  ·gc.alloc.rate:               620,998 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1772,829 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 592583,088 ops/s
[info]                  ·gc.alloc.rate:                   616,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1635,935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1775,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   592680,031 ±(99.9%) 4415,984 ops/s [Average]
[info]   (min, avg, max) = (590998,748, 592680,031, 594225,200), stdev = 1146,817
[info]   CI (99.9%): [588264,048, 597096,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620,348 ±(99.9%) 19,504 MB/sec [Average]
[info]   (min, avg, max) = (614,182, 620,348, 625,352), stdev = 5,065
[info]   CI (99.9%): [600,844, 639,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1646,698 ±(99.9%) 61,361 B/op [Average]
[info]   (min, avg, max) = (1626,062, 1646,698, 1664,677), stdev = 15,935
[info]   CI (99.9%): [1585,337, 1708,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667,952 ±(99.9%) 2,108 MB/sec [Average]
[info]   (min, avg, max) = (667,424, 667,952, 668,730), stdev = 0,547
[info]   CI (99.9%): [665,844, 670,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1773,044 ±(99.9%) 14,301 B/op [Average]
[info]   (min, avg, max) = (1767,026, 1773,044, 1776,673), stdev = 3,714
[info]   CI (99.9%): [1758,743, 1787,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,055), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,29% complete, ETA 01:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408724,111 ops/s
[info] # Warmup Iteration   2: 773113,192 ops/s
[info] # Warmup Iteration   3: 761002,525 ops/s
[info] # Warmup Iteration   4: 781433,245 ops/s
[info] # Warmup Iteration   5: 796052,015 ops/s
[info] Iteration   1: 795481,859 ops/s
[info]                  ·gc.alloc.rate:               634,084 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1326,566 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 794804,521 ops/s
[info]                  ·gc.alloc.rate:               626,747 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327,669 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 783050,444 ops/s
[info]                  ·gc.alloc.rate:                   625,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1256,193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1348,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 774234,989 ops/s
[info]                  ·gc.alloc.rate:               611,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1364,272 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 784435,933 ops/s
[info]                  ·gc.alloc.rate:                   619,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1243,262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1347,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   786401,549 ±(99.9%) 34235,056 ops/s [Average]
[info]   (min, avg, max) = (774234,989, 786401,549, 795481,859), stdev = 8890,735
[info]   CI (99.9%): [752166,493, 820636,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   623,534 ±(99.9%) 32,075 MB/sec [Average]
[info]   (min, avg, max) = (611,715, 623,534, 634,084), stdev = 8,330
[info]   CI (99.9%): [591,459, 655,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1247,429 ±(99.9%) 27,440 B/op [Average]
[info]   (min, avg, max) = (1240,612, 1247,429, 1256,193), stdev = 7,126
[info]   CI (99.9%): [1219,989, 1274,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,181 ±(99.9%) 1,608 MB/sec [Average]
[info]   (min, avg, max) = (670,727, 671,181, 671,685), stdev = 0,418
[info]   CI (99.9%): [669,573, 672,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1342,904 ±(99.9%) 61,163 B/op [Average]
[info]   (min, avg, max) = (1326,566, 1342,904, 1364,272), stdev = 15,884
[info]   CI (99.9%): [1281,741, 1404,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,49% complete, ETA 01:42:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597273,831 ops/s
[info] # Warmup Iteration   2: 840093,947 ops/s
[info] # Warmup Iteration   3: 844627,599 ops/s
[info] # Warmup Iteration   4: 861369,662 ops/s
[info] # Warmup Iteration   5: 861099,520 ops/s
[info] Iteration   1: 860711,885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 860427,419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 860522,905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 858602,540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 858551,706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   859763,291 ±(99.9%) 4188,711 ops/s [Average]
[info]   (min, avg, max) = (858551,706, 859763,291, 860711,885), stdev = 1087,795
[info]   CI (99.9%): [855574,580, 863952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻⁴, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,69% complete, ETA 01:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135480,937 ops/s
[info] # Warmup Iteration   2: 355885,852 ops/s
[info] # Warmup Iteration   3: 365314,219 ops/s
[info] # Warmup Iteration   4: 367779,476 ops/s
[info] # Warmup Iteration   5: 367215,741 ops/s
[info] Iteration   1: 366531,806 ops/s
[info]                  ·gc.alloc.rate:               1027,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          4408,808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2861,648 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 366457,205 ops/s
[info]                  ·gc.alloc.rate:                   1040,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              4465,883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5730,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 367131,001 ops/s
[info]                  ·gc.alloc.rate:               1026,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          4399,839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2862,769 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 355547,160 ops/s
[info]                  ·gc.alloc.rate:                   1019,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              4510,807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5914,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 352152,606 ops/s
[info]                  ·gc.alloc.rate:               994,839 MB/sec
[info]                  ·gc.alloc.rate.norm:          4444,552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2987,443 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   361563,955 ±(99.9%) 27525,421 ops/s [Average]
[info]   (min, avg, max) = (352152,606, 361563,955, 367131,001), stdev = 7148,264
[info]   CI (99.9%): [334038,534, 389089,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1021,628 ±(99.9%) 64,577 MB/sec [Average]
[info]   (min, avg, max) = (994,839, 1021,628, 1040,232), stdev = 16,770
[info]   CI (99.9%): [957,051, 1086,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4445,978 ±(99.9%) 173,401 B/op [Average]
[info]   (min, avg, max) = (4399,839, 4445,978, 4510,807), stdev = 45,032
[info]   CI (99.9%): [4272,576, 4619,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934,933 ±(99.9%) 1408,558 MB/sec [Average]
[info]   (min, avg, max) = (666,676, 934,933, 1336,561), stdev = 365,798
[info]   CI (99.9%): [≈ 0, 2343,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4071,406 ±(99.9%) 6163,923 B/op [Average]
[info]   (min, avg, max) = (2861,648, 4071,406, 5914,979), stdev = 1600,751
[info]   CI (99.9%): [≈ 0, 10235,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,055 ±(99.9%) 0,316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,055, 0,184), stdev = 0,082
[info]   CI (99.9%): [≈ 0, 0,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,89% complete, ETA 01:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29007,545 ops/s
[info] # Warmup Iteration   2: 47797,698 ops/s
[info] # Warmup Iteration   3: 45244,992 ops/s
[info] # Warmup Iteration   4: 45032,940 ops/s
[info] # Warmup Iteration   5: 44722,279 ops/s
[info] Iteration   1: 46799,093 ops/s
[info]                  ·gc.alloc.rate:                   506,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              17043,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17205,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,700 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 47602,648 ops/s
[info]                  ·gc.alloc.rate:               524,047 MB/sec
[info]                  ·gc.alloc.rate.norm:          17319,949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22178,451 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 47594,009 ops/s
[info]                  ·gc.alloc.rate:               528,810 MB/sec
[info]                  ·gc.alloc.rate.norm:          17480,513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22180,780 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 47649,089 ops/s
[info]                  ·gc.alloc.rate:      516,391 MB/sec
[info]                  ·gc.alloc.rate.norm: 17050,649 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47430,267 ops/s
[info]                  ·gc.alloc.rate:               510,037 MB/sec
[info]                  ·gc.alloc.rate.norm:          16917,819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22280,499 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   47415,021 ±(99.9%) 1363,624 ops/s [Average]
[info]   (min, avg, max) = (46799,093, 47415,021, 47649,089), stdev = 354,129
[info]   CI (99.9%): [46051,397, 48778,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   517,255 ±(99.9%) 35,393 MB/sec [Average]
[info]   (min, avg, max) = (506,987, 517,255, 528,810), stdev = 9,191
[info]   CI (99.9%): [481,862, 552,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17162,414 ±(99.9%) 887,630 B/op [Average]
[info]   (min, avg, max) = (16917,819, 17162,414, 17480,513), stdev = 230,515
[info]   CI (99.9%): [16274,784, 18050,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   505,116 ±(99.9%) 1119,327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505,116, 671,711), stdev = 290,686
[info]   CI (99.9%): [≈ 0, 1624,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16769,059 ±(99.9%) 37050,123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16769,059, 22280,499), stdev = 9621,799
[info]   CI (99.9%): [≈ 0, 53819,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,140 ±(99.9%) 1,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,140, 0,700), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,09% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15386,097 ops/s
[info] # Warmup Iteration   2: 40152,483 ops/s
[info] # Warmup Iteration   3: 41982,497 ops/s
[info] # Warmup Iteration   4: 40937,119 ops/s
[info] # Warmup Iteration   5: 42335,729 ops/s
[info] Iteration   1: 42541,115 ops/s
[info]                  ·gc.alloc.rate:                   2156,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              79769,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74546,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134,769 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 42607,780 ops/s
[info]                  ·gc.alloc.rate:               2185,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          80687,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74232,203 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 42542,525 ops/s
[info]                  ·gc.alloc.rate:                   2171,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              80292,404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74308,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,770 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 41872,107 ops/s
[info]                  ·gc.alloc.rate:                   2137,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              80293,414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75552,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 42929,993 ops/s
[info]                  ·gc.alloc.rate:                   2203,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              80747,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73815,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,763 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   42498,704 ±(99.9%) 1484,186 ops/s [Average]
[info]   (min, avg, max) = (41872,107, 42498,704, 42929,993), stdev = 385,438
[info]   CI (99.9%): [41014,518, 43982,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2170,789 ±(99.9%) 98,352 MB/sec [Average]
[info]   (min, avg, max) = (2137,022, 2170,789, 2203,523), stdev = 25,542
[info]   CI (99.9%): [2072,437, 2269,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80357,924 ±(99.9%) 1510,223 B/op [Average]
[info]   (min, avg, max) = (79769,120, 80357,924, 80747,166), stdev = 392,200
[info]   CI (99.9%): [78847,701, 81868,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2012,147 ±(99.9%) 10,574 MB/sec [Average]
[info]   (min, avg, max) = (2009,427, 2012,147, 2015,755), stdev = 2,746
[info]   CI (99.9%): [2001,573, 2022,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   74490,986 ±(99.9%) 2501,286 B/op [Average]
[info]   (min, avg, max) = (73815,003, 74490,986, 75552,857), stdev = 649,576
[info]   CI (99.9%): [71989,700, 76992,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,770 ±(99.9%) 6,191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,770, 3,644), stdev = 1,608
[info]   CI (99.9%): [≈ 0, 6,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28,512 ±(99.9%) 228,928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28,512, 134,769), stdev = 59,452
[info]   CI (99.9%): [≈ 0, 257,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 5,000), stdev = 0,894
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,29% complete, ETA 01:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,885 ops/s
[info] # Warmup Iteration   2: 305522,972 ops/s
[info] # Warmup Iteration   3: 324606,851 ops/s
[info] # Warmup Iteration   4: 320984,411 ops/s
[info] # Warmup Iteration   5: 325258,887 ops/s
[info] Iteration   1: 327094,844 ops/s
[info]                  ·gc.alloc.rate:      339,311 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 325713,595 ops/s
[info]                  ·gc.alloc.rate:               351,133 MB/sec
[info]                  ·gc.alloc.rate.norm:          1696,119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2472,047 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 326146,179 ops/s
[info]                  ·gc.alloc.rate:                   350,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1690,751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3207,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 326559,656 ops/s
[info]                  ·gc.alloc.rate:      338,752 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 326225,040 ops/s
[info]                  ·gc.alloc.rate:               357,427 MB/sec
[info]                  ·gc.alloc.rate.norm:          1723,793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3207,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   326347,863 ±(99.9%) 1983,076 ops/s [Average]
[info]   (min, avg, max) = (325713,595, 326347,863, 327094,844), stdev = 514,999
[info]   CI (99.9%): [324364,786, 328330,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   347,426 ±(99.9%) 31,303 MB/sec [Average]
[info]   (min, avg, max) = (338,752, 347,426, 357,427), stdev = 8,129
[info]   CI (99.9%): [316,123, 378,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1674,933 ±(99.9%) 158,446 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1674,933, 1723,793), stdev = 41,148
[info]   CI (99.9%): [1516,487, 1833,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368,363 ±(99.9%) 1317,068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368,363, 665,039), stdev = 342,039
[info]   CI (99.9%): [≈ 0, 1685,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1777,441 ±(99.9%) 6354,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1777,441, 3207,972), stdev = 1650,125
[info]   CI (99.9%): [≈ 0, 8131,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,041), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,039 ±(99.9%) 0,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,039, 0,196), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 4,000), stdev = 1,789
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,49% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55144,312 ops/s
[info] # Warmup Iteration   2: 117904,760 ops/s
[info] # Warmup Iteration   3: 122507,533 ops/s
[info] # Warmup Iteration   4: 123570,418 ops/s
[info] # Warmup Iteration   5: 124143,692 ops/s
[info] Iteration   1: 123515,078 ops/s
[info]                  ·gc.alloc.rate:                   1477,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              18820,834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17060,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,530 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 124360,642 ops/s
[info]                  ·gc.alloc.rate:                   1487,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              18821,835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16952,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 124253,623 ops/s
[info]                  ·gc.alloc.rate:                   1486,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              18819,396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16975,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,206 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 121689,708 ops/s
[info]                  ·gc.alloc.rate:                   1468,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              18977,532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17282,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,077 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 122455,938 ops/s
[info]                  ·gc.alloc.rate:                   1492,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              19170,421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25734,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   123254,998 ±(99.9%) 4464,079 ops/s [Average]
[info]   (min, avg, max) = (121689,708, 123254,998, 124360,642), stdev = 1159,307
[info]   CI (99.9%): [118790,918, 127719,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1482,377 ±(99.9%) 36,949 MB/sec [Average]
[info]   (min, avg, max) = (1468,027, 1482,377, 1492,134), stdev = 9,596
[info]   CI (99.9%): [1445,428, 1519,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18922,004 ±(99.9%) 595,271 B/op [Average]
[info]   (min, avg, max) = (18819,396, 18922,004, 19170,421), stdev = 154,590
[info]   CI (99.9%): [18326,733, 19517,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472,032 ±(99.9%) 1143,115 MB/sec [Average]
[info]   (min, avg, max) = (1336,933, 1472,032, 2003,071), stdev = 296,863
[info]   CI (99.9%): [328,916, 2615,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18801,279 ±(99.9%) 14933,288 B/op [Average]
[info]   (min, avg, max) = (16952,763, 18801,279, 25734,763), stdev = 3878,127
[info]   CI (99.9%): [3867,992, 33734,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,858 ±(99.9%) 7,030 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,858, 4,123), stdev = 1,826
[info]   CI (99.9%): [≈ 0, 7,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,869 ±(99.9%) 88,990 B/op [Average]
[info]   (min, avg, max) = (0,263, 10,869, 52,206), stdev = 23,110
[info]   CI (99.9%): [≈ 0, 99,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,69% complete, ETA 01:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309742,090 ops/s
[info] # Warmup Iteration   2: 525725,454 ops/s
[info] # Warmup Iteration   3: 526178,982 ops/s
[info] # Warmup Iteration   4: 518966,041 ops/s
[info] # Warmup Iteration   5: 514926,179 ops/s
[info] Iteration   1: 518030,480 ops/s
[info]                  ·gc.alloc.rate:                   354,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077,635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 514282,806 ops/s
[info]                  ·gc.alloc.rate:      334,802 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,247 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 526818,236 ops/s
[info]                  ·gc.alloc.rate:               362,310 MB/sec
[info]                  ·gc.alloc.rate.norm:          1081,989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2004,927 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 528683,498 ops/s
[info]                  ·gc.alloc.rate:      344,111 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 526212,316 ops/s
[info]                  ·gc.alloc.rate:                   367,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1098,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2007,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,588 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   522805,467 ±(99.9%) 24177,661 ops/s [Average]
[info]   (min, avg, max) = (514282,806, 522805,467, 528683,498), stdev = 6278,862
[info]   CI (99.9%): [498627,806, 546983,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   352,691 ±(99.9%) 51,189 MB/sec [Average]
[info]   (min, avg, max) = (334,802, 352,691, 367,392), stdev = 13,294
[info]   CI (99.9%): [301,502, 403,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1061,266 ±(99.9%) 133,941 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1061,266, 1098,458), stdev = 34,784
[info]   CI (99.9%): [927,325, 1195,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370,899 ±(99.9%) 1327,679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,899, 671,360), stdev = 344,794
[info]   CI (99.9%): [≈ 0, 1698,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1113,292 ±(99.9%) 3977,321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1113,292, 2007,278), stdev = 1032,898
[info]   CI (99.9%): [≈ 0, 5090,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,207), stdev = 1,430
[info]   CI (99.9%): [≈ 0, 6,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,943 ±(99.9%) 16,458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,943, 9,588), stdev = 4,274
[info]   CI (99.9%): [≈ 0, 18,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,90% complete, ETA 01:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10341,757 ops/s
[info] # Warmup Iteration   2: 41945,671 ops/s
[info] # Warmup Iteration   3: 46349,976 ops/s
[info] # Warmup Iteration   4: 46640,830 ops/s
[info] # Warmup Iteration   5: 46765,353 ops/s
[info] Iteration   1: 46828,490 ops/s
[info]                  ·gc.alloc.rate:                   2341,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              78650,066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89954,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,220 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 46977,139 ops/s
[info]                  ·gc.alloc.rate:                   2335,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              78215,412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67060,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,697 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 47034,793 ops/s
[info]                  ·gc.alloc.rate:               2312,151 MB/sec
[info]                  ·gc.alloc.rate.norm:          77338,203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66956,940 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 46721,368 ops/s
[info]                  ·gc.alloc.rate:               2351,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          79169,567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90045,911 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 46767,177 ops/s
[info]                  ·gc.alloc.rate:               2327,605 MB/sec
[info]                  ·gc.alloc.rate.norm:          78300,800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67662,719 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   46865,793 ±(99.9%) 519,960 ops/s [Average]
[info]   (min, avg, max) = (46721,368, 46865,793, 47034,793), stdev = 135,032
[info]   CI (99.9%): [46345,834, 47385,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2333,489 ±(99.9%) 56,555 MB/sec [Average]
[info]   (min, avg, max) = (2312,151, 2333,489, 2351,153), stdev = 14,687
[info]   CI (99.9%): [2276,935, 2390,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78334,810 ±(99.9%) 2586,563 B/op [Average]
[info]   (min, avg, max) = (77338,203, 78334,810, 79169,567), stdev = 671,722
[info]   CI (99.9%): [75748,247, 80921,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2273,446 ±(99.9%) 1414,499 MB/sec [Average]
[info]   (min, avg, max) = (2001,787, 2273,446, 2677,493), stdev = 367,341
[info]   CI (99.9%): [858,947, 3687,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76336,023 ±(99.9%) 48042,129 B/op [Average]
[info]   (min, avg, max) = (66956,940, 76336,023, 90045,911), stdev = 12476,388
[info]   CI (99.9%): [28293,894, 124378,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,875 ±(99.9%) 7,486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,875, 4,352), stdev = 1,944
[info]   CI (99.9%): [≈ 0, 8,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   29,384 ±(99.9%) 251,502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29,384, 146,220), stdev = 65,314
[info]   CI (99.9%): [≈ 0, 280,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 7,000), stdev = 1,732
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,10% complete, ETA 01:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44646,848 ops/s
[info] # Warmup Iteration   2: 91771,710 ops/s
[info] # Warmup Iteration   3: 93666,674 ops/s
[info] # Warmup Iteration   4: 95101,028 ops/s
[info] # Warmup Iteration   5: 95395,896 ops/s
[info] Iteration   1: 95462,378 ops/s
[info]                  ·gc.alloc.rate:               1783,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          29394,779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22183,950 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 95745,529 ops/s
[info]                  ·gc.alloc.rate:                   1804,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              29660,745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33154,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,511 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 94968,351 ops/s
[info]                  ·gc.alloc.rate:               1778,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          29466,675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22233,322 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 95439,396 ops/s
[info]                  ·gc.alloc.rate:                   1812,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              29880,249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33151,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 95595,494 ops/s
[info]                  ·gc.alloc.rate:               1815,867 MB/sec
[info]                  ·gc.alloc.rate.norm:          29884,473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33109,694 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   95442,230 ±(99.9%) 1123,397 ops/s [Average]
[info]   (min, avg, max) = (94968,351, 95442,230, 95745,529), stdev = 291,743
[info]   CI (99.9%): [94318,832, 96565,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1799,177 ±(99.9%) 65,352 MB/sec [Average]
[info]   (min, avg, max) = (1778,756, 1799,177, 1815,867), stdev = 16,972
[info]   CI (99.9%): [1733,825, 1864,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   29657,384 ±(99.9%) 875,082 B/op [Average]
[info]   (min, avg, max) = (29394,779, 29657,384, 29884,473), stdev = 227,256
[info]   CI (99.9%): [28782,303, 30532,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745,755 ±(99.9%) 1411,899 MB/sec [Average]
[info]   (min, avg, max) = (1342,115, 1745,755, 2017,602), stdev = 366,666
[info]   CI (99.9%): [333,856, 3157,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28766,748 ±(99.9%) 23052,888 B/op [Average]
[info]   (min, avg, max) = (22183,950, 28766,748, 33154,995), stdev = 5986,762
[info]   CI (99.9%): [5713,860, 51819,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,716 ±(99.9%) 6,123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,716, 3,561), stdev = 1,590
[info]   CI (99.9%): [≈ 0, 6,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11,771 ±(99.9%) 100,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,771, 58,511), stdev = 26,129
[info]   CI (99.9%): [≈ 0, 112,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,30% complete, ETA 01:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42177,075 ops/s
[info] # Warmup Iteration   2: 81866,759 ops/s
[info] # Warmup Iteration   3: 81153,672 ops/s
[info] # Warmup Iteration   4: 82146,804 ops/s
[info] # Warmup Iteration   5: 82648,915 ops/s
[info] Iteration   1: 82621,892 ops/s
[info]                  ·gc.alloc.rate:               673,720 MB/sec
[info]                  ·gc.alloc.rate.norm:          12829,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12733,814 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 82695,133 ops/s
[info]                  ·gc.alloc.rate:               680,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          12954,395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12727,991 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 81913,760 ops/s
[info]                  ·gc.alloc.rate:               670,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          12877,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12849,475 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 81136,969 ops/s
[info]                  ·gc.alloc.rate:               661,889 MB/sec
[info]                  ·gc.alloc.rate.norm:          12833,525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12986,381 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 73854,841 ops/s
[info]                  ·gc.alloc.rate:      585,508 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   80444,519 ±(99.9%) 14390,829 ops/s [Average]
[info]   (min, avg, max) = (73854,841, 80444,519, 82695,133), stdev = 3737,253
[info]   CI (99.9%): [66053,690, 94835,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   654,493 ±(99.9%) 150,798 MB/sec [Average]
[info]   (min, avg, max) = (585,508, 654,493, 680,877), stdev = 39,162
[info]   CI (99.9%): [503,694, 805,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12793,208 ±(99.9%) 718,051 B/op [Average]
[info]   (min, avg, max) = (12472,007, 12793,208, 12954,395), stdev = 186,476
[info]   CI (99.9%): [12075,157, 13511,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535,300 ±(99.9%) 1152,275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535,300, 669,773), stdev = 299,242
[info]   CI (99.9%): [≈ 0, 1687,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10259,532 ±(99.9%) 22088,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10259,532, 12986,381), stdev = 5736,220
[info]   CI (99.9%): [≈ 0, 32347,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,50% complete, ETA 01:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,798 ops/s
[info] # Warmup Iteration   2: 93104,566 ops/s
[info] # Warmup Iteration   3: 96346,223 ops/s
[info] # Warmup Iteration   4: 97320,136 ops/s
[info] # Warmup Iteration   5: 96856,096 ops/s
[info] Iteration   1: 97487,865 ops/s
[info]                  ·gc.alloc.rate:               569,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          9182,695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10743,540 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 97640,289 ops/s
[info]                  ·gc.alloc.rate:               566,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          9120,709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10726,598 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 97242,803 ops/s
[info]                  ·gc.alloc.rate:                   567,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              9189,102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10780,831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 97650,698 ops/s
[info]                  ·gc.alloc.rate:                   567,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              9141,256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10736,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 97519,896 ops/s
[info]                  ·gc.alloc.rate:               572,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          9242,872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10755,590 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   97508,310 ±(99.9%) 634,887 ops/s [Average]
[info]   (min, avg, max) = (97242,803, 97508,310, 97650,698), stdev = 164,878
[info]   CI (99.9%): [96873,423, 98143,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   568,667 ±(99.9%) 10,080 MB/sec [Average]
[info]   (min, avg, max) = (566,020, 568,667, 572,930), stdev = 2,618
[info]   CI (99.9%): [558,587, 578,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9175,327 ±(99.9%) 182,147 B/op [Average]
[info]   (min, avg, max) = (9120,709, 9175,327, 9242,872), stdev = 47,303
[info]   CI (99.9%): [8993,179, 9357,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666,173 ±(99.9%) 1,715 MB/sec [Average]
[info]   (min, avg, max) = (665,680, 666,173, 666,698), stdev = 0,445
[info]   CI (99.9%): [664,458, 667,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   10748,559 ±(99.9%) 80,548 B/op [Average]
[info]   (min, avg, max) = (10726,598, 10748,559, 10780,831), stdev = 20,918
[info]   CI (99.9%): [10668,012, 10829,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,336), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 0,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,70% complete, ETA 01:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50671,841 ops/s
[info] # Warmup Iteration   2: 85639,199 ops/s
[info] # Warmup Iteration   3: 85352,556 ops/s
[info] # Warmup Iteration   4: 85896,517 ops/s
[info] # Warmup Iteration   5: 85815,895 ops/s
[info] Iteration   1: 86189,398 ops/s
[info]                  ·gc.alloc.rate:      508,402 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 86214,101 ops/s
[info]                  ·gc.alloc.rate:               527,890 MB/sec
[info]                  ·gc.alloc.rate.norm:          9632,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12184,967 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 86072,820 ops/s
[info]                  ·gc.alloc.rate:                   532,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              9736,798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12204,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,142 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 85957,172 ops/s
[info]                  ·gc.alloc.rate:               531,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          9728,816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12233,448 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 86186,334 ops/s
[info]                  ·gc.alloc.rate:      521,554 MB/sec
[info]                  ·gc.alloc.rate.norm: 9520,790 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   86123,965 ±(99.9%) 416,207 ops/s [Average]
[info]   (min, avg, max) = (85957,172, 86123,965, 86214,101), stdev = 108,088
[info]   CI (99.9%): [85707,758, 86540,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   524,414 ±(99.9%) 38,305 MB/sec [Average]
[info]   (min, avg, max) = (508,402, 524,414, 532,701), stdev = 9,948
[info]   CI (99.9%): [486,108, 562,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9579,879 ±(99.9%) 728,170 B/op [Average]
[info]   (min, avg, max) = (9280,007, 9579,879, 9736,798), stdev = 189,103
[info]   CI (99.9%): [8851,709, 10308,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   400,760 ±(99.9%) 1408,728 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400,760, 668,358), stdev = 365,842
[info]   CI (99.9%): [≈ 0, 1809,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7324,554 ±(99.9%) 25746,927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7324,554, 12233,448), stdev = 6686,395
[info]   CI (99.9%): [≈ 0, 33071,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,228 ±(99.9%) 1,966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,228, 1,142), stdev = 0,511
[info]   CI (99.9%): [≈ 0, 2,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,90% complete, ETA 01:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62291,848 ops/s
[info] # Warmup Iteration   2: 94868,024 ops/s
[info] # Warmup Iteration   3: 96093,666 ops/s
[info] # Warmup Iteration   4: 94034,623 ops/s
[info] # Warmup Iteration   5: 94261,621 ops/s
[info] Iteration   1: 96278,366 ops/s
[info]                  ·gc.alloc.rate:               559,822 MB/sec
[info]                  ·gc.alloc.rate.norm:          9147,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10971,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 96569,442 ops/s
[info]                  ·gc.alloc.rate:               562,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          9159,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10937,594 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 96723,998 ops/s
[info]                  ·gc.alloc.rate:      546,926 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 96332,972 ops/s
[info]                  ·gc.alloc.rate:               566,721 MB/sec
[info]                  ·gc.alloc.rate.norm:          9255,124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10970,395 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 96331,037 ops/s
[info]                  ·gc.alloc.rate:                   565,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              9234,809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10970,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,340 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   96447,163 ±(99.9%) 737,192 ops/s [Average]
[info]   (min, avg, max) = (96278,366, 96447,163, 96723,998), stdev = 191,446
[info]   CI (99.9%): [95709,971, 97184,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560,221 ±(99.9%) 30,467 MB/sec [Average]
[info]   (min, avg, max) = (546,926, 560,221, 566,721), stdev = 7,912
[info]   CI (99.9%): [529,753, 590,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9138,414 ±(99.9%) 551,920 B/op [Average]
[info]   (min, avg, max) = (8896,005, 9138,414, 9255,124), stdev = 143,332
[info]   CI (99.9%): [8586,494, 9690,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537,263 ±(99.9%) 1156,499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,263, 671,752), stdev = 300,339
[info]   CI (99.9%): [≈ 0, 1693,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8770,011 ±(99.9%) 18878,191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8770,011, 10971,330), stdev = 4902,606
[info]   CI (99.9%): [≈ 0, 27648,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,068 ±(99.9%) 0,586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,068, 0,340), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,10% complete, ETA 01:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61538,993 ops/s
[info] # Warmup Iteration   2: 94436,565 ops/s
[info] # Warmup Iteration   3: 95997,103 ops/s
[info] # Warmup Iteration   4: 96678,035 ops/s
[info] # Warmup Iteration   5: 96868,808 ops/s
[info] Iteration   1: 96947,898 ops/s
[info]                  ·gc.alloc.rate:                   487,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              7907,956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8305,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 91026,376 ops/s
[info]                  ·gc.alloc.rate:               456,236 MB/sec
[info]                  ·gc.alloc.rate.norm:          7885,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11592,616 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 95864,345 ops/s
[info]                  ·gc.alloc.rate:      466,513 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 97117,161 ops/s
[info]                  ·gc.alloc.rate:                   489,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              7932,783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10865,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,337 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 96613,208 ops/s
[info]                  ·gc.alloc.rate:               496,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          8085,835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10933,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   95513,798 ±(99.9%) 9835,354 ops/s [Average]
[info]   (min, avg, max) = (91026,376, 95513,798, 97117,161), stdev = 2554,210
[info]   CI (99.9%): [85678,444, 105349,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   479,247 ±(99.9%) 65,668 MB/sec [Average]
[info]   (min, avg, max) = (456,236, 479,247, 496,510), stdev = 17,054
[info]   CI (99.9%): [413,580, 544,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7893,556 ±(99.9%) 594,104 B/op [Average]
[info]   (min, avg, max) = (7656,005, 7893,556, 8085,835), stdev = 154,287
[info]   CI (99.9%): [7299,452, 8487,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   504,917 ±(99.9%) 1118,793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504,917, 671,344), stdev = 290,547
[info]   CI (99.9%): [≈ 0, 1623,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   8339,298 ±(99.9%) 18590,884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8339,298, 11592,616), stdev = 4827,994
[info]   CI (99.9%): [≈ 0, 26930,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,135 ±(99.9%) 0,712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,135, 0,338), stdev = 0,185
[info]   CI (99.9%): [≈ 0, 0,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,30% complete, ETA 01:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2561,094 ops/s
[info] # Warmup Iteration   2: 10470,786 ops/s
[info] # Warmup Iteration   3: 11042,219 ops/s
[info] # Warmup Iteration   4: 11208,247 ops/s
[info] # Warmup Iteration   5: 11261,763 ops/s
[info] Iteration   1: 11284,718 ops/s
[info]                  ·gc.alloc.rate:               1839,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          256497,262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187288,847 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   2: 11198,998 ops/s
[info]                  ·gc.alloc.rate:                   1864,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              261953,823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282784,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561,637 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 11259,757 ops/s
[info]                  ·gc.alloc.rate:                   1875,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              262112,520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280532,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,910 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11310,235 ops/s
[info]                  ·gc.alloc.rate:                   1843,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              256422,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185931,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,896 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11265,222 ops/s
[info]                  ·gc.alloc.rate:               1885,644 MB/sec
[info]                  ·gc.alloc.rate.norm:          263339,751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280243,754 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   11263,786 ±(99.9%) 158,899 ops/s [Average]
[info]   (min, avg, max) = (11198,998, 11263,786, 11310,235), stdev = 41,266
[info]   CI (99.9%): [11104,887, 11422,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1861,885 ±(99.9%) 77,042 MB/sec [Average]
[info]   (min, avg, max) = (1839,796, 1861,885, 1885,644), stdev = 20,008
[info]   CI (99.9%): [1784,843, 1938,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260065,086 ±(99.9%) 12841,138 B/op [Average]
[info]   (min, avg, max) = (256422,075, 260065,086, 263339,751), stdev = 3334,803
[info]   CI (99.9%): [247223,948, 272906,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1741,486 ±(99.9%) 1411,373 MB/sec [Average]
[info]   (min, avg, max) = (1336,601, 1741,486, 2013,029), stdev = 366,529
[info]   CI (99.9%): [330,113, 3152,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   243356,202 ±(99.9%) 199514,726 B/op [Average]
[info]   (min, avg, max) = (185931,535, 243356,202, 282784,154), stdev = 51813,341
[info]   CI (99.9%): [43841,477, 442870,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,808 ±(99.9%) 6,867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,808, 3,998), stdev = 1,783
[info]   CI (99.9%): [≈ 0, 7,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   113,489 ±(99.9%) 964,689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113,489, 561,637), stdev = 250,527
[info]   CI (99.9%): [≈ 0, 1078,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 7,000), stdev = 2,168
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,50% complete, ETA 01:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3054,898 ops/s
[info] # Warmup Iteration   2: 10771,949 ops/s
[info] # Warmup Iteration   3: 10960,120 ops/s
[info] # Warmup Iteration   4: 11173,878 ops/s
[info] # Warmup Iteration   5: 10905,507 ops/s
[info] Iteration   1: 11199,863 ops/s
[info]                  ·gc.alloc.rate:                   1727,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              242347,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281175,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 11296,875 ops/s
[info]                  ·gc.alloc.rate:                   1749,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              243580,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186609,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556,766 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 11302,579 ops/s
[info]                  ·gc.alloc.rate:                   1763,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              245535,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278909,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63,768 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11307,083 ops/s
[info]                  ·gc.alloc.rate:               1736,647 MB/sec
[info]                  ·gc.alloc.rate.norm:          241623,273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 185610,005 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 11313,556 ops/s
[info]                  ·gc.alloc.rate:                   1777,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              247185,742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278267,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   11283,991 ±(99.9%) 182,614 ops/s [Average]
[info]   (min, avg, max) = (11199,863, 11283,991, 11313,556), stdev = 47,424
[info]   CI (99.9%): [11101,377, 11466,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1750,890 ±(99.9%) 78,310 MB/sec [Average]
[info]   (min, avg, max) = (1727,177, 1750,890, 1777,608), stdev = 20,337
[info]   CI (99.9%): [1672,580, 1829,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   244054,566 ±(99.9%) 8833,226 B/op [Average]
[info]   (min, avg, max) = (241623,273, 244054,566, 247185,742), stdev = 2293,961
[info]   CI (99.9%): [235221,340, 252887,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736,557 ±(99.9%) 1404,536 MB/sec [Average]
[info]   (min, avg, max) = (1334,057, 1736,557, 2003,899), stdev = 364,753
[info]   CI (99.9%): [332,022, 3141,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   242114,211 ±(99.9%) 196912,354 B/op [Average]
[info]   (min, avg, max) = (185610,005, 242114,211, 281175,095), stdev = 51137,513
[info]   CI (99.9%): [45201,856, 439026,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,900 ±(99.9%) 6,710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,900, 3,998), stdev = 1,743
[info]   CI (99.9%): [≈ 0, 7,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   125,269 ±(99.9%) 934,545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125,269, 556,766), stdev = 242,698
[info]   CI (99.9%): [≈ 0, 1059,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 9,000), stdev = 2,608
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,70% complete, ETA 01:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118509,848 ops/s
[info] # Warmup Iteration   2: 168045,620 ops/s
[info] # Warmup Iteration   3: 170638,729 ops/s
[info] # Warmup Iteration   4: 172476,561 ops/s
[info] # Warmup Iteration   5: 171915,977 ops/s
[info] Iteration   1: 172177,087 ops/s
[info]                  ·gc.alloc.rate:                   466,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              4265,422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4676,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 168857,105 ops/s
[info]                  ·gc.alloc.rate:               456,393 MB/sec
[info]                  ·gc.alloc.rate.norm:          4252,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6252,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 167666,802 ops/s
[info]                  ·gc.alloc.rate:      436,541 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 172371,866 ops/s
[info]                  ·gc.alloc.rate:                   463,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              4229,601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6124,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 172346,653 ops/s
[info]                  ·gc.alloc.rate:               471,978 MB/sec
[info]                  ·gc.alloc.rate.norm:          4308,455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6131,952 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   170683,903 ±(99.9%) 8671,143 ops/s [Average]
[info]   (min, avg, max) = (167666,802, 170683,903, 172371,866), stdev = 2251,868
[info]   CI (99.9%): [162012,760, 179355,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459,031 ±(99.9%) 53,089 MB/sec [Average]
[info]   (min, avg, max) = (436,541, 459,031, 471,978), stdev = 13,787
[info]   CI (99.9%): [405,942, 512,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4230,312 ±(99.9%) 309,566 B/op [Average]
[info]   (min, avg, max) = (4096,003, 4230,312, 4308,455), stdev = 80,393
[info]   CI (99.9%): [3920,746, 4539,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   505,149 ±(99.9%) 1119,414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505,149, 671,736), stdev = 290,708
[info]   CI (99.9%): [≈ 0, 1624,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4637,184 ±(99.9%) 10289,529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4637,184, 6252,463), stdev = 2672,158
[info]   CI (99.9%): [≈ 0, 14926,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,076 ±(99.9%) 0,401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,076, 0,190), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,90% complete, ETA 01:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560,609 ops/s
[info] # Warmup Iteration   2: 5070,174 ops/s
[info] # Warmup Iteration   3: 6228,500 ops/s
[info] # Warmup Iteration   4: 6411,130 ops/s
[info] # Warmup Iteration   5: 6381,856 ops/s
[info] Iteration   1: 6390,104 ops/s
[info]                  ·gc.alloc.rate:                   1669,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              411049,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329074,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,253 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 6358,082 ops/s
[info]                  ·gc.alloc.rate:                   1684,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              416796,280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496750,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1015,143 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   3: 6433,706 ops/s
[info]                  ·gc.alloc.rate:                   1674,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              409425,716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     326793,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,474 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6424,237 ops/s
[info]                  ·gc.alloc.rate:                   1708,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              418366,740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489694,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,993 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 6434,947 ops/s
[info]                  ·gc.alloc.rate:               1686,242 MB/sec
[info]                  ·gc.alloc.rate.norm:          412288,585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 325847,110 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6408,215 ±(99.9%) 128,615 ops/s [Average]
[info]   (min, avg, max) = (6358,082, 6408,215, 6434,947), stdev = 33,401
[info]   CI (99.9%): [6279,600, 6536,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1684,639 ±(99.9%) 57,710 MB/sec [Average]
[info]   (min, avg, max) = (1669,627, 1684,639, 1708,399), stdev = 14,987
[info]   CI (99.9%): [1626,928, 1742,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   413585,331 ±(99.9%) 14736,866 B/op [Average]
[info]   (min, avg, max) = (409425,716, 413585,331, 418366,740), stdev = 3827,117
[info]   CI (99.9%): [398848,464, 428322,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1602,636 ±(99.9%) 1409,855 MB/sec [Average]
[info]   (min, avg, max) = (1332,700, 1602,636, 2007,736), stdev = 366,135
[info]   CI (99.9%): [192,780, 3012,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   393632,044 ±(99.9%) 350234,962 B/op [Average]
[info]   (min, avg, max) = (325847,110, 393632,044, 496750,307), stdev = 90954,907
[info]   CI (99.9%): [43397,082, 743867,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,937 ±(99.9%) 6,834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,937, 4,103), stdev = 1,775
[info]   CI (99.9%): [≈ 0, 7,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   231,573 ±(99.9%) 1691,360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 231,573, 1015,143), stdev = 439,241
[info]   CI (99.9%): [≈ 0, 1922,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,200, 11,000), stdev = 3,834
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,10% complete, ETA 01:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2335,972 ops/s
[info] # Warmup Iteration   2: 9563,350 ops/s
[info] # Warmup Iteration   3: 10463,125 ops/s
[info] # Warmup Iteration   4: 10474,429 ops/s
[info] # Warmup Iteration   5: 10465,625 ops/s
[info] Iteration   1: 10407,230 ops/s
[info]                  ·gc.alloc.rate:                   1683,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              254491,371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304932,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,296 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   2: 10421,927 ops/s
[info]                  ·gc.alloc.rate:                   1645,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              248337,658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202976,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471,482 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 10486,240 ops/s
[info]                  ·gc.alloc.rate:                   1690,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              253580,573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302206,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118,713 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 10517,326 ops/s
[info]                  ·gc.alloc.rate:               1682,754 MB/sec
[info]                  ·gc.alloc.rate.norm:          251702,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 200364,841 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 10490,618 ops/s
[info]                  ·gc.alloc.rate:               1693,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          253966,352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 301092,108 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10464,668 ±(99.9%) 183,033 ops/s [Average]
[info]   (min, avg, max) = (10407,230, 10464,668, 10517,326), stdev = 47,533
[info]   CI (99.9%): [10281,635, 10647,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1679,031 ±(99.9%) 75,002 MB/sec [Average]
[info]   (min, avg, max) = (1645,149, 1679,031, 1693,510), stdev = 19,478
[info]   CI (99.9%): [1604,028, 1754,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   252415,682 ±(99.9%) 9666,766 B/op [Average]
[info]   (min, avg, max) = (248337,658, 252415,682, 254491,371), stdev = 2510,429
[info]   CI (99.9%): [242748,916, 262082,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1744,694 ±(99.9%) 1415,283 MB/sec [Average]
[info]   (min, avg, max) = (1339,537, 1744,694, 2017,134), stdev = 367,545
[info]   CI (99.9%): [329,411, 3159,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   262314,389 ±(99.9%) 213269,322 B/op [Average]
[info]   (min, avg, max) = (200364,841, 262314,389, 304932,227), stdev = 55385,366
[info]   CI (99.9%): [49045,068, 475583,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,791 ±(99.9%) 5,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,791, 3,123), stdev = 1,347
[info]   CI (99.9%): [≈ 0, 5,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   119,298 ±(99.9%) 782,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119,298, 471,482), stdev = 203,265
[info]   CI (99.9%): [≈ 0, 902,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 10,000), stdev = 3,391
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,31% complete, ETA 01:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8324,172 ops/s
[info] # Warmup Iteration   2: 21122,653 ops/s
[info] # Warmup Iteration   3: 21570,575 ops/s
[info] # Warmup Iteration   4: 21446,856 ops/s
[info] # Warmup Iteration   5: 21298,674 ops/s
[info] Iteration   1: 21109,142 ops/s
[info]                  ·gc.alloc.rate:               1642,435 MB/sec
[info]                  ·gc.alloc.rate.norm:          122406,673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99990,896 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 21374,935 ops/s
[info]                  ·gc.alloc.rate:                   1676,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              123405,686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148220,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283,553 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 21342,750 ops/s
[info]                  ·gc.alloc.rate:                   1653,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              121876,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98732,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 21480,260 ops/s
[info]                  ·gc.alloc.rate:                   1686,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              123506,279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147007,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,525 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 21481,867 ops/s
[info]                  ·gc.alloc.rate:               1674,268 MB/sec
[info]                  ·gc.alloc.rate.norm:          122614,423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97991,372 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   21357,791 ±(99.9%) 586,324 ops/s [Average]
[info]   (min, avg, max) = (21109,142, 21357,791, 21481,867), stdev = 152,266
[info]   CI (99.9%): [20771,467, 21944,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1666,540 ±(99.9%) 69,662 MB/sec [Average]
[info]   (min, avg, max) = (1642,435, 1666,540, 1686,241), stdev = 18,091
[info]   CI (99.9%): [1596,878, 1736,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122761,840 ±(99.9%) 2654,620 B/op [Average]
[info]   (min, avg, max) = (121876,138, 122761,840, 123506,279), stdev = 689,396
[info]   CI (99.9%): [120107,220, 125416,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607,955 ±(99.9%) 1414,751 MB/sec [Average]
[info]   (min, avg, max) = (1338,046, 1607,955, 2013,728), stdev = 367,406
[info]   CI (99.9%): [193,204, 3022,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   118388,436 ±(99.9%) 102781,469 B/op [Average]
[info]   (min, avg, max) = (97991,372, 118388,436, 148220,060), stdev = 26692,021
[info]   CI (99.9%): [15606,967, 221169,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,783 ±(99.9%) 6,607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,783, 3,852), stdev = 1,716
[info]   CI (99.9%): [≈ 0, 7,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57,630 ±(99.9%) 486,342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57,630, 283,553), stdev = 126,301
[info]   CI (99.9%): [≈ 0, 543,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 7,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,51% complete, ETA 01:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10536,660 ops/s
[info] # Warmup Iteration   2: 25328,931 ops/s
[info] # Warmup Iteration   3: 26203,979 ops/s
[info] # Warmup Iteration   4: 26191,206 ops/s
[info] # Warmup Iteration   5: 26112,941 ops/s
[info] Iteration   1: 26252,926 ops/s
[info]                  ·gc.alloc.rate:               1776,846 MB/sec
[info]                  ·gc.alloc.rate.norm:          106479,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80309,492 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 26103,221 ops/s
[info]                  ·gc.alloc.rate:                   1779,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              107275,790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121127,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233,439 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 26309,607 ops/s
[info]                  ·gc.alloc.rate:               1783,915 MB/sec
[info]                  ·gc.alloc.rate.norm:          106675,503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79973,096 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 26307,780 ops/s
[info]                  ·gc.alloc.rate:                   1782,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              106573,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119824,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,245 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 26309,902 ops/s
[info]                  ·gc.alloc.rate:                   1783,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              106636,671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79936,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,245 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   26256,687 ±(99.9%) 343,382 ops/s [Average]
[info]   (min, avg, max) = (26103,221, 26256,687, 26309,902), stdev = 89,175
[info]   CI (99.9%): [25913,306, 26600,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1781,233 ±(99.9%) 11,133 MB/sec [Average]
[info]   (min, avg, max) = (1776,846, 1781,233, 1783,915), stdev = 2,891
[info]   CI (99.9%): [1770,100, 1792,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106728,249 ±(99.9%) 1212,641 B/op [Average]
[info]   (min, avg, max) = (106479,556, 106728,249, 107275,790), stdev = 314,919
[info]   CI (99.9%): [105515,607, 107940,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605,559 ±(99.9%) 1410,192 MB/sec [Average]
[info]   (min, avg, max) = (1336,827, 1605,559, 2009,749), stdev = 366,222
[info]   CI (99.9%): [195,368, 3015,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96234,125 ±(99.9%) 85233,445 B/op [Average]
[info]   (min, avg, max) = (79936,287, 96234,125, 121127,014), stdev = 22134,855
[info]   CI (99.9%): [11000,679, 181467,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,783 ±(99.9%) 6,652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,783, 3,873), stdev = 1,728
[info]   CI (99.9%): [≈ 0, 7,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47,186 ±(99.9%) 400,930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47,186, 233,439), stdev = 104,120
[info]   CI (99.9%): [≈ 0, 448,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,71% complete, ETA 01:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115573,690 ops/s
[info] # Warmup Iteration   2: 146960,341 ops/s
[info] # Warmup Iteration   3: 148185,779 ops/s
[info] # Warmup Iteration   4: 148977,456 ops/s
[info] # Warmup Iteration   5: 148319,009 ops/s
[info] Iteration   1: 146718,804 ops/s
[info]                  ·gc.alloc.rate:                   335,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              3599,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5487,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 148200,250 ops/s
[info]                  ·gc.alloc.rate:      337,424 MB/sec
[info]                  ·gc.alloc.rate.norm: 3582,276 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 144673,975 ops/s
[info]                  ·gc.alloc.rate:               338,543 MB/sec
[info]                  ·gc.alloc.rate.norm:          3681,426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5565,313 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 148337,041 ops/s
[info]                  ·gc.alloc.rate:      328,124 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 147799,744 ops/s
[info]                  ·gc.alloc.rate:                   348,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              3708,160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7143,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   147145,963 ±(99.9%) 5855,894 ops/s [Average]
[info]   (min, avg, max) = (144673,975, 147145,963, 148337,041), stdev = 1520,757
[info]   CI (99.9%): [141290,069, 153001,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   337,632 ±(99.9%) 27,907 MB/sec [Average]
[info]   (min, avg, max) = (328,124, 337,632, 348,362), stdev = 7,247
[info]   CI (99.9%): [309,725, 365,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3610,325 ±(99.9%) 347,141 B/op [Average]
[info]   (min, avg, max) = (3480,003, 3610,325, 3708,160), stdev = 90,152
[info]   CI (99.9%): [3263,184, 3957,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,926 ±(99.9%) 1217,405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,926, 671,075), stdev = 316,156
[info]   CI (99.9%): [≈ 0, 1556,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3639,252 ±(99.9%) 13042,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3639,252, 7143,304), stdev = 3387,217
[info]   CI (99.9%): [≈ 0, 16682,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,133 ±(99.9%) 0,764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,133, 0,443), stdev = 0,198
[info]   CI (99.9%): [≈ 0, 0,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,91% complete, ETA 01:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121896,688 ops/s
[info] # Warmup Iteration   2: 151216,207 ops/s
[info] # Warmup Iteration   3: 154951,751 ops/s
[info] # Warmup Iteration   4: 154865,694 ops/s
[info] # Warmup Iteration   5: 154816,102 ops/s
[info] Iteration   1: 154805,230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 154736,670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 150503,524 ops/s
[info]                  ·gc.alloc.rate:      7,020 MB/sec
[info]                  ·gc.alloc.rate.norm: 73,381 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 154592,401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154571,439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   153841,853 ±(99.9%) 7195,877 ops/s [Average]
[info]   (min, avg, max) = (150503,524, 153841,853, 154805,230), stdev = 1868,746
[info]   CI (99.9%): [146645,976, 161037,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,404 ±(99.9%) 12,089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,404, 7,020), stdev = 3,139
[info]   CI (99.9%): [≈ 0, 13,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14,679 ±(99.9%) 126,361 B/op [Average]
[info]   (min, avg, max) = (0,003, 14,679, 73,381), stdev = 32,816
[info]   CI (99.9%): [≈ 0, 141,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,11% complete, ETA 01:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10614,333 ops/s
[info] # Warmup Iteration   2: 24847,472 ops/s
[info] # Warmup Iteration   3: 25939,846 ops/s
[info] # Warmup Iteration   4: 24818,978 ops/s
[info] # Warmup Iteration   5: 24573,101 ops/s
[info] Iteration   1: 25580,726 ops/s
[info]                  ·gc.alloc.rate:                   1785,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              109799,217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123766,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,561 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 25502,954 ops/s
[info]                  ·gc.alloc.rate:                   1794,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              110689,339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124099,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245,352 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 25671,385 ops/s
[info]                  ·gc.alloc.rate:                   1787,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              109574,289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82001,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25750,015 ops/s
[info]                  ·gc.alloc.rate:                   1790,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              109390,490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122506,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,272 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 25819,337 ops/s
[info]                  ·gc.alloc.rate:                   1796,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              109493,737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81453,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,538 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   25664,884 ±(99.9%) 488,778 ops/s [Average]
[info]   (min, avg, max) = (25502,954, 25664,884, 25819,337), stdev = 126,934
[info]   CI (99.9%): [25176,106, 26153,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1790,985 ±(99.9%) 18,257 MB/sec [Average]
[info]   (min, avg, max) = (1785,251, 1790,985, 1796,991), stdev = 4,741
[info]   CI (99.9%): [1772,728, 1809,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109789,414 ±(99.9%) 2021,868 B/op [Average]
[info]   (min, avg, max) = (109390,490, 109789,414, 110689,339), stdev = 525,073
[info]   CI (99.9%): [107767,547, 111811,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1740,792 ±(99.9%) 1417,938 MB/sec [Average]
[info]   (min, avg, max) = (1336,792, 1740,792, 2012,355), stdev = 368,234
[info]   CI (99.9%): [322,853, 3158,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106765,448 ±(99.9%) 88046,406 B/op [Average]
[info]   (min, avg, max) = (81453,046, 106765,448, 124099,374), stdev = 22865,372
[info]   CI (99.9%): [18719,042, 194811,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,820 ±(99.9%) 6,796 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,820, 3,977), stdev = 1,765
[info]   CI (99.9%): [≈ 0, 7,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50,600 ±(99.9%) 419,226 B/op [Average]
[info]   (min, avg, max) = (1,272, 50,600, 245,352), stdev = 108,872
[info]   CI (99.9%): [≈ 0, 469,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,31% complete, ETA 01:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5823,263 ops/s
[info] # Warmup Iteration   2: 10765,325 ops/s
[info] # Warmup Iteration   3: 10656,773 ops/s
[info] # Warmup Iteration   4: 10844,141 ops/s
[info] # Warmup Iteration   5: 10816,067 ops/s
[info] Iteration   1: 10779,224 ops/s
[info]                  ·gc.alloc.rate:               965,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          140979,628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196060,955 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 10762,263 ops/s
[info]                  ·gc.alloc.rate:               947,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          138560,476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98282,692 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 10736,216 ops/s
[info]                  ·gc.alloc.rate:                   947,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              138815,235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197041,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 10767,006 ops/s
[info]                  ·gc.alloc.rate:               934,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          136491,297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98237,064 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 10755,233 ops/s
[info]                  ·gc.alloc.rate:               948,143 MB/sec
[info]                  ·gc.alloc.rate.norm:          138692,942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98395,378 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   10759,988 ±(99.9%) 61,254 ops/s [Average]
[info]   (min, avg, max) = (10736,216, 10759,988, 10779,224), stdev = 15,907
[info]   CI (99.9%): [10698,735, 10821,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   948,695 ±(99.9%) 43,564 MB/sec [Average]
[info]   (min, avg, max) = (934,153, 948,695, 965,950), stdev = 11,314
[info]   CI (99.9%): [905,130, 992,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   138707,916 ±(99.9%) 6121,057 B/op [Average]
[info]   (min, avg, max) = (136491,297, 138707,916, 140979,628), stdev = 1589,619
[info]   CI (99.9%): [132586,859, 144828,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941,081 ±(99.9%) 1416,431 MB/sec [Average]
[info]   (min, avg, max) = (672,339, 941,081, 1344,713), stdev = 367,843
[info]   CI (99.9%): [≈ 0, 2357,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   137603,475 ±(99.9%) 207213,696 B/op [Average]
[info]   (min, avg, max) = (98237,064, 137603,475, 197041,286), stdev = 53812,739
[info]   CI (99.9%): [≈ 0, 344817,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,221 ±(99.9%) 10,509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,221, 6,103), stdev = 2,729
[info]   CI (99.9%): [≈ 0, 11,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,51% complete, ETA 01:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54476,065 ops/s
[info] # Warmup Iteration   2: 123021,262 ops/s
[info] # Warmup Iteration   3: 135344,324 ops/s
[info] # Warmup Iteration   4: 135088,743 ops/s
[info] # Warmup Iteration   5: 135314,704 ops/s
[info] Iteration   1: 136007,932 ops/s
[info]                  ·gc.alloc.rate:                   1943,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              22477,266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23333,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,242 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 137324,953 ops/s
[info]                  ·gc.alloc.rate:                   1974,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              22620,081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23078,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,974 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 132664,867 ops/s
[info]                  ·gc.alloc.rate:                   1899,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              22529,340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23825,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,247 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 135072,728 ops/s
[info]                  ·gc.alloc.rate:               1930,674 MB/sec
[info]                  ·gc.alloc.rate.norm:          22486,873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23401,903 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 138060,971 ops/s
[info]                  ·gc.alloc.rate:               1959,907 MB/sec
[info]                  ·gc.alloc.rate.norm:          22334,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15270,377 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   135826,290 ±(99.9%) 8130,978 ops/s [Average]
[info]   (min, avg, max) = (132664,867, 135826,290, 138060,971), stdev = 2111,589
[info]   CI (99.9%): [127695,313, 143957,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1941,577 ±(99.9%) 110,312 MB/sec [Average]
[info]   (min, avg, max) = (1899,790, 1941,577, 1974,432), stdev = 28,648
[info]   CI (99.9%): [1831,265, 2051,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22489,521 ±(99.9%) 399,062 B/op [Average]
[info]   (min, avg, max) = (22334,047, 22489,521, 22620,081), stdev = 103,635
[info]   CI (99.9%): [22090,460, 22888,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877,977 ±(99.9%) 1158,024 MB/sec [Average]
[info]   (min, avg, max) = (1340,040, 1877,977, 2017,075), stdev = 300,735
[info]   CI (99.9%): [719,953, 3036,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21781,891 ±(99.9%) 14054,664 B/op [Average]
[info]   (min, avg, max) = (15270,377, 21781,891, 23825,705), stdev = 3649,952
[info]   CI (99.9%): [7727,226, 35836,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,770 ±(99.9%) 4,797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,770, 2,874), stdev = 1,246
[info]   CI (99.9%): [≈ 0, 5,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8,893 ±(99.9%) 55,473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,893, 33,242), stdev = 14,406
[info]   CI (99.9%): [≈ 0, 64,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 8,000), stdev = 2,510
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,71% complete, ETA 01:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,979 ops/s
[info] # Warmup Iteration   2: 566633,607 ops/s
[info] # Warmup Iteration   3: 610557,745 ops/s
[info] # Warmup Iteration   4: 619991,048 ops/s
[info] # Warmup Iteration   5: 619413,837 ops/s
[info] Iteration   1: 622474,172 ops/s
[info]                  ·gc.alloc.rate:               665,966 MB/sec
[info]                  ·gc.alloc.rate.norm:          1683,164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1684,211 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 622884,773 ops/s
[info]                  ·gc.alloc.rate:               664,763 MB/sec
[info]                  ·gc.alloc.rate.norm:          1679,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1683,930 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 621427,390 ops/s
[info]                  ·gc.alloc.rate:                   668,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1691,341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1687,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 621915,695 ops/s
[info]                  ·gc.alloc.rate:               661,692 MB/sec
[info]                  ·gc.alloc.rate.norm:          1673,879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1688,283 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 622232,488 ops/s
[info]                  ·gc.alloc.rate:               663,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          1677,688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1687,409 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   622186,904 ±(99.9%) 2128,364 ops/s [Average]
[info]   (min, avg, max) = (621427,390, 622186,904, 622884,773), stdev = 552,729
[info]   CI (99.9%): [620058,540, 624315,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   664,804 ±(99.9%) 9,302 MB/sec [Average]
[info]   (min, avg, max) = (661,692, 664,804, 668,071), stdev = 2,416
[info]   CI (99.9%): [655,501, 674,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1681,017 ±(99.9%) 25,632 B/op [Average]
[info]   (min, avg, max) = (1673,879, 1681,017, 1691,341), stdev = 6,656
[info]   CI (99.9%): [1655,386, 1706,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666,909 ±(99.9%) 1,727 MB/sec [Average]
[info]   (min, avg, max) = (666,380, 666,909, 667,386), stdev = 0,448
[info]   CI (99.9%): [665,182, 668,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1686,340 ±(99.9%) 8,075 B/op [Average]
[info]   (min, avg, max) = (1683,930, 1686,340, 1688,283), stdev = 2,097
[info]   CI (99.9%): [1678,265, 1694,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,036), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,092), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,91% complete, ETA 01:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162447,575 ops/s
[info] # Warmup Iteration   2: 345995,595 ops/s
[info] # Warmup Iteration   3: 357947,635 ops/s
[info] # Warmup Iteration   4: 357755,443 ops/s
[info] # Warmup Iteration   5: 358154,565 ops/s
[info] Iteration   1: 359131,676 ops/s
[info]                  ·gc.alloc.rate:      498,556 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 358727,616 ops/s
[info]                  ·gc.alloc.rate:               516,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          2263,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2922,591 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 357911,899 ops/s
[info]                  ·gc.alloc.rate:                   518,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              2277,664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2929,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 358234,399 ops/s
[info]                  ·gc.alloc.rate:               522,071 MB/sec
[info]                  ·gc.alloc.rate.norm:          2292,795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2930,872 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 358830,354 ops/s
[info]                  ·gc.alloc.rate:      498,131 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   358567,189 ±(99.9%) 1880,314 ops/s [Average]
[info]   (min, avg, max) = (357911,899, 358567,189, 359131,676), stdev = 488,312
[info]   CI (99.9%): [356686,875, 360447,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   510,619 ±(99.9%) 43,921 MB/sec [Average]
[info]   (min, avg, max) = (498,131, 510,619, 522,071), stdev = 11,406
[info]   CI (99.9%): [466,698, 554,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2240,445 ±(99.9%) 202,307 B/op [Average]
[info]   (min, avg, max) = (2184,001, 2240,445, 2292,795), stdev = 52,538
[info]   CI (99.9%): [2038,138, 2442,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   400,026 ±(99.9%) 1406,147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400,026, 667,361), stdev = 365,172
[info]   CI (99.9%): [≈ 0, 1806,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1756,515 ±(99.9%) 6174,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1756,515, 2930,872), stdev = 1603,475
[info]   CI (99.9%): [≈ 0, 7930,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,183), stdev = 0,082
[info]   CI (99.9%): [≈ 0, 0,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,643
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,11% complete, ETA 01:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 546171,708 ops/s
[info] # Warmup Iteration   2: 840169,833 ops/s
[info] # Warmup Iteration   3: 835128,414 ops/s
[info] # Warmup Iteration   4: 838379,167 ops/s
[info] # Warmup Iteration   5: 840133,831 ops/s
[info] Iteration   1: 829723,966 ops/s
[info]                  ·gc.alloc.rate:      554,087 MB/sec
[info]                  ·gc.alloc.rate.norm: 1050,629 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 839048,651 ops/s
[info]                  ·gc.alloc.rate:                   569,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067,596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1256,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,544 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 839856,106 ops/s
[info]                  ·gc.alloc.rate:                   570,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              1069,234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1254,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 833021,950 ops/s
[info]                  ·gc.alloc.rate:               563,432 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1264,859 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 840297,635 ops/s
[info]                  ·gc.alloc.rate:               564,188 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1252,633 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   836389,661 ±(99.9%) 18278,567 ops/s [Average]
[info]   (min, avg, max) = (829723,966, 836389,661, 840297,635), stdev = 4746,886
[info]   CI (99.9%): [818111,095, 854668,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   564,369 ±(99.9%) 25,293 MB/sec [Average]
[info]   (min, avg, max) = (554,087, 564,369, 570,768), stdev = 6,569
[info]   CI (99.9%): [539,076, 589,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1061,593 ±(99.9%) 30,343 B/op [Average]
[info]   (min, avg, max) = (1050,629, 1061,593, 1069,234), stdev = 7,880
[info]   CI (99.9%): [1031,250, 1091,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535,755 ±(99.9%) 1153,255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535,755, 670,359), stdev = 299,497
[info]   CI (99.9%): [≈ 0, 1689,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1005,802 ±(99.9%) 2165,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1005,802, 1264,859), stdev = 562,280
[info]   CI (99.9%): [≈ 0, 3170,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,600 ±(99.9%) 5,075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,957), stdev = 1,318
[info]   CI (99.9%): [≈ 0, 5,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,125 ±(99.9%) 9,515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,125, 5,544), stdev = 2,471
[info]   CI (99.9%): [≈ 0, 10,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,31% complete, ETA 01:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18467,787 ops/s
[info] # Warmup Iteration   2: 77687,131 ops/s
[info] # Warmup Iteration   3: 82588,468 ops/s
[info] # Warmup Iteration   4: 83624,535 ops/s
[info] # Warmup Iteration   5: 83709,849 ops/s
[info] Iteration   1: 84245,945 ops/s
[info]                  ·gc.alloc.rate:                   3474,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              64891,687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62344,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,111 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 83729,808 ops/s
[info]                  ·gc.alloc.rate:                   3470,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              65205,644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62910,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 84152,969 ops/s
[info]                  ·gc.alloc.rate:               3490,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          65249,869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62843,550 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 84130,853 ops/s
[info]                  ·gc.alloc.rate:               3489,239 MB/sec
[info]                  ·gc.alloc.rate.norm:          65246,582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63097,491 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 84310,622 ops/s
[info]                  ·gc.alloc.rate:               3496,597 MB/sec
[info]                  ·gc.alloc.rate.norm:          65248,464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63151,573 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   84114,039 ±(99.9%) 872,737 ops/s [Average]
[info]   (min, avg, max) = (83729,808, 84114,039, 84310,622), stdev = 226,647
[info]   CI (99.9%): [83241,303, 84986,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3484,250 ±(99.9%) 42,918 MB/sec [Average]
[info]   (min, avg, max) = (3470,315, 3484,250, 3496,597), stdev = 11,146
[info]   CI (99.9%): [3441,332, 3527,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65168,449 ±(99.9%) 600,001 B/op [Average]
[info]   (min, avg, max) = (64891,687, 65168,449, 65249,869), stdev = 155,818
[info]   CI (99.9%): [64568,448, 65768,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3361,342 ±(99.9%) 71,782 MB/sec [Average]
[info]   (min, avg, max) = (3338,439, 3361,342, 3384,227), stdev = 18,642
[info]   CI (99.9%): [3289,560, 3433,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62869,607 ±(99.9%) 1231,515 B/op [Average]
[info]   (min, avg, max) = (62344,870, 62869,607, 63151,573), stdev = 319,820
[info]   CI (99.9%): [61638,093, 64101,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,167), stdev = 0,073
[info]   CI (99.9%): [≈ 0, 0,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,700 ±(99.9%) 5,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,700, 3,111), stdev = 1,358
[info]   CI (99.9%): [≈ 0, 5,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,51% complete, ETA 01:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131651,326 ops/s
[info] # Warmup Iteration   2: 247414,000 ops/s
[info] # Warmup Iteration   3: 254434,626 ops/s
[info] # Warmup Iteration   4: 255927,472 ops/s
[info] # Warmup Iteration   5: 249935,879 ops/s
[info] Iteration   1: 256799,669 ops/s
[info]                  ·gc.alloc.rate:               1466,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          8983,348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8238,406 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 256708,513 ops/s
[info]                  ·gc.alloc.rate:                   1479,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              9065,463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8249,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 252332,786 ops/s
[info]                  ·gc.alloc.rate:                   1454,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              9066,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8392,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 257027,931 ops/s
[info]                  ·gc.alloc.rate:                   1466,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              8977,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8222,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,382 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 258155,392 ops/s
[info]                  ·gc.alloc.rate:                   1487,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              9064,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8171,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,381 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   256204,858 ±(99.9%) 8628,030 ops/s [Average]
[info]   (min, avg, max) = (252332,786, 256204,858, 258155,392), stdev = 2240,672
[info]   CI (99.9%): [247576,828, 264832,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1470,733 ±(99.9%) 49,604 MB/sec [Average]
[info]   (min, avg, max) = (1454,126, 1470,733, 1487,450), stdev = 12,882
[info]   CI (99.9%): [1421,129, 1520,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9031,400 ±(99.9%) 180,272 B/op [Average]
[info]   (min, avg, max) = (8977,007, 9031,400, 9066,227), stdev = 46,816
[info]   CI (99.9%): [8851,129, 9211,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,193 ±(99.9%) 8,523 MB/sec [Average]
[info]   (min, avg, max) = (1340,773, 1344,193, 1346,067), stdev = 2,213
[info]   CI (99.9%): [1335,670, 1352,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8254,835 ±(99.9%) 318,070 B/op [Average]
[info]   (min, avg, max) = (8171,060, 8254,835, 8392,497), stdev = 82,602
[info]   CI (99.9%): [7936,765, 8572,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,704 ±(99.9%) 5,748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,704, 3,373), stdev = 1,493
[info]   CI (99.9%): [≈ 0, 6,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,385 ±(99.9%) 35,843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,385, 21,033), stdev = 9,308
[info]   CI (99.9%): [≈ 0, 40,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,71% complete, ETA 01:34:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100952,446 ops/s
[info] # Warmup Iteration   2: 207312,939 ops/s
[info] # Warmup Iteration   3: 219109,259 ops/s
[info] # Warmup Iteration   4: 220395,482 ops/s
[info] # Warmup Iteration   5: 219445,186 ops/s
[info] Iteration   1: 219804,876 ops/s
[info]                  ·gc.alloc.rate:                   1615,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              11560,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9603,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 220209,893 ops/s
[info]                  ·gc.alloc.rate:                   1618,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              11565,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9592,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,762 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 220456,669 ops/s
[info]                  ·gc.alloc.rate:                   1632,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              11649,157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14352,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 220709,940 ops/s
[info]                  ·gc.alloc.rate:               1619,306 MB/sec
[info]                  ·gc.alloc.rate.norm:          11542,711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9537,907 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 220990,403 ops/s
[info]                  ·gc.alloc.rate:               1611,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          11470,887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9525,738 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   220434,356 ±(99.9%) 1756,439 ops/s [Average]
[info]   (min, avg, max) = (219804,876, 220434,356, 220990,403), stdev = 456,142
[info]   CI (99.9%): [218677,917, 222190,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1619,337 ±(99.9%) 30,578 MB/sec [Average]
[info]   (min, avg, max) = (1611,280, 1619,337, 1632,328), stdev = 7,941
[info]   CI (99.9%): [1588,759, 1649,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11557,570 ±(99.9%) 244,942 B/op [Average]
[info]   (min, avg, max) = (11470,887, 11557,570, 11649,157), stdev = 63,611
[info]   CI (99.9%): [11312,628, 11802,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474,324 ±(99.9%) 1155,418 MB/sec [Average]
[info]   (min, avg, max) = (1338,051, 1474,324, 2011,072), stdev = 300,058
[info]   CI (99.9%): [318,906, 2629,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10522,505 ±(99.9%) 8244,452 B/op [Average]
[info]   (min, avg, max) = (9525,738, 10522,505, 14352,068), stdev = 2141,058
[info]   CI (99.9%): [2278,053, 18766,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,750 ±(99.9%) 5,319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,750, 3,186), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 6,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,355 ±(99.9%) 38,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,355, 22,762), stdev = 9,870
[info]   CI (99.9%): [≈ 0, 43,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,92% complete, ETA 01:34:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,847 ops/s
[info] # Warmup Iteration   2: 738122,501 ops/s
[info] # Warmup Iteration   3: 752855,280 ops/s
[info] # Warmup Iteration   4: 728730,621 ops/s
[info] # Warmup Iteration   5: 761809,407 ops/s
[info] Iteration   1: 722031,748 ops/s
[info]                  ·gc.alloc.rate:                   415,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1449,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 645659,405 ops/s
[info]                  ·gc.alloc.rate:      351,319 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 766392,698 ops/s
[info]                  ·gc.alloc.rate:               436,555 MB/sec
[info]                  ·gc.alloc.rate.norm:          896,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1365,982 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 684059,182 ops/s
[info]                  ·gc.alloc.rate:                   390,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              898,254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 741487,012 ops/s
[info]                  ·gc.alloc.rate:      403,454 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   711926,009 ±(99.9%) 183769,151 ops/s [Average]
[info]   (min, avg, max) = (645659,405, 711926,009, 766392,698), stdev = 47724,265
[info]   CI (99.9%): [528156,858, 895695,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   399,419 ±(99.9%) 122,308 MB/sec [Average]
[info]   (min, avg, max) = (351,319, 399,419, 436,555), stdev = 31,763
[info]   CI (99.9%): [277,111, 521,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   882,204 ±(99.9%) 92,888 B/op [Average]
[info]   (min, avg, max) = (856,001, 882,204, 904,622), stdev = 24,123
[info]   CI (99.9%): [789,316, 975,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399,464 ±(99.9%) 1404,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399,464, 666,435), stdev = 364,660
[info]   CI (99.9%): [≈ 0, 1803,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   869,708 ±(99.9%) 3065,556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 869,708, 1532,652), stdev = 796,115
[info]   CI (99.9%): [≈ 0, 3935,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,019 ±(99.9%) 0,106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,059), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,129), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,12% complete, ETA 01:33:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349654,289 ops/s
[info] # Warmup Iteration   2: 658524,203 ops/s
[info] # Warmup Iteration   3: 667134,931 ops/s
[info] # Warmup Iteration   4: 591752,235 ops/s
[info] # Warmup Iteration   5: 670774,159 ops/s
[info] Iteration   1: 659392,065 ops/s
[info]                  ·gc.alloc.rate:               511,721 MB/sec
[info]                  ·gc.alloc.rate.norm:          1220,943 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1221,049 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 668193,975 ops/s
[info]                  ·gc.alloc.rate:                   521,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              1226,818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1571,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,981 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 671487,423 ops/s
[info]                  ·gc.alloc.rate:               519,692 MB/sec
[info]                  ·gc.alloc.rate.norm:          1217,601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1563,710 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 673143,288 ops/s
[info]                  ·gc.alloc.rate:      499,837 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168,199 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 670377,602 ops/s
[info]                  ·gc.alloc.rate:                   510,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198,988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   668518,871 ±(99.9%) 20830,575 ops/s [Average]
[info]   (min, avg, max) = (659392,065, 668518,871, 673143,288), stdev = 5409,634
[info]   CI (99.9%): [647688,296, 689349,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   512,643 ±(99.9%) 32,702 MB/sec [Average]
[info]   (min, avg, max) = (499,837, 512,643, 521,066), stdev = 8,493
[info]   CI (99.9%): [479,941, 545,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1206,510 ±(99.9%) 91,691 B/op [Average]
[info]   (min, avg, max) = (1168,199, 1206,510, 1226,818), stdev = 23,812
[info]   CI (99.9%): [1114,818, 1298,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,933 ±(99.9%) 1113,358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,933, 668,084), stdev = 289,136
[info]   CI (99.9%): [≈ 0, 1616,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1184,794 ±(99.9%) 2615,033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1184,794, 1571,343), stdev = 679,116
[info]   CI (99.9%): [≈ 0, 3799,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,087, 0,416), stdev = 0,184
[info]   CI (99.9%): [≈ 0, 0,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,206 ±(99.9%) 1,670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,206, 0,981), stdev = 0,434
[info]   CI (99.9%): [≈ 0, 1,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,400, 4,000), stdev = 1,517
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,32% complete, ETA 01:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661888,261 ops/s
[info] # Warmup Iteration   2: 1216348,083 ops/s
[info] # Warmup Iteration   3: 1216836,284 ops/s
[info] # Warmup Iteration   4: 1219367,246 ops/s
[info] # Warmup Iteration   5: 1226066,218 ops/s
[info] Iteration   1: 1235646,719 ops/s
[info]                  ·gc.alloc.rate:               697,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          887,614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 854,389 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1223335,814 ops/s
[info]                  ·gc.alloc.rate:               690,422 MB/sec
[info]                  ·gc.alloc.rate.norm:          887,908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 863,825 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1223367,994 ops/s
[info]                  ·gc.alloc.rate:                   682,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              878,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1234828,875 ops/s
[info]                  ·gc.alloc.rate:                   686,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              875,259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     856,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1234684,518 ops/s
[info]                  ·gc.alloc.rate:               687,537 MB/sec
[info]                  ·gc.alloc.rate.norm:          876,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 856,753 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1230372,784 ±(99.9%) 24719,831 ops/s [Average]
[info]   (min, avg, max) = (1223335,814, 1230372,784, 1235646,719), stdev = 6419,662
[info]   CI (99.9%): [1205652,953, 1255092,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   688,982 ±(99.9%) 20,384 MB/sec [Average]
[info]   (min, avg, max) = (682,855, 688,982, 697,126), stdev = 5,294
[info]   CI (99.9%): [668,597, 709,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   881,007 ±(99.9%) 24,090 B/op [Average]
[info]   (min, avg, max) = (875,259, 881,007, 887,908), stdev = 6,256
[info]   CI (99.9%): [856,917, 905,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,829 ±(99.9%) 2,149 MB/sec [Average]
[info]   (min, avg, max) = (671,032, 671,829, 672,367), stdev = 0,558
[info]   CI (99.9%): [669,680, 673,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   859,086 ±(99.9%) 17,018 B/op [Average]
[info]   (min, avg, max) = (854,389, 859,086, 863,825), stdev = 4,419
[info]   CI (99.9%): [842,068, 876,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,027), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,52% complete, ETA 01:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901175,628 ops/s
[info] # Warmup Iteration   2: 1315409,214 ops/s
[info] # Warmup Iteration   3: 1302788,463 ops/s
[info] # Warmup Iteration   4: 1289019,572 ops/s
[info] # Warmup Iteration   5: 1312250,604 ops/s
[info] Iteration   1: 1314289,294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1315516,911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1308115,305 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1318375,499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1314722,026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1314203,807 ±(99.9%) 14468,505 ops/s [Average]
[info]   (min, avg, max) = (1308115,305, 1314203,807, 1318375,499), stdev = 3757,425
[info]   CI (99.9%): [1299735,302, 1328672,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,72% complete, ETA 01:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15358,840 ops/s
[info] # Warmup Iteration   2: 37217,375 ops/s
[info] # Warmup Iteration   3: 37166,308 ops/s
[info] # Warmup Iteration   4: 38230,413 ops/s
[info] # Warmup Iteration   5: 38260,896 ops/s
[info] Iteration   1: 38535,641 ops/s
[info]                  ·gc.alloc.rate:                   2203,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              89975,406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82189,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166,637 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 38751,966 ops/s
[info]                  ·gc.alloc.rate:                   2218,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              90057,107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81508,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,845 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 38458,223 ops/s
[info]                  ·gc.alloc.rate:                   2213,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              90566,847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109363,530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,704 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 38766,810 ops/s
[info]                  ·gc.alloc.rate:               2218,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          90045,720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81492,812 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 38306,966 ops/s
[info]                  ·gc.alloc.rate:               2193,929 MB/sec
[info]                  ·gc.alloc.rate.norm:          90104,587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82610,186 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   38563,921 ±(99.9%) 756,831 ops/s [Average]
[info]   (min, avg, max) = (38306,966, 38563,921, 38766,810), stdev = 196,547
[info]   CI (99.9%): [37807,090, 39320,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2209,754 ±(99.9%) 41,223 MB/sec [Average]
[info]   (min, avg, max) = (2193,929, 2209,754, 2218,798), stdev = 10,706
[info]   CI (99.9%): [2168,530, 2250,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   90149,933 ±(99.9%) 914,904 B/op [Average]
[info]   (min, avg, max) = (89975,406, 90149,933, 90566,847), stdev = 237,598
[info]   CI (99.9%): [89235,029, 91064,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2142,751 ±(99.9%) 1142,311 MB/sec [Average]
[info]   (min, avg, max) = (2007,754, 2142,751, 2673,407), stdev = 296,654
[info]   CI (99.9%): [1000,440, 3285,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87432,951 ±(99.9%) 47242,427 B/op [Average]
[info]   (min, avg, max) = (81492,812, 87432,951, 109363,530), stdev = 12268,708
[info]   CI (99.9%): [40190,525, 134675,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,829 ±(99.9%) 7,002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,829, 4,082), stdev = 1,818
[info]   CI (99.9%): [≈ 0, 7,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33,837 ±(99.9%) 285,875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,837, 166,637), stdev = 74,241
[info]   CI (99.9%): [≈ 0, 319,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,92% complete, ETA 01:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76311,575 ops/s
[info] # Warmup Iteration   2: 139589,219 ops/s
[info] # Warmup Iteration   3: 141321,280 ops/s
[info] # Warmup Iteration   4: 140745,253 ops/s
[info] # Warmup Iteration   5: 141305,107 ops/s
[info] Iteration   1: 142470,815 ops/s
[info]                  ·gc.alloc.rate:               1278,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          14120,296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7424,758 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 141255,664 ops/s
[info]                  ·gc.alloc.rate:               1272,325 MB/sec
[info]                  ·gc.alloc.rate.norm:          14170,965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14984,640 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 141369,517 ops/s
[info]                  ·gc.alloc.rate:                   1281,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              14262,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14979,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 141816,556 ops/s
[info]                  ·gc.alloc.rate:                   1282,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              14229,908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14932,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35,807 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 141391,667 ops/s
[info]                  ·gc.alloc.rate:                   1295,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              14414,621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14948,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   141660,844 ±(99.9%) 1927,052 ops/s [Average]
[info]   (min, avg, max) = (141255,664, 141660,844, 142470,815), stdev = 500,449
[info]   CI (99.9%): [139733,792, 143587,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1282,151 ±(99.9%) 32,543 MB/sec [Average]
[info]   (min, avg, max) = (1272,325, 1282,151, 1295,437), stdev = 8,451
[info]   CI (99.9%): [1249,608, 1314,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   14239,584 ±(99.9%) 431,281 B/op [Average]
[info]   (min, avg, max) = (14120,296, 14239,584, 14414,621), stdev = 112,002
[info]   CI (99.9%): [13808,302, 14670,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,660 ±(99.9%) 1158,736 MB/sec [Average]
[info]   (min, avg, max) = (672,361, 1210,660, 1346,082), stdev = 300,920
[info]   CI (99.9%): [51,924, 2369,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13454,068 ±(99.9%) 12978,810 B/op [Average]
[info]   (min, avg, max) = (7424,758, 13454,068, 14984,640), stdev = 3370,556
[info]   CI (99.9%): [475,258, 26432,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 5,523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,228), stdev = 1,434
[info]   CI (99.9%): [≈ 0, 6,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7,347 ±(99.9%) 61,270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,347, 35,807), stdev = 15,912
[info]   CI (99.9%): [≈ 0, 68,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,12% complete, ETA 01:32:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51026,442 ops/s
[info] # Warmup Iteration   2: 133124,345 ops/s
[info] # Warmup Iteration   3: 143613,847 ops/s
[info] # Warmup Iteration   4: 145592,732 ops/s
[info] # Warmup Iteration   5: 143827,902 ops/s
[info] Iteration   1: 144897,761 ops/s
[info]                  ·gc.alloc.rate:                   1852,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              20113,877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21843,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,404 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 146666,118 ops/s
[info]                  ·gc.alloc.rate:                   1873,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              20092,960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14375,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,914 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 146663,044 ops/s
[info]                  ·gc.alloc.rate:                   1888,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              20252,475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21516,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,894 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 146653,394 ops/s
[info]                  ·gc.alloc.rate:               1887,390 MB/sec
[info]                  ·gc.alloc.rate.norm:          20249,088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21514,842 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 146922,936 ops/s
[info]                  ·gc.alloc.rate:               1878,502 MB/sec
[info]                  ·gc.alloc.rate.norm:          20114,868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14327,694 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   146360,651 ±(99.9%) 3179,208 ops/s [Average]
[info]   (min, avg, max) = (144897,761, 146360,651, 146922,936), stdev = 825,630
[info]   CI (99.9%): [143181,443, 149539,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1875,919 ±(99.9%) 55,809 MB/sec [Average]
[info]   (min, avg, max) = (1852,517, 1875,919, 1888,030), stdev = 14,493
[info]   CI (99.9%): [1820,110, 1931,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20164,654 ±(99.9%) 304,655 B/op [Average]
[info]   (min, avg, max) = (20092,960, 20164,654, 20252,475), stdev = 79,118
[info]   CI (99.9%): [19859,999, 20469,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1740,245 ±(99.9%) 1410,176 MB/sec [Average]
[info]   (min, avg, max) = (1338,045, 1740,245, 2011,861), stdev = 366,218
[info]   CI (99.9%): [330,069, 3150,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18715,560 ±(99.9%) 15349,268 B/op [Average]
[info]   (min, avg, max) = (14327,694, 18715,560, 21843,977), stdev = 3986,156
[info]   CI (99.9%): [3366,292, 34064,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 5,588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,353), stdev = 1,451
[info]   CI (99.9%): [≈ 0, 6,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8,442 ±(99.9%) 60,695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,442, 36,404), stdev = 15,762
[info]   CI (99.9%): [≈ 0, 69,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 8,000), stdev = 2,387
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,32% complete, ETA 01:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96946,753 ops/s
[info] # Warmup Iteration   2: 222858,583 ops/s
[info] # Warmup Iteration   3: 226013,552 ops/s
[info] # Warmup Iteration   4: 225441,230 ops/s
[info] # Warmup Iteration   5: 214209,830 ops/s
[info] Iteration   1: 226595,947 ops/s
[info]                  ·gc.alloc.rate:               1395,655 MB/sec
[info]                  ·gc.alloc.rate.norm:          9690,438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9278,922 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 226866,165 ops/s
[info]                  ·gc.alloc.rate:               1374,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          9534,094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9274,772 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 226110,408 ops/s
[info]                  ·gc.alloc.rate:                   1380,930 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9314,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,777 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 224718,482 ops/s
[info]                  ·gc.alloc.rate:                   1397,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              9786,436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9363,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,228 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 226697,314 ops/s
[info]                  ·gc.alloc.rate:                   1396,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              9694,440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9262,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   226197,663 ±(99.9%) 3362,853 ops/s [Average]
[info]   (min, avg, max) = (224718,482, 226197,663, 226866,165), stdev = 873,322
[info]   CI (99.9%): [222834,810, 229560,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1389,239 ±(99.9%) 40,938 MB/sec [Average]
[info]   (min, avg, max) = (1374,808, 1389,239, 1397,875), stdev = 10,631
[info]   CI (99.9%): [1348,301, 1430,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9662,710 ±(99.9%) 368,355 B/op [Average]
[info]   (min, avg, max) = (9534,094, 9662,710, 9786,436), stdev = 95,661
[info]   CI (99.9%): [9294,355, 10031,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336,959 ±(99.9%) 5,807 MB/sec [Average]
[info]   (min, avg, max) = (1334,735, 1336,959, 1338,793), stdev = 1,508
[info]   CI (99.9%): [1331,151, 1342,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9299,003 ±(99.9%) 157,720 B/op [Average]
[info]   (min, avg, max) = (9262,859, 9299,003, 9363,494), stdev = 40,959
[info]   CI (99.9%): [9141,282, 9456,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,841 ±(99.9%) 5,937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,841, 3,561), stdev = 1,542
[info]   CI (99.9%): [≈ 0, 6,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,859 ±(99.9%) 41,304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,859, 24,777), stdev = 10,726
[info]   CI (99.9%): [≈ 0, 47,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,52% complete, ETA 01:32:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125408,532 ops/s
[info] # Warmup Iteration   2: 280804,552 ops/s
[info] # Warmup Iteration   3: 282337,143 ops/s
[info] # Warmup Iteration   4: 282938,573 ops/s
[info] # Warmup Iteration   5: 256150,374 ops/s
[info] Iteration   1: 281915,438 ops/s
[info]                  ·gc.alloc.rate:               1524,232 MB/sec
[info]                  ·gc.alloc.rate.norm:          8506,203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7504,331 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 283723,433 ops/s
[info]                  ·gc.alloc.rate:               1510,874 MB/sec
[info]                  ·gc.alloc.rate.norm:          8377,938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7463,937 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 284524,847 ops/s
[info]                  ·gc.alloc.rate:                   1520,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              8406,379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7442,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,962 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 285359,867 ops/s
[info]                  ·gc.alloc.rate:               1549,480 MB/sec
[info]                  ·gc.alloc.rate.norm:          8542,553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11106,170 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 284949,105 ops/s
[info]                  ·gc.alloc.rate:               1523,215 MB/sec
[info]                  ·gc.alloc.rate.norm:          8410,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7410,171 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   284094,538 ±(99.9%) 5238,398 ops/s [Average]
[info]   (min, avg, max) = (281915,438, 284094,538, 285359,867), stdev = 1360,395
[info]   CI (99.9%): [278856,140, 289332,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1525,604 ±(99.9%) 55,254 MB/sec [Average]
[info]   (min, avg, max) = (1510,874, 1525,604, 1549,480), stdev = 14,349
[info]   CI (99.9%): [1470,350, 1580,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8448,617 ±(99.9%) 275,060 B/op [Average]
[info]   (min, avg, max) = (8377,938, 8448,617, 8542,553), stdev = 71,432
[info]   CI (99.9%): [8173,557, 8723,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478,666 ±(99.9%) 1153,392 MB/sec [Average]
[info]   (min, avg, max) = (1342,125, 1478,666, 2014,478), stdev = 299,532
[info]   CI (99.9%): [325,275, 2632,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8185,497 ±(99.9%) 6288,345 B/op [Average]
[info]   (min, avg, max) = (7410,171, 8185,497, 11106,170), stdev = 1633,063
[info]   CI (99.9%): [1897,153, 14473,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,248), stdev = 1,453
[info]   CI (99.9%): [≈ 0, 6,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,592 ±(99.9%) 30,932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,592, 17,962), stdev = 8,033
[info]   CI (99.9%): [≈ 0, 34,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,400, 5,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,72% complete, ETA 01:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10366,398 ops/s
[info] # Warmup Iteration   2: 68896,133 ops/s
[info] # Warmup Iteration   3: 74781,699 ops/s
[info] # Warmup Iteration   4: 76471,876 ops/s
[info] # Warmup Iteration   5: 76225,452 ops/s
[info] Iteration   1: 76266,881 ops/s
[info]                  ·gc.alloc.rate:                   3058,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              63095,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55479,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,296 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 72439,425 ops/s
[info]                  ·gc.alloc.rate:                   2924,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              63515,445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58562,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,452 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 76804,385 ops/s
[info]                  ·gc.alloc.rate:                   3124,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              63992,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69221,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,427 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 76884,874 ops/s
[info]                  ·gc.alloc.rate:               3099,830 MB/sec
[info]                  ·gc.alloc.rate.norm:          63429,959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55441,542 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 76457,005 ops/s
[info]                  ·gc.alloc.rate:                   3110,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              64008,195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69825,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,429 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   75770,514 ±(99.9%) 7235,853 ops/s [Average]
[info]   (min, avg, max) = (72439,425, 75770,514, 76884,874), stdev = 1879,128
[info]   CI (99.9%): [68534,661, 83006,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3063,537 ±(99.9%) 313,613 MB/sec [Average]
[info]   (min, avg, max) = (2924,595, 3063,537, 3124,047), stdev = 81,444
[info]   CI (99.9%): [2749,924, 3377,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63608,221 ±(99.9%) 1504,534 B/op [Average]
[info]   (min, avg, max) = (63095,434, 63608,221, 64008,195), stdev = 390,723
[info]   CI (99.9%): [62103,687, 65112,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2973,620 ±(99.9%) 1451,298 MB/sec [Average]
[info]   (min, avg, max) = (2689,351, 2973,620, 3393,409), stdev = 376,897
[info]   CI (99.9%): [1522,323, 4424,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61706,290 ±(99.9%) 27920,454 B/op [Average]
[info]   (min, avg, max) = (55441,542, 61706,290, 69825,532), stdev = 7250,853
[info]   CI (99.9%): [33785,836, 89626,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,208), stdev = 0,087
[info]   CI (99.9%): [≈ 0, 0,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,121 ±(99.9%) 6,873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,121, 4,296), stdev = 1,785
[info]   CI (99.9%): [≈ 0, 7,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 1,000
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,92% complete, ETA 01:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52603,448 ops/s
[info] # Warmup Iteration   2: 165601,511 ops/s
[info] # Warmup Iteration   3: 179632,615 ops/s
[info] # Warmup Iteration   4: 181271,986 ops/s
[info] # Warmup Iteration   5: 181921,205 ops/s
[info] Iteration   1: 181863,935 ops/s
[info]                  ·gc.alloc.rate:                   1994,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              17254,294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11633,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 181838,873 ops/s
[info]                  ·gc.alloc.rate:                   2017,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              17459,299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17429,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 181581,572 ops/s
[info]                  ·gc.alloc.rate:               2016,936 MB/sec
[info]                  ·gc.alloc.rate.norm:          17475,773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17407,752 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 182697,980 ops/s
[info]                  ·gc.alloc.rate:               2030,150 MB/sec
[info]                  ·gc.alloc.rate.norm:          17482,235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17306,511 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 182159,519 ops/s
[info]                  ·gc.alloc.rate:               2037,562 MB/sec
[info]                  ·gc.alloc.rate.norm:          17598,396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17378,425 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   182028,376 ±(99.9%) 1642,914 ops/s [Average]
[info]   (min, avg, max) = (181581,572, 182028,376, 182697,980), stdev = 426,660
[info]   CI (99.9%): [180385,462, 183671,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2019,417 ±(99.9%) 63,130 MB/sec [Average]
[info]   (min, avg, max) = (1994,467, 2019,417, 2037,562), stdev = 16,395
[info]   CI (99.9%): [1956,287, 2082,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17453,999 ±(99.9%) 479,525 B/op [Average]
[info]   (min, avg, max) = (17254,294, 17453,999, 17598,396), stdev = 124,531
[info]   CI (99.9%): [16974,475, 17933,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1878,042 ±(99.9%) 1147,977 MB/sec [Average]
[info]   (min, avg, max) = (1344,751, 1878,042, 2014,535), stdev = 298,126
[info]   CI (99.9%): [730,064, 3026,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16231,160 ±(99.9%) 9898,319 B/op [Average]
[info]   (min, avg, max) = (11633,550, 16231,160, 17429,565), stdev = 2570,562
[info]   CI (99.9%): [6332,841, 26129,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,721 ±(99.9%) 5,043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,721, 3,020), stdev = 1,310
[info]   CI (99.9%): [≈ 0, 5,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,233 ±(99.9%) 43,631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,233, 26,122), stdev = 11,331
[info]   CI (99.9%): [≈ 0, 49,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,140
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,12% complete, ETA 01:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70704,310 ops/s
[info] # Warmup Iteration   2: 193670,805 ops/s
[info] # Warmup Iteration   3: 198265,894 ops/s
[info] # Warmup Iteration   4: 196703,323 ops/s
[info] # Warmup Iteration   5: 199239,509 ops/s
[info] Iteration   1: 199841,881 ops/s
[info]                  ·gc.alloc.rate:               1319,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          10385,878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5277,477 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 198621,070 ops/s
[info]                  ·gc.alloc.rate:               1316,640 MB/sec
[info]                  ·gc.alloc.rate.norm:          10428,848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10625,801 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 179269,285 ops/s
[info]                  ·gc.alloc.rate:                   1202,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              10549,821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11778,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 198547,790 ops/s
[info]                  ·gc.alloc.rate:                   1339,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              10610,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10640,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,868 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 198889,551 ops/s
[info]                  ·gc.alloc.rate:                   1341,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              10608,761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10595,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   195033,915 ±(99.9%) 33992,759 ops/s [Average]
[info]   (min, avg, max) = (179269,285, 195033,915, 199841,881), stdev = 8827,811
[info]   CI (99.9%): [161041,157, 229026,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1303,632 ±(99.9%) 222,599 MB/sec [Average]
[info]   (min, avg, max) = (1202,152, 1303,632, 1341,105), stdev = 57,808
[info]   CI (99.9%): [1081,033, 1526,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10516,667 ±(99.9%) 399,772 B/op [Average]
[info]   (min, avg, max) = (10385,878, 10516,667, 10610,024), stdev = 103,820
[info]   CI (99.9%): [10116,895, 10916,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207,260 ±(99.9%) 1155,718 MB/sec [Average]
[info]   (min, avg, max) = (670,365, 1207,260, 1342,813), stdev = 300,136
[info]   CI (99.9%): [51,542, 2362,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9783,536 ±(99.9%) 9890,213 B/op [Average]
[info]   (min, avg, max) = (5277,477, 9783,536, 11778,730), stdev = 2568,457
[info]   CI (99.9%): [≈ 0, 19673,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,762 ±(99.9%) 6,473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,762, 3,769), stdev = 1,681
[info]   CI (99.9%): [≈ 0, 7,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6,043 ±(99.9%) 51,285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,043, 29,868), stdev = 13,319
[info]   CI (99.9%): [≈ 0, 57,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,33% complete, ETA 01:31:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353696,159 ops/s
[info] # Warmup Iteration   2: 764084,172 ops/s
[info] # Warmup Iteration   3: 780712,858 ops/s
[info] # Warmup Iteration   4: 790837,916 ops/s
[info] # Warmup Iteration   5: 790742,816 ops/s
[info] Iteration   1: 743377,463 ops/s
[info]                  ·gc.alloc.rate:                   797,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1686,902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2826,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 790438,309 ops/s
[info]                  ·gc.alloc.rate:               817,849 MB/sec
[info]                  ·gc.alloc.rate.norm:          1627,843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1329,667 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 789178,676 ops/s
[info]                  ·gc.alloc.rate:                   815,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1625,697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1333,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 791314,079 ops/s
[info]                  ·gc.alloc.rate:               816,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          1623,799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1329,523 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 788713,457 ops/s
[info]                  ·gc.alloc.rate:               811,394 MB/sec
[info]                  ·gc.alloc.rate.norm:          1618,596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1335,240 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   780604,397 ±(99.9%) 80231,261 ops/s [Average]
[info]   (min, avg, max) = (743377,463, 780604,397, 791314,079), stdev = 20835,804
[info]   CI (99.9%): [700373,136, 860835,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   811,695 ±(99.9%) 32,905 MB/sec [Average]
[info]   (min, avg, max) = (797,044, 811,695, 817,849), stdev = 8,545
[info]   CI (99.9%): [778,791, 844,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1636,568 ±(99.9%) 109,149 B/op [Average]
[info]   (min, avg, max) = (1618,596, 1636,568, 1686,902), stdev = 28,346
[info]   CI (99.9%): [1527,419, 1745,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802,033 ±(99.9%) 1148,141 MB/sec [Average]
[info]   (min, avg, max) = (668,041, 802,033, 1335,412), stdev = 298,168
[info]   CI (99.9%): [≈ 0, 1950,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1630,753 ±(99.9%) 2573,589 B/op [Average]
[info]   (min, avg, max) = (1329,523, 1630,753, 2826,331), stdev = 668,353
[info]   CI (99.9%): [≈ 0, 4204,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,53% complete, ETA 01:30:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 519646,433 ops/s
[info] # Warmup Iteration   2: 737013,060 ops/s
[info] # Warmup Iteration   3: 728446,145 ops/s
[info] # Warmup Iteration   4: 768947,243 ops/s
[info] # Warmup Iteration   5: 766538,696 ops/s
[info] Iteration   1: 765156,750 ops/s
[info]                  ·gc.alloc.rate:               614,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263,602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1379,718 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 769059,652 ops/s
[info]                  ·gc.alloc.rate:               613,240 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254,551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1372,776 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 753949,426 ops/s
[info]                  ·gc.alloc.rate:                   599,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1250,765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 763871,133 ops/s
[info]                  ·gc.alloc.rate:               605,704 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247,536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1383,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 773966,019 ops/s
[info]                  ·gc.alloc.rate:                   610,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1241,413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1366,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   765200,596 ±(99.9%) 28562,538 ops/s [Average]
[info]   (min, avg, max) = (753949,426, 765200,596, 773966,019), stdev = 7417,600
[info]   CI (99.9%): [736638,058, 793763,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   608,713 ±(99.9%) 23,941 MB/sec [Average]
[info]   (min, avg, max) = (599,379, 608,713, 614,544), stdev = 6,217
[info]   CI (99.9%): [584,773, 632,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1251,573 ±(99.9%) 31,854 B/op [Average]
[info]   (min, avg, max) = (1241,413, 1251,573, 1263,602), stdev = 8,272
[info]   CI (99.9%): [1219,719, 1283,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,565 ±(99.9%) 2,179 MB/sec [Average]
[info]   (min, avg, max) = (671,016, 671,565, 672,375), stdev = 0,566
[info]   CI (99.9%): [669,386, 673,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1380,887 ±(99.9%) 51,124 B/op [Average]
[info]   (min, avg, max) = (1366,788, 1380,887, 1401,683), stdev = 13,277
[info]   CI (99.9%): [1329,763, 1432,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,087), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,73% complete, ETA 01:30:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461632,302 ops/s
[info] # Warmup Iteration   2: 857128,599 ops/s
[info] # Warmup Iteration   3: 840281,717 ops/s
[info] # Warmup Iteration   4: 855691,115 ops/s
[info] # Warmup Iteration   5: 855544,589 ops/s
[info] Iteration   1: 832631,182 ops/s
[info]                  ·gc.alloc.rate:      7,974 MB/sec
[info]                  ·gc.alloc.rate.norm: 15,068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 855240,719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 856470,653 ops/s
[info]                  ·gc.alloc.rate:      0,022 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 843183,749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 855786,870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   848662,634 ±(99.9%) 40478,343 ops/s [Average]
[info]   (min, avg, max) = (832631,182, 848662,634, 856470,653), stdev = 10512,097
[info]   CI (99.9%): [808184,291, 889140,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,599 ±(99.9%) 13,723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,599, 7,974), stdev = 3,564
[info]   CI (99.9%): [≈ 0, 15,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3,022 ±(99.9%) 25,930 B/op [Average]
[info]   (min, avg, max) = (0,001, 3,022, 15,068), stdev = 6,734
[info]   CI (99.9%): [≈ 0, 28,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,93% complete, ETA 01:30:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163208,284 ops/s
[info] # Warmup Iteration   2: 383553,031 ops/s
[info] # Warmup Iteration   3: 388508,958 ops/s
[info] # Warmup Iteration   4: 388343,247 ops/s
[info] # Warmup Iteration   5: 389874,779 ops/s
[info] Iteration   1: 387952,551 ops/s
[info]                  ·gc.alloc.rate:                   1099,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              4457,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5411,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 388342,803 ops/s
[info]                  ·gc.alloc.rate:               1108,945 MB/sec
[info]                  ·gc.alloc.rate.norm:          4490,633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5404,392 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 387238,571 ops/s
[info]                  ·gc.alloc.rate:               1091,312 MB/sec
[info]                  ·gc.alloc.rate.norm:          4433,668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2714,112 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 387031,874 ops/s
[info]                  ·gc.alloc.rate:               1097,669 MB/sec
[info]                  ·gc.alloc.rate.norm:          4461,725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5436,671 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 380095,493 ops/s
[info]                  ·gc.alloc.rate:                   1067,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              4419,637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2770,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   386132,258 ±(99.9%) 13153,733 ops/s [Average]
[info]   (min, avg, max) = (380095,493, 386132,258, 388342,803), stdev = 3415,983
[info]   CI (99.9%): [372978,525, 399285,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1093,005 ±(99.9%) 59,322 MB/sec [Average]
[info]   (min, avg, max) = (1067,868, 1093,005, 1108,945), stdev = 15,406
[info]   CI (99.9%): [1033,683, 1152,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4452,677 ±(99.9%) 105,471 B/op [Average]
[info]   (min, avg, max) = (4419,637, 4452,677, 4490,633), stdev = 27,390
[info]   CI (99.9%): [4347,206, 4558,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068,808 ±(99.9%) 1406,223 MB/sec [Average]
[info]   (min, avg, max) = (668,057, 1068,808, 1337,524), stdev = 365,192
[info]   CI (99.9%): [≈ 0, 2475,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4347,464 ±(99.9%) 5642,611 B/op [Average]
[info]   (min, avg, max) = (2714,112, 4347,464, 5436,671), stdev = 1465,368
[info]   CI (99.9%): [≈ 0, 9990,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,746 ±(99.9%) 6,375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,746, 3,707), stdev = 1,656
[info]   CI (99.9%): [≈ 0, 7,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,086 ±(99.9%) 26,386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,086, 15,343), stdev = 6,852
[info]   CI (99.9%): [≈ 0, 29,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 6,000), stdev = 1,342
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,13% complete, ETA 01:29:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31607,932 ops/s
[info] # Warmup Iteration   2: 47213,784 ops/s
[info] # Warmup Iteration   3: 47365,760 ops/s
[info] # Warmup Iteration   4: 47495,442 ops/s
[info] # Warmup Iteration   5: 47443,008 ops/s
[info] Iteration   1: 47656,539 ops/s
[info]                  ·gc.alloc.rate:      503,325 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47654,077 ops/s
[info]                  ·gc.alloc.rate:               525,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          17333,182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22153,324 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 47528,428 ops/s
[info]                  ·gc.alloc.rate:               518,732 MB/sec
[info]                  ·gc.alloc.rate.norm:          17171,285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22212,976 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 47554,814 ops/s
[info]                  ·gc.alloc.rate:                   523,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              17306,678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22211,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 47678,588 ops/s
[info]                  ·gc.alloc.rate:      503,549 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   47614,489 ±(99.9%) 261,246 ops/s [Average]
[info]   (min, avg, max) = (47528,428, 47614,489, 47678,588), stdev = 67,845
[info]   CI (99.9%): [47353,243, 47875,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   514,750 ±(99.9%) 40,732 MB/sec [Average]
[info]   (min, avg, max) = (503,325, 514,750, 525,039), stdev = 10,578
[info]   CI (99.9%): [474,019, 555,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17008,634 ±(99.9%) 1400,229 B/op [Average]
[info]   (min, avg, max) = (16616,010, 17008,634, 17333,182), stdev = 363,635
[info]   CI (99.9%): [15608,404, 18408,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   402,688 ±(99.9%) 1415,505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402,688, 671,356), stdev = 367,602
[info]   CI (99.9%): [≈ 0, 1818,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13315,538 ±(99.9%) 46806,083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13315,538, 22212,976), stdev = 12155,391
[info]   CI (99.9%): [≈ 0, 60121,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 1,186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,689), stdev = 0,308
[info]   CI (99.9%): [≈ 0, 1,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,33% complete, ETA 01:29:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2786,812 ops/s
[info] # Warmup Iteration   2: 10837,193 ops/s
[info] # Warmup Iteration   3: 12045,094 ops/s
[info] # Warmup Iteration   4: 12125,154 ops/s
[info] # Warmup Iteration   5: 12095,113 ops/s
[info] Iteration   1: 11999,653 ops/s
[info]                  ·gc.alloc.rate:               1534,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          201203,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175942,020 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 11992,591 ops/s
[info]                  ·gc.alloc.rate:                   1523,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              199833,801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176234,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,732 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 12063,578 ops/s
[info]                  ·gc.alloc.rate:                   1526,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              199120,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175182,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491,506 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 12120,622 ops/s
[info]                  ·gc.alloc.rate:                   1533,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              199059,159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174013,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,622 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11952,072 ops/s
[info]                  ·gc.alloc.rate:                   1553,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              204481,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264183,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,741 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12025,703 ±(99.9%) 255,718 ops/s [Average]
[info]   (min, avg, max) = (11952,072, 12025,703, 12120,622), stdev = 66,409
[info]   CI (99.9%): [11769,986, 12281,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1534,353 ±(99.9%) 45,001 MB/sec [Average]
[info]   (min, avg, max) = (1523,249, 1534,353, 1553,481), stdev = 11,687
[info]   CI (99.9%): [1489,352, 1579,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   200739,552 ±(99.9%) 8712,627 B/op [Average]
[info]   (min, avg, max) = (199059,159, 200739,552, 204481,028), stdev = 2262,642
[info]   CI (99.9%): [192026,925, 209452,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475,252 ±(99.9%) 1144,743 MB/sec [Average]
[info]   (min, avg, max) = (1340,677, 1475,252, 2007,050), stdev = 297,286
[info]   CI (99.9%): [330,509, 2619,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   193111,051 ±(99.9%) 153023,999 B/op [Average]
[info]   (min, avg, max) = (174013,107, 193111,051, 264183,263), stdev = 39739,847
[info]   CI (99.9%): [40087,052, 346135,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,795 ±(99.9%) 6,406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,795, 3,769), stdev = 1,664
[info]   CI (99.9%): [≈ 0, 7,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   103,720 ±(99.9%) 835,403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103,720, 491,506), stdev = 216,951
[info]   CI (99.9%): [≈ 0, 939,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 7,000), stdev = 2,074
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,53% complete, ETA 01:29:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2744,139 ops/s
[info] # Warmup Iteration   2: 11573,466 ops/s
[info] # Warmup Iteration   3: 12153,031 ops/s
[info] # Warmup Iteration   4: 12242,560 ops/s
[info] # Warmup Iteration   5: 12161,138 ops/s
[info] Iteration   1: 12204,769 ops/s
[info]                  ·gc.alloc.rate:                   1414,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              182379,497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172601,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 12215,368 ops/s
[info]                  ·gc.alloc.rate:                   1413,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              182081,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172531,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,682 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 12220,557 ops/s
[info]                  ·gc.alloc.rate:                   1423,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              183294,609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172560,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 426,255 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 11229,397 ops/s
[info]                  ·gc.alloc.rate:                   1309,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              183518,421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187552,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154,621 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 12222,040 ops/s
[info]                  ·gc.alloc.rate:               1439,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          185336,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171989,110 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12018,426 ±(99.9%) 1698,646 ops/s [Average]
[info]   (min, avg, max) = (11229,397, 12018,426, 12222,040), stdev = 441,133
[info]   CI (99.9%): [10319,780, 13717,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1400,468 ±(99.9%) 198,835 MB/sec [Average]
[info]   (min, avg, max) = (1309,988, 1400,468, 1439,793), stdev = 51,637
[info]   CI (99.9%): [1201,633, 1599,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183321,972 ±(99.9%) 4917,414 B/op [Average]
[info]   (min, avg, max) = (182081,304, 183321,972, 185336,031), stdev = 1277,037
[info]   CI (99.9%): [178404,559, 188239,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,811 ±(99.9%) 6,319 MB/sec [Average]
[info]   (min, avg, max) = (1336,107, 1338,811, 1340,436), stdev = 1,641
[info]   CI (99.9%): [1332,492, 1345,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   175446,974 ±(99.9%) 26075,786 B/op [Average]
[info]   (min, avg, max) = (171989,110, 175446,974, 187552,456), stdev = 6771,799
[info]   CI (99.9%): [149371,188, 201522,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,891 ±(99.9%) 5,517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,891, 3,311), stdev = 1,433
[info]   CI (99.9%): [≈ 0, 6,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   117,248 ±(99.9%) 712,315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117,248, 426,255), stdev = 184,986
[info]   CI (99.9%): [≈ 0, 829,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,73% complete, ETA 01:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174479,744 ops/s
[info] # Warmup Iteration   2: 290134,879 ops/s
[info] # Warmup Iteration   3: 302538,025 ops/s
[info] # Warmup Iteration   4: 303134,290 ops/s
[info] # Warmup Iteration   5: 304502,297 ops/s
[info] Iteration   1: 303095,959 ops/s
[info]                  ·gc.alloc.rate:                   2023,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              10501,455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6990,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,809 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 304797,607 ops/s
[info]                  ·gc.alloc.rate:                   2037,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              10518,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10404,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,257 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 304595,723 ops/s
[info]                  ·gc.alloc.rate:               2047,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          10574,729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10397,787 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 305324,835 ops/s
[info]                  ·gc.alloc.rate:               2039,404 MB/sec
[info]                  ·gc.alloc.rate.norm:          10509,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10376,365 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 304947,112 ops/s
[info]                  ·gc.alloc.rate:                   2064,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              10650,905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10403,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   304552,247 ±(99.9%) 3298,812 ops/s [Average]
[info]   (min, avg, max) = (303095,959, 304552,247, 305324,835), stdev = 856,691
[info]   CI (99.9%): [301253,436, 307851,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2042,417 ±(99.9%) 58,132 MB/sec [Average]
[info]   (min, avg, max) = (2023,103, 2042,417, 2064,418), stdev = 15,097
[info]   CI (99.9%): [1984,285, 2100,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10550,837 ±(99.9%) 242,352 B/op [Average]
[info]   (min, avg, max) = (10501,455, 10550,837, 10650,905), stdev = 62,938
[info]   CI (99.9%): [10308,485, 10793,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1881,153 ±(99.9%) 1150,403 MB/sec [Average]
[info]   (min, avg, max) = (1346,728, 1881,153, 2016,462), stdev = 298,756
[info]   CI (99.9%): [730,750, 3031,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9714,556 ±(99.9%) 5863,786 B/op [Average]
[info]   (min, avg, max) = (6990,553, 9714,556, 10404,587), stdev = 1522,807
[info]   CI (99.9%): [3850,770, 15578,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 4,770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 2,853), stdev = 1,239
[info]   CI (99.9%): [≈ 0, 5,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,435 ±(99.9%) 24,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,435, 14,809), stdev = 6,431
[info]   CI (99.9%): [≈ 0, 28,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32,93% complete, ETA 01:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1897,119 ops/s
[info] # Warmup Iteration   2: 8935,937 ops/s
[info] # Warmup Iteration   3: 9738,708 ops/s
[info] # Warmup Iteration   4: 9768,412 ops/s
[info] # Warmup Iteration   5: 9173,770 ops/s
[info] Iteration   1: 9714,970 ops/s
[info]                  ·gc.alloc.rate:                   1731,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              280425,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216717,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 9728,936 ops/s
[info]                  ·gc.alloc.rate:                   1763,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              285228,419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324831,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703,783 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 9752,574 ops/s
[info]                  ·gc.alloc.rate:                   1754,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              282976,237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215412,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,386 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 9780,672 ops/s
[info]                  ·gc.alloc.rate:               1785,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          287195,354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 321550,445 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 9685,353 ops/s
[info]                  ·gc.alloc.rate:               1755,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          285138,773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324811,785 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9732,501 ±(99.9%) 139,720 ops/s [Average]
[info]   (min, avg, max) = (9685,353, 9732,501, 9780,672), stdev = 36,285
[info]   CI (99.9%): [9592,781, 9872,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1758,125 ±(99.9%) 74,645 MB/sec [Average]
[info]   (min, avg, max) = (1731,650, 1758,125, 1785,474), stdev = 19,385
[info]   CI (99.9%): [1683,479, 1832,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284192,759 ±(99.9%) 9940,877 B/op [Average]
[info]   (min, avg, max) = (280425,015, 284192,759, 287195,354), stdev = 2581,614
[info]   CI (99.9%): [274251,882, 294133,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1736,222 ±(99.9%) 1404,042 MB/sec [Average]
[info]   (min, avg, max) = (1335,384, 1736,222, 2008,686), stdev = 364,625
[info]   CI (99.9%): [332,181, 3140,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   280664,718 ±(99.9%) 227141,992 B/op [Average]
[info]   (min, avg, max) = (215412,230, 280664,718, 324831,194), stdev = 58988,054
[info]   CI (99.9%): [53522,726, 507806,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,937 ±(99.9%) 7,369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,937, 4,352), stdev = 1,914
[info]   CI (99.9%): [≈ 0, 8,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   151,508 ±(99.9%) 1191,659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151,508, 703,783), stdev = 309,470
[info]   CI (99.9%): [≈ 0, 1343,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,200, 9,000), stdev = 2,683
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,13% complete, ETA 01:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2002,050 ops/s
[info] # Warmup Iteration   2: 10593,088 ops/s
[info] # Warmup Iteration   3: 10773,024 ops/s
[info] # Warmup Iteration   4: 10880,181 ops/s
[info] # Warmup Iteration   5: 10928,867 ops/s
[info] Iteration   1: 10869,810 ops/s
[info]                  ·gc.alloc.rate:                   1320,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              191065,578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194630,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 10893,189 ops/s
[info]                  ·gc.alloc.rate:               1328,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          191902,866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194202,126 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 10944,264 ops/s
[info]                  ·gc.alloc.rate:               1344,718 MB/sec
[info]                  ·gc.alloc.rate.norm:          193308,511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193297,375 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 10962,020 ops/s
[info]                  ·gc.alloc.rate:                   1347,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              193450,589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193171,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 522,973 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 10964,619 ops/s
[info]                  ·gc.alloc.rate:                   1336,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              191718,248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192562,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,867 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10926,781 ±(99.9%) 165,099 ops/s [Average]
[info]   (min, avg, max) = (10869,810, 10926,781, 10964,619), stdev = 42,876
[info]   CI (99.9%): [10761,681, 11091,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1335,565 ±(99.9%) 43,979 MB/sec [Average]
[info]   (min, avg, max) = (1320,158, 1335,565, 1347,976), stdev = 11,421
[info]   CI (99.9%): [1291,585, 1379,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   192289,158 ±(99.9%) 4020,333 B/op [Average]
[info]   (min, avg, max) = (191065,578, 192289,158, 193450,589), stdev = 1044,068
[info]   CI (99.9%): [188268,826, 196309,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,448 ±(99.9%) 5,548 MB/sec [Average]
[info]   (min, avg, max) = (1342,084, 1344,448, 1346,030), stdev = 1,441
[info]   CI (99.9%): [1338,900, 1349,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   193572,814 ±(99.9%) 3206,334 B/op [Average]
[info]   (min, avg, max) = (192562,420, 193572,814, 194630,829), stdev = 832,675
[info]   CI (99.9%): [190366,480, 196779,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 6,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,644), stdev = 1,605
[info]   CI (99.9%): [≈ 0, 6,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   111,771 ±(99.9%) 886,750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111,771, 522,973), stdev = 230,286
[info]   CI (99.9%): [≈ 0, 998,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 6,000), stdev = 1,414
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,33% complete, ETA 01:28:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11882,440 ops/s
[info] # Warmup Iteration   2: 28153,385 ops/s
[info] # Warmup Iteration   3: 28716,460 ops/s
[info] # Warmup Iteration   4: 28270,374 ops/s
[info] # Warmup Iteration   5: 28703,704 ops/s
[info] Iteration   1: 28796,373 ops/s
[info]                  ·gc.alloc.rate:               1538,514 MB/sec
[info]                  ·gc.alloc.rate.norm:          84053,474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73324,956 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 28700,237 ops/s
[info]                  ·gc.alloc.rate:                   1494,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              81935,804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73567,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 28850,284 ops/s
[info]                  ·gc.alloc.rate:                   1527,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              83270,337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109773,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211,209 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 26553,580 ops/s
[info]                  ·gc.alloc.rate:                   1397,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              82783,751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79320,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28847,706 ops/s
[info]                  ·gc.alloc.rate:               1512,764 MB/sec
[info]                  ·gc.alloc.rate.norm:          82504,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72974,755 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   28349,636 ±(99.9%) 3873,216 ops/s [Average]
[info]   (min, avg, max) = (26553,580, 28349,636, 28850,284), stdev = 1005,862
[info]   CI (99.9%): [24476,420, 32222,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1494,033 ±(99.9%) 217,702 MB/sec [Average]
[info]   (min, avg, max) = (1397,251, 1494,033, 1538,514), stdev = 56,537
[info]   CI (99.9%): [1276,331, 1711,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82909,484 ±(99.9%) 3084,821 B/op [Average]
[info]   (min, avg, max) = (81935,804, 82909,484, 84053,474), stdev = 801,118
[info]   CI (99.9%): [79824,663, 85994,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474,799 ±(99.9%) 1158,683 MB/sec [Average]
[info]   (min, avg, max) = (1338,038, 1474,799, 2013,066), stdev = 300,906
[info]   CI (99.9%): [316,116, 2633,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81792,329 ±(99.9%) 61071,752 B/op [Average]
[info]   (min, avg, max) = (72974,755, 81792,329, 109773,992), stdev = 15860,140
[info]   CI (99.9%): [20720,578, 142864,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,791 ±(99.9%) 6,635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,791, 3,873), stdev = 1,723
[info]   CI (99.9%): [≈ 0, 7,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   43,192 ±(99.9%) 361,698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43,192, 211,209), stdev = 93,932
[info]   CI (99.9%): [≈ 0, 404,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,53% complete, ETA 01:28:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17672,185 ops/s
[info] # Warmup Iteration   2: 33491,976 ops/s
[info] # Warmup Iteration   3: 36292,778 ops/s
[info] # Warmup Iteration   4: 36483,846 ops/s
[info] # Warmup Iteration   5: 36485,664 ops/s
[info] Iteration   1: 36555,994 ops/s
[info]                  ·gc.alloc.rate:                   1531,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              65926,936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57647,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,896 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 36465,131 ops/s
[info]                  ·gc.alloc.rate:                   1513,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              65284,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57843,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,898 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 36627,726 ops/s
[info]                  ·gc.alloc.rate:                   1545,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              66402,930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86350,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164,573 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 36652,508 ops/s
[info]                  ·gc.alloc.rate:                   1520,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              65281,445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57405,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,682 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 36752,886 ops/s
[info]                  ·gc.alloc.rate:               1526,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          65349,609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57217,873 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   36610,849 ±(99.9%) 414,895 ops/s [Average]
[info]   (min, avg, max) = (36465,131, 36610,849, 36752,886), stdev = 107,747
[info]   CI (99.9%): [36195,954, 37025,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1527,719 ±(99.9%) 47,391 MB/sec [Average]
[info]   (min, avg, max) = (1513,222, 1527,719, 1545,926), stdev = 12,307
[info]   CI (99.9%): [1480,329, 1575,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65649,173 ±(99.9%) 1928,136 B/op [Average]
[info]   (min, avg, max) = (65281,445, 65649,173, 66402,930), stdev = 500,731
[info]   CI (99.9%): [63721,037, 67577,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472,937 ±(99.9%) 1156,809 MB/sec [Average]
[info]   (min, avg, max) = (1336,675, 1472,937, 2010,336), stdev = 300,420
[info]   CI (99.9%): [316,128, 2629,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63293,082 ±(99.9%) 49642,224 B/op [Average]
[info]   (min, avg, max) = (57217,873, 63293,082, 86350,961), stdev = 12891,928
[info]   CI (99.9%): [13650,859, 112935,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,787 ±(99.9%) 6,554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,787, 3,831), stdev = 1,702
[info]   CI (99.9%): [≈ 0, 7,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   33,810 ±(99.9%) 281,503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,810, 164,573), stdev = 73,106
[info]   CI (99.9%): [≈ 0, 315,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 6,000), stdev = 1,871
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,73% complete, ETA 01:27:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 363953,537 ops/s
[info] # Warmup Iteration   2: 649567,875 ops/s
[info] # Warmup Iteration   3: 702781,117 ops/s
[info] # Warmup Iteration   4: 708350,011 ops/s
[info] # Warmup Iteration   5: 708619,375 ops/s
[info] Iteration   1: 706840,782 ops/s
[info]                  ·gc.alloc.rate:                   1318,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              2934,702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2991,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 705916,655 ops/s
[info]                  ·gc.alloc.rate:               1299,271 MB/sec
[info]                  ·gc.alloc.rate.norm:          2895,697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1498,473 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 705064,094 ops/s
[info]                  ·gc.alloc.rate:                   1309,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              2921,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3000,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 702158,152 ops/s
[info]                  ·gc.alloc.rate:                   1307,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2928,904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3016,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,185 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 701497,347 ops/s
[info]                  ·gc.alloc.rate:                   1318,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              2956,382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3012,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   704295,406 ±(99.9%) 9050,090 ops/s [Average]
[info]   (min, avg, max) = (701497,347, 704295,406, 706840,782), stdev = 2350,280
[info]   CI (99.9%): [695245,316, 713345,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1310,431 ±(99.9%) 31,218 MB/sec [Average]
[info]   (min, avg, max) = (1299,271, 1310,431, 1318,539), stdev = 8,107
[info]   CI (99.9%): [1279,212, 1341,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2927,342 ±(99.9%) 84,829 B/op [Average]
[info]   (min, avg, max) = (2895,697, 2927,342, 2956,382), stdev = 22,030
[info]   CI (99.9%): [2842,512, 3012,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,101 ±(99.9%) 1157,556 MB/sec [Average]
[info]   (min, avg, max) = (672,350, 1210,101, 1346,019), stdev = 300,614
[info]   CI (99.9%): [52,545, 2367,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2703,905 ±(99.9%) 2595,058 B/op [Average]
[info]   (min, avg, max) = (1498,473, 2703,905, 3016,011), stdev = 673,928
[info]   CI (99.9%): [108,847, 5298,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 5,487 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 3,207), stdev = 1,425
[info]   CI (99.9%): [≈ 0, 6,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,474 ±(99.9%) 12,294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,474, 7,185), stdev = 3,193
[info]   CI (99.9%): [≈ 0, 13,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33,94% complete, ETA 01:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491956,520 ops/s
[info] # Warmup Iteration   2: 867148,496 ops/s
[info] # Warmup Iteration   3: 868903,325 ops/s
[info] # Warmup Iteration   4: 869136,618 ops/s
[info] # Warmup Iteration   5: 868695,302 ops/s
[info] Iteration   1: 868754,897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 868580,826 ops/s
[info]                  ·gc.alloc.rate:      0,120 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,217 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 868731,494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 868405,579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 868142,219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   868523,003 ±(99.9%) 980,539 ops/s [Average]
[info]   (min, avg, max) = (868142,219, 868523,003, 868754,897), stdev = 254,643
[info]   CI (99.9%): [867542,464, 869503,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,024 ±(99.9%) 0,205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,024, 0,120), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,044 ±(99.9%) 0,372 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0,044, 0,217), stdev = 0,097
[info]   CI (99.9%): [≈ 0, 0,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,14% complete, ETA 01:27:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12590,022 ops/s
[info] # Warmup Iteration   2: 33248,280 ops/s
[info] # Warmup Iteration   3: 33275,505 ops/s
[info] # Warmup Iteration   4: 33233,400 ops/s
[info] # Warmup Iteration   5: 33804,184 ops/s
[info] Iteration   1: 33865,684 ops/s
[info]                  ·gc.alloc.rate:               1525,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          70879,206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62285,513 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 33944,509 ops/s
[info]                  ·gc.alloc.rate:               1526,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          70773,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62169,636 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 33825,301 ops/s
[info]                  ·gc.alloc.rate:                   1558,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              72506,881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93535,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186,925 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 33978,510 ops/s
[info]                  ·gc.alloc.rate:                   1538,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              71250,164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61925,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,964 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33938,223 ops/s
[info]                  ·gc.alloc.rate:               1551,287 MB/sec
[info]                  ·gc.alloc.rate.norm:          71913,449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61966,223 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   33910,445 ±(99.9%) 242,146 ops/s [Average]
[info]   (min, avg, max) = (33825,301, 33910,445, 33978,510), stdev = 62,885
[info]   CI (99.9%): [33668,300, 34152,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1540,323 ±(99.9%) 56,636 MB/sec [Average]
[info]   (min, avg, max) = (1525,693, 1540,323, 1558,962), stdev = 14,708
[info]   CI (99.9%): [1483,687, 1596,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71464,570 ±(99.9%) 2826,087 B/op [Average]
[info]   (min, avg, max) = (70773,150, 71464,570, 72506,881), stdev = 733,926
[info]   CI (99.9%): [68638,483, 74290,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473,442 ±(99.9%) 1157,388 MB/sec [Average]
[info]   (min, avg, max) = (1336,709, 1473,442, 2011,106), stdev = 300,570
[info]   CI (99.9%): [316,054, 2630,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68376,661 ±(99.9%) 54160,271 B/op [Average]
[info]   (min, avg, max) = (61925,966, 68376,661, 93535,967), stdev = 14065,250
[info]   CI (99.9%): [14216,390, 122536,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,808 ±(99.9%) 6,912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,808, 4,019), stdev = 1,795
[info]   CI (99.9%): [≈ 0, 7,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37,578 ±(99.9%) 321,485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37,578, 186,925), stdev = 83,489
[info]   CI (99.9%): [≈ 0, 359,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,34% complete, ETA 01:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9785,292 ops/s
[info] # Warmup Iteration   2: 14902,339 ops/s
[info] # Warmup Iteration   3: 15407,018 ops/s
[info] # Warmup Iteration   4: 15552,188 ops/s
[info] # Warmup Iteration   5: 15592,919 ops/s
[info] Iteration   1: 15556,252 ops/s
[info]                  ·gc.alloc.rate:               1010,662 MB/sec
[info]                  ·gc.alloc.rate.norm:          102217,793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67995,706 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 15452,157 ops/s
[info]                  ·gc.alloc.rate:                   1023,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              104170,973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136906,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 15500,672 ops/s
[info]                  ·gc.alloc.rate:               1002,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          101742,925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68308,937 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 15507,267 ops/s
[info]                  ·gc.alloc.rate:                   1024,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              103952,323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136556,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 15573,384 ops/s
[info]                  ·gc.alloc.rate:               1018,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          102865,658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67988,814 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   15517,946 ±(99.9%) 185,485 ops/s [Average]
[info]   (min, avg, max) = (15452,157, 15517,946, 15573,384), stdev = 48,170
[info]   CI (99.9%): [15332,461, 15703,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1015,821 ±(99.9%) 35,691 MB/sec [Average]
[info]   (min, avg, max) = (1002,413, 1015,821, 1024,623), stdev = 9,269
[info]   CI (99.9%): [980,130, 1051,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   102989,935 ±(99.9%) 4078,650 B/op [Average]
[info]   (min, avg, max) = (101742,925, 102989,935, 104170,973), stdev = 1059,212
[info]   CI (99.9%): [98911,285, 107068,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941,798 ±(99.9%) 1418,504 MB/sec [Average]
[info]   (min, avg, max) = (672,297, 941,798, 1345,989), stdev = 368,381
[info]   CI (99.9%): [≈ 0, 2360,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   95551,229 ±(99.9%) 144755,547 B/op [Average]
[info]   (min, avg, max) = (67988,814, 95551,229, 136906,468), stdev = 37592,556
[info]   CI (99.9%): [≈ 0, 240306,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,693 ±(99.9%) 8,927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,693, 4,240), stdev = 2,318
[info]   CI (99.9%): [≈ 0, 10,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,54% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5527,190 ops/s
[info] # Warmup Iteration   2: 31538,592 ops/s
[info] # Warmup Iteration   3: 37353,543 ops/s
[info] # Warmup Iteration   4: 37075,941 ops/s
[info] # Warmup Iteration   5: 37924,993 ops/s
[info] Iteration   1: 36958,940 ops/s
[info]                  ·gc.alloc.rate:               1940,419 MB/sec
[info]                  ·gc.alloc.rate.norm:          82598,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57244,052 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 38119,903 ops/s
[info]                  ·gc.alloc.rate:                   2014,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              83131,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83189,761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160,707 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 38252,826 ops/s
[info]                  ·gc.alloc.rate:                   2031,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              83552,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82683,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,713 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 38183,797 ops/s
[info]                  ·gc.alloc.rate:                   2016,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              83063,357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82752,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 37829,591 ops/s
[info]                  ·gc.alloc.rate:                   2025,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              84224,947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83575,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   37869,011 ±(99.9%) 2054,901 ops/s [Average]
[info]   (min, avg, max) = (36958,940, 37869,011, 38252,826), stdev = 533,651
[info]   CI (99.9%): [35814,111, 39923,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   2005,498 ±(99.9%) 142,696 MB/sec [Average]
[info]   (min, avg, max) = (1940,419, 2005,498, 2031,564), stdev = 37,058
[info]   CI (99.9%): [1862,802, 2148,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83313,998 ±(99.9%) 2353,898 B/op [Average]
[info]   (min, avg, max) = (82598,483, 83313,998, 84224,947), stdev = 611,300
[info]   CI (99.9%): [80960,100, 85667,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877,802 ±(99.9%) 1147,401 MB/sec [Average]
[info]   (min, avg, max) = (1344,788, 1877,802, 2015,620), stdev = 297,976
[info]   CI (99.9%): [730,401, 3025,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77889,147 ±(99.9%) 44461,749 B/op [Average]
[info]   (min, avg, max) = (57244,052, 77889,147, 83575,719), stdev = 11546,575
[info]   CI (99.9%): [33427,398, 122350,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,795 ±(99.9%) 6,670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,795, 3,894), stdev = 1,732
[info]   CI (99.9%): [≈ 0, 7,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32,829 ±(99.9%) 275,278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,829, 160,707), stdev = 71,489
[info]   CI (99.9%): [≈ 0, 308,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 6,000), stdev = 1,414
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,74% complete, ETA 01:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10754,081 ops/s
[info] # Warmup Iteration   2: 35811,945 ops/s
[info] # Warmup Iteration   3: 39201,341 ops/s
[info] # Warmup Iteration   4: 38572,631 ops/s
[info] # Warmup Iteration   5: 39472,997 ops/s
[info] Iteration   1: 37020,230 ops/s
[info]                  ·gc.alloc.rate:               1635,085 MB/sec
[info]                  ·gc.alloc.rate.norm:          69488,617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56934,267 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 39512,476 ops/s
[info]                  ·gc.alloc.rate:                   1754,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              69863,641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80062,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166,659 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 39806,059 ops/s
[info]                  ·gc.alloc.rate:                   1765,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              69782,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52833,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 39642,577 ops/s
[info]                  ·gc.alloc.rate:                   1771,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              70292,721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79469,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 39672,983 ops/s
[info]                  ·gc.alloc.rate:                   1772,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              70309,984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79407,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,303 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   39130,865 ±(99.9%) 4561,036 ops/s [Average]
[info]   (min, avg, max) = (37020,230, 39130,865, 39806,059), stdev = 1184,487
[info]   CI (99.9%): [34569,828, 43691,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1739,920 ±(99.9%) 227,341 MB/sec [Average]
[info]   (min, avg, max) = (1635,085, 1739,920, 1772,961), stdev = 59,040
[info]   CI (99.9%): [1512,579, 1967,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69947,438 ±(99.9%) 1355,259 B/op [Average]
[info]   (min, avg, max) = (69488,617, 69947,438, 70309,984), stdev = 351,956
[info]   CI (99.9%): [68592,180, 71302,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738,429 ±(99.9%) 1406,798 MB/sec [Average]
[info]   (min, avg, max) = (1336,796, 1738,429, 2010,813), stdev = 365,341
[info]   CI (99.9%): [331,631, 3145,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   69741,446 ±(99.9%) 52533,993 B/op [Average]
[info]   (min, avg, max) = (52833,081, 69741,446, 80062,704), stdev = 13642,911
[info]   CI (99.9%): [17207,453, 122275,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,866 ±(99.9%) 7,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,866, 4,186), stdev = 1,856
[info]   CI (99.9%): [≈ 0, 8,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34,487 ±(99.9%) 284,549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34,487, 166,659), stdev = 73,897
[info]   CI (99.9%): [≈ 0, 319,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 8,000), stdev = 2,408
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,94% complete, ETA 01:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274486,552 ops/s
[info] # Warmup Iteration   2: 492595,479 ops/s
[info] # Warmup Iteration   3: 521556,639 ops/s
[info] # Warmup Iteration   4: 516552,485 ops/s
[info] # Warmup Iteration   5: 522380,892 ops/s
[info] Iteration   1: 521866,846 ops/s
[info]                  ·gc.alloc.rate:                   1401,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4224,513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4054,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 521207,685 ops/s
[info]                  ·gc.alloc.rate:                   1393,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              4206,777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4062,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 519493,595 ops/s
[info]                  ·gc.alloc.rate:                   1390,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              4210,993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4076,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 517899,944 ops/s
[info]                  ·gc.alloc.rate:                   1388,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4084,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 517900,312 ops/s
[info]                  ·gc.alloc.rate:               1398,924 MB/sec
[info]                  ·gc.alloc.rate.norm:          4249,829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4079,046 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   519673,676 ±(99.9%) 7070,559 ops/s [Average]
[info]   (min, avg, max) = (517899,944, 519673,676, 521866,846), stdev = 1836,202
[info]   CI (99.9%): [512603,117, 526744,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1394,620 ±(99.9%) 20,756 MB/sec [Average]
[info]   (min, avg, max) = (1388,760, 1394,620, 1401,329), stdev = 5,390
[info]   CI (99.9%): [1373,865, 1415,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222,169 ±(99.9%) 65,127 B/op [Average]
[info]   (min, avg, max) = (4206,777, 4222,169, 4249,829), stdev = 16,913
[info]   CI (99.9%): [4157,042, 4287,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344,844 ±(99.9%) 5,022 MB/sec [Average]
[info]   (min, avg, max) = (1342,707, 1344,844, 1346,029), stdev = 1,304
[info]   CI (99.9%): [1339,822, 1349,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4071,484 ±(99.9%) 47,982 B/op [Average]
[info]   (min, avg, max) = (4054,974, 4071,484, 4084,843), stdev = 12,461
[info]   CI (99.9%): [4023,501, 4119,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,675 ±(99.9%) 4,421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 2,665), stdev = 1,148
[info]   CI (99.9%): [≈ 0, 5,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,044 ±(99.9%) 13,390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,044, 8,072), stdev = 3,477
[info]   CI (99.9%): [≈ 0, 15,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,14% complete, ETA 01:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3087,790 ops/s
[info] # Warmup Iteration   2: 18672,440 ops/s
[info] # Warmup Iteration   3: 20396,320 ops/s
[info] # Warmup Iteration   4: 21028,740 ops/s
[info] # Warmup Iteration   5: 20947,932 ops/s
[info] Iteration   1: 21014,867 ops/s
[info]                  ·gc.alloc.rate:                   2131,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              159529,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150502,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311,779 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 21194,650 ops/s
[info]                  ·gc.alloc.rate:                   2147,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              159400,500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148729,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,276 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 21284,584 ops/s
[info]                  ·gc.alloc.rate:               2158,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          159551,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147903,886 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 21189,573 ops/s
[info]                  ·gc.alloc.rate:               2136,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          158594,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148616,292 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 21211,064 ops/s
[info]                  ·gc.alloc.rate:               2152,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          159656,553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148716,308 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   21178,948 ±(99.9%) 382,516 ops/s [Average]
[info]   (min, avg, max) = (21014,867, 21178,948, 21284,584), stdev = 99,338
[info]   CI (99.9%): [20796,431, 21561,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2145,161 ±(99.9%) 44,048 MB/sec [Average]
[info]   (min, avg, max) = (2131,021, 2145,161, 2158,664), stdev = 11,439
[info]   CI (99.9%): [2101,112, 2189,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159346,522 ±(99.9%) 1655,947 B/op [Average]
[info]   (min, avg, max) = (158594,685, 159346,522, 159656,553), stdev = 430,044
[info]   CI (99.9%): [157690,575, 161002,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004,394 ±(99.9%) 14,353 MB/sec [Average]
[info]   (min, avg, max) = (2001,074, 2004,394, 2010,436), stdev = 3,727
[info]   CI (99.9%): [1990,041, 2018,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   148893,639 ±(99.9%) 3704,418 B/op [Average]
[info]   (min, avg, max) = (147903,886, 148893,639, 150502,083), stdev = 962,026
[info]   CI (99.9%): [145189,220, 152598,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,904 ±(99.9%) 7,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,904, 4,165), stdev = 1,829
[info]   CI (99.9%): [≈ 0, 7,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67,611 ±(99.9%) 527,413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67,611, 311,779), stdev = 136,968
[info]   CI (99.9%): [≈ 0, 595,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 8,000), stdev = 2,074
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,34% complete, ETA 01:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9592,779 ops/s
[info] # Warmup Iteration   2: 35154,578 ops/s
[info] # Warmup Iteration   3: 36537,663 ops/s
[info] # Warmup Iteration   4: 35851,856 ops/s
[info] # Warmup Iteration   5: 36491,424 ops/s
[info] Iteration   1: 36617,906 ops/s
[info]                  ·gc.alloc.rate:                   1677,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              72063,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57802,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 36571,399 ops/s
[info]                  ·gc.alloc.rate:                   1689,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              72659,993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86855,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159,451 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 36698,890 ops/s
[info]                  ·gc.alloc.rate:                   1681,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              72069,915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57536,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36206,371 ops/s
[info]                  ·gc.alloc.rate:               1672,667 MB/sec
[info]                  ·gc.alloc.rate.norm:          72677,756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58257,439 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 36170,716 ops/s
[info]                  ·gc.alloc.rate:                   1682,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              73156,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87405,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,906 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   36453,057 ±(99.9%) 947,494 ops/s [Average]
[info]   (min, avg, max) = (36170,716, 36453,057, 36698,890), stdev = 246,061
[info]   CI (99.9%): [35505,563, 37400,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1680,505 ±(99.9%) 23,526 MB/sec [Average]
[info]   (min, avg, max) = (1672,667, 1680,505, 1689,143), stdev = 6,110
[info]   CI (99.9%): [1656,979, 1704,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   72525,659 ±(99.9%) 1786,077 B/op [Average]
[info]   (min, avg, max) = (72063,796, 72525,659, 73156,837), stdev = 463,839
[info]   CI (99.9%): [70739,582, 74311,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1611,460 ±(99.9%) 1416,593 MB/sec [Average]
[info]   (min, avg, max) = (1340,785, 1611,460, 2019,156), stdev = 367,885
[info]   CI (99.9%): [194,868, 3028,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   69571,617 ±(99.9%) 61734,972 B/op [Average]
[info]   (min, avg, max) = (57536,837, 69571,617, 87405,488), stdev = 16032,376
[info]   CI (99.9%): [7836,645, 131306,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 6,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,707), stdev = 1,644
[info]   CI (99.9%): [≈ 0, 7,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   32,965 ±(99.9%) 272,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,965, 159,451), stdev = 70,715
[info]   CI (99.9%): [≈ 0, 305,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,200, 10,000), stdev = 3,347
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,54% complete, ETA 01:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28795,167 ops/s
[info] # Warmup Iteration   2: 61194,246 ops/s
[info] # Warmup Iteration   3: 61622,189 ops/s
[info] # Warmup Iteration   4: 61898,901 ops/s
[info] # Warmup Iteration   5: 62101,511 ops/s
[info] Iteration   1: 62374,285 ops/s
[info]                  ·gc.alloc.rate:                   1896,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              47826,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33885,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 62436,139 ops/s
[info]                  ·gc.alloc.rate:                   1925,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              48512,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50711,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 62557,639 ops/s
[info]                  ·gc.alloc.rate:                   1928,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              48499,710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50478,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 62459,297 ops/s
[info]                  ·gc.alloc.rate:               1939,625 MB/sec
[info]                  ·gc.alloc.rate.norm:          48856,473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50555,624 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 62606,991 ops/s
[info]                  ·gc.alloc.rate:               1918,148 MB/sec
[info]                  ·gc.alloc.rate.norm:          48200,936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33657,582 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   62486,870 ±(99.9%) 362,485 ops/s [Average]
[info]   (min, avg, max) = (62374,285, 62486,870, 62606,991), stdev = 94,136
[info]   CI (99.9%): [62124,385, 62849,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1921,529 ±(99.9%) 62,369 MB/sec [Average]
[info]   (min, avg, max) = (1896,079, 1921,529, 1939,625), stdev = 16,197
[info]   CI (99.9%): [1859,159, 1983,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48379,061 ±(99.9%) 1488,564 B/op [Average]
[info]   (min, avg, max) = (47826,032, 48379,061, 48856,473), stdev = 386,575
[info]   CI (99.9%): [46890,497, 49867,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741,918 ±(99.9%) 1407,935 MB/sec [Average]
[info]   (min, avg, max) = (1339,398, 1741,918, 2012,550), stdev = 365,636
[info]   CI (99.9%): [333,983, 3149,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43857,496 ±(99.9%) 35456,880 B/op [Average]
[info]   (min, avg, max) = (33657,582, 43857,496, 50711,007), stdev = 9208,039
[info]   CI (99.9%): [8400,617, 79314,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 5,012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,019), stdev = 1,302
[info]   CI (99.9%): [≈ 0, 5,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19,325 ±(99.9%) 126,419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,325, 76,162), stdev = 32,831
[info]   CI (99.9%): [≈ 0, 145,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,74% complete, ETA 01:25:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57575,754 ops/s
[info] # Warmup Iteration   2: 166006,870 ops/s
[info] # Warmup Iteration   3: 170492,959 ops/s
[info] # Warmup Iteration   4: 170573,361 ops/s
[info] # Warmup Iteration   5: 169624,508 ops/s
[info] Iteration   1: 170898,508 ops/s
[info]                  ·gc.alloc.rate:                   2068,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              19045,285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18507,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,698 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 170533,302 ops/s
[info]                  ·gc.alloc.rate:                   2077,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              19169,596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18504,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 170388,892 ops/s
[info]                  ·gc.alloc.rate:               2052,922 MB/sec
[info]                  ·gc.alloc.rate.norm:          18955,600 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18495,053 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 170953,797 ops/s
[info]                  ·gc.alloc.rate:               2082,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          19161,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18459,118 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 170362,203 ops/s
[info]                  ·gc.alloc.rate:               2077,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          19189,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18554,674 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   170627,340 ±(99.9%) 1082,477 ops/s [Average]
[info]   (min, avg, max) = (170362,203, 170627,340, 170953,797), stdev = 281,116
[info]   CI (99.9%): [169544,863, 171709,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2071,919 ±(99.9%) 44,936 MB/sec [Average]
[info]   (min, avg, max) = (2052,922, 2071,919, 2082,067), stdev = 11,670
[info]   CI (99.9%): [2026,982, 2116,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19104,142 ±(99.9%) 386,420 B/op [Average]
[info]   (min, avg, max) = (18955,600, 19104,142, 19189,165), stdev = 100,352
[info]   CI (99.9%): [18717,722, 19490,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2006,838 ±(99.9%) 11,347 MB/sec [Average]
[info]   (min, avg, max) = (2003,044, 2006,838, 2010,425), stdev = 2,947
[info]   CI (99.9%): [1995,491, 2018,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18504,110 ±(99.9%) 131,652 B/op [Average]
[info]   (min, avg, max) = (18459,118, 18504,110, 18554,674), stdev = 34,190
[info]   CI (99.9%): [18372,457, 18635,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 6,482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,758, 3,769), stdev = 1,683
[info]   CI (99.9%): [≈ 0, 7,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,978 ±(99.9%) 59,670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,978, 34,698), stdev = 15,496
[info]   CI (99.9%): [≈ 0, 66,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,94% complete, ETA 01:24:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635234,048 ops/s
[info] # Warmup Iteration   2: 1309160,371 ops/s
[info] # Warmup Iteration   3: 1307472,400 ops/s
[info] # Warmup Iteration   4: 1313114,792 ops/s
[info] # Warmup Iteration   5: 1308394,199 ops/s
[info] Iteration   1: 1311110,398 ops/s
[info]                  ·gc.alloc.rate:               1459,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          1751,175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1613,680 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 1313361,018 ops/s
[info]                  ·gc.alloc.rate:                   1460,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1749,309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1612,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1310097,813 ops/s
[info]                  ·gc.alloc.rate:                   1445,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              1735,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1616,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1311694,570 ops/s
[info]                  ·gc.alloc.rate:                   1445,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1733,743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1611,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1307777,478 ops/s
[info]                  ·gc.alloc.rate:               1455,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          1751,243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1614,559 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1310808,256 ±(99.9%) 7957,843 ops/s [Average]
[info]   (min, avg, max) = (1307777,478, 1310808,256, 1313361,018), stdev = 2066,627
[info]   CI (99.9%): [1302850,412, 1318766,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1453,217 ±(99.9%) 28,589 MB/sec [Average]
[info]   (min, avg, max) = (1445,156, 1453,217, 1460,382), stdev = 7,424
[info]   CI (99.9%): [1424,628, 1481,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744,181 ±(99.9%) 33,929 B/op [Average]
[info]   (min, avg, max) = (1733,743, 1744,181, 1751,243), stdev = 8,811
[info]   CI (99.9%): [1710,251, 1778,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344,530 ±(99.9%) 6,948 MB/sec [Average]
[info]   (min, avg, max) = (1342,033, 1344,530, 1346,206), stdev = 1,804
[info]   CI (99.9%): [1337,582, 1351,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1613,733 ±(99.9%) 7,665 B/op [Average]
[info]   (min, avg, max) = (1611,326, 1613,733, 1616,554), stdev = 1,991
[info]   CI (99.9%): [1606,068, 1621,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,207), stdev = 1,427
[info]   CI (99.9%): [≈ 0, 6,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,785 ±(99.9%) 6,600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,785, 3,851), stdev = 1,714
[info]   CI (99.9%): [≈ 0, 7,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,14% complete, ETA 01:24:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1013502,784 ops/s
[info] # Warmup Iteration   2: 1499532,354 ops/s
[info] # Warmup Iteration   3: 1512142,936 ops/s
[info] # Warmup Iteration   4: 1523199,569 ops/s
[info] # Warmup Iteration   5: 1522537,842 ops/s
[info] Iteration   1: 1523465,208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1523520,157 ops/s
[info]                  ·gc.alloc.rate:      20,332 MB/sec
[info]                  ·gc.alloc.rate.norm: 20,996 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1522568,099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1507299,264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1519518,969 ops/s
[info]                  ·gc.alloc.rate:      0,031 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1519274,340 ±(99.9%) 26531,849 ops/s [Average]
[info]   (min, avg, max) = (1507299,264, 1519274,340, 1523520,157), stdev = 6890,237
[info]   CI (99.9%): [1492742,490, 1545806,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4,073 ±(99.9%) 34,999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4,073, 20,332), stdev = 9,089
[info]   CI (99.9%): [≈ 0, 39,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4,206 ±(99.9%) 36,142 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4,206, 20,996), stdev = 9,386
[info]   CI (99.9%): [≈ 0, 40,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,35% complete, ETA 01:24:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24596,336 ops/s
[info] # Warmup Iteration   2: 73749,604 ops/s
[info] # Warmup Iteration   3: 75391,544 ops/s
[info] # Warmup Iteration   4: 75691,115 ops/s
[info] # Warmup Iteration   5: 75481,914 ops/s
[info] Iteration   1: 74971,070 ops/s
[info]                  ·gc.alloc.rate:                   1907,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              40035,537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42209,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 75657,376 ops/s
[info]                  ·gc.alloc.rate:                   1928,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              40112,609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41771,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,991 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 75998,663 ops/s
[info]                  ·gc.alloc.rate:                   1930,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              39972,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41494,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,724 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 76334,165 ops/s
[info]                  ·gc.alloc.rate:               1912,242 MB/sec
[info]                  ·gc.alloc.rate.norm:          39412,445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27537,000 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 76112,186 ops/s
[info]                  ·gc.alloc.rate:                   1947,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              40259,743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41474,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,430 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   75814,692 ±(99.9%) 2045,418 ops/s [Average]
[info]   (min, avg, max) = (74971,070, 75814,692, 76334,165), stdev = 531,189
[info]   CI (99.9%): [73769,274, 77860,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1925,484 ±(99.9%) 61,430 MB/sec [Average]
[info]   (min, avg, max) = (1907,813, 1925,484, 1947,623), stdev = 15,953
[info]   CI (99.9%): [1864,054, 1986,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39958,475 ±(99.9%) 1245,954 B/op [Average]
[info]   (min, avg, max) = (39412,445, 39958,475, 40259,743), stdev = 323,570
[info]   CI (99.9%): [38712,521, 41204,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873,385 ±(99.9%) 1156,675 MB/sec [Average]
[info]   (min, avg, max) = (1336,060, 1873,385, 2011,385), stdev = 300,385
[info]   CI (99.9%): [716,709, 3030,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38897,438 ±(99.9%) 24480,814 B/op [Average]
[info]   (min, avg, max) = (27537,000, 38897,438, 42209,005), stdev = 6357,590
[info]   CI (99.9%): [14416,624, 63378,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,804 ±(99.9%) 5,443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 3,290), stdev = 1,414
[info]   CI (99.9%): [≈ 0, 6,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16,838 ±(99.9%) 114,250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,838, 69,043), stdev = 29,670
[info]   CI (99.9%): [≈ 0, 131,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 8,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,55% complete, ETA 01:24:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14240,895 ops/s
[info] # Warmup Iteration   2: 30582,799 ops/s
[info] # Warmup Iteration   3: 30327,946 ops/s
[info] # Warmup Iteration   4: 30474,271 ops/s
[info] # Warmup Iteration   5: 30499,533 ops/s
[info] Iteration   1: 30483,295 ops/s
[info]                  ·gc.alloc.rate:                   710,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              36686,356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34633,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,224 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 29289,839 ops/s
[info]                  ·gc.alloc.rate:               693,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          37261,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36081,266 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 30470,152 ops/s
[info]                  ·gc.alloc.rate:                   714,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              36880,137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34681,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30499,775 ops/s
[info]                  ·gc.alloc.rate:               712,970 MB/sec
[info]                  ·gc.alloc.rate.norm:          36775,911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34646,626 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 30458,492 ops/s
[info]                  ·gc.alloc.rate:               710,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          36720,174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34694,391 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   30240,311 ±(99.9%) 2046,817 ops/s [Average]
[info]   (min, avg, max) = (29289,839, 30240,311, 30499,775), stdev = 531,552
[info]   CI (99.9%): [28193,494, 32287,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   708,547 ±(99.9%) 32,417 MB/sec [Average]
[info]   (min, avg, max) = (693,711, 708,547, 714,281), stdev = 8,419
[info]   CI (99.9%): [676,130, 740,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36864,731 ±(99.9%) 898,802 B/op [Average]
[info]   (min, avg, max) = (36686,356, 36864,731, 37261,078), stdev = 233,416
[info]   CI (99.9%): [35965,930, 37763,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671,584 ±(99.9%) 1,057 MB/sec [Average]
[info]   (min, avg, max) = (671,095, 671,584, 671,746), stdev = 0,274
[info]   CI (99.9%): [670,528, 672,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34947,595 ±(99.9%) 2442,177 B/op [Average]
[info]   (min, avg, max) = (34633,824, 34947,595, 36081,266), stdev = 634,226
[info]   CI (99.9%): [32505,418, 37389,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,860 ±(99.9%) 5,396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,860, 3,224), stdev = 1,401
[info]   CI (99.9%): [≈ 0, 6,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,75% complete, ETA 01:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4779,486 ops/s
[info] # Warmup Iteration   2: 15698,768 ops/s
[info] # Warmup Iteration   3: 19610,323 ops/s
[info] # Warmup Iteration   4: 19667,005 ops/s
[info] # Warmup Iteration   5: 19390,167 ops/s
[info] Iteration   1: 19625,664 ops/s
[info]                  ·gc.alloc.rate:                   1727,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              138504,383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107635,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,669 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 19228,867 ops/s
[info]                  ·gc.alloc.rate:                   1726,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              141276,726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164867,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328,822 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 19754,903 ops/s
[info]                  ·gc.alloc.rate:                   1745,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              138982,407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106767,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 19747,217 ops/s
[info]                  ·gc.alloc.rate:                   1754,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              139777,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159898,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,659 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 19797,359 ops/s
[info]                  ·gc.alloc.rate:               1746,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          138817,703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106324,325 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   19630,802 ±(99.9%) 899,504 ops/s [Average]
[info]   (min, avg, max) = (19228,867, 19630,802, 19797,359), stdev = 233,598
[info]   CI (99.9%): [18731,298, 20530,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1740,256 ±(99.9%) 47,495 MB/sec [Average]
[info]   (min, avg, max) = (1726,784, 1740,256, 1754,507), stdev = 12,334
[info]   CI (99.9%): [1692,761, 1787,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139471,687 ±(99.9%) 4285,422 B/op [Average]
[info]   (min, avg, max) = (138504,383, 139471,687, 141276,726), stdev = 1112,911
[info]   CI (99.9%): [135186,265, 143757,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608,733 ±(99.9%) 1414,425 MB/sec [Average]
[info]   (min, avg, max) = (1338,028, 1608,733, 2015,125), stdev = 367,322
[info]   CI (99.9%): [194,308, 3023,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129098,642 ±(99.9%) 117208,049 B/op [Average]
[info]   (min, avg, max) = (106324,325, 129098,642, 164867,354), stdev = 30438,558
[info]   CI (99.9%): [11890,593, 246306,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,833 ±(99.9%) 6,860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,833, 4,019), stdev = 1,782
[info]   CI (99.9%): [≈ 0, 7,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68,088 ±(99.9%) 561,382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68,088, 328,822), stdev = 145,789
[info]   CI (99.9%): [≈ 0, 629,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 7,000), stdev = 2,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,95% complete, ETA 01:23:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4634,489 ops/s
[info] # Warmup Iteration   2: 18496,778 ops/s
[info] # Warmup Iteration   3: 19934,924 ops/s
[info] # Warmup Iteration   4: 19705,293 ops/s
[info] # Warmup Iteration   5: 19988,654 ops/s
[info] Iteration   1: 19586,768 ops/s
[info]                  ·gc.alloc.rate:                   1591,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              127831,833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107587,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 19209,919 ops/s
[info]                  ·gc.alloc.rate:                   1574,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              128933,195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164585,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272,853 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 19980,647 ops/s
[info]                  ·gc.alloc.rate:                   1590,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              125195,336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105403,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 19782,424 ops/s
[info]                  ·gc.alloc.rate:                   1586,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              126212,552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106203,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,656 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 19821,046 ops/s
[info]                  ·gc.alloc.rate:                   1613,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              128081,673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158833,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,306 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   19676,161 ±(99.9%) 1139,635 ops/s [Average]
[info]   (min, avg, max) = (19209,919, 19676,161, 19980,647), stdev = 295,960
[info]   CI (99.9%): [18536,526, 20815,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1591,312 ±(99.9%) 54,777 MB/sec [Average]
[info]   (min, avg, max) = (1574,356, 1591,312, 1613,700), stdev = 14,225
[info]   CI (99.9%): [1536,535, 1646,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127250,918 ±(99.9%) 5827,494 B/op [Average]
[info]   (min, avg, max) = (125195,336, 127250,918, 128933,195), stdev = 1513,382
[info]   CI (99.9%): [121423,424, 133078,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604,868 ±(99.9%) 1408,045 MB/sec [Average]
[info]   (min, avg, max) = (1335,363, 1604,868, 2009,690), stdev = 365,665
[info]   CI (99.9%): [196,823, 3012,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   128522,615 ±(99.9%) 116957,286 B/op [Average]
[info]   (min, avg, max) = (105403,241, 128522,615, 164585,231), stdev = 30373,436
[info]   CI (99.9%): [11565,330, 245479,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,887 ±(99.9%) 5,490 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,887, 3,332), stdev = 1,426
[info]   CI (99.9%): [≈ 0, 6,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   71,978 ±(99.9%) 449,559 B/op [Average]
[info]   (min, avg, max) = (1,656, 71,978, 272,853), stdev = 116,749
[info]   CI (99.9%): [≈ 0, 521,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 9,000), stdev = 2,881
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,15% complete, ETA 01:23:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297631,082 ops/s
[info] # Warmup Iteration   2: 741344,870 ops/s
[info] # Warmup Iteration   3: 751061,659 ops/s
[info] # Warmup Iteration   4: 751473,271 ops/s
[info] # Warmup Iteration   5: 750178,205 ops/s
[info] Iteration   1: 750421,361 ops/s
[info]                  ·gc.alloc.rate:                   2019,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              4233,343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4232,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,592 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 753718,408 ops/s
[info]                  ·gc.alloc.rate:                   2035,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4204,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 748194,141 ops/s
[info]                  ·gc.alloc.rate:                   2014,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4236,275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4233,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 683531,677 ops/s
[info]                  ·gc.alloc.rate:                   1843,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              4243,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3089,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 750106,716 ops/s
[info]                  ·gc.alloc.rate:                   2031,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              4261,365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4228,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   737194,461 ±(99.9%) 115766,224 ops/s [Average]
[info]   (min, avg, max) = (683531,677, 737194,461, 753718,408), stdev = 30064,121
[info]   CI (99.9%): [621428,237, 852960,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1988,895 ±(99.9%) 314,582 MB/sec [Average]
[info]   (min, avg, max) = (1843,550, 1988,895, 2035,235), stdev = 81,696
[info]   CI (99.9%): [1674,313, 2303,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4244,420 ±(99.9%) 42,652 B/op [Average]
[info]   (min, avg, max) = (4233,343, 4244,420, 4261,365), stdev = 11,077
[info]   CI (99.9%): [4201,768, 4287,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1880,991 ±(99.9%) 1159,838 MB/sec [Average]
[info]   (min, avg, max) = (1342,191, 1880,991, 2019,052), stdev = 301,206
[info]   CI (99.9%): [721,153, 3040,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3997,669 ±(99.9%) 1956,107 B/op [Average]
[info]   (min, avg, max) = (3089,181, 3997,669, 4233,186), stdev = 507,995
[info]   CI (99.9%): [2041,562, 5953,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,361 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,654, 3,144), stdev = 1,392
[info]   CI (99.9%): [≈ 0, 6,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,372 ±(99.9%) 11,238 B/op [Average]
[info]   (min, avg, max) = (0,044, 1,372, 6,592), stdev = 2,918
[info]   CI (99.9%): [≈ 0, 12,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,35% complete, ETA 01:23:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2364,222 ops/s
[info] # Warmup Iteration   2: 13434,169 ops/s
[info] # Warmup Iteration   3: 14859,466 ops/s
[info] # Warmup Iteration   4: 14877,355 ops/s
[info] # Warmup Iteration   5: 14821,399 ops/s
[info] Iteration   1: 14813,934 ops/s
[info]                  ·gc.alloc.rate:                   1967,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              208911,545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213437,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391,438 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   2: 14959,842 ops/s
[info]                  ·gc.alloc.rate:                   1993,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              209606,277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211074,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94,167 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 14883,691 ops/s
[info]                  ·gc.alloc.rate:               1997,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          211135,302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211504,146 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 14705,426 ops/s
[info]                  ·gc.alloc.rate:                   1974,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              211253,491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214078,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 14894,615 ops/s
[info]                  ·gc.alloc.rate:                   2000,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              211279,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211678,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,199 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14851,502 ±(99.9%) 372,250 ops/s [Average]
[info]   (min, avg, max) = (14705,426, 14851,502, 14959,842), stdev = 96,672
[info]   CI (99.9%): [14479,252, 15223,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1986,530 ±(99.9%) 56,768 MB/sec [Average]
[info]   (min, avg, max) = (1967,106, 1986,530, 2000,225), stdev = 14,743
[info]   CI (99.9%): [1929,761, 2043,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   210437,312 ±(99.9%) 4254,027 B/op [Average]
[info]   (min, avg, max) = (208911,545, 210437,312, 211279,946), stdev = 1104,757
[info]   CI (99.9%): [206183,286, 214691,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004,580 ±(99.9%) 14,670 MB/sec [Average]
[info]   (min, avg, max) = (2001,006, 2004,580, 2009,723), stdev = 3,810
[info]   CI (99.9%): [1989,910, 2019,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   212354,682 ±(99.9%) 5079,746 B/op [Average]
[info]   (min, avg, max) = (211074,712, 212354,682, 214078,029), stdev = 1319,194
[info]   CI (99.9%): [207274,936, 217434,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,929 ±(99.9%) 6,112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,929, 3,686), stdev = 1,587
[info]   CI (99.9%): [≈ 0, 7,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98,452 ±(99.9%) 649,070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98,452, 391,438), stdev = 168,561
[info]   CI (99.9%): [≈ 0, 747,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 11,000), stdev = 3,391
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,55% complete, ETA 01:22:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4125,518 ops/s
[info] # Warmup Iteration   2: 19200,808 ops/s
[info] # Warmup Iteration   3: 19602,253 ops/s
[info] # Warmup Iteration   4: 19562,952 ops/s
[info] # Warmup Iteration   5: 19659,337 ops/s
[info] Iteration   1: 19534,121 ops/s
[info]                  ·gc.alloc.rate:               1605,411 MB/sec
[info]                  ·gc.alloc.rate.norm:          129297,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108195,783 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 19514,010 ops/s
[info]                  ·gc.alloc.rate:                   1630,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              131426,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162612,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253,495 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 19581,938 ops/s
[info]                  ·gc.alloc.rate:                   1617,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              129930,668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107930,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46,845 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19662,718 ops/s
[info]                  ·gc.alloc.rate:                   1636,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              130908,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160627,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,664 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 19696,467 ops/s
[info]                  ·gc.alloc.rate:                   1612,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              128798,861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106986,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,663 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   19597,851 ±(99.9%) 306,101 ops/s [Average]
[info]   (min, avg, max) = (19514,010, 19597,851, 19696,467), stdev = 79,494
[info]   CI (99.9%): [19291,750, 19903,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1620,449 ±(99.9%) 49,699 MB/sec [Average]
[info]   (min, avg, max) = (1605,411, 1620,449, 1636,909), stdev = 12,907
[info]   CI (99.9%): [1570,751, 1670,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   130072,501 ±(99.9%) 4208,318 B/op [Average]
[info]   (min, avg, max) = (128798,861, 130072,501, 131426,980), stdev = 1092,887
[info]   CI (99.9%): [125864,183, 134280,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1610,354 ±(99.9%) 1414,652 MB/sec [Average]
[info]   (min, avg, max) = (1339,417, 1610,354, 2017,051), stdev = 367,381
[info]   CI (99.9%): [195,702, 3025,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   129270,634 ±(99.9%) 113757,992 B/op [Average]
[info]   (min, avg, max) = (106986,688, 129270,634, 162612,816), stdev = 29542,589
[info]   CI (99.9%): [15512,641, 243028,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 5,233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,144), stdev = 1,359
[info]   CI (99.9%): [≈ 0, 5,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   60,733 ±(99.9%) 421,891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60,733, 253,495), stdev = 109,564
[info]   CI (99.9%): [≈ 0, 482,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 9,000), stdev = 2,950
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,75% complete, ETA 01:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14191,123 ops/s
[info] # Warmup Iteration   2: 47927,981 ops/s
[info] # Warmup Iteration   3: 48943,081 ops/s
[info] # Warmup Iteration   4: 49245,940 ops/s
[info] # Warmup Iteration   5: 47398,513 ops/s
[info] Iteration   1: 49027,103 ops/s
[info]                  ·gc.alloc.rate:                   1913,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              61389,413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64605,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106,242 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 49348,051 ops/s
[info]                  ·gc.alloc.rate:                   1949,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              62167,627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64103,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,277 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 48260,687 ops/s
[info]                  ·gc.alloc.rate:               1883,054 MB/sec
[info]                  ·gc.alloc.rate.norm:          61386,103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43618,259 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 49264,838 ops/s
[info]                  ·gc.alloc.rate:                   1932,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              61720,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64098,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,665 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 48885,860 ops/s
[info]                  ·gc.alloc.rate:                   1933,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              62233,145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64636,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,670 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   48957,308 ±(99.9%) 1659,033 ops/s [Average]
[info]   (min, avg, max) = (48260,687, 48957,308, 49348,051), stdev = 430,846
[info]   CI (99.9%): [47298,275, 50616,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1922,486 ±(99.9%) 98,606 MB/sec [Average]
[info]   (min, avg, max) = (1883,054, 1922,486, 1949,851), stdev = 25,608
[info]   CI (99.9%): [1823,881, 2021,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61779,402 ±(99.9%) 1572,199 B/op [Average]
[info]   (min, avg, max) = (61386,103, 61779,402, 62233,145), stdev = 408,295
[info]   CI (99.9%): [60207,203, 63351,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1875,494 ±(99.9%) 1157,001 MB/sec [Average]
[info]   (min, avg, max) = (1338,015, 1875,494, 2013,327), stdev = 300,469
[info]   CI (99.9%): [718,494, 3032,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60212,469 ±(99.9%) 35734,365 B/op [Average]
[info]   (min, avg, max) = (43618,259, 60212,469, 64636,631), stdev = 9280,101
[info]   CI (99.9%): [24478,103, 95946,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 5,545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,311), stdev = 1,440
[info]   CI (99.9%): [≈ 0, 6,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24,171 ±(99.9%) 177,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24,171, 106,242), stdev = 46,215
[info]   CI (99.9%): [≈ 0, 202,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 8,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,95% complete, ETA 01:22:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26245,791 ops/s
[info] # Warmup Iteration   2: 62539,193 ops/s
[info] # Warmup Iteration   3: 62591,643 ops/s
[info] # Warmup Iteration   4: 60131,895 ops/s
[info] # Warmup Iteration   5: 61259,590 ops/s
[info] Iteration   1: 62662,212 ops/s
[info]                  ·gc.alloc.rate:                   1928,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              48411,879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50510,602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78,949 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 62927,232 ops/s
[info]                  ·gc.alloc.rate:                   1953,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              48832,449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50262,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,180 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 63173,755 ops/s
[info]                  ·gc.alloc.rate:               1960,356 MB/sec
[info]                  ·gc.alloc.rate.norm:          48820,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49933,771 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 63198,646 ops/s
[info]                  ·gc.alloc.rate:                   1961,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              48818,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49932,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,037 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 62749,905 ops/s
[info]                  ·gc.alloc.rate:                   1948,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              48836,541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50306,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,522 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   62942,350 ±(99.9%) 933,287 ops/s [Average]
[info]   (min, avg, max) = (62662,212, 62942,350, 63198,646), stdev = 242,372
[info]   CI (99.9%): [62009,063, 63875,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1950,314 ±(99.9%) 51,425 MB/sec [Average]
[info]   (min, avg, max) = (1928,279, 1950,314, 1961,064), stdev = 13,355
[info]   CI (99.9%): [1898,889, 2001,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48743,868 ±(99.9%) 715,261 B/op [Average]
[info]   (min, avg, max) = (48411,879, 48743,868, 48836,541), stdev = 185,751
[info]   CI (99.9%): [48028,608, 49459,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2008,090 ±(99.9%) 11,362 MB/sec [Average]
[info]   (min, avg, max) = (2005,073, 2008,090, 2011,873), stdev = 2,951
[info]   CI (99.9%): [1996,728, 2019,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   50188,971 ±(99.9%) 969,546 B/op [Average]
[info]   (min, avg, max) = (49932,190, 50188,971, 50510,602), stdev = 251,788
[info]   CI (99.9%): [49219,425, 51158,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 5,213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,145), stdev = 1,354
[info]   CI (99.9%): [≈ 0, 5,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19,538 ±(99.9%) 130,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,538, 78,949), stdev = 33,989
[info]   CI (99.9%): [≈ 0, 150,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 8,000), stdev = 2,168
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,15% complete, ETA 01:21:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 815887,615 ops/s
[info] # Warmup Iteration   2: 1466067,669 ops/s
[info] # Warmup Iteration   3: 1496323,903 ops/s
[info] # Warmup Iteration   4: 1500824,409 ops/s
[info] # Warmup Iteration   5: 1497961,890 ops/s
[info] Iteration   1: 1402537,070 ops/s
[info]                  ·gc.alloc.rate:               1329,380 MB/sec
[info]                  ·gc.alloc.rate.norm:          1491,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1508,891 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 1411977,624 ops/s
[info]                  ·gc.alloc.rate:                   1325,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1476,427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1499,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1493695,057 ops/s
[info]                  ·gc.alloc.rate:                   1400,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              1475,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1418,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1400253,766 ops/s
[info]                  ·gc.alloc.rate:                   1308,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1470,248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1511,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1430075,462 ops/s
[info]                  ·gc.alloc.rate:               1340,178 MB/sec
[info]                  ·gc.alloc.rate.norm:          1474,283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1477,179 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1427707,796 ±(99.9%) 149068,318 ops/s [Average]
[info]   (min, avg, max) = (1400253,766, 1427707,796, 1493695,057), stdev = 38712,569
[info]   CI (99.9%): [1278639,477, 1576776,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1340,773 ±(99.9%) 136,134 MB/sec [Average]
[info]   (min, avg, max) = (1308,558, 1340,773, 1400,654), stdev = 35,354
[info]   CI (99.9%): [1204,639, 1476,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1477,486 ±(99.9%) 30,764 B/op [Average]
[info]   (min, avg, max) = (1470,248, 1477,486, 1491,155), stdev = 7,989
[info]   CI (99.9%): [1446,721, 1508,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,057 ±(99.9%) 5,253 MB/sec [Average]
[info]   (min, avg, max) = (1342,811, 1345,057, 1346,396), stdev = 1,364
[info]   CI (99.9%): [1339,805, 1350,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1483,005 ±(99.9%) 148,883 B/op [Average]
[info]   (min, avg, max) = (1418,165, 1483,005, 1511,267), stdev = 38,665
[info]   CI (99.9%): [1334,121, 1631,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,621 ±(99.9%) 4,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,621, 2,707), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,659 ±(99.9%) 4,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,659, 2,851), stdev = 1,237
[info]   CI (99.9%): [≈ 0, 5,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,35% complete, ETA 01:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1087232,053 ops/s
[info] # Warmup Iteration   2: 1312236,035 ops/s
[info] # Warmup Iteration   3: 1733350,900 ops/s
[info] # Warmup Iteration   4: 1732124,418 ops/s
[info] # Warmup Iteration   5: 1730337,860 ops/s
[info] Iteration   1: 1732173,726 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1730173,721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1732515,716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1729017,115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1729528,158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1730681,687 ±(99.9%) 6072,950 ops/s [Average]
[info]   (min, avg, max) = (1729017,115, 1730681,687, 1732515,716), stdev = 1577,126
[info]   CI (99.9%): [1724608,737, 1736754,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,55% complete, ETA 01:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2129,899 ops/s
[info] # Warmup Iteration   2: 3788,281 ops/s
[info] # Warmup Iteration   3: 3766,159 ops/s
[info] # Warmup Iteration   4: 3935,529 ops/s
[info] # Warmup Iteration   5: 3939,234 ops/s
[info] Iteration   1: 3936,893 ops/s
[info]                  ·gc.alloc.rate:                   544,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              217438,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267336,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,321 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3828,888 ops/s
[info]                  ·gc.alloc.rate:      517,022 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432,123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3797,373 ops/s
[info]                  ·gc.alloc.rate:               520,236 MB/sec
[info]                  ·gc.alloc.rate.norm:          215523,222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 277117,743 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 3810,543 ops/s
[info]                  ·gc.alloc.rate:                   517,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              213586,669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276310,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3816,538 ops/s
[info]                  ·gc.alloc.rate:               528,517 MB/sec
[info]                  ·gc.alloc.rate.norm:          217853,064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 275876,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3838,047 ±(99.9%) 217,210 ops/s [Average]
[info]   (min, avg, max) = (3797,373, 3838,047, 3936,893), stdev = 56,409
[info]   CI (99.9%): [3620,837, 4055,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   525,444 ±(99.9%) 43,950 MB/sec [Average]
[info]   (min, avg, max) = (517,022, 525,444, 544,099), stdev = 11,414
[info]   CI (99.9%): [481,494, 569,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   215366,618 ±(99.9%) 9087,254 B/op [Average]
[info]   (min, avg, max) = (212432,123, 215366,618, 217853,064), stdev = 2359,931
[info]   CI (99.9%): [206279,365, 224453,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   535,286 ±(99.9%) 1152,243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535,286, 669,282), stdev = 299,234
[info]   CI (99.9%): [≈ 0, 1687,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   219328,053 ±(99.9%) 472366,956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 219328,053, 277117,743), stdev = 122672,198
[info]   CI (99.9%): [≈ 0, 691695,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,103 ±(99.9%) 29,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,103, 17,192), stdev = 7,659
[info]   CI (99.9%): [≈ 0, 34,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,76% complete, ETA 01:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21855,358 ops/s
[info] # Warmup Iteration   2: 33457,786 ops/s
[info] # Warmup Iteration   3: 34299,363 ops/s
[info] # Warmup Iteration   4: 33885,572 ops/s
[info] # Warmup Iteration   5: 34085,719 ops/s
[info] Iteration   1: 34176,922 ops/s
[info]                  ·gc.alloc.rate:                   792,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              36489,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30919,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,959 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 34183,418 ops/s
[info]                  ·gc.alloc.rate:               787,139 MB/sec
[info]                  ·gc.alloc.rate.norm:          36226,271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30913,533 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 34245,028 ops/s
[info]                  ·gc.alloc.rate:               789,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          36247,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30888,190 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 34124,214 ops/s
[info]                  ·gc.alloc.rate:                   783,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              36103,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30997,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,960 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34181,576 ops/s
[info]                  ·gc.alloc.rate:               784,272 MB/sec
[info]                  ·gc.alloc.rate.norm:          36095,992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30946,011 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   34182,232 ±(99.9%) 164,943 ops/s [Average]
[info]   (min, avg, max) = (34124,214, 34182,232, 34245,028), stdev = 42,835
[info]   CI (99.9%): [34017,288, 34347,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   787,247 ±(99.9%) 14,778 MB/sec [Average]
[info]   (min, avg, max) = (783,111, 787,247, 792,712), stdev = 3,838
[info]   CI (99.9%): [772,470, 802,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36232,445 ±(99.9%) 614,487 B/op [Average]
[info]   (min, avg, max) = (36095,992, 36232,445, 36489,837), stdev = 159,580
[info]   CI (99.9%): [35617,958, 36846,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672,102 ±(99.9%) 1,395 MB/sec [Average]
[info]   (min, avg, max) = (671,702, 672,102, 672,377), stdev = 0,362
[info]   CI (99.9%): [670,707, 673,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30933,058 ±(99.9%) 160,087 B/op [Average]
[info]   (min, avg, max) = (30888,190, 30933,058, 30997,691), stdev = 41,574
[info]   CI (99.9%): [30772,971, 31093,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,384 ±(99.9%) 2,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,384, 0,960), stdev = 0,525
[info]   CI (99.9%): [≈ 0, 2,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38,96% complete, ETA 01:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56408,156 ops/s
[info] # Warmup Iteration   2: 127565,471 ops/s
[info] # Warmup Iteration   3: 134120,092 ops/s
[info] # Warmup Iteration   4: 137805,323 ops/s
[info] # Warmup Iteration   5: 136937,987 ops/s
[info] Iteration   1: 137582,032 ops/s
[info]                  ·gc.alloc.rate:                   2175,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              24881,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23051,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41,673 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 131662,797 ops/s
[info]                  ·gc.alloc.rate:                   2085,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              24917,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24023,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,995 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 138143,207 ops/s
[info]                  ·gc.alloc.rate:                   2173,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              24756,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22880,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,711 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 138024,878 ops/s
[info]                  ·gc.alloc.rate:               2197,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          25051,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22916,166 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 137914,639 ops/s
[info]                  ·gc.alloc.rate:               2223,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          25361,934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30642,380 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   136665,510 ±(99.9%) 10798,798 ops/s [Average]
[info]   (min, avg, max) = (131662,797, 136665,510, 138143,207), stdev = 2804,414
[info]   CI (99.9%): [125866,713, 147464,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2171,168 ±(99.9%) 200,504 MB/sec [Average]
[info]   (min, avg, max) = (2085,148, 2171,168, 2223,224), stdev = 52,070
[info]   CI (99.9%): [1970,664, 2371,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24993,765 ±(99.9%) 889,259 B/op [Average]
[info]   (min, avg, max) = (24756,946, 24993,765, 25361,934), stdev = 230,938
[info]   CI (99.9%): [24104,506, 25883,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2146,353 ±(99.9%) 1161,905 MB/sec [Average]
[info]   (min, avg, max) = (2009,074, 2146,353, 2686,107), stdev = 301,743
[info]   CI (99.9%): [984,448, 3308,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24702,660 ±(99.9%) 12912,773 B/op [Average]
[info]   (min, avg, max) = (22880,588, 24702,660, 30642,380), stdev = 3353,406
[info]   CI (99.9%): [11789,887, 37615,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 6,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,758, 3,644), stdev = 1,614
[info]   CI (99.9%): [≈ 0, 6,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8,676 ±(99.9%) 71,049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,676, 41,673), stdev = 18,451
[info]   CI (99.9%): [≈ 0, 79,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 6,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,16% complete, ETA 01:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,796 ops/s
[info] # Warmup Iteration   2: 391727,031 ops/s
[info] # Warmup Iteration   3: 381056,050 ops/s
[info] # Warmup Iteration   4: 404863,330 ops/s
[info] # Warmup Iteration   5: 420583,077 ops/s
[info] Iteration   1: 415620,233 ops/s
[info]                  ·gc.alloc.rate:                   851,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              3221,641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2522,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 420144,720 ops/s
[info]                  ·gc.alloc.rate:               856,359 MB/sec
[info]                  ·gc.alloc.rate.norm:          3206,709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2495,231 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 415334,415 ops/s
[info]                  ·gc.alloc.rate:                   869,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3293,692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5053,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 419721,483 ops/s
[info]                  ·gc.alloc.rate:                   856,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              3208,678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2501,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 420209,934 ops/s
[info]                  ·gc.alloc.rate:               857,102 MB/sec
[info]                  ·gc.alloc.rate.norm:          3209,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2498,730 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   418206,157 ±(99.9%) 9627,238 ops/s [Average]
[info]   (min, avg, max) = (415334,415, 418206,157, 420209,934), stdev = 2500,163
[info]   CI (99.9%): [408578,919, 427833,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   858,013 ±(99.9%) 26,354 MB/sec [Average]
[info]   (min, avg, max) = (851,093, 858,013, 869,498), stdev = 6,844
[info]   CI (99.9%): [831,659, 884,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3227,960 ±(99.9%) 143,311 B/op [Average]
[info]   (min, avg, max) = (3206,709, 3227,960, 3293,692), stdev = 37,217
[info]   CI (99.9%): [3084,649, 3371,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800,302 ±(99.9%) 1148,856 MB/sec [Average]
[info]   (min, avg, max) = (666,357, 800,302, 1334,013), stdev = 298,354
[info]   CI (99.9%): [≈ 0, 1949,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3014,264 ±(99.9%) 4389,354 B/op [Average]
[info]   (min, avg, max) = (2495,231, 3014,264, 5053,293), stdev = 1139,901
[info]   CI (99.9%): [≈ 0, 7403,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,014 ±(99.9%) 0,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,033), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,123), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,36% complete, ETA 01:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129037,536 ops/s
[info] # Warmup Iteration   2: 268891,351 ops/s
[info] # Warmup Iteration   3: 286245,593 ops/s
[info] # Warmup Iteration   4: 282430,614 ops/s
[info] # Warmup Iteration   5: 286193,133 ops/s
[info] Iteration   1: 286980,192 ops/s
[info]                  ·gc.alloc.rate:                   640,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3510,591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3653,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 274661,622 ops/s
[info]                  ·gc.alloc.rate:               615,002 MB/sec
[info]                  ·gc.alloc.rate.norm:          3522,864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3817,098 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 286410,785 ops/s
[info]                  ·gc.alloc.rate:               647,812 MB/sec
[info]                  ·gc.alloc.rate.norm:          3558,449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3664,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 286823,936 ops/s
[info]                  ·gc.alloc.rate:               644,249 MB/sec
[info]                  ·gc.alloc.rate.norm:          3533,911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3658,886 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 287512,550 ops/s
[info]                  ·gc.alloc.rate:               640,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          3506,808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3653,804 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   284477,817 ±(99.9%) 21184,651 ops/s [Average]
[info]   (min, avg, max) = (274661,622, 284477,817, 287512,550), stdev = 5501,586
[info]   CI (99.9%): [263293,166, 305662,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   637,644 ±(99.9%) 50,097 MB/sec [Average]
[info]   (min, avg, max) = (615,002, 637,644, 647,812), stdev = 13,010
[info]   CI (99.9%): [587,547, 687,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3526,525 ±(99.9%) 80,075 B/op [Average]
[info]   (min, avg, max) = (3506,808, 3526,525, 3558,449), stdev = 20,795
[info]   CI (99.9%): [3446,450, 3606,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666,896 ±(99.9%) 2,172 MB/sec [Average]
[info]   (min, avg, max) = (666,338, 666,896, 667,697), stdev = 0,564
[info]   CI (99.9%): [664,724, 669,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3689,421 ±(99.9%) 275,356 B/op [Average]
[info]   (min, avg, max) = (3653,231, 3689,421, 3817,098), stdev = 71,509
[info]   CI (99.9%): [3414,065, 3964,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,114), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,56% complete, ETA 01:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409954,595 ops/s
[info] # Warmup Iteration   2: 559242,123 ops/s
[info] # Warmup Iteration   3: 567144,040 ops/s
[info] # Warmup Iteration   4: 566066,716 ops/s
[info] # Warmup Iteration   5: 568678,477 ops/s
[info] Iteration   1: 569342,878 ops/s
[info]                  ·gc.alloc.rate:               743,554 MB/sec
[info]                  ·gc.alloc.rate.norm:          2054,753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1854,329 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 568491,584 ops/s
[info]                  ·gc.alloc.rate:               751,370 MB/sec
[info]                  ·gc.alloc.rate.norm:          2079,433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1858,932 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 569798,922 ops/s
[info]                  ·gc.alloc.rate:               734,706 MB/sec
[info]                  ·gc.alloc.rate.norm:          2028,592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1854,581 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 570331,551 ops/s
[info]                  ·gc.alloc.rate:               735,782 MB/sec
[info]                  ·gc.alloc.rate.norm:          2029,767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1853,861 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 561471,784 ops/s
[info]                  ·gc.alloc.rate:                   750,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              2103,081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3767,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   567887,344 ±(99.9%) 14052,393 ops/s [Average]
[info]   (min, avg, max) = (561471,784, 567887,344, 570331,551), stdev = 3649,362
[info]   CI (99.9%): [553834,951, 581939,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   743,186 ±(99.9%) 30,298 MB/sec [Average]
[info]   (min, avg, max) = (734,706, 743,186, 751,370), stdev = 7,868
[info]   CI (99.9%): [712,888, 773,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2059,125 ±(99.9%) 124,147 B/op [Average]
[info]   (min, avg, max) = (2028,592, 2059,125, 2103,081), stdev = 32,241
[info]   CI (99.9%): [1934,978, 2183,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,161 ±(99.9%) 1158,563 MB/sec [Average]
[info]   (min, avg, max) = (671,026, 806,161, 1344,382), stdev = 300,875
[info]   CI (99.9%): [≈ 0, 1964,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2237,777 ±(99.9%) 3292,168 B/op [Average]
[info]   (min, avg, max) = (1853,861, 2237,777, 3767,181), stdev = 854,965
[info]   CI (99.9%): [≈ 0, 5529,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,117), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,76% complete, ETA 01:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12983,834 ops/s
[info] # Warmup Iteration   2: 71118,438 ops/s
[info] # Warmup Iteration   3: 78684,563 ops/s
[info] # Warmup Iteration   4: 81101,549 ops/s
[info] # Warmup Iteration   5: 82067,407 ops/s
[info] Iteration   1: 79452,964 ops/s
[info]                  ·gc.alloc.rate:                   3352,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              66377,663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66062,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 82222,708 ops/s
[info]                  ·gc.alloc.rate:                   3479,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              66577,827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64015,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 82155,375 ops/s
[info]                  ·gc.alloc.rate:               3479,669 MB/sec
[info]                  ·gc.alloc.rate.norm:          66635,653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64334,866 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 82010,938 ops/s
[info]                  ·gc.alloc.rate:               3473,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          66642,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64690,694 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 81888,488 ops/s
[info]                  ·gc.alloc.rate:               3468,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          66639,826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64990,307 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   81546,095 ±(99.9%) 4533,115 ops/s [Average]
[info]   (min, avg, max) = (79452,964, 81546,095, 82222,708), stdev = 1177,236
[info]   CI (99.9%): [77012,979, 86079,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3450,738 ±(99.9%) 213,012 MB/sec [Average]
[info]   (min, avg, max) = (3352,121, 3450,738, 3479,669), stdev = 55,319
[info]   CI (99.9%): [3237,726, 3663,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66574,597 ±(99.9%) 436,166 B/op [Average]
[info]   (min, avg, max) = (66377,663, 66574,597, 66642,015), stdev = 113,271
[info]   CI (99.9%): [66138,430, 67010,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3359,225 ±(99.9%) 72,959 MB/sec [Average]
[info]   (min, avg, max) = (3336,188, 3359,225, 3382,686), stdev = 18,947
[info]   CI (99.9%): [3286,266, 3432,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64818,699 ±(99.9%) 3026,685 B/op [Average]
[info]   (min, avg, max) = (64015,465, 64818,699, 66062,162), stdev = 786,021
[info]   CI (99.9%): [61792,013, 67845,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,162 ±(99.9%) 0,855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,412), stdev = 0,222
[info]   CI (99.9%): [≈ 0, 1,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,96% complete, ETA 01:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58123,737 ops/s
[info] # Warmup Iteration   2: 145543,303 ops/s
[info] # Warmup Iteration   3: 146320,457 ops/s
[info] # Warmup Iteration   4: 146813,438 ops/s
[info] # Warmup Iteration   5: 146363,881 ops/s
[info] Iteration   1: 146766,091 ops/s
[info]                  ·gc.alloc.rate:                   1281,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              13740,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14371,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 147535,868 ops/s
[info]                  ·gc.alloc.rate:                   1301,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              13879,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14304,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,444 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 147628,779 ops/s
[info]                  ·gc.alloc.rate:               1311,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          13979,331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14302,960 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 146542,643 ops/s
[info]                  ·gc.alloc.rate:                   1290,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              13851,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14415,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,348 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 147087,435 ops/s
[info]                  ·gc.alloc.rate:                   1294,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              13843,363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14326,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,559 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   147112,163 ±(99.9%) 1817,516 ops/s [Average]
[info]   (min, avg, max) = (146542,643, 147112,163, 147628,779), stdev = 472,003
[info]   CI (99.9%): [145294,647, 148929,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1295,898 ±(99.9%) 43,732 MB/sec [Average]
[info]   (min, avg, max) = (1281,782, 1295,898, 1311,687), stdev = 11,357
[info]   CI (99.9%): [1252,166, 1339,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13858,841 ±(99.9%) 329,750 B/op [Average]
[info]   (min, avg, max) = (13740,120, 13858,841, 13979,331), stdev = 85,635
[info]   CI (99.9%): [13529,091, 14188,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341,265 ±(99.9%) 4,879 MB/sec [Average]
[info]   (min, avg, max) = (1339,428, 1341,265, 1342,712), stdev = 1,267
[info]   CI (99.9%): [1336,385, 1346,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14344,298 ±(99.9%) 187,207 B/op [Average]
[info]   (min, avg, max) = (14302,960, 14344,298, 14415,702), stdev = 48,617
[info]   CI (99.9%): [14157,091, 14531,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 6,225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,665), stdev = 1,617
[info]   CI (99.9%): [≈ 0, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8,315 ±(99.9%) 66,841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,315, 39,348), stdev = 17,358
[info]   CI (99.9%): [≈ 0, 75,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,16% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,849 ops/s
[info] # Warmup Iteration   2: 221253,574 ops/s
[info] # Warmup Iteration   3: 224922,262 ops/s
[info] # Warmup Iteration   4: 224966,142 ops/s
[info] # Warmup Iteration   5: 228141,768 ops/s
[info] Iteration   1: 228567,035 ops/s
[info]                  ·gc.alloc.rate:      179,000 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 230150,479 ops/s
[info]                  ·gc.alloc.rate:      180,230 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 229225,714 ops/s
[info]                  ·gc.alloc.rate:                   196,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1348,162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3512,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 229599,624 ops/s
[info]                  ·gc.alloc.rate:      179,793 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 207291,635 ops/s
[info]                  ·gc.alloc.rate:      162,328 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   224966,897 ±(99.9%) 38111,897 ops/s [Average]
[info]   (min, avg, max) = (207291,635, 224966,897, 230150,479), stdev = 9897,539
[info]   CI (99.9%): [186855,001, 263078,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   179,556 ±(99.9%) 46,462 MB/sec [Average]
[info]   (min, avg, max) = (162,328, 179,556, 196,430), stdev = 12,066
[info]   CI (99.9%): [133,095, 226,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1255,234 ±(99.9%) 200,035 B/op [Average]
[info]   (min, avg, max) = (1232,002, 1255,234, 1348,162), stdev = 51,948
[info]   CI (99.9%): [1055,199, 1455,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   102,358 ±(99.9%) 881,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,358, 511,788), stdev = 228,879
[info]   CI (99.9%): [≈ 0, 983,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   702,514 ±(99.9%) 6048,861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 702,514, 3512,572), stdev = 1570,870
[info]   CI (99.9%): [≈ 0, 6751,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,112), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 3,000), stdev = 1,342
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,36% complete, ETA 01:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271457,052 ops/s
[info] # Warmup Iteration   2: 471759,694 ops/s
[info] # Warmup Iteration   3: 460722,305 ops/s
[info] # Warmup Iteration   4: 467441,215 ops/s
[info] # Warmup Iteration   5: 470668,834 ops/s
[info] Iteration   1: 462783,103 ops/s
[info]                  ·gc.alloc.rate:               468,137 MB/sec
[info]                  ·gc.alloc.rate.norm:          1591,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1739,781 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 463639,970 ops/s
[info]                  ·gc.alloc.rate:               491,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          1666,222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2264,653 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 468986,935 ops/s
[info]                  ·gc.alloc.rate:      460,242 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467481,616 ops/s
[info]                  ·gc.alloc.rate:                   475,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1599,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2246,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,140 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 468238,135 ops/s
[info]                  ·gc.alloc.rate:               482,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          1621,836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2245,762 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   466225,952 ±(99.9%) 10855,318 ops/s [Average]
[info]   (min, avg, max) = (462783,103, 466225,952, 468986,935), stdev = 2819,092
[info]   CI (99.9%): [455370,634, 477081,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   475,494 ±(99.9%) 46,352 MB/sec [Average]
[info]   (min, avg, max) = (460,242, 475,494, 491,024), stdev = 12,038
[info]   CI (99.9%): [429,141, 521,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1604,706 ±(99.9%) 171,767 B/op [Average]
[info]   (min, avg, max) = (1544,001, 1604,706, 1666,222), stdev = 44,607
[info]   CI (99.9%): [1432,939, 1776,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,969 ±(99.9%) 1113,467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,969, 668,372), stdev = 289,164
[info]   CI (99.9%): [≈ 0, 1616,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1699,244 ±(99.9%) 3756,308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1699,244, 2264,653), stdev = 975,501
[info]   CI (99.9%): [≈ 0, 5455,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,140), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,56% complete, ETA 01:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358773,406 ops/s
[info] # Warmup Iteration   2: 496476,136 ops/s
[info] # Warmup Iteration   3: 502056,707 ops/s
[info] # Warmup Iteration   4: 512492,307 ops/s
[info] # Warmup Iteration   5: 515965,629 ops/s
[info] Iteration   1: 511818,066 ops/s
[info]                  ·gc.alloc.rate:               433,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          1332,160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1573,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 517481,817 ops/s
[info]                  ·gc.alloc.rate:      405,234 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 504675,312 ops/s
[info]                  ·gc.alloc.rate:               425,099 MB/sec
[info]                  ·gc.alloc.rate.norm:          1325,192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2091,880 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 512244,014 ops/s
[info]                  ·gc.alloc.rate:      401,128 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 514788,537 ops/s
[info]                  ·gc.alloc.rate:               419,105 MB/sec
[info]                  ·gc.alloc.rate.norm:          1280,896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050,852 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   512201,549 ±(99.9%) 18403,384 ops/s [Average]
[info]   (min, avg, max) = (504675,312, 512201,549, 517481,817), stdev = 4779,300
[info]   CI (99.9%): [493798,165, 530604,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   416,786 ±(99.9%) 51,947 MB/sec [Average]
[info]   (min, avg, max) = (401,128, 416,786, 433,365), stdev = 13,491
[info]   CI (99.9%): [364,839, 468,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1280,450 ±(99.9%) 186,374 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1280,450, 1332,160), stdev = 48,401
[info]   CI (99.9%): [1094,076, 1466,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370,768 ±(99.9%) 1327,133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,768, 671,040), stdev = 344,652
[info]   CI (99.9%): [≈ 0, 1697,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1143,181 ±(99.9%) 4094,430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1143,181, 2091,880), stdev = 1063,310
[info]   CI (99.9%): [≈ 0, 5237,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,76% complete, ETA 01:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362658,490 ops/s
[info] # Warmup Iteration   2: 553347,213 ops/s
[info] # Warmup Iteration   3: 546952,504 ops/s
[info] # Warmup Iteration   4: 553305,760 ops/s
[info] # Warmup Iteration   5: 552945,416 ops/s
[info] Iteration   1: 553477,080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 553397,718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 553290,452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 554621,513 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 553074,931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   553572,339 ±(99.9%) 2332,112 ops/s [Average]
[info]   (min, avg, max) = (553074,931, 553572,339, 554621,513), stdev = 605,642
[info]   CI (99.9%): [551240,227, 555904,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40,96% complete, ETA 01:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13491,469 ops/s
[info] # Warmup Iteration   2: 31538,302 ops/s
[info] # Warmup Iteration   3: 31946,507 ops/s
[info] # Warmup Iteration   4: 31763,101 ops/s
[info] # Warmup Iteration   5: 29967,415 ops/s
[info] Iteration   1: 31543,607 ops/s
[info]                  ·gc.alloc.rate:                   1741,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              86868,875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100393,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 31697,124 ops/s
[info]                  ·gc.alloc.rate:                   1725,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              85620,582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66648,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190,187 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 32193,494 ops/s
[info]                  ·gc.alloc.rate:                   1762,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              86108,351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98116,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,176 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 32199,136 ops/s
[info]                  ·gc.alloc.rate:                   1776,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              86773,346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97831,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,160 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 32193,816 ops/s
[info]                  ·gc.alloc.rate:               1763,188 MB/sec
[info]                  ·gc.alloc.rate.norm:          86164,866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65322,302 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   31965,435 ±(99.9%) 1230,874 ops/s [Average]
[info]   (min, avg, max) = (31543,607, 31965,435, 32199,136), stdev = 319,654
[info]   CI (99.9%): [30734,562, 33196,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1753,729 ±(99.9%) 78,287 MB/sec [Average]
[info]   (min, avg, max) = (1725,007, 1753,729, 1776,668), stdev = 20,331
[info]   CI (99.9%): [1675,442, 1832,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86307,204 ±(99.9%) 1985,990 B/op [Average]
[info]   (min, avg, max) = (85620,582, 86307,204, 86868,875), stdev = 515,755
[info]   CI (99.9%): [84321,214, 88293,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1740,645 ±(99.9%) 1409,369 MB/sec [Average]
[info]   (min, avg, max) = (1336,688, 1740,645, 2012,921), stdev = 366,009
[info]   CI (99.9%): [331,276, 3150,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85662,518 ±(99.9%) 69297,510 B/op [Average]
[info]   (min, avg, max) = (65322,302, 85662,518, 100393,807), stdev = 17996,343
[info]   CI (99.9%): [16365,008, 154960,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,854 ±(99.9%) 6,422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,854, 3,832), stdev = 1,668
[info]   CI (99.9%): [≈ 0, 7,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42,312 ±(99.9%) 318,856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42,312, 190,187), stdev = 82,806
[info]   CI (99.9%): [≈ 0, 361,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 9,000), stdev = 2,702
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,16% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1413,473 ops/s
[info] # Warmup Iteration   2: 8893,597 ops/s
[info] # Warmup Iteration   3: 9278,078 ops/s
[info] # Warmup Iteration   4: 9333,294 ops/s
[info] # Warmup Iteration   5: 9337,557 ops/s
[info] Iteration   1: 9321,694 ops/s
[info]                  ·gc.alloc.rate:               1325,817 MB/sec
[info]                  ·gc.alloc.rate.norm:          223773,467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 226469,926 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 9258,843 ops/s
[info]                  ·gc.alloc.rate:                   1333,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              226571,841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228034,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,538 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 9203,245 ops/s
[info]                  ·gc.alloc.rate:               1323,647 MB/sec
[info]                  ·gc.alloc.rate.norm:          226279,428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229625,159 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 9277,775 ops/s
[info]                  ·gc.alloc.rate:                   1322,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              224317,241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227794,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 646,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 9297,757 ops/s
[info]                  ·gc.alloc.rate:                   1336,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              226229,311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226627,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9271,863 ±(99.9%) 172,921 ops/s [Average]
[info]   (min, avg, max) = (9203,245, 9271,863, 9321,694), stdev = 44,907
[info]   CI (99.9%): [9098,942, 9444,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1328,537 ±(99.9%) 24,207 MB/sec [Average]
[info]   (min, avg, max) = (1322,864, 1328,537, 1336,965), stdev = 6,286
[info]   CI (99.9%): [1304,330, 1352,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   225434,258 ±(99.9%) 4963,625 B/op [Average]
[info]   (min, avg, max) = (223773,467, 225434,258, 226571,841), stdev = 1289,038
[info]   CI (99.9%): [220470,633, 230397,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341,940 ±(99.9%) 6,258 MB/sec [Average]
[info]   (min, avg, max) = (1339,320, 1341,940, 1343,368), stdev = 1,625
[info]   CI (99.9%): [1335,682, 1348,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   227710,378 ±(99.9%) 4904,717 B/op [Average]
[info]   (min, avg, max) = (226469,926, 227710,378, 229625,159), stdev = 1273,739
[info]   CI (99.9%): [222805,662, 232615,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,808 ±(99.9%) 6,472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,808, 3,811), stdev = 1,681
[info]   CI (99.9%): [≈ 0, 7,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   136,990 ±(99.9%) 1097,551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 136,990, 646,179), stdev = 285,031
[info]   CI (99.9%): [≈ 0, 1234,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,37% complete, ETA 01:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1891,952 ops/s
[info] # Warmup Iteration   2: 8314,812 ops/s
[info] # Warmup Iteration   3: 8901,579 ops/s
[info] # Warmup Iteration   4: 8903,756 ops/s
[info] # Warmup Iteration   5: 8843,644 ops/s
[info] Iteration   1: 8927,240 ops/s
[info]                  ·gc.alloc.rate:               1163,319 MB/sec
[info]                  ·gc.alloc.rate.norm:          205013,992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118008,833 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 8860,508 ops/s
[info]                  ·gc.alloc.rate:                   1174,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              208487,792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237801,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,394 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 8894,701 ops/s
[info]                  ·gc.alloc.rate:               1183,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          209317,516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237010,940 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 8930,858 ops/s
[info]                  ·gc.alloc.rate:                   1174,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              206824,683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118086,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,668 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 8903,540 ops/s
[info]                  ·gc.alloc.rate:                   1186,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              209586,436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236889,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 706,429 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8903,369 ±(99.9%) 109,551 ops/s [Average]
[info]   (min, avg, max) = (8860,508, 8903,369, 8930,858), stdev = 28,450
[info]   CI (99.9%): [8793,818, 9012,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1176,263 ±(99.9%) 34,805 MB/sec [Average]
[info]   (min, avg, max) = (1163,319, 1176,263, 1186,158), stdev = 9,039
[info]   CI (99.9%): [1141,459, 1211,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   207846,084 ±(99.9%) 7374,192 B/op [Average]
[info]   (min, avg, max) = (205013,992, 207846,084, 209586,436), stdev = 1915,054
[info]   CI (99.9%): [200471,892, 215220,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1072,018 ±(99.9%) 1413,224 MB/sec [Average]
[info]   (min, avg, max) = (669,622, 1072,018, 1340,678), stdev = 367,010
[info]   CI (99.9%): [≈ 0, 2485,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   189559,474 ±(99.9%) 251377,574 B/op [Average]
[info]   (min, avg, max) = (118008,833, 189559,474, 237801,846), stdev = 65281,958
[info]   CI (99.9%): [≈ 0, 440937,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,812 ±(99.9%) 6,858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,812, 3,998), stdev = 1,781
[info]   CI (99.9%): [≈ 0, 7,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   143,498 ±(99.9%) 1211,808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143,498, 706,429), stdev = 314,703
[info]   CI (99.9%): [≈ 0, 1355,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 7,000), stdev = 1,789
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,57% complete, ETA 01:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111797,545 ops/s
[info] # Warmup Iteration   2: 193063,776 ops/s
[info] # Warmup Iteration   3: 201615,253 ops/s
[info] # Warmup Iteration   4: 199624,493 ops/s
[info] # Warmup Iteration   5: 201280,828 ops/s
[info] Iteration   1: 199522,866 ops/s
[info]                  ·gc.alloc.rate:                   1997,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              15747,743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15920,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,316 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 202027,707 ops/s
[info]                  ·gc.alloc.rate:                   2022,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              15751,808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15687,566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,270 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 201002,331 ops/s
[info]                  ·gc.alloc.rate:               2013,911 MB/sec
[info]                  ·gc.alloc.rate.norm:          15762,793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15756,805 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 202517,487 ops/s
[info]                  ·gc.alloc.rate:               2041,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          15862,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15641,232 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 200641,534 ops/s
[info]                  ·gc.alloc.rate:                   2023,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              15869,933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15802,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,327 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   201142,385 ±(99.9%) 4543,111 ops/s [Average]
[info]   (min, avg, max) = (199522,866, 201142,385, 202517,487), stdev = 1179,831
[info]   CI (99.9%): [196599,274, 205685,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2019,921 ±(99.9%) 62,796 MB/sec [Average]
[info]   (min, avg, max) = (1997,100, 2019,921, 2041,892), stdev = 16,308
[info]   CI (99.9%): [1957,124, 2082,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15798,857 ±(99.9%) 237,110 B/op [Average]
[info]   (min, avg, max) = (15747,743, 15798,857, 15869,933), stdev = 61,577
[info]   CI (99.9%): [15561,746, 16035,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2015,117 ±(99.9%) 9,137 MB/sec [Average]
[info]   (min, avg, max) = (2013,146, 2015,117, 2019,056), stdev = 2,373
[info]   CI (99.9%): [2005,980, 2024,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15761,888 ±(99.9%) 417,715 B/op [Average]
[info]   (min, avg, max) = (15641,232, 15761,888, 15920,873), stdev = 108,479
[info]   CI (99.9%): [15344,174, 16179,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 4,971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 2,957), stdev = 1,291
[info]   CI (99.9%): [≈ 0, 5,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,183 ±(99.9%) 39,204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,183, 23,316), stdev = 10,181
[info]   CI (99.9%): [≈ 0, 44,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 8,000), stdev = 2,387
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,77% complete, ETA 01:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421,972 ops/s
[info] # Warmup Iteration   2: 7102,035 ops/s
[info] # Warmup Iteration   3: 8550,090 ops/s
[info] # Warmup Iteration   4: 8580,451 ops/s
[info] # Warmup Iteration   5: 8281,921 ops/s
[info] Iteration   1: 8578,858 ops/s
[info]                  ·gc.alloc.rate:               1426,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          261522,960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 245311,306 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   2: 8589,621 ops/s
[info]                  ·gc.alloc.rate:                   1438,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              263463,820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245119,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,628 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 8577,067 ops/s
[info]                  ·gc.alloc.rate:                   1446,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              265303,783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245612,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 672,242 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 8353,298 ops/s
[info]                  ·gc.alloc.rate:                   1409,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              265528,992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251884,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188,254 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8596,697 ops/s
[info]                  ·gc.alloc.rate:                   1450,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              265536,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244127,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,621 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8539,108 ±(99.9%) 401,163 ops/s [Average]
[info]   (min, avg, max) = (8353,298, 8539,108, 8596,697), stdev = 104,181
[info]   CI (99.9%): [8137,945, 8940,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1434,391 ±(99.9%) 63,955 MB/sec [Average]
[info]   (min, avg, max) = (1409,924, 1434,391, 1450,967), stdev = 16,609
[info]   CI (99.9%): [1370,436, 1498,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   264271,131 ±(99.9%) 6794,211 B/op [Average]
[info]   (min, avg, max) = (261522,960, 264271,131, 265536,100), stdev = 1764,435
[info]   CI (99.9%): [257476,920, 271065,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1337,319 ±(99.9%) 7,566 MB/sec [Average]
[info]   (min, avg, max) = (1333,982, 1337,319, 1339,058), stdev = 1,965
[info]   CI (99.9%): [1329,753, 1344,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   246410,962 ±(99.9%) 11975,153 B/op [Average]
[info]   (min, avg, max) = (244127,125, 246410,962, 251884,145), stdev = 3109,909
[info]   CI (99.9%): [234435,809, 258386,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,950 ±(99.9%) 6,066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,950, 3,665), stdev = 1,575
[info]   CI (99.9%): [≈ 0, 7,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   175,149 ±(99.9%) 1112,829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 175,149, 672,242), stdev = 288,998
[info]   CI (99.9%): [≈ 0, 1287,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 7,000), stdev = 2,739
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41,97% complete, ETA 01:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2154,095 ops/s
[info] # Warmup Iteration   2: 8454,767 ops/s
[info] # Warmup Iteration   3: 8949,118 ops/s
[info] # Warmup Iteration   4: 8945,601 ops/s
[info] # Warmup Iteration   5: 8975,824 ops/s
[info] Iteration   1: 8702,498 ops/s
[info]                  ·gc.alloc.rate:                   1204,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              217808,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243109,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,765 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 8302,879 ops/s
[info]                  ·gc.alloc.rate:               1132,212 MB/sec
[info]                  ·gc.alloc.rate.norm:          214528,529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127410,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 7809,179 ops/s
[info]                  ·gc.alloc.rate:               1086,042 MB/sec
[info]                  ·gc.alloc.rate.norm:          218789,734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270903,389 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 8607,948 ops/s
[info]                  ·gc.alloc.rate:                   1190,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              217539,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245885,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 8202,276 ops/s
[info]                  ·gc.alloc.rate:                   1128,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              216439,616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129090,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127,813 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8324,956 ±(99.9%) 1367,095 ops/s [Average]
[info]   (min, avg, max) = (7809,179, 8324,956, 8702,498), stdev = 355,030
[info]   CI (99.9%): [6957,861, 9692,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1148,391 ±(99.9%) 187,623 MB/sec [Average]
[info]   (min, avg, max) = (1086,042, 1148,391, 1204,881), stdev = 48,725
[info]   CI (99.9%): [960,768, 1336,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   217021,152 ±(99.9%) 6258,901 B/op [Average]
[info]   (min, avg, max) = (214528,529, 217021,152, 218789,734), stdev = 1625,417
[info]   CI (99.9%): [210762,252, 223280,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1076,101 ±(99.9%) 1417,858 MB/sec [Average]
[info]   (min, avg, max) = (672,429, 1076,101, 1345,449), stdev = 368,213
[info]   CI (99.9%): [≈ 0, 2493,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   203279,919 ±(99.9%) 267022,300 B/op [Average]
[info]   (min, avg, max) = (127410,066, 203279,919, 270903,389), stdev = 69344,843
[info]   CI (99.9%): [≈ 0, 470302,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 5,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,758, 3,103), stdev = 1,342
[info]   CI (99.9%): [≈ 0, 5,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   139,729 ±(99.9%) 943,787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139,729, 567,065), stdev = 245,098
[info]   CI (99.9%): [≈ 0, 1083,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,400, 6,000), stdev = 2,302
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,17% complete, ETA 01:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8691,826 ops/s
[info] # Warmup Iteration   2: 21509,550 ops/s
[info] # Warmup Iteration   3: 22505,355 ops/s
[info] # Warmup Iteration   4: 22430,570 ops/s
[info] # Warmup Iteration   5: 22055,423 ops/s
[info] Iteration   1: 22378,701 ops/s
[info]                  ·gc.alloc.rate:               1277,340 MB/sec
[info]                  ·gc.alloc.rate.norm:          89804,169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94256,128 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 22378,791 ops/s
[info]                  ·gc.alloc.rate:                   1286,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              90439,655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94354,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,856 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 22504,739 ops/s
[info]                  ·gc.alloc.rate:                   1280,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              89545,800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93817,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 22562,700 ops/s
[info]                  ·gc.alloc.rate:                   1296,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              90394,613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93677,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261,377 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 22546,091 ops/s
[info]                  ·gc.alloc.rate:                   1283,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              89547,294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93460,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,906 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   22474,204 ±(99.9%) 345,251 ops/s [Average]
[info]   (min, avg, max) = (22378,701, 22474,204, 22562,700), stdev = 89,661
[info]   CI (99.9%): [22128,953, 22819,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1284,847 ±(99.9%) 27,827 MB/sec [Average]
[info]   (min, avg, max) = (1277,340, 1284,847, 1296,346), stdev = 7,227
[info]   CI (99.9%): [1257,020, 1312,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89946,306 ±(99.9%) 1704,961 B/op [Average]
[info]   (min, avg, max) = (89545,800, 89946,306, 90439,655), stdev = 442,773
[info]   CI (99.9%): [88241,345, 91651,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341,501 ±(99.9%) 6,011 MB/sec [Average]
[info]   (min, avg, max) = (1339,323, 1341,501, 1343,427), stdev = 1,561
[info]   CI (99.9%): [1335,490, 1347,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93913,248 ±(99.9%) 1467,705 B/op [Average]
[info]   (min, avg, max) = (93460,945, 93913,248, 94354,037), stdev = 381,158
[info]   CI (99.9%): [92445,543, 95380,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 6,393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,748), stdev = 1,660
[info]   CI (99.9%): [≈ 0, 7,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   54,319 ±(99.9%) 445,786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54,319, 261,377), stdev = 115,769
[info]   CI (99.9%): [≈ 0, 500,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 6,000), stdev = 1,140
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,37% complete, ETA 01:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12300,046 ops/s
[info] # Warmup Iteration   2: 28275,569 ops/s
[info] # Warmup Iteration   3: 28549,538 ops/s
[info] # Warmup Iteration   4: 28555,270 ops/s
[info] # Warmup Iteration   5: 28573,524 ops/s
[info] Iteration   1: 28600,832 ops/s
[info]                  ·gc.alloc.rate:               1272,790 MB/sec
[info]                  ·gc.alloc.rate.norm:          70020,832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73602,286 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 28642,398 ops/s
[info]                  ·gc.alloc.rate:                   1264,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              69477,596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73533,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,144 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 27844,523 ops/s
[info]                  ·gc.alloc.rate:                   1239,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              70012,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75715,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,530 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 28644,840 ops/s
[info]                  ·gc.alloc.rate:                   1274,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              70004,828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73638,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212,735 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 25993,256 ops/s
[info]                  ·gc.alloc.rate:               1144,951 MB/sec
[info]                  ·gc.alloc.rate.norm:          69298,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40492,723 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   27945,170 ±(99.9%) 4401,226 ops/s [Average]
[info]   (min, avg, max) = (25993,256, 27945,170, 28644,840), stdev = 1142,985
[info]   CI (99.9%): [23543,944, 32346,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1239,264 ±(99.9%) 210,232 MB/sec [Average]
[info]   (min, avg, max) = (1144,951, 1239,264, 1274,579), stdev = 54,597
[info]   CI (99.9%): [1029,031, 1449,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69762,868 ±(99.9%) 1340,063 B/op [Average]
[info]   (min, avg, max) = (69298,515, 69762,868, 70020,832), stdev = 348,010
[info]   CI (99.9%): [68422,805, 71102,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,285 ±(99.9%) 1154,355 MB/sec [Average]
[info]   (min, avg, max) = (669,021, 1205,285, 1340,732), stdev = 299,782
[info]   CI (99.9%): [50,930, 2359,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67396,525 ±(99.9%) 58020,879 B/op [Average]
[info]   (min, avg, max) = (40492,723, 67396,525, 75715,847), stdev = 15067,838
[info]   CI (99.9%): [9375,646, 125417,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,791 ±(99.9%) 6,635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,791, 3,873), stdev = 1,723
[info]   CI (99.9%): [≈ 0, 7,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43,482 ±(99.9%) 364,372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43,482, 212,735), stdev = 94,626
[info]   CI (99.9%): [≈ 0, 407,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,400, 6,000), stdev = 2,074
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,57% complete, ETA 01:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292938,552 ops/s
[info] # Warmup Iteration   2: 407493,800 ops/s
[info] # Warmup Iteration   3: 411425,243 ops/s
[info] # Warmup Iteration   4: 404952,619 ops/s
[info] # Warmup Iteration   5: 407554,668 ops/s
[info] Iteration   1: 407721,499 ops/s
[info]                  ·gc.alloc.rate:               941,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          3634,705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2591,838 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 410961,253 ops/s
[info]                  ·gc.alloc.rate:               949,296 MB/sec
[info]                  ·gc.alloc.rate.norm:          3634,197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2573,947 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 405828,502 ops/s
[info]                  ·gc.alloc.rate:                   955,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              3703,203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,161 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 408791,287 ops/s
[info]                  ·gc.alloc.rate:               950,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          3657,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2588,928 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 411612,808 ops/s
[info]                  ·gc.alloc.rate:               960,648 MB/sec
[info]                  ·gc.alloc.rate.norm:          3671,949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5144,923 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   408983,070 ±(99.9%) 9113,989 ops/s [Average]
[info]   (min, avg, max) = (405828,502, 408983,070, 411612,808), stdev = 2366,874
[info]   CI (99.9%): [399869,080, 418097,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   951,495 ±(99.9%) 26,886 MB/sec [Average]
[info]   (min, avg, max) = (941,959, 951,495, 960,648), stdev = 6,982
[info]   CI (99.9%): [924,609, 978,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3660,298 ±(99.9%) 110,954 B/op [Average]
[info]   (min, avg, max) = (3634,197, 3660,298, 3703,203), stdev = 28,814
[info]   CI (99.9%): [3549,344, 3771,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,560 ±(99.9%) 1420,032 MB/sec [Average]
[info]   (min, avg, max) = (671,693, 941,560, 1346,004), stdev = 368,778
[info]   CI (99.9%): [≈ 0, 2361,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3622,810 ±(99.9%) 5473,455 B/op [Average]
[info]   (min, avg, max) = (2573,947, 3622,810, 5214,412), stdev = 1421,439
[info]   CI (99.9%): [≈ 0, 9096,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,032 ±(99.9%) 0,278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,161), stdev = 0,072
[info]   CI (99.9%): [≈ 0, 0,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,77% complete, ETA 01:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307923,312 ops/s
[info] # Warmup Iteration   2: 454393,169 ops/s
[info] # Warmup Iteration   3: 443570,127 ops/s
[info] # Warmup Iteration   4: 459496,827 ops/s
[info] # Warmup Iteration   5: 459614,293 ops/s
[info] Iteration   1: 459332,077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 459998,635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 459637,604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 458595,624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 459658,871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   459444,562 ±(99.9%) 2040,786 ops/s [Average]
[info]   (min, avg, max) = (458595,624, 459444,562, 459998,635), stdev = 529,986
[info]   CI (99.9%): [457403,776, 461485,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42,97% complete, ETA 01:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9511,856 ops/s
[info] # Warmup Iteration   2: 27011,365 ops/s
[info] # Warmup Iteration   3: 27539,793 ops/s
[info] # Warmup Iteration   4: 27379,446 ops/s
[info] # Warmup Iteration   5: 26597,922 ops/s
[info] Iteration   1: 27565,851 ops/s
[info]                  ·gc.alloc.rate:                   1325,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              75632,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76501,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,188 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 26519,813 ops/s
[info]                  ·gc.alloc.rate:               1255,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          74493,317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39770,301 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 24971,295 ops/s
[info]                  ·gc.alloc.rate:                   1208,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              76118,327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84512,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,624 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 27672,660 ops/s
[info]                  ·gc.alloc.rate:                   1335,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              75906,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76297,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 27729,829 ops/s
[info]                  ·gc.alloc.rate:               1337,689 MB/sec
[info]                  ·gc.alloc.rate.norm:          75898,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75916,373 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   26891,889 ±(99.9%) 4553,333 ops/s [Average]
[info]   (min, avg, max) = (24971,295, 26891,889, 27729,829), stdev = 1182,486
[info]   CI (99.9%): [22338,557, 31445,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1292,392 ±(99.9%) 222,880 MB/sec [Average]
[info]   (min, avg, max) = (1208,138, 1292,392, 1337,689), stdev = 57,881
[info]   CI (99.9%): [1069,512, 1515,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75609,701 ±(99.9%) 2493,184 B/op [Average]
[info]   (min, avg, max) = (74493,317, 75609,701, 76118,327), stdev = 647,472
[info]   CI (99.9%): [73116,517, 78102,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,455 ±(99.9%) 1153,879 MB/sec [Average]
[info]   (min, avg, max) = (670,417, 1206,455, 1342,073), stdev = 299,659
[info]   CI (99.9%): [52,577, 2360,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70599,494 ±(99.9%) 67785,891 B/op [Average]
[info]   (min, avg, max) = (39770,301, 70599,494, 84512,471), stdev = 17603,781
[info]   CI (99.9%): [2813,603, 138385,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,820 ±(99.9%) 6,930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,820, 4,040), stdev = 1,800
[info]   CI (99.9%): [≈ 0, 7,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46,696 ±(99.9%) 393,883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46,696, 229,668), stdev = 102,290
[info]   CI (99.9%): [≈ 0, 440,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,17% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6901,112 ops/s
[info] # Warmup Iteration   2: 11712,686 ops/s
[info] # Warmup Iteration   3: 11990,096 ops/s
[info] # Warmup Iteration   4: 11985,091 ops/s
[info] # Warmup Iteration   5: 12008,306 ops/s
[info] Iteration   1: 11819,198 ops/s
[info]                  ·gc.alloc.rate:               1029,496 MB/sec
[info]                  ·gc.alloc.rate.norm:          137042,615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178857,512 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 11997,886 ops/s
[info]                  ·gc.alloc.rate:               1014,620 MB/sec
[info]                  ·gc.alloc.rate.norm:          133035,411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88116,732 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 12037,004 ops/s
[info]                  ·gc.alloc.rate:                   1030,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              134664,701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87882,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11938,523 ops/s
[info]                  ·gc.alloc.rate:               1023,725 MB/sec
[info]                  ·gc.alloc.rate.norm:          134909,744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177206,797 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 11782,069 ops/s
[info]                  ·gc.alloc.rate:               1005,360 MB/sec
[info]                  ·gc.alloc.rate.norm:          134243,170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89783,875 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11914,936 ±(99.9%) 426,870 ops/s [Average]
[info]   (min, avg, max) = (11782,069, 11914,936, 12037,004), stdev = 110,857
[info]   CI (99.9%): [11488,066, 12341,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1020,716 ±(99.9%) 40,954 MB/sec [Average]
[info]   (min, avg, max) = (1005,360, 1020,716, 1030,378), stdev = 10,636
[info]   CI (99.9%): [979,762, 1061,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   134779,128 ±(99.9%) 5607,060 B/op [Average]
[info]   (min, avg, max) = (133035,411, 134779,128, 137042,615), stdev = 1456,136
[info]   CI (99.9%): [129172,068, 140386,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941,034 ±(99.9%) 1417,020 MB/sec [Average]
[info]   (min, avg, max) = (672,039, 941,034, 1344,685), stdev = 367,996
[info]   CI (99.9%): [≈ 0, 2358,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   124369,413 ±(99.9%) 188666,610 B/op [Average]
[info]   (min, avg, max) = (87882,148, 124369,413, 178857,512), stdev = 48996,120
[info]   CI (99.9%): [≈ 0, 313036,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,633 ±(99.9%) 14,061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,633, 8,165), stdev = 3,652
[info]   CI (99.9%): [≈ 0, 15,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,37% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3720,591 ops/s
[info] # Warmup Iteration   2: 13707,808 ops/s
[info] # Warmup Iteration   3: 14833,291 ops/s
[info] # Warmup Iteration   4: 14742,103 ops/s
[info] # Warmup Iteration   5: 14866,034 ops/s
[info] Iteration   1: 14720,031 ops/s
[info]                  ·gc.alloc.rate:                   1433,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              153234,503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143473,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,226 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 14759,898 ops/s
[info]                  ·gc.alloc.rate:                   1437,930 MB/sec
[info]                  ·gc.alloc.rate.norm:              153270,500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143145,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,658 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 14743,504 ops/s
[info]                  ·gc.alloc.rate:                   1449,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              154627,619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143346,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337,746 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 14474,171 ops/s
[info]                  ·gc.alloc.rate:                   1437,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              156259,153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218595,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 14937,637 ops/s
[info]                  ·gc.alloc.rate:               1468,328 MB/sec
[info]                  ·gc.alloc.rate.norm:          154650,442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140933,106 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   14727,048 ±(99.9%) 637,666 ops/s [Average]
[info]   (min, avg, max) = (14474,171, 14727,048, 14937,637), stdev = 165,600
[info]   CI (99.9%): [14089,382, 15364,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1445,338 ±(99.9%) 54,174 MB/sec [Average]
[info]   (min, avg, max) = (1433,735, 1445,338, 1468,328), stdev = 14,069
[info]   CI (99.9%): [1391,164, 1499,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154408,443 ±(99.9%) 4795,860 B/op [Average]
[info]   (min, avg, max) = (153234,503, 154408,443, 156259,153), stdev = 1245,470
[info]   CI (99.9%): [149612,583, 159204,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475,583 ±(99.9%) 1152,806 MB/sec [Average]
[info]   (min, avg, max) = (1338,089, 1475,583, 2011,117), stdev = 299,380
[info]   CI (99.9%): [322,778, 2628,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   157898,745 ±(99.9%) 130715,111 B/op [Average]
[info]   (min, avg, max) = (140933,106, 157898,745, 218595,176), stdev = 33946,299
[info]   CI (99.9%): [27183,634, 288613,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,812 ±(99.9%) 5,232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,812, 3,165), stdev = 1,359
[info]   CI (99.9%): [≈ 0, 6,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86,981 ±(99.9%) 558,295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86,981, 337,746), stdev = 144,988
[info]   CI (99.9%): [≈ 0, 645,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,673
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,57% complete, ETA 01:14:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3605,912 ops/s
[info] # Warmup Iteration   2: 14137,881 ops/s
[info] # Warmup Iteration   3: 15468,379 ops/s
[info] # Warmup Iteration   4: 15513,104 ops/s
[info] # Warmup Iteration   5: 15588,266 ops/s
[info] Iteration   1: 15543,093 ops/s
[info]                  ·gc.alloc.rate:                   1384,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              140191,865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135338,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 15572,800 ops/s
[info]                  ·gc.alloc.rate:                   1405,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              141980,226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135136,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,207 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 15495,859 ops/s
[info]                  ·gc.alloc.rate:                   1392,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              141400,450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135917,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 348,843 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 15650,937 ops/s
[info]                  ·gc.alloc.rate:                   1396,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              140351,240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134437,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96,290 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 15559,445 ops/s
[info]                  ·gc.alloc.rate:               1406,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          142247,552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134954,554 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15564,427 ±(99.9%) 217,277 ops/s [Average]
[info]   (min, avg, max) = (15495,859, 15564,427, 15650,937), stdev = 56,426
[info]   CI (99.9%): [15347,150, 15781,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1397,229 ±(99.9%) 35,068 MB/sec [Average]
[info]   (min, avg, max) = (1384,965, 1397,229, 1406,842), stdev = 9,107
[info]   CI (99.9%): [1362,160, 1432,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   141234,266 ±(99.9%) 3590,174 B/op [Average]
[info]   (min, avg, max) = (140191,865, 141234,266, 142247,552), stdev = 932,357
[info]   CI (99.9%): [137644,092, 144824,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337,098 ±(99.9%) 5,684 MB/sec [Average]
[info]   (min, avg, max) = (1334,713, 1337,098, 1338,710), stdev = 1,476
[info]   CI (99.9%): [1331,414, 1342,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   135156,933 ±(99.9%) 2082,546 B/op [Average]
[info]   (min, avg, max) = (134437,973, 135156,933, 135917,748), stdev = 540,831
[info]   CI (99.9%): [133074,387, 137239,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,891 ±(99.9%) 5,696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,891, 3,436), stdev = 1,479
[info]   CI (99.9%): [≈ 0, 6,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   90,290 ±(99.9%) 578,316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90,290, 348,843), stdev = 150,187
[info]   CI (99.9%): [≈ 0, 668,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,78% complete, ETA 01:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175452,253 ops/s
[info] # Warmup Iteration   2: 314104,408 ops/s
[info] # Warmup Iteration   3: 318269,927 ops/s
[info] # Warmup Iteration   4: 318584,346 ops/s
[info] # Warmup Iteration   5: 319041,422 ops/s
[info] Iteration   1: 319660,824 ops/s
[info]                  ·gc.alloc.rate:                   1883,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272,688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6625,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,632 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 319192,694 ops/s
[info]                  ·gc.alloc.rate:                   1923,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              9482,770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9938,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 319103,120 ops/s
[info]                  ·gc.alloc.rate:                   1913,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              9432,457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9925,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 319702,632 ops/s
[info]                  ·gc.alloc.rate:                   1927,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              9486,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9906,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 320363,381 ops/s
[info]                  ·gc.alloc.rate:                   1906,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              9362,783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6597,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   319604,530 ±(99.9%) 1934,607 ops/s [Average]
[info]   (min, avg, max) = (319103,120, 319604,530, 320363,381), stdev = 502,411
[info]   CI (99.9%): [317669,924, 321539,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1911,027 ±(99.9%) 66,668 MB/sec [Average]
[info]   (min, avg, max) = (1883,987, 1911,027, 1927,647), stdev = 17,314
[info]   CI (99.9%): [1844,359, 1977,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9407,400 ±(99.9%) 348,011 B/op [Average]
[info]   (min, avg, max) = (9272,688, 9407,400, 9486,304), stdev = 90,377
[info]   CI (99.9%): [9059,390, 9755,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746,415 ±(99.9%) 1412,052 MB/sec [Average]
[info]   (min, avg, max) = (1343,363, 1746,415, 2016,422), stdev = 366,705
[info]   CI (99.9%): [334,364, 3158,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8598,699 ±(99.9%) 6986,276 B/op [Average]
[info]   (min, avg, max) = (6597,452, 8598,699, 9938,735), stdev = 1814,314
[info]   CI (99.9%): [1612,423, 15584,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 4,603 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,658, 2,770), stdev = 1,195
[info]   CI (99.9%): [≈ 0, 5,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,239 ±(99.9%) 22,657 B/op [Average]
[info]   (min, avg, max) = (0,102, 3,239, 13,632), stdev = 5,884
[info]   CI (99.9%): [≈ 0, 25,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,98% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1577,433 ops/s
[info] # Warmup Iteration   2: 11573,104 ops/s
[info] # Warmup Iteration   3: 14308,392 ops/s
[info] # Warmup Iteration   4: 14291,055 ops/s
[info] # Warmup Iteration   5: 14313,216 ops/s
[info] Iteration   1: 14275,824 ops/s
[info]                  ·gc.alloc.rate:                   1739,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              191734,804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220488,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,295 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 14338,492 ops/s
[info]                  ·gc.alloc.rate:                   1744,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              191426,848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146746,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,285 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 14200,437 ops/s
[info]                  ·gc.alloc.rate:                   1750,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              193958,491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222796,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89,971 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 14292,508 ops/s
[info]                  ·gc.alloc.rate:                   1761,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              193850,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221729,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 14335,528 ops/s
[info]                  ·gc.alloc.rate:               1742,532 MB/sec
[info]                  ·gc.alloc.rate.norm:          191227,994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147644,532 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   14288,558 ±(99.9%) 216,483 ops/s [Average]
[info]   (min, avg, max) = (14200,437, 14288,558, 14338,492), stdev = 56,220
[info]   CI (99.9%): [14072,075, 14505,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1747,763 ±(99.9%) 32,596 MB/sec [Average]
[info]   (min, avg, max) = (1739,828, 1747,763, 1761,079), stdev = 8,465
[info]   CI (99.9%): [1715,168, 1780,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   192439,812 ±(99.9%) 5198,107 B/op [Average]
[info]   (min, avg, max) = (191227,994, 192439,812, 193958,491), stdev = 1349,932
[info]   CI (99.9%): [187241,706, 197637,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1741,791 ±(99.9%) 1407,619 MB/sec [Average]
[info]   (min, avg, max) = (1337,407, 1741,791, 2014,348), stdev = 365,554
[info]   CI (99.9%): [334,171, 3149,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   191881,048 ±(99.9%) 157112,136 B/op [Average]
[info]   (min, avg, max) = (146746,533, 191881,048, 222796,562), stdev = 40801,523
[info]   CI (99.9%): [34768,912, 348993,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,175 ±(99.9%) 1,372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,175, 0,812), stdev = 0,356
[info]   CI (99.9%): [≈ 0, 1,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19,369 ±(99.9%) 152,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,369, 89,971), stdev = 39,481
[info]   CI (99.9%): [≈ 0, 171,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 4,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,18% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2589,182 ops/s
[info] # Warmup Iteration   2: 13588,956 ops/s
[info] # Warmup Iteration   3: 14198,169 ops/s
[info] # Warmup Iteration   4: 14278,338 ops/s
[info] # Warmup Iteration   5: 14411,970 ops/s
[info] Iteration   1: 14437,830 ops/s
[info]                  ·gc.alloc.rate:                   1366,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              148700,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145975,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 13730,145 ops/s
[info]                  ·gc.alloc.rate:               1290,438 MB/sec
[info]                  ·gc.alloc.rate.norm:          147856,574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77003,488 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 14467,216 ops/s
[info]                  ·gc.alloc.rate:                   1372,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              149276,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146245,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,265 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 14456,408 ops/s
[info]                  ·gc.alloc.rate:                   1378,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              149962,509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146346,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412,461 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 14490,023 ops/s
[info]                  ·gc.alloc.rate:                   1385,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              150415,217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145713,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,783 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   14316,324 ±(99.9%) 1263,886 ops/s [Average]
[info]   (min, avg, max) = (13730,145, 14316,324, 14490,023), stdev = 328,227
[info]   CI (99.9%): [13052,438, 15580,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1358,556 ±(99.9%) 149,160 MB/sec [Average]
[info]   (min, avg, max) = (1290,438, 1358,556, 1385,425), stdev = 38,736
[info]   CI (99.9%): [1209,396, 1507,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   149242,277 ±(99.9%) 3903,140 B/op [Average]
[info]   (min, avg, max) = (147856,574, 149242,277, 150415,217), stdev = 1013,633
[info]   CI (99.9%): [145339,136, 153145,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208,992 ±(99.9%) 1155,809 MB/sec [Average]
[info]   (min, avg, max) = (672,058, 1208,992, 1344,967), stdev = 300,160
[info]   CI (99.9%): [53,183, 2364,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   132256,998 ±(99.9%) 118941,134 B/op [Average]
[info]   (min, avg, max) = (77003,488, 132256,998, 146346,661), stdev = 30888,635
[info]   CI (99.9%): [13315,864, 251198,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 6,483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,790), stdev = 1,684
[info]   CI (99.9%): [≈ 0, 7,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   84,754 ±(99.9%) 705,478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84,754, 412,461), stdev = 183,210
[info]   CI (99.9%): [≈ 0, 790,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 6,000), stdev = 2,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,38% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15980,595 ops/s
[info] # Warmup Iteration   2: 35228,911 ops/s
[info] # Warmup Iteration   3: 36015,013 ops/s
[info] # Warmup Iteration   4: 36688,701 ops/s
[info] # Warmup Iteration   5: 36768,662 ops/s
[info] Iteration   1: 36625,127 ops/s
[info]                  ·gc.alloc.rate:                   1590,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              68342,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86491,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,895 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 36731,207 ops/s
[info]                  ·gc.alloc.rate:                   1594,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              68280,583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57526,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,899 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 36737,063 ops/s
[info]                  ·gc.alloc.rate:                   1595,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              68316,226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57475,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,971 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36628,988 ops/s
[info]                  ·gc.alloc.rate:                   1603,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              68864,516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86267,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,367 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 36690,441 ops/s
[info]                  ·gc.alloc.rate:               1591,599 MB/sec
[info]                  ·gc.alloc.rate.norm:          68244,795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57374,805 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   36682,565 ±(99.9%) 207,074 ops/s [Average]
[info]   (min, avg, max) = (36625,127, 36682,565, 36737,063), stdev = 53,777
[info]   CI (99.9%): [36475,491, 36889,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1595,032 ±(99.9%) 18,995 MB/sec [Average]
[info]   (min, avg, max) = (1590,983, 1595,032, 1603,288), stdev = 4,933
[info]   CI (99.9%): [1576,037, 1614,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68409,737 ±(99.9%) 989,185 B/op [Average]
[info]   (min, avg, max) = (68244,795, 68409,737, 68864,516), stdev = 256,888
[info]   CI (99.9%): [67420,552, 69398,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609,025 ±(99.9%) 1412,933 MB/sec [Average]
[info]   (min, avg, max) = (1338,090, 1609,025, 2013,484), stdev = 366,934
[info]   CI (99.9%): [196,092, 3021,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69027,197 ±(99.9%) 60996,937 B/op [Average]
[info]   (min, avg, max) = (57374,805, 69027,197, 86491,561), stdev = 15840,711
[info]   CI (99.9%): [8030,260, 130024,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 5,111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,103), stdev = 1,327
[info]   CI (99.9%): [≈ 0, 5,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32,826 ±(99.9%) 218,907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,826, 132,899), stdev = 56,849
[info]   CI (99.9%): [≈ 0, 251,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 7,000), stdev = 2,121
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,58% complete, ETA 01:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56948,065 ops/s
[info] # Warmup Iteration   2: 89325,277 ops/s
[info] # Warmup Iteration   3: 89918,214 ops/s
[info] # Warmup Iteration   4: 89532,924 ops/s
[info] # Warmup Iteration   5: 90229,299 ops/s
[info] Iteration   1: 90120,104 ops/s
[info]                  ·gc.alloc.rate:                   2285,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              39895,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46778,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,633 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 90416,271 ops/s
[info]                  ·gc.alloc.rate:                   2265,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              39415,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34901,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,725 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 90499,995 ops/s
[info]                  ·gc.alloc.rate:               2283,649 MB/sec
[info]                  ·gc.alloc.rate.norm:          39699,164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34885,346 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 90269,399 ops/s
[info]                  ·gc.alloc.rate:               2303,685 MB/sec
[info]                  ·gc.alloc.rate.norm:          40150,652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46722,355 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 87971,651 ops/s
[info]                  ·gc.alloc.rate:               2221,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          39728,916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36044,167 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   89855,484 ±(99.9%) 4093,315 ops/s [Average]
[info]   (min, avg, max) = (87971,651, 89855,484, 90499,995), stdev = 1063,021
[info]   CI (99.9%): [85762,170, 93948,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2271,803 ±(99.9%) 120,458 MB/sec [Average]
[info]   (min, avg, max) = (2221,431, 2271,803, 2303,685), stdev = 31,282
[info]   CI (99.9%): [2151,345, 2392,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39777,789 ±(99.9%) 1042,011 B/op [Average]
[info]   (min, avg, max) = (39415,093, 39777,789, 40150,652), stdev = 270,607
[info]   CI (99.9%): [38735,778, 40819,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2277,599 ±(99.9%) 1414,707 MB/sec [Average]
[info]   (min, avg, max) = (2005,778, 2277,599, 2680,743), stdev = 367,395
[info]   CI (99.9%): [862,891, 3692,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39866,356 ±(99.9%) 24265,953 B/op [Average]
[info]   (min, avg, max) = (34885,346, 39866,356, 46778,398), stdev = 6301,791
[info]   CI (99.9%): [15600,402, 64132,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,187 ±(99.9%) 1,526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,187, 0,895), stdev = 0,396
[info]   CI (99.9%): [≈ 0, 1,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,271 ±(99.9%) 26,636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,271, 15,633), stdev = 6,917
[info]   CI (99.9%): [≈ 0, 29,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 5,000), stdev = 0,837
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,78% complete, ETA 01:13:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452696,945 ops/s
[info] # Warmup Iteration   2: 693809,053 ops/s
[info] # Warmup Iteration   3: 683454,801 ops/s
[info] # Warmup Iteration   4: 693501,499 ops/s
[info] # Warmup Iteration   5: 698965,902 ops/s
[info] Iteration   1: 703551,031 ops/s
[info]                  ·gc.alloc.rate:               983,965 MB/sec
[info]                  ·gc.alloc.rate.norm:          2200,400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1502,076 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 694457,186 ops/s
[info]                  ·gc.alloc.rate:                   986,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              2233,895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3046,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 682969,541 ops/s
[info]                  ·gc.alloc.rate:               952,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          2195,294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1548,891 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 696737,224 ops/s
[info]                  ·gc.alloc.rate:               969,998 MB/sec
[info]                  ·gc.alloc.rate.norm:          2190,404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1518,236 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 693108,383 ops/s
[info]                  ·gc.alloc.rate:                   990,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              2249,307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3055,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   694164,673 ±(99.9%) 28638,414 ops/s [Average]
[info]   (min, avg, max) = (682969,541, 694164,673, 703551,031), stdev = 7437,305
[info]   CI (99.9%): [665526,259, 722803,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   976,765 ±(99.9%) 59,326 MB/sec [Average]
[info]   (min, avg, max) = (952,959, 976,765, 990,898), stdev = 15,407
[info]   CI (99.9%): [917,439, 1036,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2213,860 ±(99.9%) 100,670 B/op [Average]
[info]   (min, avg, max) = (2190,404, 2213,860, 2249,307), stdev = 26,144
[info]   CI (99.9%): [2113,190, 2314,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,421 ±(99.9%) 1419,897 MB/sec [Average]
[info]   (min, avg, max) = (671,692, 941,421, 1346,042), stdev = 368,743
[info]   CI (99.9%): [≈ 0, 2361,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2134,234 ±(99.9%) 3223,179 B/op [Average]
[info]   (min, avg, max) = (1502,076, 2134,234, 3055,472), stdev = 837,049
[info]   CI (99.9%): [≈ 0, 5357,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,047), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44,98% complete, ETA 01:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422120,187 ops/s
[info] # Warmup Iteration   2: 780292,894 ops/s
[info] # Warmup Iteration   3: 786236,706 ops/s
[info] # Warmup Iteration   4: 801896,359 ops/s
[info] # Warmup Iteration   5: 801840,596 ops/s
[info] Iteration   1: 802183,993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 801523,899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 801424,551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 801331,428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 778304,753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   796953,725 ±(99.9%) 40164,030 ops/s [Average]
[info]   (min, avg, max) = (778304,753, 796953,725, 802183,993), stdev = 10430,471
[info]   CI (99.9%): [756789,694, 837117,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻⁴, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,18% complete, ETA 01:12:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33575,591 ops/s
[info] # Warmup Iteration   2: 78244,506 ops/s
[info] # Warmup Iteration   3: 81965,640 ops/s
[info] # Warmup Iteration   4: 81253,972 ops/s
[info] # Warmup Iteration   5: 80973,016 ops/s
[info] Iteration   1: 81549,604 ops/s
[info]                  ·gc.alloc.rate:                   2377,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              45870,335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51597,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,660 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 82307,416 ops/s
[info]                  ·gc.alloc.rate:                   2370,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              45311,994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38262,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,592 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 81806,100 ops/s
[info]                  ·gc.alloc.rate:               2400,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          46158,430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51390,105 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 82380,878 ops/s
[info]                  ·gc.alloc.rate:               2388,396 MB/sec
[info]                  ·gc.alloc.rate.norm:          45613,475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38362,692 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 81416,185 ops/s
[info]                  ·gc.alloc.rate:               2370,517 MB/sec
[info]                  ·gc.alloc.rate.norm:          45809,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38895,049 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   81892,037 ±(99.9%) 1681,310 ops/s [Average]
[info]   (min, avg, max) = (81416,185, 81892,037, 82380,878), stdev = 436,631
[info]   CI (99.9%): [80210,727, 83573,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2381,468 ±(99.9%) 49,200 MB/sec [Average]
[info]   (min, avg, max) = (2370,517, 2381,468, 2400,222), stdev = 12,777
[info]   CI (99.9%): [2332,268, 2430,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45752,650 ±(99.9%) 1210,401 B/op [Average]
[info]   (min, avg, max) = (45311,994, 45752,650, 46158,430), stdev = 314,337
[info]   CI (99.9%): [44542,248, 46963,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2274,000 ±(99.9%) 1403,970 MB/sec [Average]
[info]   (min, avg, max) = (2001,770, 2274,000, 2674,498), stdev = 364,607
[info]   CI (99.9%): [870,030, 3677,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   43701,601 ±(99.9%) 27408,058 B/op [Average]
[info]   (min, avg, max) = (38262,503, 43701,601, 51597,658), stdev = 7117,786
[info]   CI (99.9%): [16293,543, 71109,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,158 ±(99.9%) 1,192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,158, 0,708), stdev = 0,309
[info]   CI (99.9%): [≈ 0, 1,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,050 ±(99.9%) 22,991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,050, 13,660), stdev = 5,971
[info]   CI (99.9%): [≈ 0, 26,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 1,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,38% complete, ETA 01:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12892,494 ops/s
[info] # Warmup Iteration   2: 22300,637 ops/s
[info] # Warmup Iteration   3: 22346,790 ops/s
[info] # Warmup Iteration   4: 21702,038 ops/s
[info] # Warmup Iteration   5: 22369,666 ops/s
[info] Iteration   1: 22337,129 ops/s
[info]                  ·gc.alloc.rate:               843,064 MB/sec
[info]                  ·gc.alloc.rate.norm:          59378,297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47331,881 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 22439,046 ops/s
[info]                  ·gc.alloc.rate:               849,924 MB/sec
[info]                  ·gc.alloc.rate.norm:          59591,153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47118,874 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 22341,173 ops/s
[info]                  ·gc.alloc.rate:                   860,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              60590,484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94697,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,933 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 22368,871 ops/s
[info]                  ·gc.alloc.rate:               851,626 MB/sec
[info]                  ·gc.alloc.rate.norm:          59895,743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47311,052 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 22360,592 ops/s
[info]                  ·gc.alloc.rate:               840,308 MB/sec
[info]                  ·gc.alloc.rate.norm:          59123,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47332,207 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   22369,362 ±(99.9%) 158,376 ops/s [Average]
[info]   (min, avg, max) = (22337,129, 22369,362, 22439,046), stdev = 41,130
[info]   CI (99.9%): [22210,986, 22527,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   849,066 ±(99.9%) 30,360 MB/sec [Average]
[info]   (min, avg, max) = (840,308, 849,066, 860,408), stdev = 7,884
[info]   CI (99.9%): [818,706, 879,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   59715,924 ±(99.9%) 2175,861 B/op [Average]
[info]   (min, avg, max) = (59123,944, 59715,924, 60590,484), stdev = 565,064
[info]   CI (99.9%): [57540,063, 61891,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,844 ±(99.9%) 1157,879 MB/sec [Average]
[info]   (min, avg, max) = (672,027, 806,844, 1344,748), stdev = 300,698
[info]   CI (99.9%): [≈ 0, 1964,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   56758,399 ±(99.9%) 81668,539 B/op [Average]
[info]   (min, avg, max) = (47118,874, 56758,399, 94697,980), stdev = 21209,060
[info]   CI (99.9%): [≈ 0, 138426,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,587 ±(99.9%) 5,051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,587, 2,933), stdev = 1,312
[info]   CI (99.9%): [≈ 0, 5,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,58% complete, ETA 01:12:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2377,443 ops/s
[info] # Warmup Iteration   2: 14741,518 ops/s
[info] # Warmup Iteration   3: 16298,097 ops/s
[info] # Warmup Iteration   4: 16460,202 ops/s
[info] # Warmup Iteration   5: 16297,008 ops/s
[info] Iteration   1: 16311,189 ops/s
[info]                  ·gc.alloc.rate:               860,368 MB/sec
[info]                  ·gc.alloc.rate.norm:          82984,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64724,533 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 15927,213 ops/s
[info]                  ·gc.alloc.rate:               847,538 MB/sec
[info]                  ·gc.alloc.rate.norm:          83714,812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66280,587 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 16185,474 ops/s
[info]                  ·gc.alloc.rate:               883,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          85830,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65224,290 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 16334,710 ops/s
[info]                  ·gc.alloc.rate:                   891,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              85856,257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129323,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 16479,912 ops/s
[info]                  ·gc.alloc.rate:               864,238 MB/sec
[info]                  ·gc.alloc.rate.norm:          82504,104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64120,639 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16247,700 ±(99.9%) 798,738 ops/s [Average]
[info]   (min, avg, max) = (15927,213, 16247,700, 16479,912), stdev = 207,430
[info]   CI (99.9%): [15448,962, 17046,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   869,314 ±(99.9%) 68,234 MB/sec [Average]
[info]   (min, avg, max) = (847,538, 869,314, 891,412), stdev = 17,720
[info]   CI (99.9%): [801,081, 937,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84178,051 ±(99.9%) 6084,779 B/op [Average]
[info]   (min, avg, max) = (82504,104, 84178,051, 85856,257), stdev = 1580,198
[info]   CI (99.9%): [78093,272, 90262,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   805,497 ±(99.9%) 1156,395 MB/sec [Average]
[info]   (min, avg, max) = (671,020, 805,497, 1342,711), stdev = 300,312
[info]   CI (99.9%): [≈ 0, 1961,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77934,628 ±(99.9%) 110659,566 B/op [Average]
[info]   (min, avg, max) = (64120,639, 77934,628, 129323,090), stdev = 28737,938
[info]   CI (99.9%): [≈ 0, 188594,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,187), stdev = 0,084
[info]   CI (99.9%): [≈ 0, 0,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,610 ±(99.9%) 31,084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,610, 18,051), stdev = 8,073
[info]   CI (99.9%): [≈ 0, 34,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,78% complete, ETA 01:11:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5770,064 ops/s
[info] # Warmup Iteration   2: 17338,082 ops/s
[info] # Warmup Iteration   3: 18070,479 ops/s
[info] # Warmup Iteration   4: 16856,704 ops/s
[info] # Warmup Iteration   5: 17969,051 ops/s
[info] Iteration   1: 18138,801 ops/s
[info]                  ·gc.alloc.rate:               797,098 MB/sec
[info]                  ·gc.alloc.rate.norm:          69132,751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57913,855 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 18109,438 ops/s
[info]                  ·gc.alloc.rate:               834,648 MB/sec
[info]                  ·gc.alloc.rate.norm:          72506,730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116135,350 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 18285,719 ops/s
[info]                  ·gc.alloc.rate:                   792,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              68216,135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57534,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,583 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 18306,234 ops/s
[info]                  ·gc.alloc.rate:               801,075 MB/sec
[info]                  ·gc.alloc.rate.norm:          68842,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57465,240 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 18287,544 ops/s
[info]                  ·gc.alloc.rate:               798,907 MB/sec
[info]                  ·gc.alloc.rate.norm:          68730,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57556,739 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18225,547 ±(99.9%) 360,097 ops/s [Average]
[info]   (min, avg, max) = (18109,438, 18225,547, 18306,234), stdev = 93,516
[info]   CI (99.9%): [17865,450, 18585,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   804,927 ±(99.9%) 65,013 MB/sec [Average]
[info]   (min, avg, max) = (792,906, 804,927, 834,648), stdev = 16,884
[info]   CI (99.9%): [739,914, 869,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69485,723 ±(99.9%) 6626,892 B/op [Average]
[info]   (min, avg, max) = (68216,135, 69485,723, 72506,730), stdev = 1720,983
[info]   CI (99.9%): [62858,830, 76112,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802,215 ±(99.9%) 1150,890 MB/sec [Average]
[info]   (min, avg, max) = (667,745, 802,215, 1336,872), stdev = 298,883
[info]   CI (99.9%): [≈ 0, 1953,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   69321,110 ±(99.9%) 100773,418 B/op [Average]
[info]   (min, avg, max) = (57465,240, 69321,110, 116135,350), stdev = 26170,537
[info]   CI (99.9%): [≈ 0, 170094,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,717 ±(99.9%) 6,171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,717, 3,583), stdev = 1,603
[info]   CI (99.9%): [≈ 0, 6,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,98% complete, ETA 01:11:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99060,450 ops/s
[info] # Warmup Iteration   2: 131987,700 ops/s
[info] # Warmup Iteration   3: 134335,551 ops/s
[info] # Warmup Iteration   4: 133919,627 ops/s
[info] # Warmup Iteration   5: 133198,339 ops/s
[info] Iteration   1: 134145,261 ops/s
[info]                  ·gc.alloc.rate:               349,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          4101,738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6002,090 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 134439,663 ops/s
[info]                  ·gc.alloc.rate:               351,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          4108,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5988,966 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 134810,137 ops/s
[info]                  ·gc.alloc.rate:      338,641 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 134011,446 ops/s
[info]                  ·gc.alloc.rate:                   358,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4207,391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7877,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,489 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 134819,124 ops/s
[info]                  ·gc.alloc.rate:      338,655 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   134445,126 ±(99.9%) 1429,330 ops/s [Average]
[info]   (min, avg, max) = (134011,446, 134445,126, 134819,124), stdev = 371,192
[info]   CI (99.9%): [133015,796, 135874,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   347,313 ±(99.9%) 32,986 MB/sec [Average]
[info]   (min, avg, max) = (338,641, 347,313, 358,400), stdev = 8,566
[info]   CI (99.9%): [314,327, 380,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4064,424 ±(99.9%) 426,598 B/op [Average]
[info]   (min, avg, max) = (3952,004, 4064,424, 4207,391), stdev = 110,786
[info]   CI (99.9%): [3637,826, 4491,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,922 ±(99.9%) 1217,386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,922, 671,053), stdev = 316,151
[info]   CI (99.9%): [≈ 0, 1556,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3973,758 ±(99.9%) 14278,277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3973,758, 7877,736), stdev = 3708,023
[info]   CI (99.9%): [≈ 0, 18252,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,098 ±(99.9%) 0,842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,098, 0,489), stdev = 0,219
[info]   CI (99.9%): [≈ 0, 0,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,18% complete, ETA 01:11:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3387,528 ops/s
[info] # Warmup Iteration   2: 15359,894 ops/s
[info] # Warmup Iteration   3: 16110,559 ops/s
[info] # Warmup Iteration   4: 16282,253 ops/s
[info] # Warmup Iteration   5: 16213,702 ops/s
[info] Iteration   1: 15625,008 ops/s
[info]                  ·gc.alloc.rate:               1192,006 MB/sec
[info]                  ·gc.alloc.rate.norm:          120019,470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134594,539 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   2: 16306,753 ops/s
[info]                  ·gc.alloc.rate:               1222,041 MB/sec
[info]                  ·gc.alloc.rate.norm:          117901,871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64515,390 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 16163,723 ops/s
[info]                  ·gc.alloc.rate:                   1264,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              123034,660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130204,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 16215,976 ops/s
[info]                  ·gc.alloc.rate:                   1239,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              120282,992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129868,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343,417 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 16295,645 ops/s
[info]                  ·gc.alloc.rate:                   1233,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              119095,121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129109,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,505 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16121,421 ±(99.9%) 1092,283 ops/s [Average]
[info]   (min, avg, max) = (15625,008, 16121,421, 16306,753), stdev = 283,663
[info]   CI (99.9%): [15029,138, 17213,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1230,306 ±(99.9%) 101,448 MB/sec [Average]
[info]   (min, avg, max) = (1192,006, 1230,306, 1264,060), stdev = 26,346
[info]   CI (99.9%): [1128,858, 1331,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   120066,823 ±(99.9%) 7328,437 B/op [Average]
[info]   (min, avg, max) = (117901,871, 120066,823, 123034,660), stdev = 1903,172
[info]   CI (99.9%): [112738,386, 127395,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1203,827 ±(99.9%) 1151,914 MB/sec [Average]
[info]   (min, avg, max) = (668,695, 1203,827, 1338,659), stdev = 299,148
[info]   CI (99.9%): [51,913, 2355,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117658,480 ±(99.9%) 114692,155 B/op [Average]
[info]   (min, avg, max) = (64515,390, 117658,480, 134594,539), stdev = 29785,189
[info]   CI (99.9%): [2966,325, 232350,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,916 ±(99.9%) 5,895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,916, 3,540), stdev = 1,531
[info]   CI (99.9%): [≈ 0, 6,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   88,790 ±(99.9%) 571,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88,790, 343,417), stdev = 148,513
[info]   CI (99.9%): [≈ 0, 660,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,400, 7,000), stdev = 1,817
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,39% complete, ETA 01:11:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6857,656 ops/s
[info] # Warmup Iteration   2: 16377,409 ops/s
[info] # Warmup Iteration   3: 17290,699 ops/s
[info] # Warmup Iteration   4: 17261,021 ops/s
[info] # Warmup Iteration   5: 17272,853 ops/s
[info] Iteration   1: 17328,548 ops/s
[info]                  ·gc.alloc.rate:                   849,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              77138,420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60979,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,890 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 17303,844 ops/s
[info]                  ·gc.alloc.rate:               846,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          76921,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61071,509 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 17370,920 ops/s
[info]                  ·gc.alloc.rate:               845,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          76591,482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60892,845 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 17338,262 ops/s
[info]                  ·gc.alloc.rate:                   855,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              77624,482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122017,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,779 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 17374,438 ops/s
[info]                  ·gc.alloc.rate:               840,271 MB/sec
[info]                  ·gc.alloc.rate.norm:          76089,783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60882,333 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   17343,202 ±(99.9%) 114,426 ops/s [Average]
[info]   (min, avg, max) = (17303,844, 17343,202, 17374,438), stdev = 29,716
[info]   CI (99.9%): [17228,776, 17457,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   847,411 ±(99.9%) 21,632 MB/sec [Average]
[info]   (min, avg, max) = (840,271, 847,411, 855,480), stdev = 5,618
[info]   CI (99.9%): [825,779, 869,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76873,207 ±(99.9%) 2220,591 B/op [Average]
[info]   (min, avg, max) = (76089,783, 76873,207, 77624,482), stdev = 576,680
[info]   CI (99.9%): [74652,617, 79093,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   806,545 ±(99.9%) 1158,471 MB/sec [Average]
[info]   (min, avg, max) = (671,673, 806,545, 1344,724), stdev = 300,851
[info]   CI (99.9%): [≈ 0, 1965,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   73168,805 ±(99.9%) 105150,772 B/op [Average]
[info]   (min, avg, max) = (60882,333, 73168,805, 122017,436), stdev = 27307,322
[info]   CI (99.9%): [≈ 0, 178319,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,134 ±(99.9%) 6,508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,134, 3,779), stdev = 1,690
[info]   CI (99.9%): [≈ 0, 7,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,59% complete, ETA 01:10:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24458,877 ops/s
[info] # Warmup Iteration   2: 47978,963 ops/s
[info] # Warmup Iteration   3: 48282,290 ops/s
[info] # Warmup Iteration   4: 49461,481 ops/s
[info] # Warmup Iteration   5: 49478,970 ops/s
[info] Iteration   1: 49492,215 ops/s
[info]                  ·gc.alloc.rate:                   1510,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              48004,920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42619,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,662 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 49448,418 ops/s
[info]                  ·gc.alloc.rate:                   1533,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              48727,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63861,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95,770 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 49451,660 ops/s
[info]                  ·gc.alloc.rate:                   1532,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              48773,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42665,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 49481,395 ops/s
[info]                  ·gc.alloc.rate:                   1519,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              48322,380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42564,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,986 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 49631,599 ops/s
[info]                  ·gc.alloc.rate:                   1523,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              48301,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42413,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,980 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   49501,057 ±(99.9%) 290,188 ops/s [Average]
[info]   (min, avg, max) = (49448,418, 49501,057, 49631,599), stdev = 75,361
[info]   CI (99.9%): [49210,870, 49791,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1523,962 ±(99.9%) 37,187 MB/sec [Average]
[info]   (min, avg, max) = (1510,144, 1523,962, 1533,079), stdev = 9,657
[info]   CI (99.9%): [1486,775, 1561,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48425,732 ±(99.9%) 1239,723 B/op [Average]
[info]   (min, avg, max) = (48004,920, 48425,732, 48773,008), stdev = 321,952
[info]   CI (99.9%): [47186,009, 49665,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473,544 ±(99.9%) 1153,123 MB/sec [Average]
[info]   (min, avg, max) = (1338,059, 1473,544, 2009,233), stdev = 299,462
[info]   CI (99.9%): [320,421, 2626,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46824,638 ±(99.9%) 36673,886 B/op [Average]
[info]   (min, avg, max) = (42413,646, 46824,638, 63861,009), stdev = 9524,092
[info]   CI (99.9%): [10150,752, 83498,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,753 ±(99.9%) 4,954 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,753, 3,013), stdev = 1,287
[info]   CI (99.9%): [≈ 0, 5,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23,922 ±(99.9%) 157,453 B/op [Average]
[info]   (min, avg, max) = (0,662, 23,922, 95,770), stdev = 40,890
[info]   CI (99.9%): [≈ 0, 181,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 9,000), stdev = 3,082
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,79% complete, ETA 01:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40449,019 ops/s
[info] # Warmup Iteration   2: 79616,254 ops/s
[info] # Warmup Iteration   3: 82017,213 ops/s
[info] # Warmup Iteration   4: 81691,674 ops/s
[info] # Warmup Iteration   5: 81761,804 ops/s
[info] Iteration   1: 82272,560 ops/s
[info]                  ·gc.alloc.rate:                   1736,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              33197,639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25638,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 82165,360 ops/s
[info]                  ·gc.alloc.rate:                   1760,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              33702,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38521,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 82646,039 ops/s
[info]                  ·gc.alloc.rate:               1744,243 MB/sec
[info]                  ·gc.alloc.rate.norm:          33202,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25472,920 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 82078,025 ops/s
[info]                  ·gc.alloc.rate:               1746,364 MB/sec
[info]                  ·gc.alloc.rate.norm:          33473,865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38434,971 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 82486,409 ops/s
[info]                  ·gc.alloc.rate:               1753,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          33445,744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25508,994 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   82329,678 ±(99.9%) 899,440 ops/s [Average]
[info]   (min, avg, max) = (82078,025, 82329,678, 82646,039), stdev = 233,582
[info]   CI (99.9%): [81430,239, 83229,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1748,062 ±(99.9%) 35,382 MB/sec [Average]
[info]   (min, avg, max) = (1736,050, 1748,062, 1760,169), stdev = 9,189
[info]   CI (99.9%): [1712,680, 1783,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33404,286 ±(99.9%) 814,058 B/op [Average]
[info]   (min, avg, max) = (33197,639, 33404,286, 33702,032), stdev = 211,408
[info]   CI (99.9%): [32590,228, 34218,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606,677 ±(99.9%) 1412,613 MB/sec [Average]
[info]   (min, avg, max) = (1337,379, 1606,677, 2011,873), stdev = 366,851
[info]   CI (99.9%): [194,064, 3019,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30715,344 ±(99.9%) 27288,780 B/op [Average]
[info]   (min, avg, max) = (25472,920, 30715,344, 38521,410), stdev = 7086,809
[info]   CI (99.9%): [3426,565, 58004,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 6,446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,749), stdev = 1,674
[info]   CI (99.9%): [≈ 0, 7,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14,434 ±(99.9%) 123,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,434, 71,773), stdev = 32,054
[info]   CI (99.9%): [≈ 0, 137,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,600, 6,000), stdev = 2,074
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,99% complete, ETA 01:10:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225826,123 ops/s
[info] # Warmup Iteration   2: 316573,639 ops/s
[info] # Warmup Iteration   3: 362787,912 ops/s
[info] # Warmup Iteration   4: 360818,444 ops/s
[info] # Warmup Iteration   5: 362127,806 ops/s
[info] Iteration   1: 361227,399 ops/s
[info]                  ·gc.alloc.rate:               719,507 MB/sec
[info]                  ·gc.alloc.rate.norm:          3133,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2924,087 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 361754,967 ops/s
[info]                  ·gc.alloc.rate:               709,522 MB/sec
[info]                  ·gc.alloc.rate.norm:          3085,781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2921,349 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 360036,463 ops/s
[info]                  ·gc.alloc.rate:               708,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          3095,986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2935,246 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 361928,474 ops/s
[info]                  ·gc.alloc.rate:               709,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          3082,222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2922,761 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 362327,988 ops/s
[info]                  ·gc.alloc.rate:               710,269 MB/sec
[info]                  ·gc.alloc.rate.norm:          3084,156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2919,615 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   361455,058 ±(99.9%) 3411,850 ops/s [Average]
[info]   (min, avg, max) = (360036,463, 361455,058, 362327,988), stdev = 886,047
[info]   CI (99.9%): [358043,208, 364866,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711,368 ±(99.9%) 17,699 MB/sec [Average]
[info]   (min, avg, max) = (708,481, 711,368, 719,507), stdev = 4,596
[info]   CI (99.9%): [693,670, 729,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3096,376 ±(99.9%) 82,980 B/op [Average]
[info]   (min, avg, max) = (3082,222, 3096,376, 3133,732), stdev = 21,550
[info]   CI (99.9%): [3013,396, 3179,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,908 ±(99.9%) 1,733 MB/sec [Average]
[info]   (min, avg, max) = (671,372, 671,908, 672,379), stdev = 0,450
[info]   CI (99.9%): [670,175, 673,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2924,612 ±(99.9%) 23,768 B/op [Average]
[info]   (min, avg, max) = (2919,615, 2924,612, 2935,246), stdev = 6,173
[info]   CI (99.9%): [2900,843, 2948,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,19% complete, ETA 01:10:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224994,029 ops/s
[info] # Warmup Iteration   2: 387314,290 ops/s
[info] # Warmup Iteration   3: 389575,938 ops/s
[info] # Warmup Iteration   4: 396129,581 ops/s
[info] # Warmup Iteration   5: 392004,732 ops/s
[info] Iteration   1: 383484,047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 395430,068 ops/s
[info]                  ·gc.alloc.rate:      7,165 MB/sec
[info]                  ·gc.alloc.rate.norm: 28,507 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 391950,794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 396044,640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 396249,893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   392631,889 ±(99.9%) 20800,030 ops/s [Average]
[info]   (min, avg, max) = (383484,047, 392631,889, 396249,893), stdev = 5401,702
[info]   CI (99.9%): [371831,858, 413431,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,433 ±(99.9%) 12,337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,433, 7,165), stdev = 3,204
[info]   CI (99.9%): [≈ 0, 13,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5,702 ±(99.9%) 49,088 B/op [Average]
[info]   (min, avg, max) = (0,001, 5,702, 28,507), stdev = 12,748
[info]   CI (99.9%): [≈ 0, 54,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,39% complete, ETA 01:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30844,608 ops/s
[info] # Warmup Iteration   2: 71091,141 ops/s
[info] # Warmup Iteration   3: 74064,798 ops/s
[info] # Warmup Iteration   4: 73826,143 ops/s
[info] # Warmup Iteration   5: 73991,335 ops/s
[info] Iteration   1: 73852,400 ops/s
[info]                  ·gc.alloc.rate:                   1717,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              36590,476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42885,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,444 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 73944,732 ops/s
[info]                  ·gc.alloc.rate:                   1703,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              36241,566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28583,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 74422,322 ops/s
[info]                  ·gc.alloc.rate:                   1744,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              36885,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42459,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,321 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 73766,043 ops/s
[info]                  ·gc.alloc.rate:                   1689,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              36042,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28525,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 74586,244 ops/s
[info]                  ·gc.alloc.rate:               1747,003 MB/sec
[info]                  ·gc.alloc.rate.norm:          36848,777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42324,821 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   74114,348 ±(99.9%) 1409,879 ops/s [Average]
[info]   (min, avg, max) = (73766,043, 74114,348, 74586,244), stdev = 366,141
[info]   CI (99.9%): [72704,470, 75524,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1720,585 ±(99.9%) 96,885 MB/sec [Average]
[info]   (min, avg, max) = (1689,968, 1720,585, 1747,003), stdev = 25,161
[info]   CI (99.9%): [1623,701, 1817,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36521,763 ±(99.9%) 1429,794 B/op [Average]
[info]   (min, avg, max) = (36042,897, 36521,763, 36885,096), stdev = 371,313
[info]   CI (99.9%): [35091,969, 37951,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741,871 ±(99.9%) 1411,065 MB/sec [Average]
[info]   (min, avg, max) = (1337,473, 1741,871, 2013,181), stdev = 366,449
[info]   CI (99.9%): [330,806, 3152,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36955,738 ±(99.9%) 29542,311 B/op [Average]
[info]   (min, avg, max) = (28525,042, 36955,738, 42885,063), stdev = 7672,044
[info]   CI (99.9%): [7413,427, 66498,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,804 ±(99.9%) 6,520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 3,832), stdev = 1,693
[info]   CI (99.9%): [≈ 0, 7,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17,102 ±(99.9%) 138,717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17,102, 81,527), stdev = 36,024
[info]   CI (99.9%): [≈ 0, 155,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,387
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,59% complete, ETA 01:09:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11248,485 ops/s
[info] # Warmup Iteration   2: 16629,528 ops/s
[info] # Warmup Iteration   3: 16606,336 ops/s
[info] # Warmup Iteration   4: 16705,377 ops/s
[info] # Warmup Iteration   5: 16472,268 ops/s
[info] Iteration   1: 16546,028 ops/s
[info]                  ·gc.alloc.rate:               675,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          64229,965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63833,252 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 16501,047 ops/s
[info]                  ·gc.alloc.rate:               695,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          66303,545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64039,055 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 15565,387 ops/s
[info]                  ·gc.alloc.rate:               646,834 MB/sec
[info]                  ·gc.alloc.rate.norm:          65376,770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67889,049 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 16600,968 ops/s
[info]                  ·gc.alloc.rate:                   677,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              64237,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63720,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,947 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 16592,153 ops/s
[info]                  ·gc.alloc.rate:               677,532 MB/sec
[info]                  ·gc.alloc.rate.norm:          64242,221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63751,096 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   16361,117 ±(99.9%) 1719,761 ops/s [Average]
[info]   (min, avg, max) = (15565,387, 16361,117, 16600,968), stdev = 446,616
[info]   CI (99.9%): [14641,356, 18080,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   674,629 ±(99.9%) 67,383 MB/sec [Average]
[info]   (min, avg, max) = (646,834, 674,629, 695,436), stdev = 17,499
[info]   CI (99.9%): [607,246, 742,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   64877,904 ±(99.9%) 3610,156 B/op [Average]
[info]   (min, avg, max) = (64229,965, 64877,904, 66303,545), stdev = 937,546
[info]   CI (99.9%): [61267,748, 68488,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671,890 ±(99.9%) 1,745 MB/sec [Average]
[info]   (min, avg, max) = (671,348, 671,890, 672,372), stdev = 0,453
[info]   CI (99.9%): [670,145, 673,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   64646,566 ±(99.9%) 6996,085 B/op [Average]
[info]   (min, avg, max) = (63720,380, 64646,566, 67889,049), stdev = 1816,861
[info]   CI (99.9%): [57650,482, 71642,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,789 ±(99.9%) 6,797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,789, 3,947), stdev = 1,765
[info]   CI (99.9%): [≈ 0, 7,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,79% complete, ETA 01:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68275,351 ops/s
[info] # Warmup Iteration   2: 151934,768 ops/s
[info] # Warmup Iteration   3: 157959,705 ops/s
[info] # Warmup Iteration   4: 154530,353 ops/s
[info] # Warmup Iteration   5: 158633,305 ops/s
[info] Iteration   1: 160871,014 ops/s
[info]                  ·gc.alloc.rate:                   2091,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              20455,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19714,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 161636,499 ops/s
[info]                  ·gc.alloc.rate:                   2114,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              20583,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19568,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,811 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 158641,520 ops/s
[info]                  ·gc.alloc.rate:               2091,890 MB/sec
[info]                  ·gc.alloc.rate.norm:          20745,521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19924,603 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 161362,724 ops/s
[info]                  ·gc.alloc.rate:                   2112,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              20598,319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19595,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 157500,377 ops/s
[info]                  ·gc.alloc.rate:               2077,556 MB/sec
[info]                  ·gc.alloc.rate.norm:          20754,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20119,607 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   160002,427 ±(99.9%) 7044,511 ops/s [Average]
[info]   (min, avg, max) = (157500,377, 160002,427, 161636,499), stdev = 1829,437
[info]   CI (99.9%): [152957,915, 167046,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2097,711 ±(99.9%) 60,649 MB/sec [Average]
[info]   (min, avg, max) = (2077,556, 2097,711, 2114,773), stdev = 15,750
[info]   CI (99.9%): [2037,062, 2158,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20627,386 ±(99.9%) 481,746 B/op [Average]
[info]   (min, avg, max) = (20455,019, 20627,386, 20754,556), stdev = 125,108
[info]   CI (99.9%): [20145,640, 21109,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011,858 ±(99.9%) 11,312 MB/sec [Average]
[info]   (min, avg, max) = (2009,112, 2011,858, 2015,897), stdev = 2,938
[info]   CI (99.9%): [2000,546, 2023,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19784,417 ±(99.9%) 901,808 B/op [Average]
[info]   (min, avg, max) = (19568,213, 19784,417, 20119,607), stdev = 234,197
[info]   CI (99.9%): [18882,609, 20686,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,762 ±(99.9%) 6,340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,762, 3,707), stdev = 1,646
[info]   CI (99.9%): [≈ 0, 7,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,453 ±(99.9%) 62,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,453, 36,251), stdev = 16,102
[info]   CI (99.9%): [≈ 0, 69,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47,99% complete, ETA 01:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5252,967 ops/s
[info] # Warmup Iteration   2: 915930,908 ops/s
[info] # Warmup Iteration   3: 938951,397 ops/s
[info] # Warmup Iteration   4: 938698,605 ops/s
[info] # Warmup Iteration   5: 934172,029 ops/s
[info] Iteration   1: 935580,957 ops/s
[info]                  ·gc.alloc.rate:                   542,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 939224,689 ops/s
[info]                  ·gc.alloc.rate:               535,494 MB/sec
[info]                  ·gc.alloc.rate.norm:          896,937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1115,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 938768,439 ops/s
[info]                  ·gc.alloc.rate:      520,345 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 937772,106 ops/s
[info]                  ·gc.alloc.rate:               536,678 MB/sec
[info]                  ·gc.alloc.rate.norm:          900,325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1118,015 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 853458,351 ops/s
[info]                  ·gc.alloc.rate:                   490,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   920960,909 ±(99.9%) 145404,915 ops/s [Average]
[info]   (min, avg, max) = (853458,351, 920960,909, 939224,689), stdev = 37761,195
[info]   CI (99.9%): [775555,993, 1066365,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   525,178 ±(99.9%) 80,435 MB/sec [Average]
[info]   (min, avg, max) = (490,810, 525,178, 542,561), stdev = 20,889
[info]   CI (99.9%): [444,742, 605,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   897,259 ±(99.9%) 58,711 B/op [Average]
[info]   (min, avg, max) = (872,001, 897,259, 912,319), stdev = 15,247
[info]   CI (99.9%): [838,548, 955,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533,022 ±(99.9%) 1147,370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533,022, 666,445), stdev = 297,968
[info]   CI (99.9%): [≈ 0, 1680,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   916,454 ±(99.9%) 1981,335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 916,454, 1228,466), stdev = 514,546
[info]   CI (99.9%): [≈ 0, 2897,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,038), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,19% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191583,407 ops/s
[info] # Warmup Iteration   2: 423311,397 ops/s
[info] # Warmup Iteration   3: 433044,019 ops/s
[info] # Warmup Iteration   4: 433912,463 ops/s
[info] # Warmup Iteration   5: 432372,112 ops/s
[info] Iteration   1: 431755,130 ops/s
[info]                  ·gc.alloc.rate:               445,681 MB/sec
[info]                  ·gc.alloc.rate.norm:          1623,991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1864,800 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 435762,161 ops/s
[info]                  ·gc.alloc.rate:      434,307 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 432963,779 ops/s
[info]                  ·gc.alloc.rate:               448,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          1628,226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2421,340 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 381198,262 ops/s
[info]                  ·gc.alloc.rate:                   398,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1644,422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2750,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 434062,214 ops/s
[info]                  ·gc.alloc.rate:      432,655 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,234 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   423148,309 ±(99.9%) 90478,864 ops/s [Average]
[info]   (min, avg, max) = (381198,262, 423148,309, 435762,161), stdev = 23497,074
[info]   CI (99.9%): [332669,445, 513627,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   431,829 ±(99.9%) 76,475 MB/sec [Average]
[info]   (min, avg, max) = (398,432, 431,829, 448,067), stdev = 19,860
[info]   CI (99.9%): [355,354, 508,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1606,575 ±(99.9%) 138,335 B/op [Average]
[info]   (min, avg, max) = (1568,001, 1606,575, 1644,422), stdev = 35,925
[info]   CI (99.9%): [1468,240, 1744,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368,889 ±(99.9%) 1319,267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368,889, 666,354), stdev = 342,609
[info]   CI (99.9%): [≈ 0, 1688,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1407,268 ±(99.9%) 5094,630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1407,268, 2750,197), stdev = 1323,059
[info]   CI (99.9%): [≈ 0, 6501,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,086), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 4,000), stdev = 1,871
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,39% complete, ETA 01:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 916443,344 ops/s
[info] # Warmup Iteration   2: 1225336,933 ops/s
[info] # Warmup Iteration   3: 1272458,290 ops/s
[info] # Warmup Iteration   4: 1267525,006 ops/s
[info] # Warmup Iteration   5: 1268264,695 ops/s
[info] Iteration   1: 1260228,713 ops/s
[info]                  ·gc.alloc.rate:               454,404 MB/sec
[info]                  ·gc.alloc.rate.norm:          567,274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 638,918 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1280202,765 ops/s
[info]                  ·gc.alloc.rate:               461,229 MB/sec
[info]                  ·gc.alloc.rate.norm:          566,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 824,678 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1277699,143 ops/s
[info]                  ·gc.alloc.rate:      441,789 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1260950,648 ops/s
[info]                  ·gc.alloc.rate:               459,292 MB/sec
[info]                  ·gc.alloc.rate.norm:          573,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 837,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1277449,179 ops/s
[info]                  ·gc.alloc.rate:      454,902 MB/sec
[info]                  ·gc.alloc.rate.norm: 560,257 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1271306,090 ±(99.9%) 37909,924 ops/s [Average]
[info]   (min, avg, max) = (1260228,713, 1271306,090, 1280202,765), stdev = 9845,087
[info]   CI (99.9%): [1233396,165, 1309216,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   454,323 ±(99.9%) 29,188 MB/sec [Average]
[info]   (min, avg, max) = (441,789, 454,323, 461,229), stdev = 7,580
[info]   CI (99.9%): [425,136, 483,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562,284 ±(99.9%) 43,050 B/op [Average]
[info]   (min, avg, max) = (544,000, 562,284, 573,051), stdev = 11,180
[info]   CI (99.9%): [519,234, 605,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370,773 ±(99.9%) 1327,141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,773, 671,039), stdev = 344,654
[info]   CI (99.9%): [≈ 0, 1697,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   460,168 ±(99.9%) 1645,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 460,168, 837,244), stdev = 427,351
[info]   CI (99.9%): [≈ 0, 2105,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,59% complete, ETA 01:08:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16882,842 ops/s
[info] # Warmup Iteration   2: 75729,692 ops/s
[info] # Warmup Iteration   3: 84841,022 ops/s
[info] # Warmup Iteration   4: 86678,139 ops/s
[info] # Warmup Iteration   5: 87443,434 ops/s
[info] Iteration   1: 87153,835 ops/s
[info]                  ·gc.alloc.rate:               3523,319 MB/sec
[info]                  ·gc.alloc.rate.norm:          63600,708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3337,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60253,034 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 87209,789 ops/s
[info]                  ·gc.alloc.rate:                   3527,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              63627,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60408,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,376 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 87692,031 ops/s
[info]                  ·gc.alloc.rate:               3548,744 MB/sec
[info]                  ·gc.alloc.rate.norm:          63665,512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60313,832 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 87192,941 ops/s
[info]                  ·gc.alloc.rate:               3529,047 MB/sec
[info]                  ·gc.alloc.rate.norm:          63674,742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60904,722 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 87249,966 ops/s
[info]                  ·gc.alloc.rate:                   3531,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              63679,374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61021,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   87299,712 ±(99.9%) 854,885 ops/s [Average]
[info]   (min, avg, max) = (87153,835, 87299,712, 87692,031), stdev = 222,011
[info]   CI (99.9%): [86444,827, 88154,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3531,911 ±(99.9%) 37,983 MB/sec [Average]
[info]   (min, avg, max) = (3523,319, 3531,911, 3548,744), stdev = 9,864
[info]   CI (99.9%): [3493,928, 3569,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63649,481 ±(99.9%) 131,566 B/op [Average]
[info]   (min, avg, max) = (63600,708, 63649,481, 63679,374), stdev = 34,167
[info]   CI (99.9%): [63517,916, 63781,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3361,580 ±(99.9%) 72,717 MB/sec [Average]
[info]   (min, avg, max) = (3337,866, 3361,580, 3383,974), stdev = 18,884
[info]   CI (99.9%): [3288,864, 3434,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60580,162 ±(99.9%) 1371,396 B/op [Average]
[info]   (min, avg, max) = (60253,034, 60580,162, 61021,144), stdev = 356,147
[info]   CI (99.9%): [59208,766, 61951,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,150 ±(99.9%) 0,792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,150, 0,376), stdev = 0,206
[info]   CI (99.9%): [≈ 0, 0,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,80% complete, ETA 01:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160292,211 ops/s
[info] # Warmup Iteration   2: 307063,102 ops/s
[info] # Warmup Iteration   3: 295828,684 ops/s
[info] # Warmup Iteration   4: 316805,115 ops/s
[info] # Warmup Iteration   5: 316369,727 ops/s
[info] Iteration   1: 317732,856 ops/s
[info]                  ·gc.alloc.rate:               1587,162 MB/sec
[info]                  ·gc.alloc.rate.norm:          7858,970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6620,498 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 315002,103 ops/s
[info]                  ·gc.alloc.rate:                   1588,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              7935,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10025,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 317721,202 ops/s
[info]                  ·gc.alloc.rate:               1587,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          7862,169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6635,513 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 318363,039 ops/s
[info]                  ·gc.alloc.rate:               1591,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          7863,183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6635,369 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 314455,702 ops/s
[info]                  ·gc.alloc.rate:               1586,248 MB/sec
[info]                  ·gc.alloc.rate.norm:          7935,823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10094,195 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   316654,980 ±(99.9%) 6884,187 ops/s [Average]
[info]   (min, avg, max) = (314455,702, 316654,980, 318363,039), stdev = 1787,802
[info]   CI (99.9%): [309770,793, 323539,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1588,211 ±(99.9%) 7,241 MB/sec [Average]
[info]   (min, avg, max) = (1586,248, 1588,211, 1591,169), stdev = 1,880
[info]   CI (99.9%): [1580,970, 1595,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7891,047 ±(99.9%) 156,224 B/op [Average]
[info]   (min, avg, max) = (7858,970, 7891,047, 7935,823), stdev = 40,571
[info]   CI (99.9%): [7734,823, 8047,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1608,957 ±(99.9%) 1418,566 MB/sec [Average]
[info]   (min, avg, max) = (1337,046, 1608,957, 2017,673), stdev = 368,397
[info]   CI (99.9%): [190,391, 3027,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8002,292 ±(99.9%) 7233,910 B/op [Average]
[info]   (min, avg, max) = (6620,498, 8002,292, 10094,195), stdev = 1878,623
[info]   CI (99.9%): [768,382, 15236,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,00% complete, ETA 01:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85595,204 ops/s
[info] # Warmup Iteration   2: 281171,991 ops/s
[info] # Warmup Iteration   3: 297692,543 ops/s
[info] # Warmup Iteration   4: 297126,277 ops/s
[info] # Warmup Iteration   5: 297087,113 ops/s
[info] Iteration   1: 296965,884 ops/s
[info]                  ·gc.alloc.rate:                   1815,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              9617,584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10663,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 298683,272 ops/s
[info]                  ·gc.alloc.rate:                   1823,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              9603,544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10600,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 299290,984 ops/s
[info]                  ·gc.alloc.rate:               1815,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          9542,693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7037,658 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 297898,901 ops/s
[info]                  ·gc.alloc.rate:               1816,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          9593,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10600,600 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 298995,008 ops/s
[info]                  ·gc.alloc.rate:               1813,752 MB/sec
[info]                  ·gc.alloc.rate.norm:          9543,413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7041,141 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   298366,810 ±(99.9%) 3617,562 ops/s [Average]
[info]   (min, avg, max) = (296965,884, 298366,810, 299290,984), stdev = 939,469
[info]   CI (99.9%): [294749,248, 301984,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1816,863 ±(99.9%) 14,250 MB/sec [Average]
[info]   (min, avg, max) = (1813,752, 1816,863, 1823,243), stdev = 3,701
[info]   CI (99.9%): [1802,612, 1831,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9580,047 ±(99.9%) 134,308 B/op [Average]
[info]   (min, avg, max) = (9542,693, 9580,047, 9617,584), stdev = 34,879
[info]   CI (99.9%): [9445,739, 9714,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741,927 ±(99.9%) 1418,048 MB/sec [Average]
[info]   (min, avg, max) = (1338,188, 1741,927, 2012,798), stdev = 368,263
[info]   CI (99.9%): [323,879, 3159,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9188,634 ±(99.9%) 7555,513 B/op [Average]
[info]   (min, avg, max) = (7037,658, 9188,634, 10663,479), stdev = 1962,143
[info]   CI (99.9%): [1633,121, 16744,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,746 ±(99.9%) 6,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,746, 3,686), stdev = 1,644
[info]   CI (99.9%): [≈ 0, 7,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,927 ±(99.9%) 33,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,927, 19,415), stdev = 8,658
[info]   CI (99.9%): [≈ 0, 37,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,20% complete, ETA 01:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,790 ops/s
[info] # Warmup Iteration   2: 1307058,402 ops/s
[info] # Warmup Iteration   3: 1338673,639 ops/s
[info] # Warmup Iteration   4: 1371517,818 ops/s
[info] # Warmup Iteration   5: 1370872,221 ops/s
[info] Iteration   1: 1368903,083 ops/s
[info]                  ·gc.alloc.rate:               481,480 MB/sec
[info]                  ·gc.alloc.rate.norm:          553,356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 765,476 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1366416,780 ops/s
[info]                  ·gc.alloc.rate:      465,519 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1368041,088 ops/s
[info]                  ·gc.alloc.rate:               490,833 MB/sec
[info]                  ·gc.alloc.rate.norm:          564,464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 766,002 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1367477,915 ops/s
[info]                  ·gc.alloc.rate:                   488,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              561,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1373846,905 ops/s
[info]                  ·gc.alloc.rate:      468,078 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1368937,154 ±(99.9%) 11125,531 ops/s [Average]
[info]   (min, avg, max) = (1366416,780, 1368937,154, 1373846,905), stdev = 2889,265
[info]   CI (99.9%): [1357811,623, 1380062,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   478,843 ±(99.9%) 44,477 MB/sec [Average]
[info]   (min, avg, max) = (465,519, 478,843, 490,833), stdev = 11,551
[info]   CI (99.9%): [434,366, 523,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   550,316 ±(99.9%) 52,735 B/op [Average]
[info]   (min, avg, max) = (536,000, 550,316, 564,464), stdev = 13,695
[info]   CI (99.9%): [497,581, 603,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399,715 ±(99.9%) 1405,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399,715, 666,449), stdev = 364,889
[info]   CI (99.9%): [≈ 0, 1804,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   459,636 ±(99.9%) 1615,685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 459,636, 766,701), stdev = 419,588
[info]   CI (99.9%): [≈ 0, 2075,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,40% complete, ETA 01:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895634,446 ops/s
[info] # Warmup Iteration   2: 1653675,045 ops/s
[info] # Warmup Iteration   3: 1692848,904 ops/s
[info] # Warmup Iteration   4: 1736489,279 ops/s
[info] # Warmup Iteration   5: 1656912,514 ops/s
[info] Iteration   1: 1703886,157 ops/s
[info]                  ·gc.alloc.rate:               1022,376 MB/sec
[info]                  ·gc.alloc.rate.norm:          944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 617,475 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1676996,808 ops/s
[info]                  ·gc.alloc.rate:                   1017,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              954,834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 1721346,450 ops/s
[info]                  ·gc.alloc.rate:               1027,515 MB/sec
[info]                  ·gc.alloc.rate.norm:          939,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1733539,698 ops/s
[info]                  ·gc.alloc.rate:               1055,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          957,656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1216,203 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 1730209,347 ops/s
[info]                  ·gc.alloc.rate:               1035,893 MB/sec
[info]                  ·gc.alloc.rate.norm:          941,941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609,573 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1713195,692 ±(99.9%) 89621,712 ops/s [Average]
[info]   (min, avg, max) = (1676996,808, 1713195,692, 1733539,698), stdev = 23274,474
[info]   CI (99.9%): [1623573,980, 1802817,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1031,765 ±(99.9%) 56,747 MB/sec [Average]
[info]   (min, avg, max) = (1017,808, 1031,765, 1055,231), stdev = 14,737
[info]   CI (99.9%): [975,018, 1088,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   947,514 ±(99.9%) 31,640 B/op [Average]
[info]   (min, avg, max) = (939,128, 947,514, 957,656), stdev = 8,217
[info]   CI (99.9%): [915,875, 979,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   937,428 ±(99.9%) 1412,113 MB/sec [Average]
[info]   (min, avg, max) = (668,732, 937,428, 1340,121), stdev = 366,721
[info]   CI (99.9%): [≈ 0, 2349,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   862,151 ±(99.9%) 1314,529 B/op [Average]
[info]   (min, avg, max) = (609,573, 862,151, 1255,381), stdev = 341,379
[info]   CI (99.9%): [≈ 0, 2176,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 6,000), stdev = 1,817
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,60% complete, ETA 01:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1107933,258 ops/s
[info] # Warmup Iteration   2: 2046096,490 ops/s
[info] # Warmup Iteration   3: 2090673,287 ops/s
[info] # Warmup Iteration   4: 2092160,242 ops/s
[info] # Warmup Iteration   5: 2090187,343 ops/s
[info] Iteration   1: 2102080,269 ops/s
[info]                  ·gc.alloc.rate:               738,245 MB/sec
[info]                  ·gc.alloc.rate.norm:          552,530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 502,214 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2104088,352 ops/s
[info]                  ·gc.alloc.rate:               739,311 MB/sec
[info]                  ·gc.alloc.rate.norm:          552,794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 502,235 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 2097056,567 ops/s
[info]                  ·gc.alloc.rate:               731,310 MB/sec
[info]                  ·gc.alloc.rate.norm:          548,627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 503,920 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 2082080,502 ops/s
[info]                  ·gc.alloc.rate:                   724,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              547,584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   5: 2106021,695 ops/s
[info]                  ·gc.alloc.rate:               732,160 MB/sec
[info]                  ·gc.alloc.rate.norm:          546,959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 502,283 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2098265,477 ±(99.9%) 37135,877 ops/s [Average]
[info]   (min, avg, max) = (2082080,502, 2098265,477, 2106021,695), stdev = 9644,069
[info]   CI (99.9%): [2061129,600, 2135401,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   733,147 ±(99.9%) 22,741 MB/sec [Average]
[info]   (min, avg, max) = (724,710, 733,147, 739,311), stdev = 5,906
[info]   CI (99.9%): [710,406, 755,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   549,699 ±(99.9%) 10,672 B/op [Average]
[info]   (min, avg, max) = (546,959, 549,699, 552,794), stdev = 2,771
[info]   CI (99.9%): [539,027, 560,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,847 ±(99.9%) 2,238 MB/sec [Average]
[info]   (min, avg, max) = (671,017, 671,847, 672,448), stdev = 0,581
[info]   CI (99.9%): [669,609, 674,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   503,750 ±(99.9%) 9,763 B/op [Average]
[info]   (min, avg, max) = (502,214, 503,750, 508,095), stdev = 2,535
[info]   CI (99.9%): [493,986, 513,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 8,000), stdev = 2,608
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,80% complete, ETA 01:06:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1451704,916 ops/s
[info] # Warmup Iteration   2: 2244965,844 ops/s
[info] # Warmup Iteration   3: 2258290,799 ops/s
[info] # Warmup Iteration   4: 2260873,362 ops/s
[info] # Warmup Iteration   5: 2258898,125 ops/s
[info] Iteration   1: 2256801,440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2257008,979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2261592,284 ops/s
[info]                  ·gc.alloc.rate:      0,056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2257498,867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2256012,503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2257782,814 ±(99.9%) 8455,782 ops/s [Average]
[info]   (min, avg, max) = (2256012,503, 2257782,814, 2261592,284), stdev = 2195,940
[info]   CI (99.9%): [2249327,032, 2266238,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,011 ±(99.9%) 0,095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,011, 0,056), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,008 ±(99.9%) 0,066 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,008, 0,039), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,00% complete, ETA 01:06:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13533,216 ops/s
[info] # Warmup Iteration   2: 44259,561 ops/s
[info] # Warmup Iteration   3: 46239,301 ops/s
[info] # Warmup Iteration   4: 46598,668 ops/s
[info] # Warmup Iteration   5: 46516,687 ops/s
[info] Iteration   1: 46661,922 ops/s
[info]                  ·gc.alloc.rate:                   2314,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              78056,595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67740,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,383 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 46111,092 ops/s
[info]                  ·gc.alloc.rate:                   2313,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              78927,313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68387,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,842 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 46811,531 ops/s
[info]                  ·gc.alloc.rate:                   2351,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              79030,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89841,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,400 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 46860,361 ops/s
[info]                  ·gc.alloc.rate:                   2339,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              78543,365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67416,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 46744,545 ops/s
[info]                  ·gc.alloc.rate:               2334,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          78580,857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67753,520 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   46637,890 ±(99.9%) 1169,724 ops/s [Average]
[info]   (min, avg, max) = (46111,092, 46637,890, 46860,361), stdev = 303,774
[info]   CI (99.9%): [45468,166, 47807,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2330,768 ±(99.9%) 63,204 MB/sec [Average]
[info]   (min, avg, max) = (2313,347, 2330,768, 2351,491), stdev = 16,414
[info]   CI (99.9%): [2267,563, 2393,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78627,717 ±(99.9%) 1475,668 B/op [Average]
[info]   (min, avg, max) = (78056,595, 78627,717, 79030,458), stdev = 383,226
[info]   CI (99.9%): [77152,050, 80103,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2141,512 ±(99.9%) 1144,463 MB/sec [Average]
[info]   (min, avg, max) = (2004,438, 2141,512, 2673,155), stdev = 297,213
[info]   CI (99.9%): [997,049, 3285,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72227,960 ±(99.9%) 37937,949 B/op [Average]
[info]   (min, avg, max) = (67416,607, 72227,960, 89841,150), stdev = 9852,365
[info]   CI (99.9%): [34290,011, 110165,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,196 ±(99.9%) 1,332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,196, 0,812), stdev = 0,346
[info]   CI (99.9%): [≈ 0, 1,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,605 ±(99.9%) 44,894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,605, 27,383), stdev = 11,659
[info]   CI (99.9%): [≈ 0, 51,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,095
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,20% complete, ETA 01:06:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94484,654 ops/s
[info] # Warmup Iteration   2: 157005,580 ops/s
[info] # Warmup Iteration   3: 156650,727 ops/s
[info] # Warmup Iteration   4: 158415,925 ops/s
[info] # Warmup Iteration   5: 158467,694 ops/s
[info] Iteration   1: 157374,390 ops/s
[info]                  ·gc.alloc.rate:               1227,506 MB/sec
[info]                  ·gc.alloc.rate.norm:          12271,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6722,025 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 158502,951 ops/s
[info]                  ·gc.alloc.rate:                   1250,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              12410,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13354,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,413 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 158498,586 ops/s
[info]                  ·gc.alloc.rate:               1259,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          12506,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13361,532 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 158325,030 ops/s
[info]                  ·gc.alloc.rate:                   1261,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              12534,581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13382,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,488 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 158664,571 ops/s
[info]                  ·gc.alloc.rate:                   1249,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13321,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   158273,105 ±(99.9%) 1989,055 ops/s [Average]
[info]   (min, avg, max) = (157374,390, 158273,105, 158664,571), stdev = 516,551
[info]   CI (99.9%): [156284,050, 160262,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1249,799 ±(99.9%) 52,202 MB/sec [Average]
[info]   (min, avg, max) = (1227,506, 1249,799, 1261,428), stdev = 13,557
[info]   CI (99.9%): [1197,598, 1302,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12423,033 ±(99.9%) 402,191 B/op [Average]
[info]   (min, avg, max) = (12271,018, 12423,033, 12534,581), stdev = 104,448
[info]   CI (99.9%): [12020,842, 12825,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,830 ±(99.9%) 1158,970 MB/sec [Average]
[info]   (min, avg, max) = (672,424, 1210,830, 1346,751), stdev = 300,981
[info]   CI (99.9%): [51,860, 2369,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12028,369 ±(99.9%) 11422,618 B/op [Average]
[info]   (min, avg, max) = (6722,025, 12028,369, 13382,414), stdev = 2966,418
[info]   CI (99.9%): [605,750, 23450,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,687 ±(99.9%) 5,562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,269), stdev = 1,444
[info]   CI (99.9%): [≈ 0, 6,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,828 ±(99.9%) 55,269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,828, 32,488), stdev = 14,353
[info]   CI (99.9%): [≈ 0, 62,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,40% complete, ETA 01:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5212,778 ops/s
[info] # Warmup Iteration   2: 16088,066 ops/s
[info] # Warmup Iteration   3: 17345,838 ops/s
[info] # Warmup Iteration   4: 17317,494 ops/s
[info] # Warmup Iteration   5: 17203,364 ops/s
[info] Iteration   1: 17141,142 ops/s
[info]                  ·gc.alloc.rate:                   2124,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              194959,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185068,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 321,086 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 16955,459 ops/s
[info]                  ·gc.alloc.rate:                   2094,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              194325,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186530,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 17159,726 ops/s
[info]                  ·gc.alloc.rate:                   2119,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              194356,295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245588,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,259 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 17202,450 ops/s
[info]                  ·gc.alloc.rate:                   2097,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              191784,408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183863,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,904 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 16971,746 ops/s
[info]                  ·gc.alloc.rate:                   2080,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              192903,432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186705,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,791 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17086,105 ±(99.9%) 439,597 ops/s [Average]
[info]   (min, avg, max) = (16955,459, 17086,105, 17202,450), stdev = 114,162
[info]   CI (99.9%): [16646,508, 17525,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2103,260 ±(99.9%) 70,547 MB/sec [Average]
[info]   (min, avg, max) = (2080,686, 2103,260, 2124,200), stdev = 18,321
[info]   CI (99.9%): [2032,712, 2173,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   193665,749 ±(99.9%) 4985,559 B/op [Average]
[info]   (min, avg, max) = (191784,408, 193665,749, 194959,000), stdev = 1294,734
[info]   CI (99.9%): [188680,190, 198651,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145,971 ±(99.9%) 1146,860 MB/sec [Average]
[info]   (min, avg, max) = (2010,368, 2145,971, 2678,737), stdev = 297,836
[info]   CI (99.9%): [999,111, 3292,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   197551,020 ±(99.9%) 103499,855 B/op [Average]
[info]   (min, avg, max) = (183863,408, 197551,020, 245588,180), stdev = 26878,584
[info]   CI (99.9%): [94051,165, 301050,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,889 ±(99.9%) 5,694 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,889, 3,498), stdev = 1,479
[info]   CI (99.9%): [≈ 0, 6,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   81,659 ±(99.9%) 522,464 B/op [Average]
[info]   (min, avg, max) = (1,904, 81,659, 321,086), stdev = 135,682
[info]   CI (99.9%): [≈ 0, 604,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 7,000), stdev = 1,789
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,60% complete, ETA 01:05:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49781,714 ops/s
[info] # Warmup Iteration   2: 91751,734 ops/s
[info] # Warmup Iteration   3: 97466,849 ops/s
[info] # Warmup Iteration   4: 101602,021 ops/s
[info] # Warmup Iteration   5: 101378,555 ops/s
[info] Iteration   1: 101620,948 ops/s
[info]                  ·gc.alloc.rate:                   1357,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              21011,462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20721,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 99260,802 ops/s
[info]                  ·gc.alloc.rate:                   1347,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              21361,995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21225,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,330 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 101122,044 ops/s
[info]                  ·gc.alloc.rate:                   1347,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              20971,909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20849,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,571 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 100599,545 ops/s
[info]                  ·gc.alloc.rate:                   1349,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              21110,794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20936,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,981 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 100749,828 ops/s
[info]                  ·gc.alloc.rate:                   1352,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              21117,738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20863,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,626 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   100670,633 ±(99.9%) 3393,059 ops/s [Average]
[info]   (min, avg, max) = (99260,802, 100670,633, 101620,948), stdev = 881,167
[info]   CI (99.9%): [97277,574, 104063,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1351,058 ±(99.9%) 15,051 MB/sec [Average]
[info]   (min, avg, max) = (1347,836, 1351,058, 1357,248), stdev = 3,909
[info]   CI (99.9%): [1336,006, 1366,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21114,780 ±(99.9%) 584,697 B/op [Average]
[info]   (min, avg, max) = (20971,909, 21114,780, 21361,995), stdev = 151,844
[info]   CI (99.9%): [20530,083, 21699,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,541 ±(99.9%) 5,796 MB/sec [Average]
[info]   (min, avg, max) = (1336,082, 1338,541, 1340,132), stdev = 1,505
[info]   CI (99.9%): [1332,745, 1344,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20919,461 ±(99.9%) 722,469 B/op [Average]
[info]   (min, avg, max) = (20721,847, 20919,461, 21225,230), stdev = 187,623
[info]   CI (99.9%): [20196,992, 21641,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,862 ±(99.9%) 5,225 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,862, 3,186), stdev = 1,357
[info]   CI (99.9%): [≈ 0, 6,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13,431 ±(99.9%) 81,297 B/op [Average]
[info]   (min, avg, max) = (0,330, 13,431, 49,571), stdev = 21,113
[info]   CI (99.9%): [≈ 0, 94,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,80% complete, ETA 01:05:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137617,311 ops/s
[info] # Warmup Iteration   2: 274989,759 ops/s
[info] # Warmup Iteration   3: 284829,497 ops/s
[info] # Warmup Iteration   4: 284537,474 ops/s
[info] # Warmup Iteration   5: 272342,214 ops/s
[info] Iteration   1: 275256,793 ops/s
[info]                  ·gc.alloc.rate:                   937,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              5357,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7678,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 285528,289 ops/s
[info]                  ·gc.alloc.rate:               946,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          5215,179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3704,800 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 272213,490 ops/s
[info]                  ·gc.alloc.rate:                   900,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              5204,357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3886,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 284732,857 ops/s
[info]                  ·gc.alloc.rate:                   955,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              5278,183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7434,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 285149,865 ops/s
[info]                  ·gc.alloc.rate:               954,875 MB/sec
[info]                  ·gc.alloc.rate.norm:          5268,247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3713,557 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   280576,259 ±(99.9%) 24425,834 ops/s [Average]
[info]   (min, avg, max) = (272213,490, 280576,259, 285528,289), stdev = 6343,312
[info]   CI (99.9%): [256150,424, 305002,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   938,883 ±(99.9%) 87,361 MB/sec [Average]
[info]   (min, avg, max) = (900,506, 938,883, 955,290), stdev = 22,687
[info]   CI (99.9%): [851,522, 1026,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5264,603 ±(99.9%) 234,358 B/op [Average]
[info]   (min, avg, max) = (5204,357, 5264,603, 5357,052), stdev = 60,862
[info]   CI (99.9%): [5030,246, 5498,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,351 ±(99.9%) 1416,858 MB/sec [Average]
[info]   (min, avg, max) = (672,397, 941,351, 1345,524), stdev = 367,954
[info]   CI (99.9%): [≈ 0, 2358,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5283,427 ±(99.9%) 8001,188 B/op [Average]
[info]   (min, avg, max) = (3704,800, 5283,427, 7678,276), stdev = 2077,883
[info]   CI (99.9%): [≈ 0, 13284,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,095 ±(99.9%) 0,383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,095, 0,238), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,643
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,00% complete, ETA 01:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3753,550 ops/s
[info] # Warmup Iteration   2: 12885,903 ops/s
[info] # Warmup Iteration   3: 13929,303 ops/s
[info] # Warmup Iteration   4: 13940,161 ops/s
[info] # Warmup Iteration   5: 13901,675 ops/s
[info] Iteration   1: 13861,626 ops/s
[info]                  ·gc.alloc.rate:                   2218,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              251800,975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228033,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498,705 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 13944,204 ops/s
[info]                  ·gc.alloc.rate:                   2260,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              255044,590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301182,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,699 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 13916,272 ops/s
[info]                  ·gc.alloc.rate:               2232,509 MB/sec
[info]                  ·gc.alloc.rate.norm:          252399,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 226228,445 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 13845,731 ops/s
[info]                  ·gc.alloc.rate:                   2245,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              255148,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227712,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 13927,347 ops/s
[info]                  ·gc.alloc.rate:                   2247,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              253867,301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226915,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,705 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13899,036 ±(99.9%) 165,395 ops/s [Average]
[info]   (min, avg, max) = (13845,731, 13899,036, 13944,204), stdev = 42,953
[info]   CI (99.9%): [13733,641, 14064,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2240,879 ±(99.9%) 61,435 MB/sec [Average]
[info]   (min, avg, max) = (2218,524, 2240,879, 2260,494), stdev = 15,954
[info]   CI (99.9%): [2179,444, 2302,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   253652,136 ±(99.9%) 5845,580 B/op [Average]
[info]   (min, avg, max) = (251800,975, 253652,136, 255148,057), stdev = 1518,079
[info]   CI (99.9%): [247806,556, 259497,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2138,476 ±(99.9%) 1142,976 MB/sec [Average]
[info]   (min, avg, max) = (2001,020, 2138,476, 2669,422), stdev = 296,827
[info]   CI (99.9%): [995,501, 3281,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   242014,556 ±(99.9%) 127392,759 B/op [Average]
[info]   (min, avg, max) = (226228,445, 242014,556, 301182,724), stdev = 33083,495
[info]   CI (99.9%): [114621,797, 369407,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,900 ±(99.9%) 7,522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,900, 4,394), stdev = 1,953
[info]   CI (99.9%): [≈ 0, 8,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   102,095 ±(99.9%) 853,766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102,095, 498,705), stdev = 221,720
[info]   CI (99.9%): [≈ 0, 955,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 6,000), stdev = 1,140
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,20% complete, ETA 01:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7675,698 ops/s
[info] # Warmup Iteration   2: 16185,315 ops/s
[info] # Warmup Iteration   3: 16300,003 ops/s
[info] # Warmup Iteration   4: 16236,135 ops/s
[info] # Warmup Iteration   5: 16172,362 ops/s
[info] Iteration   1: 16277,963 ops/s
[info]                  ·gc.alloc.rate:                   1878,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              181528,715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130097,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253,594 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 16264,443 ops/s
[info]                  ·gc.alloc.rate:                   1915,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              185322,378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195056,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92,662 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 16203,173 ops/s
[info]                  ·gc.alloc.rate:                   1910,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              185520,935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195273,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,088 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 16377,506 ops/s
[info]                  ·gc.alloc.rate:               1915,694 MB/sec
[info]                  ·gc.alloc.rate.norm:          184028,501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193187,374 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 16410,055 ops/s
[info]                  ·gc.alloc.rate:                   1907,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              182884,203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128596,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,996 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   16306,628 ±(99.9%) 328,012 ops/s [Average]
[info]   (min, avg, max) = (16203,173, 16306,628, 16410,055), stdev = 85,184
[info]   CI (99.9%): [15978,616, 16634,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1905,651 ±(99.9%) 60,453 MB/sec [Average]
[info]   (min, avg, max) = (1878,277, 1905,651, 1915,922), stdev = 15,699
[info]   CI (99.9%): [1845,198, 1966,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   183856,946 ±(99.9%) 6475,689 B/op [Average]
[info]   (min, avg, max) = (181528,715, 183856,946, 185520,935), stdev = 1681,716
[info]   CI (99.9%): [177381,258, 190332,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745,258 ±(99.9%) 1411,508 MB/sec [Average]
[info]   (min, avg, max) = (1341,314, 1745,258, 2016,560), stdev = 366,564
[info]   CI (99.9%): [333,749, 3156,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   168442,442 ±(99.9%) 137475,946 B/op [Average]
[info]   (min, avg, max) = (128596,533, 168442,442, 195273,502), stdev = 35702,067
[info]   CI (99.9%): [30966,495, 305918,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,737 ±(99.9%) 4,345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,737, 2,624), stdev = 1,128
[info]   CI (99.9%): [≈ 0, 5,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   71,268 ±(99.9%) 419,923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71,268, 253,594), stdev = 109,053
[info]   CI (99.9%): [≈ 0, 491,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,140
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,41% complete, ETA 01:04:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9286,869 ops/s
[info] # Warmup Iteration   2: 32973,424 ops/s
[info] # Warmup Iteration   3: 34166,349 ops/s
[info] # Warmup Iteration   4: 33884,224 ops/s
[info] # Warmup Iteration   5: 33351,034 ops/s
[info] Iteration   1: 33784,140 ops/s
[info]                  ·gc.alloc.rate:               2835,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          132034,472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125083,152 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 34031,974 ops/s
[info]                  ·gc.alloc.rate:                   2857,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              132101,135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124575,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,739 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 34037,069 ops/s
[info]                  ·gc.alloc.rate:                   2860,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              132215,472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124896,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,963 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 34156,294 ops/s
[info]                  ·gc.alloc.rate:                   2870,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              132192,639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124741,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,959 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 33779,456 ops/s
[info]                  ·gc.alloc.rate:                   2839,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              132232,892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126346,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,879 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33957,786 ±(99.9%) 647,635 ops/s [Average]
[info]   (min, avg, max) = (33779,456, 33957,786, 34156,294), stdev = 168,189
[info]   CI (99.9%): [33310,151, 34605,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2852,522 ±(99.9%) 56,692 MB/sec [Average]
[info]   (min, avg, max) = (2835,247, 2852,522, 2870,023), stdev = 14,723
[info]   CI (99.9%): [2795,829, 2909,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   132155,322 ±(99.9%) 325,424 B/op [Average]
[info]   (min, avg, max) = (132034,472, 132155,322, 132232,892), stdev = 84,511
[info]   CI (99.9%): [131829,898, 132480,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2700,810 ±(99.9%) 41,344 MB/sec [Average]
[info]   (min, avg, max) = (2685,978, 2700,810, 2712,945), stdev = 10,737
[info]   CI (99.9%): [2659,466, 2742,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   125128,742 ±(99.9%) 2719,644 B/op [Average]
[info]   (min, avg, max) = (124575,967, 125128,742, 126346,797), stdev = 706,283
[info]   CI (99.9%): [122409,098, 127848,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,146), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,508 ±(99.9%) 10,695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,508, 6,739), stdev = 2,777
[info]   CI (99.9%): [≈ 0, 13,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,61% complete, ETA 01:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52253,339 ops/s
[info] # Warmup Iteration   2: 115302,292 ops/s
[info] # Warmup Iteration   3: 117912,879 ops/s
[info] # Warmup Iteration   4: 118194,636 ops/s
[info] # Warmup Iteration   5: 117753,510 ops/s
[info] Iteration   1: 117937,077 ops/s
[info]                  ·gc.alloc.rate:                   1664,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              22201,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17872,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,278 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 117580,031 ops/s
[info]                  ·gc.alloc.rate:                   1676,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              22433,223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26912,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,710 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 117755,218 ops/s
[info]                  ·gc.alloc.rate:               1652,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          22081,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17877,653 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 116139,417 ops/s
[info]                  ·gc.alloc.rate:                   1657,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              22450,354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27162,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 116893,059 ops/s
[info]                  ·gc.alloc.rate:               1653,933 MB/sec
[info]                  ·gc.alloc.rate.norm:          22260,127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17991,220 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   117260,960 ±(99.9%) 2853,404 ops/s [Average]
[info]   (min, avg, max) = (116139,417, 117260,960, 117937,077), stdev = 741,020
[info]   CI (99.9%): [114407,557, 120114,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1660,940 ±(99.9%) 37,919 MB/sec [Average]
[info]   (min, avg, max) = (1652,682, 1660,940, 1676,630), stdev = 9,847
[info]   CI (99.9%): [1623,021, 1698,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22285,348 ±(99.9%) 603,944 B/op [Average]
[info]   (min, avg, max) = (22081,128, 22285,348, 22450,354), stdev = 156,842
[info]   CI (99.9%): [21681,403, 22889,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606,208 ±(99.9%) 1413,302 MB/sec [Average]
[info]   (min, avg, max) = (1336,752, 1606,208, 2011,441), stdev = 367,030
[info]   CI (99.9%): [192,906, 3019,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21563,381 ±(99.9%) 19246,932 B/op [Average]
[info]   (min, avg, max) = (17872,596, 21563,381, 27162,469), stdev = 4998,367
[info]   CI (99.9%): [2316,449, 40810,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 6,509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,790), stdev = 1,690
[info]   CI (99.9%): [≈ 0, 7,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,254 ±(99.9%) 87,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,254, 50,710), stdev = 22,616
[info]   CI (99.9%): [≈ 0, 97,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 7,000), stdev = 2,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,81% complete, ETA 01:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130467,845 ops/s
[info] # Warmup Iteration   2: 184652,027 ops/s
[info] # Warmup Iteration   3: 197071,571 ops/s
[info] # Warmup Iteration   4: 195417,918 ops/s
[info] # Warmup Iteration   5: 197195,493 ops/s
[info] Iteration   1: 196478,758 ops/s
[info]                  ·gc.alloc.rate:                   643,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              5154,192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5375,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 196609,305 ops/s
[info]                  ·gc.alloc.rate:               642,103 MB/sec
[info]                  ·gc.alloc.rate.norm:          5138,124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5372,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 195681,656 ops/s
[info]                  ·gc.alloc.rate:               644,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          5183,899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5400,419 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 183807,115 ops/s
[info]                  ·gc.alloc.rate:               606,278 MB/sec
[info]                  ·gc.alloc.rate.norm:          5189,363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5749,404 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 196524,942 ops/s
[info]                  ·gc.alloc.rate:               643,367 MB/sec
[info]                  ·gc.alloc.rate.norm:          5150,669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5382,784 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   193820,355 ±(99.9%) 21602,212 ops/s [Average]
[info]   (min, avg, max) = (183807,115, 193820,355, 196609,305), stdev = 5610,026
[info]   CI (99.9%): [172218,143, 215422,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636,039 ±(99.9%) 64,167 MB/sec [Average]
[info]   (min, avg, max) = (606,278, 636,039, 644,770), stdev = 16,664
[info]   CI (99.9%): [571,872, 700,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5163,249 ±(99.9%) 85,669 B/op [Average]
[info]   (min, avg, max) = (5138,124, 5163,249, 5189,363), stdev = 22,248
[info]   CI (99.9%): [5077,580, 5248,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,697 ±(99.9%) 1,577 MB/sec [Average]
[info]   (min, avg, max) = (671,352, 671,697, 672,361), stdev = 0,409
[info]   CI (99.9%): [670,120, 673,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5456,134 ±(99.9%) 632,665 B/op [Average]
[info]   (min, avg, max) = (5372,268, 5456,134, 5749,404), stdev = 164,301
[info]   CI (99.9%): [4823,469, 6088,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,167), stdev = 0,075
[info]   CI (99.9%): [≈ 0, 0,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,01% complete, ETA 01:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116843,817 ops/s
[info] # Warmup Iteration   2: 209111,697 ops/s
[info] # Warmup Iteration   3: 214173,400 ops/s
[info] # Warmup Iteration   4: 213827,500 ops/s
[info] # Warmup Iteration   5: 213640,694 ops/s
[info] Iteration   1: 213828,027 ops/s
[info]                  ·gc.alloc.rate:      0,306 MB/sec
[info]                  ·gc.alloc.rate.norm: 2,248 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 211692,952 ops/s
[info]                  ·gc.alloc.rate:      0,126 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,935 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 213693,726 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 213795,816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 213794,404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   213360,985 ±(99.9%) 3595,824 ops/s [Average]
[info]   (min, avg, max) = (211692,952, 213360,985, 213828,027), stdev = 933,824
[info]   CI (99.9%): [209765,161, 216956,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,086 ±(99.9%) 0,516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,086, 0,306), stdev = 0,134
[info]   CI (99.9%): [≈ 0, 0,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,638 ±(99.9%) 3,799 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,638, 2,248), stdev = 0,987
[info]   CI (99.9%): [≈ 0, 4,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,21% complete, ETA 01:03:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12690,002 ops/s
[info] # Warmup Iteration   2: 51437,475 ops/s
[info] # Warmup Iteration   3: 51560,178 ops/s
[info] # Warmup Iteration   4: 52599,242 ops/s
[info] # Warmup Iteration   5: 52321,132 ops/s
[info] Iteration   1: 52826,830 ops/s
[info]                  ·gc.alloc.rate:                   3728,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              111055,247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99725,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 52843,091 ops/s
[info]                  ·gc.alloc.rate:                   3760,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              111965,266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4033,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120086,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 52709,148 ops/s
[info]                  ·gc.alloc.rate:               3727,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          111256,175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100712,543 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 52741,761 ops/s
[info]                  ·gc.alloc.rate:                   3729,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              111247,314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100949,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 52686,427 ops/s
[info]                  ·gc.alloc.rate:                   3752,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              112067,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121562,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,244 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   52761,451 ±(99.9%) 270,174 ops/s [Average]
[info]   (min, avg, max) = (52686,427, 52761,451, 52843,091), stdev = 70,163
[info]   CI (99.9%): [52491,278, 53031,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3739,952 ±(99.9%) 60,426 MB/sec [Average]
[info]   (min, avg, max) = (3727,551, 3739,952, 3760,726), stdev = 15,693
[info]   CI (99.9%): [3679,526, 3800,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111518,201 ±(99.9%) 1782,786 B/op [Average]
[info]   (min, avg, max) = (111055,247, 111518,201, 112067,004), stdev = 462,984
[info]   CI (99.9%): [109735,415, 113300,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3642,324 ±(99.9%) 1442,712 MB/sec [Average]
[info]   (min, avg, max) = (3348,511, 3642,324, 4071,000), stdev = 374,668
[info]   CI (99.9%): [2199,612, 5085,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108607,300 ±(99.9%) 43028,325 B/op [Average]
[info]   (min, avg, max) = (99725,460, 108607,300, 121562,782), stdev = 11174,319
[info]   CI (99.9%): [65578,975, 151635,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,621 ±(99.9%) 1,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,621, 1,244), stdev = 0,440
[info]   CI (99.9%): [≈ 0, 2,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,41% complete, ETA 01:03:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6435,238 ops/s
[info] # Warmup Iteration   2: 9568,849 ops/s
[info] # Warmup Iteration   3: 9876,633 ops/s
[info] # Warmup Iteration   4: 9776,714 ops/s
[info] # Warmup Iteration   5: 9905,891 ops/s
[info] Iteration   1: 9867,596 ops/s
[info]                  ·gc.alloc.rate:               1078,460 MB/sec
[info]                  ·gc.alloc.rate.norm:          171940,417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 214283,464 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 9828,901 ops/s
[info]                  ·gc.alloc.rate:                   1065,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              170418,200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214694,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,872 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 9881,480 ops/s
[info]                  ·gc.alloc.rate:                   1047,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              166782,950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107043,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,764 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9869,087 ops/s
[info]                  ·gc.alloc.rate:                   1059,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              168869,914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214474,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 9880,821 ops/s
[info]                  ·gc.alloc.rate:                   1059,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              168742,447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107159,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 404,502 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   9865,577 ±(99.9%) 82,739 ops/s [Average]
[info]   (min, avg, max) = (9828,901, 9865,577, 9881,480), stdev = 21,487
[info]   CI (99.9%): [9782,838, 9948,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1062,121 ±(99.9%) 43,281 MB/sec [Average]
[info]   (min, avg, max) = (1047,527, 1062,121, 1078,460), stdev = 11,240
[info]   CI (99.9%): [1018,840, 1105,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   169350,786 ±(99.9%) 7466,838 B/op [Average]
[info]   (min, avg, max) = (166782,950, 169350,786, 171940,417), stdev = 1939,114
[info]   CI (99.9%): [161883,947, 176817,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,424 ±(99.9%) 1415,771 MB/sec [Average]
[info]   (min, avg, max) = (672,314, 1075,424, 1345,344), stdev = 367,671
[info]   CI (99.9%): [≈ 0, 2491,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   171530,975 ±(99.9%) 226479,492 B/op [Average]
[info]   (min, avg, max) = (107043,017, 171530,975, 214694,234), stdev = 58816,005
[info]   CI (99.9%): [≈ 0, 398010,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,525 ±(99.9%) 4,339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,525, 2,540), stdev = 1,127
[info]   CI (99.9%): [≈ 0, 4,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   83,555 ±(99.9%) 690,933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83,555, 404,502), stdev = 179,433
[info]   CI (99.9%): [≈ 0, 774,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,61% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9285,285 ops/s
[info] # Warmup Iteration   2: 27198,248 ops/s
[info] # Warmup Iteration   3: 29437,101 ops/s
[info] # Warmup Iteration   4: 29526,184 ops/s
[info] # Warmup Iteration   5: 29112,248 ops/s
[info] Iteration   1: 29454,371 ops/s
[info]                  ·gc.alloc.rate:                   1581,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              84492,361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71755,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 29615,083 ops/s
[info]                  ·gc.alloc.rate:                   1615,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              85797,713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107084,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161,511 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 29897,676 ops/s
[info]                  ·gc.alloc.rate:                   1601,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              84289,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70655,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 29565,349 ops/s
[info]                  ·gc.alloc.rate:                   1597,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              84994,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71306,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29585,751 ops/s
[info]                  ·gc.alloc.rate:                   1611,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              85716,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106756,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,965 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   29623,646 ±(99.9%) 634,639 ops/s [Average]
[info]   (min, avg, max) = (29454,371, 29623,646, 29897,676), stdev = 164,814
[info]   CI (99.9%): [28989,007, 30258,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1601,614 ±(99.9%) 50,935 MB/sec [Average]
[info]   (min, avg, max) = (1581,814, 1601,614, 1615,103), stdev = 13,228
[info]   CI (99.9%): [1550,678, 1652,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85057,832 ±(99.9%) 2650,708 B/op [Average]
[info]   (min, avg, max) = (84289,053, 85057,832, 85797,713), stdev = 688,380
[info]   CI (99.9%): [82407,124, 87708,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609,940 ±(99.9%) 1412,436 MB/sec [Average]
[info]   (min, avg, max) = (1340,089, 1609,940, 2015,813), stdev = 366,805
[info]   CI (99.9%): [197,504, 3022,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85511,845 ±(99.9%) 75270,843 B/op [Average]
[info]   (min, avg, max) = (70655,452, 85511,845, 107084,244), stdev = 19547,599
[info]   CI (99.9%): [10241,001, 160782,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,812 ±(99.9%) 4,949 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,812, 3,040), stdev = 1,285
[info]   CI (99.9%): [≈ 0, 5,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   43,067 ±(99.9%) 262,915 B/op [Average]
[info]   (min, avg, max) = (1,108, 43,067, 161,511), stdev = 68,278
[info]   CI (99.9%): [≈ 0, 305,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,387
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,81% complete, ETA 01:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9797,206 ops/s
[info] # Warmup Iteration   2: 28942,048 ops/s
[info] # Warmup Iteration   3: 31721,743 ops/s
[info] # Warmup Iteration   4: 32219,030 ops/s
[info] # Warmup Iteration   5: 32251,384 ops/s
[info] Iteration   1: 31987,771 ops/s
[info]                  ·gc.alloc.rate:                   1367,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              67236,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65845,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 32129,366 ops/s
[info]                  ·gc.alloc.rate:               1381,105 MB/sec
[info]                  ·gc.alloc.rate.norm:          67625,598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65599,217 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     10,000 ms
[info] Iteration   3: 32362,066 ops/s
[info]                  ·gc.alloc.rate:                   1392,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              67700,262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65161,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162,985 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 32548,875 ops/s
[info]                  ·gc.alloc.rate:                   1407,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              68042,367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64708,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,288 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 32460,889 ops/s
[info]                  ·gc.alloc.rate:                   1394,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              67564,229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64754,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   32297,794 ±(99.9%) 899,468 ops/s [Average]
[info]   (min, avg, max) = (31987,771, 32297,794, 32548,875), stdev = 233,589
[info]   CI (99.9%): [31398,326, 33197,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1388,528 ±(99.9%) 58,792 MB/sec [Average]
[info]   (min, avg, max) = (1367,085, 1388,528, 1407,770), stdev = 15,268
[info]   CI (99.9%): [1329,736, 1447,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67633,758 ±(99.9%) 1113,081 B/op [Average]
[info]   (min, avg, max) = (67236,334, 67633,758, 68042,367), stdev = 289,064
[info]   CI (99.9%): [66520,677, 68746,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,761 ±(99.9%) 6,333 MB/sec [Average]
[info]   (min, avg, max) = (1336,080, 1338,761, 1340,407), stdev = 1,645
[info]   CI (99.9%): [1332,428, 1345,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65213,884 ±(99.9%) 1940,629 B/op [Average]
[info]   (min, avg, max) = (64708,622, 65213,884, 65845,316), stdev = 503,975
[info]   CI (99.9%): [63273,255, 67154,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,866 ±(99.9%) 5,557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,866, 3,353), stdev = 1,443
[info]   CI (99.9%): [≈ 0, 6,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42,063 ±(99.9%) 270,122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42,063, 162,985), stdev = 70,150
[info]   CI (99.9%): [≈ 0, 312,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,200, 10,000), stdev = 3,347
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,01% complete, ETA 01:02:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362723,704 ops/s
[info] # Warmup Iteration   2: 693011,791 ops/s
[info] # Warmup Iteration   3: 700582,321 ops/s
[info] # Warmup Iteration   4: 709418,997 ops/s
[info] # Warmup Iteration   5: 709446,782 ops/s
[info] Iteration   1: 706446,695 ops/s
[info]                  ·gc.alloc.rate:                   1878,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              4183,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2996,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,797 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 712350,836 ops/s
[info]                  ·gc.alloc.rate:                   1923,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4453,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,380 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 710837,826 ops/s
[info]                  ·gc.alloc.rate:                   1910,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              4229,191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4455,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 713812,428 ops/s
[info]                  ·gc.alloc.rate:               1935,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          4265,729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4436,951 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 713154,628 ops/s
[info]                  ·gc.alloc.rate:               1909,293 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2962,104 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   711320,483 ±(99.9%) 11328,728 ops/s [Average]
[info]   (min, avg, max) = (706446,695, 711320,483, 713812,428), stdev = 2942,035
[info]   CI (99.9%): [699991,755, 722649,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1911,454 ±(99.9%) 82,130 MB/sec [Average]
[info]   (min, avg, max) = (1878,317, 1911,454, 1935,346), stdev = 21,329
[info]   CI (99.9%): [1829,324, 1993,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4227,669 ±(99.9%) 123,487 B/op [Average]
[info]   (min, avg, max) = (4183,028, 4227,669, 4265,729), stdev = 32,069
[info]   CI (99.9%): [4104,181, 4351,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746,201 ±(99.9%) 1413,056 MB/sec [Average]
[info]   (min, avg, max) = (1342,695, 1746,201, 2016,439), stdev = 366,966
[info]   CI (99.9%): [333,146, 3159,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3861,042 ±(99.9%) 3099,119 B/op [Average]
[info]   (min, avg, max) = (2962,104, 3861,042, 4455,662), stdev = 804,831
[info]   CI (99.9%): [761,923, 6960,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 4,329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 2,603), stdev = 1,124
[info]   CI (99.9%): [≈ 0, 4,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,445 ±(99.9%) 9,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,445, 5,797), stdev = 2,504
[info]   CI (99.9%): [≈ 0, 11,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,21% complete, ETA 01:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2972,853 ops/s
[info] # Warmup Iteration   2: 18913,766 ops/s
[info] # Warmup Iteration   3: 27148,622 ops/s
[info] # Warmup Iteration   4: 27143,533 ops/s
[info] # Warmup Iteration   5: 27147,362 ops/s
[info] Iteration   1: 27299,642 ops/s
[info]                  ·gc.alloc.rate:                   2035,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              117306,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115537,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,600 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 27234,842 ops/s
[info]                  ·gc.alloc.rate:                   2047,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              118246,657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116030,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45,655 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 27463,070 ops/s
[info]                  ·gc.alloc.rate:               2037,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          116711,349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76918,732 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 27231,208 ops/s
[info]                  ·gc.alloc.rate:               2033,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          117516,261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116538,389 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 27358,330 ops/s
[info]                  ·gc.alloc.rate:                   2070,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              119043,217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116265,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   27317,418 ±(99.9%) 372,615 ops/s [Average]
[info]   (min, avg, max) = (27231,208, 27317,418, 27463,070), stdev = 96,767
[info]   CI (99.9%): [26944,803, 27690,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2044,897 ±(99.9%) 58,081 MB/sec [Average]
[info]   (min, avg, max) = (2033,938, 2044,897, 2070,063), stdev = 15,084
[info]   CI (99.9%): [1986,816, 2102,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   117764,707 ±(99.9%) 3470,133 B/op [Average]
[info]   (min, avg, max) = (116711,349, 117764,707, 119043,217), stdev = 901,183
[info]   CI (99.9%): [114294,573, 121234,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1879,120 ±(99.9%) 1155,104 MB/sec [Average]
[info]   (min, avg, max) = (1342,635, 1879,120, 2021,765), stdev = 299,977
[info]   CI (99.9%): [724,016, 3034,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108258,111 ±(99.9%) 67475,226 B/op [Average]
[info]   (min, avg, max) = (76918,732, 108258,111, 116538,389), stdev = 17523,102
[info]   CI (99.9%): [40782,885, 175733,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,175 ±(99.9%) 1,329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,175, 0,791), stdev = 0,345
[info]   CI (99.9%): [≈ 0, 1,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10,090 ±(99.9%) 76,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,090, 45,655), stdev = 19,935
[info]   CI (99.9%): [≈ 0, 86,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,140
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,41% complete, ETA 01:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9125,033 ops/s
[info] # Warmup Iteration   2: 31323,389 ops/s
[info] # Warmup Iteration   3: 31522,604 ops/s
[info] # Warmup Iteration   4: 31190,718 ops/s
[info] # Warmup Iteration   5: 31603,741 ops/s
[info] Iteration   1: 31069,895 ops/s
[info]                  ·gc.alloc.rate:                   1418,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              71830,182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68072,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 31584,887 ops/s
[info]                  ·gc.alloc.rate:                   1463,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              72833,639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100185,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 31694,545 ops/s
[info]                  ·gc.alloc.rate:                   1441,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              71573,652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66815,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178,823 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 31791,471 ops/s
[info]                  ·gc.alloc.rate:                   1472,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              72888,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66411,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 31837,487 ops/s
[info]                  ·gc.alloc.rate:               1468,005 MB/sec
[info]                  ·gc.alloc.rate.norm:          72545,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66252,195 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   31595,657 ±(99.9%) 1191,749 ops/s [Average]
[info]   (min, avg, max) = (31069,895, 31595,657, 31837,487), stdev = 309,493
[info]   CI (99.9%): [30403,908, 32787,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1453,045 ±(99.9%) 86,961 MB/sec [Average]
[info]   (min, avg, max) = (1418,616, 1453,045, 1472,904), stdev = 22,584
[info]   CI (99.9%): [1366,084, 1540,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   72334,130 ±(99.9%) 2304,892 B/op [Average]
[info]   (min, avg, max) = (71573,652, 72334,130, 72888,068), stdev = 598,573
[info]   CI (99.9%): [70029,238, 74639,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477,329 ±(99.9%) 1153,992 MB/sec [Average]
[info]   (min, avg, max) = (1340,663, 1477,329, 2013,414), stdev = 299,688
[info]   CI (99.9%): [323,336, 2631,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   73547,695 ±(99.9%) 57406,419 B/op [Average]
[info]   (min, avg, max) = (66252,195, 73547,695, 100185,792), stdev = 14908,265
[info]   CI (99.9%): [16141,276, 130954,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,737 ±(99.9%) 6,169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,737, 3,603), stdev = 1,602
[info]   CI (99.9%): [≈ 0, 6,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   36,595 ±(99.9%) 306,169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,595, 178,823), stdev = 79,511
[info]   CI (99.9%): [≈ 0, 342,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 9,000), stdev = 2,793
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,61% complete, ETA 01:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37030,120 ops/s
[info] # Warmup Iteration   2: 76794,768 ops/s
[info] # Warmup Iteration   3: 80456,546 ops/s
[info] # Warmup Iteration   4: 79716,994 ops/s
[info] # Warmup Iteration   5: 75933,739 ops/s
[info] Iteration   1: 79416,246 ops/s
[info]                  ·gc.alloc.rate:                   2101,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              41632,289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39895,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,547 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 80202,006 ops/s
[info]                  ·gc.alloc.rate:                   2127,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39399,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,494 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 80162,899 ops/s
[info]                  ·gc.alloc.rate:                   2128,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              41779,798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39392,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,226 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 78595,491 ops/s
[info]                  ·gc.alloc.rate:                   2101,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              42057,452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40204,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 80108,962 ops/s
[info]                  ·gc.alloc.rate:               2140,600 MB/sec
[info]                  ·gc.alloc.rate.norm:          42041,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39530,014 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   79697,121 ±(99.9%) 2677,478 ops/s [Average]
[info]   (min, avg, max) = (78595,491, 79697,121, 80202,006), stdev = 695,333
[info]   CI (99.9%): [77019,642, 82374,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2120,030 ±(99.9%) 68,209 MB/sec [Average]
[info]   (min, avg, max) = (2101,056, 2120,030, 2140,600), stdev = 17,714
[info]   CI (99.9%): [2051,821, 2188,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41850,932 ±(99.9%) 728,275 B/op [Average]
[info]   (min, avg, max) = (41632,289, 41850,932, 42057,452), stdev = 189,131
[info]   CI (99.9%): [41122,657, 42579,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2010,176 ±(99.9%) 11,778 MB/sec [Average]
[info]   (min, avg, max) = (2007,100, 2010,176, 2014,111), stdev = 3,059
[info]   CI (99.9%): [1998,398, 2021,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39684,361 ±(99.9%) 1368,250 B/op [Average]
[info]   (min, avg, max) = (39392,715, 39684,361, 40204,150), stdev = 355,330
[info]   CI (99.9%): [38316,111, 41052,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 6,009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,562), stdev = 1,560
[info]   CI (99.9%): [≈ 0, 6,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15,337 ±(99.9%) 119,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,337, 70,547), stdev = 30,914
[info]   CI (99.9%): [≈ 0, 134,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 8,000), stdev = 2,345
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,82% complete, ETA 01:01:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81319,346 ops/s
[info] # Warmup Iteration   2: 199020,788 ops/s
[info] # Warmup Iteration   3: 204483,300 ops/s
[info] # Warmup Iteration   4: 203168,533 ops/s
[info] # Warmup Iteration   5: 203030,721 ops/s
[info] Iteration   1: 204361,414 ops/s
[info]                  ·gc.alloc.rate:                   2289,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              17623,457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15476,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,771 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 204571,429 ops/s
[info]                  ·gc.alloc.rate:               2294,281 MB/sec
[info]                  ·gc.alloc.rate.norm:          17644,131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15420,085 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 203752,329 ops/s
[info]                  ·gc.alloc.rate:               2313,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          17865,543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20655,399 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 205244,137 ops/s
[info]                  ·gc.alloc.rate:                   2302,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              17651,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15402,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,798 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 204844,205 ops/s
[info]                  ·gc.alloc.rate:               2299,093 MB/sec
[info]                  ·gc.alloc.rate.norm:          17658,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15468,855 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   204554,703 ±(99.9%) 2144,445 ops/s [Average]
[info]   (min, avg, max) = (203752,329, 204554,703, 205244,137), stdev = 556,905
[info]   CI (99.9%): [202410,258, 206699,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2299,810 ±(99.9%) 35,915 MB/sec [Average]
[info]   (min, avg, max) = (2289,168, 2299,810, 2313,777), stdev = 9,327
[info]   CI (99.9%): [2263,895, 2335,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17688,485 ±(99.9%) 384,390 B/op [Average]
[info]   (min, avg, max) = (17623,457, 17688,485, 17865,543), stdev = 99,825
[info]   CI (99.9%): [17304,095, 18072,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2142,799 ±(99.9%) 1145,868 MB/sec [Average]
[info]   (min, avg, max) = (2005,086, 2142,799, 2675,093), stdev = 297,578
[info]   CI (99.9%): [996,931, 3288,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16484,823 ±(99.9%) 8978,297 B/op [Average]
[info]   (min, avg, max) = (15402,808, 16484,823, 20655,399), stdev = 2331,635
[info]   CI (99.9%): [7506,525, 25463,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,171 ±(99.9%) 1,258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,171, 0,750), stdev = 0,327
[info]   CI (99.9%): [≈ 0, 1,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,314 ±(99.9%) 9,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,314, 5,771), stdev = 2,516
[info]   CI (99.9%): [≈ 0, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,02% complete, ETA 01:00:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1013199,658 ops/s
[info] # Warmup Iteration   2: 1597765,778 ops/s
[info] # Warmup Iteration   3: 1671710,763 ops/s
[info] # Warmup Iteration   4: 1670355,822 ops/s
[info] # Warmup Iteration   5: 1673605,122 ops/s
[info] Iteration   1: 1656846,568 ops/s
[info]                  ·gc.alloc.rate:                   1423,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1351,620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1675382,886 ops/s
[info]                  ·gc.alloc.rate:                   1441,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1353,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1264,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1665888,338 ops/s
[info]                  ·gc.alloc.rate:                   1419,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              1340,682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,576 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1664882,627 ops/s
[info]                  ·gc.alloc.rate:                   1431,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1353,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1270,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,433 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1655516,011 ops/s
[info]                  ·gc.alloc.rate:                   1422,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1351,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1275,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1663703,286 ±(99.9%) 30842,696 ops/s [Average]
[info]   (min, avg, max) = (1655516,011, 1663703,286, 1675382,886), stdev = 8009,750
[info]   CI (99.9%): [1632860,590, 1694545,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1427,815 ±(99.9%) 34,558 MB/sec [Average]
[info]   (min, avg, max) = (1419,654, 1427,815, 1441,602), stdev = 8,975
[info]   CI (99.9%): [1393,257, 1462,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1350,237 ±(99.9%) 20,848 B/op [Average]
[info]   (min, avg, max) = (1340,682, 1350,237, 1353,759), stdev = 5,414
[info]   CI (99.9%): [1329,389, 1371,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344,998 ±(99.9%) 7,195 MB/sec [Average]
[info]   (min, avg, max) = (1341,964, 1344,998, 1346,808), stdev = 1,868
[info]   CI (99.9%): [1337,804, 1352,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1271,940 ±(99.9%) 19,894 B/op [Average]
[info]   (min, avg, max) = (1264,086, 1271,940, 1277,550), stdev = 5,166
[info]   CI (99.9%): [1252,045, 1291,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 4,533 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,650, 2,728), stdev = 1,177
[info]   CI (99.9%): [≈ 0, 5,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,614 ±(99.9%) 4,281 B/op [Average]
[info]   (min, avg, max) = (0,020, 0,614, 2,576), stdev = 1,112
[info]   CI (99.9%): [≈ 0, 4,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,22% complete, ETA 01:00:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1306909,937 ops/s
[info] # Warmup Iteration   2: 1872257,731 ops/s
[info] # Warmup Iteration   3: 1946265,192 ops/s
[info] # Warmup Iteration   4: 1947350,040 ops/s
[info] # Warmup Iteration   5: 1938881,289 ops/s
[info] Iteration   1: 1937650,925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1940920,693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1936715,615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1939489,082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1946286,223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1940212,508 ±(99.9%) 14498,180 ops/s [Average]
[info]   (min, avg, max) = (1936715,615, 1940212,508, 1946286,223), stdev = 3765,131
[info]   CI (99.9%): [1925714,328, 1954710,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,42% complete, ETA 01:00:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51334,017 ops/s
[info] # Warmup Iteration   2: 150353,488 ops/s
[info] # Warmup Iteration   3: 170329,504 ops/s
[info] # Warmup Iteration   4: 172308,982 ops/s
[info] # Warmup Iteration   5: 168102,388 ops/s
[info] Iteration   1: 165014,882 ops/s
[info]                  ·gc.alloc.rate:               2137,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          20382,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19132,535 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 168436,944 ops/s
[info]                  ·gc.alloc.rate:                   2181,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              20372,762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18807,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,584 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 171016,414 ops/s
[info]                  ·gc.alloc.rate:                   2203,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              20267,442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18572,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 171424,161 ops/s
[info]                  ·gc.alloc.rate:                   2233,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              20501,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18576,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,573 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 164180,069 ops/s
[info]                  ·gc.alloc.rate:                   2143,609 MB/sec
[info]                  ·gc.alloc.rate.norm:              20541,378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19434,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,399 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   168014,494 ±(99.9%) 12845,852 ops/s [Average]
[info]   (min, avg, max) = (164180,069, 168014,494, 171424,161), stdev = 3336,027
[info]   CI (99.9%): [155168,642, 180860,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2179,912 ±(99.9%) 155,426 MB/sec [Average]
[info]   (min, avg, max) = (2137,930, 2179,912, 2233,721), stdev = 40,364
[info]   CI (99.9%): [2024,487, 2335,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20413,178 ±(99.9%) 421,780 B/op [Average]
[info]   (min, avg, max) = (20267,442, 20413,178, 20541,378), stdev = 109,535
[info]   CI (99.9%): [19991,398, 20834,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2018,260 ±(99.9%) 32,474 MB/sec [Average]
[info]   (min, avg, max) = (2006,775, 2018,260, 2028,077), stdev = 8,433
[info]   CI (99.9%): [1985,786, 2050,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18904,613 ±(99.9%) 1440,559 B/op [Average]
[info]   (min, avg, max) = (18572,295, 18904,613, 19434,274), stdev = 374,109
[info]   CI (99.9%): [17464,054, 20345,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,350 ±(99.9%) 0,971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,350, 0,584), stdev = 0,252
[info]   CI (99.9%): [≈ 0, 1,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,62% complete, ETA 01:00:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24814,875 ops/s
[info] # Warmup Iteration   2: 38198,541 ops/s
[info] # Warmup Iteration   3: 38993,938 ops/s
[info] # Warmup Iteration   4: 38930,756 ops/s
[info] # Warmup Iteration   5: 39189,446 ops/s
[info] Iteration   1: 38938,758 ops/s
[info]                  ·gc.alloc.rate:                   829,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              33506,704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27140,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,683 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 38106,759 ops/s
[info]                  ·gc.alloc.rate:               805,335 MB/sec
[info]                  ·gc.alloc.rate.norm:          33247,491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27733,118 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 39141,207 ops/s
[info]                  ·gc.alloc.rate:                   826,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              33227,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27026,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,674 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38978,248 ops/s
[info]                  ·gc.alloc.rate:               848,147 MB/sec
[info]                  ·gc.alloc.rate.norm:          34234,670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54276,570 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 39110,711 ops/s
[info]                  ·gc.alloc.rate:                   823,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              33115,874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27046,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,838 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   38855,137 ±(99.9%) 1644,289 ops/s [Average]
[info]   (min, avg, max) = (38106,759, 38855,137, 39141,207), stdev = 427,017
[info]   CI (99.9%): [37210,848, 40499,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   826,542 ±(99.9%) 58,872 MB/sec [Average]
[info]   (min, avg, max) = (805,335, 826,542, 848,147), stdev = 15,289
[info]   CI (99.9%): [767,671, 885,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   33466,360 ±(99.9%) 1743,385 B/op [Average]
[info]   (min, avg, max) = (33115,874, 33466,360, 34234,670), stdev = 452,752
[info]   CI (99.9%): [31722,975, 35209,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,590 ±(99.9%) 1158,271 MB/sec [Average]
[info]   (min, avg, max) = (671,750, 806,590, 1344,675), stdev = 300,799
[info]   CI (99.9%): [≈ 0, 1964,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   32644,602 ±(99.9%) 46577,821 B/op [Average]
[info]   (min, avg, max) = (27026,673, 32644,602, 54276,570), stdev = 12096,112
[info]   CI (99.9%): [≈ 0, 79222,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,839 ±(99.9%) 3,232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,839, 1,683), stdev = 0,839
[info]   CI (99.9%): [≈ 0, 4,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,82% complete, ETA 00:59:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16436,976 ops/s
[info] # Warmup Iteration   2: 46406,091 ops/s
[info] # Warmup Iteration   3: 47452,334 ops/s
[info] # Warmup Iteration   4: 47508,562 ops/s
[info] # Warmup Iteration   5: 47458,380 ops/s
[info] Iteration   1: 47363,970 ops/s
[info]                  ·gc.alloc.rate:                   1763,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              58581,569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66711,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,383 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 47652,355 ops/s
[info]                  ·gc.alloc.rate:                   1786,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              58957,859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66248,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 47843,616 ops/s
[info]                  ·gc.alloc.rate:               1752,049 MB/sec
[info]                  ·gc.alloc.rate.norm:          57614,492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43934,443 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 45327,176 ops/s
[info]                  ·gc.alloc.rate:                   1687,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              58584,707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69482,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 47787,800 ops/s
[info]                  ·gc.alloc.rate:               1751,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          57654,670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43963,059 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   47194,983 ±(99.9%) 4083,591 ops/s [Average]
[info]   (min, avg, max) = (45327,176, 47194,983, 47843,616), stdev = 1060,496
[info]   CI (99.9%): [43111,392, 51278,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1748,288 ±(99.9%) 141,052 MB/sec [Average]
[info]   (min, avg, max) = (1687,921, 1748,288, 1786,556), stdev = 36,631
[info]   CI (99.9%): [1607,236, 1889,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58278,659 ±(99.9%) 2340,048 B/op [Average]
[info]   (min, avg, max) = (57614,492, 58278,659, 58957,859), stdev = 607,703
[info]   CI (99.9%): [55938,611, 60618,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737,845 ±(99.9%) 1413,571 MB/sec [Average]
[info]   (min, avg, max) = (1335,393, 1737,845, 2008,400), stdev = 367,100
[info]   CI (99.9%): [324,275, 3151,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   58068,136 ±(99.9%) 49859,523 B/op [Average]
[info]   (min, avg, max) = (43934,443, 58068,136, 69482,558), stdev = 12948,360
[info]   CI (99.9%): [8208,613, 107927,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,857 ±(99.9%) 7,158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,857, 4,182), stdev = 1,859
[info]   CI (99.9%): [≈ 0, 8,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28,314 ±(99.9%) 236,174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28,314, 138,018), stdev = 61,334
[info]   CI (99.9%): [≈ 0, 264,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 9,000), stdev = 2,966
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,02% complete, ETA 00:59:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576222,641 ops/s
[info] # Warmup Iteration   2: 836538,374 ops/s
[info] # Warmup Iteration   3: 835815,405 ops/s
[info] # Warmup Iteration   4: 854262,001 ops/s
[info] # Warmup Iteration   5: 849892,746 ops/s
[info] Iteration   1: 854312,182 ops/s
[info]                  ·gc.alloc.rate:                   1718,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              3164,545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2478,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 854410,069 ops/s
[info]                  ·gc.alloc.rate:                   1746,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              3215,579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3718,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 835857,215 ops/s
[info]                  ·gc.alloc.rate:               1689,936 MB/sec
[info]                  ·gc.alloc.rate.norm:          3180,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2528,569 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 851539,317 ops/s
[info]                  ·gc.alloc.rate:                   1722,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183,298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3719,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 856245,089 ops/s
[info]                  ·gc.alloc.rate:                   1724,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              3168,805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2466,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   850472,775 ±(99.9%) 32119,717 ops/s [Average]
[info]   (min, avg, max) = (835857,215, 850472,775, 856245,089), stdev = 8341,388
[info]   CI (99.9%): [818353,058, 882592,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1720,444 ±(99.9%) 77,682 MB/sec [Average]
[info]   (min, avg, max) = (1689,936, 1720,444, 1746,324), stdev = 20,174
[info]   CI (99.9%): [1642,762, 1798,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3182,613 ±(99.9%) 77,193 B/op [Average]
[info]   (min, avg, max) = (3164,545, 3182,613, 3215,579), stdev = 20,047
[info]   CI (99.9%): [3105,420, 3259,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612,753 ±(99.9%) 1417,866 MB/sec [Average]
[info]   (min, avg, max) = (1342,072, 1612,753, 2019,184), stdev = 368,215
[info]   CI (99.9%): [194,888, 3030,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2982,127 ±(99.9%) 2590,322 B/op [Average]
[info]   (min, avg, max) = (2466,007, 2982,127, 3719,167), stdev = 672,698
[info]   CI (99.9%): [391,805, 5572,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,671 ±(99.9%) 5,595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,270), stdev = 1,453
[info]   CI (99.9%): [≈ 0, 6,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,235 ±(99.9%) 10,302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,235, 6,020), stdev = 2,675
[info]   CI (99.9%): [≈ 0, 11,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,22% complete, ETA 00:59:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4072,771 ops/s
[info] # Warmup Iteration   2: 30014,164 ops/s
[info] # Warmup Iteration   3: 35827,035 ops/s
[info] # Warmup Iteration   4: 35214,060 ops/s
[info] # Warmup Iteration   5: 35623,473 ops/s
[info] Iteration   1: 35970,457 ops/s
[info]                  ·gc.alloc.rate:                   2534,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              110853,857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117206,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,323 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 36231,127 ops/s
[info]                  ·gc.alloc.rate:                   2525,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              109648,465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87501,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,808 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 35689,637 ops/s
[info]                  ·gc.alloc.rate:               2491,372 MB/sec
[info]                  ·gc.alloc.rate.norm:          109824,918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118763,805 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 36081,057 ops/s
[info]                  ·gc.alloc.rate:               2543,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          110900,225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117767,576 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 36147,633 ops/s
[info]                  ·gc.alloc.rate:               2522,536 MB/sec
[info]                  ·gc.alloc.rate.norm:          109784,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88345,711 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   36023,982 ±(99.9%) 807,966 ops/s [Average]
[info]   (min, avg, max) = (35689,637, 36023,982, 36231,127), stdev = 209,826
[info]   CI (99.9%): [35216,017, 36831,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2523,376 ±(99.9%) 75,796 MB/sec [Average]
[info]   (min, avg, max) = (2491,372, 2523,376, 2543,309), stdev = 19,684
[info]   CI (99.9%): [2447,579, 2599,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   110202,310 ±(99.9%) 2385,908 B/op [Average]
[info]   (min, avg, max) = (109648,465, 110202,310, 110900,225), stdev = 619,613
[info]   CI (99.9%): [107816,402, 112588,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2423,955 ±(99.9%) 1411,530 MB/sec [Average]
[info]   (min, avg, max) = (2015,109, 2423,955, 2700,800), stdev = 366,570
[info]   CI (99.9%): [1012,425, 3835,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105917,059 ±(99.9%) 63295,704 B/op [Average]
[info]   (min, avg, max) = (87501,899, 105917,059, 118763,805), stdev = 16437,693
[info]   CI (99.9%): [42621,355, 169212,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,133 ±(99.9%) 1,060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,133, 0,625), stdev = 0,275
[info]   CI (99.9%): [≈ 0, 1,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,826 ±(99.9%) 46,372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,826, 27,323), stdev = 12,043
[info]   CI (99.9%): [≈ 0, 52,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 1,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,42% complete, ETA 00:59:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11827,078 ops/s
[info] # Warmup Iteration   2: 43077,244 ops/s
[info] # Warmup Iteration   3: 45926,151 ops/s
[info] # Warmup Iteration   4: 45123,832 ops/s
[info] # Warmup Iteration   5: 46458,884 ops/s
[info] Iteration   1: 46535,696 ops/s
[info]                  ·gc.alloc.rate:               1944,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          65729,990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67870,637 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 46416,300 ops/s
[info]                  ·gc.alloc.rate:                   1926,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              65300,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45422,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,412 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46583,697 ops/s
[info]                  ·gc.alloc.rate:               1957,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          66104,241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68025,777 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 46573,889 ops/s
[info]                  ·gc.alloc.rate:                   1945,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              65707,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68173,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,814 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 46120,852 ops/s
[info]                  ·gc.alloc.rate:               1954,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          66666,489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69012,481 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   46446,087 ±(99.9%) 745,586 ops/s [Average]
[info]   (min, avg, max) = (46120,852, 46446,087, 46583,697), stdev = 193,626
[info]   CI (99.9%): [45700,501, 47191,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1945,620 ±(99.9%) 46,448 MB/sec [Average]
[info]   (min, avg, max) = (1926,544, 1945,620, 1957,323), stdev = 12,062
[info]   CI (99.9%): [1899,172, 1992,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65901,722 ±(99.9%) 1977,318 B/op [Average]
[info]   (min, avg, max) = (65300,334, 65901,722, 66666,489), stdev = 513,503
[info]   CI (99.9%): [63924,404, 67879,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880,732 ±(99.9%) 1163,987 MB/sec [Average]
[info]   (min, avg, max) = (1340,087, 1880,732, 2023,322), stdev = 302,284
[info]   CI (99.9%): [716,745, 3044,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   63701,043 ±(99.9%) 39383,011 B/op [Average]
[info]   (min, avg, max) = (45422,332, 63701,043, 69012,481), stdev = 10227,643
[info]   CI (99.9%): [24318,032, 103084,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,845 ±(99.9%) 4,848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,845, 2,814), stdev = 1,259
[info]   CI (99.9%): [≈ 0, 5,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,62% complete, ETA 00:58:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218403,115 ops/s
[info] # Warmup Iteration   2: 421816,491 ops/s
[info] # Warmup Iteration   3: 427510,560 ops/s
[info] # Warmup Iteration   4: 426363,997 ops/s
[info] # Warmup Iteration   5: 428517,551 ops/s
[info] Iteration   1: 422924,089 ops/s
[info]                  ·gc.alloc.rate:               1209,734 MB/sec
[info]                  ·gc.alloc.rate.norm:          4499,956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4977,708 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 426697,629 ops/s
[info]                  ·gc.alloc.rate:                   1228,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4530,791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4935,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 421037,056 ops/s
[info]                  ·gc.alloc.rate:               1211,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          4528,305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5007,305 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 426197,374 ops/s
[info]                  ·gc.alloc.rate:                   1210,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              4467,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2474,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,992 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 427015,374 ops/s
[info]                  ·gc.alloc.rate:                   1238,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              4562,957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4934,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   424774,304 ±(99.9%) 10212,744 ops/s [Average]
[info]   (min, avg, max) = (421037,056, 424774,304, 427015,374), stdev = 2652,217
[info]   CI (99.9%): [414561,560, 434987,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1219,858 ±(99.9%) 50,333 MB/sec [Average]
[info]   (min, avg, max) = (1209,734, 1219,858, 1238,477), stdev = 13,071
[info]   CI (99.9%): [1169,525, 1270,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4517,998 ±(99.9%) 137,745 B/op [Average]
[info]   (min, avg, max) = (4467,980, 4517,998, 4562,957), stdev = 35,772
[info]   CI (99.9%): [4380,253, 4655,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,359 ±(99.9%) 1151,547 MB/sec [Average]
[info]   (min, avg, max) = (670,398, 1205,359, 1340,044), stdev = 299,053
[info]   CI (99.9%): [53,812, 2356,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4466,132 ±(99.9%) 4288,344 B/op [Average]
[info]   (min, avg, max) = (2474,681, 4466,132, 5007,305), stdev = 1113,669
[info]   CI (99.9%): [177,788, 8754,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 5,429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,758, 3,249), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 6,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,797 ±(99.9%) 20,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,797, 11,992), stdev = 5,205
[info]   CI (99.9%): [≈ 0, 22,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 6,000), stdev = 1,342
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,82% complete, ETA 00:58:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421366,651 ops/s
[info] # Warmup Iteration   2: 2130079,151 ops/s
[info] # Warmup Iteration   3: 1964111,332 ops/s
[info] # Warmup Iteration   4: 2157992,984 ops/s
[info] # Warmup Iteration   5: 2184670,684 ops/s
[info] Iteration   1: 2178047,514 ops/s
[info]                  ·gc.alloc.rate:                   1325,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              957,405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 2185454,391 ops/s
[info]                  ·gc.alloc.rate:                   1329,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              957,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2185870,977 ops/s
[info]                  ·gc.alloc.rate:               1291,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          929,699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 484,411 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2158751,547 ops/s
[info]                  ·gc.alloc.rate:                   1300,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              947,529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2161242,015 ops/s
[info]                  ·gc.alloc.rate:                   1316,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              958,271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   2173873,289 ±(99.9%) 50342,908 ops/s [Average]
[info]   (min, avg, max) = (2158751,547, 2173873,289, 2185870,977), stdev = 13073,893
[info]   CI (99.9%): [2123530,381, 2224216,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1312,625 ±(99.9%) 62,696 MB/sec [Average]
[info]   (min, avg, max) = (1291,715, 1312,625, 1329,502), stdev = 16,282
[info]   CI (99.9%): [1249,930, 1375,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   949,986 ±(99.9%) 46,800 B/op [Average]
[info]   (min, avg, max) = (929,699, 949,986, 958,271), stdev = 12,154
[info]   CI (99.9%): [903,186, 996,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,957 ±(99.9%) 1157,917 MB/sec [Average]
[info]   (min, avg, max) = (673,037, 1210,957, 1346,641), stdev = 300,707
[info]   CI (99.9%): [53,040, 2368,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   876,953 ±(99.9%) 845,221 B/op [Average]
[info]   (min, avg, max) = (484,411, 876,953, 981,497), stdev = 219,501
[info]   CI (99.9%): [31,732, 1722,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,633 ±(99.9%) 4,624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,633, 2,769), stdev = 1,201
[info]   CI (99.9%): [≈ 0, 5,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,461 ±(99.9%) 3,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,461, 2,018), stdev = 0,875
[info]   CI (99.9%): [≈ 0, 3,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 1,095
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,02% complete, ETA 00:58:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1658378,460 ops/s
[info] # Warmup Iteration   2: 2340322,195 ops/s
[info] # Warmup Iteration   3: 2381167,059 ops/s
[info] # Warmup Iteration   4: 2385572,584 ops/s
[info] # Warmup Iteration   5: 2385721,865 ops/s
[info] Iteration   1: 2398765,810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2401207,509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2394265,539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2394002,389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2392951,792 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2396238,608 ±(99.9%) 13718,992 ops/s [Average]
[info]   (min, avg, max) = (2392951,792, 2396238,608, 2401207,509), stdev = 3562,779
[info]   CI (99.9%): [2382519,616, 2409957,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,22% complete, ETA 00:58:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105134,998 ops/s
[info] # Warmup Iteration   2: 281176,399 ops/s
[info] # Warmup Iteration   3: 282079,275 ops/s
[info] # Warmup Iteration   4: 284076,299 ops/s
[info] # Warmup Iteration   5: 277645,099 ops/s
[info] Iteration   1: 285270,704 ops/s
[info]                  ·gc.alloc.rate:               1884,288 MB/sec
[info]                  ·gc.alloc.rate.norm:          10391,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7383,070 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 284917,876 ops/s
[info]                  ·gc.alloc.rate:                   1908,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              10538,599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11114,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,610 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 264868,582 ops/s
[info]                  ·gc.alloc.rate:                   1779,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              10566,983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11982,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 284664,716 ops/s
[info]                  ·gc.alloc.rate:                   1893,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              10464,486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7446,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 284748,747 ops/s
[info]                  ·gc.alloc.rate:               1921,714 MB/sec
[info]                  ·gc.alloc.rate.norm:          10617,507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11179,465 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   280894,125 ±(99.9%) 34507,791 ops/s [Average]
[info]   (min, avg, max) = (264868,582, 280894,125, 285270,704), stdev = 8961,564
[info]   CI (99.9%): [246386,334, 315401,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1877,383 ±(99.9%) 218,795 MB/sec [Average]
[info]   (min, avg, max) = (1779,015, 1877,383, 1921,714), stdev = 56,820
[info]   CI (99.9%): [1658,587, 2096,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10515,889 ±(99.9%) 341,579 B/op [Average]
[info]   (min, avg, max) = (10391,870, 10515,889, 10617,507), stdev = 88,707
[info]   CI (99.9%): [10174,311, 10857,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1747,952 ±(99.9%) 1423,433 MB/sec [Average]
[info]   (min, avg, max) = (1338,723, 1747,952, 2023,425), stdev = 369,661
[info]   CI (99.9%): [324,519, 3171,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9821,384 ±(99.9%) 8561,503 B/op [Average]
[info]   (min, avg, max) = (7383,070, 9821,384, 11982,968), stdev = 2223,395
[info]   CI (99.9%): [1259,881, 18382,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,292), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,646 ±(99.9%) 3,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 1,610), stdev = 0,831
[info]   CI (99.9%): [≈ 0, 3,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,43% complete, ETA 00:57:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34261,124 ops/s
[info] # Warmup Iteration   2: 58050,798 ops/s
[info] # Warmup Iteration   3: 59147,098 ops/s
[info] # Warmup Iteration   4: 59067,273 ops/s
[info] # Warmup Iteration   5: 56702,845 ops/s
[info] Iteration   1: 59521,111 ops/s
[info]                  ·gc.alloc.rate:               645,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          17061,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17746,054 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 59295,550 ops/s
[info]                  ·gc.alloc.rate:               636,146 MB/sec
[info]                  ·gc.alloc.rate.norm:          16879,453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17813,080 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 56482,209 ops/s
[info]                  ·gc.alloc.rate:                   614,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              17115,969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18708,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,580 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 59441,405 ops/s
[info]                  ·gc.alloc.rate:                   638,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              16901,750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17779,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,551 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 59204,847 ops/s
[info]                  ·gc.alloc.rate:               635,725 MB/sec
[info]                  ·gc.alloc.rate.norm:          16893,310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17866,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   58789,024 ±(99.9%) 4988,192 ops/s [Average]
[info]   (min, avg, max) = (56482,209, 58789,024, 59521,111), stdev = 1295,418
[info]   CI (99.9%): [53800,833, 63777,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   634,119 ±(99.9%) 44,792 MB/sec [Average]
[info]   (min, avg, max) = (614,535, 634,119, 645,544), stdev = 11,632
[info]   CI (99.9%): [589,327, 678,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16970,330 ±(99.9%) 423,378 B/op [Average]
[info]   (min, avg, max) = (16879,453, 16970,330, 17115,969), stdev = 109,950
[info]   CI (99.9%): [16546,952, 17393,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671,735 ±(99.9%) 1,525 MB/sec [Average]
[info]   (min, avg, max) = (671,333, 671,735, 672,356), stdev = 0,396
[info]   CI (99.9%): [670,209, 673,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17982,778 ±(99.9%) 1572,648 B/op [Average]
[info]   (min, avg, max) = (17746,054, 17982,778, 18708,994), stdev = 408,412
[info]   CI (99.9%): [16410,130, 19555,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,226 ±(99.9%) 1,194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,226, 0,580), stdev = 0,310
[info]   CI (99.9%): [≈ 0, 1,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,63% complete, ETA 00:57:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25732,861 ops/s
[info] # Warmup Iteration   2: 75642,656 ops/s
[info] # Warmup Iteration   3: 80022,208 ops/s
[info] # Warmup Iteration   4: 80732,221 ops/s
[info] # Warmup Iteration   5: 81278,645 ops/s
[info] Iteration   1: 80542,491 ops/s
[info]                  ·gc.alloc.rate:                   1786,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              34893,160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39336,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,407 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 81267,060 ops/s
[info]                  ·gc.alloc.rate:                   1809,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              35030,709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38972,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78,209 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 81423,223 ops/s
[info]                  ·gc.alloc.rate:                   1791,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              34611,745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25855,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,402 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 81515,382 ops/s
[info]                  ·gc.alloc.rate:                   1802,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              34778,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38700,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,608 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 81498,005 ops/s
[info]                  ·gc.alloc.rate:               1805,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          34843,724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25806,272 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   81249,232 ±(99.9%) 1567,450 ops/s [Average]
[info]   (min, avg, max) = (80542,491, 81249,232, 81515,382), stdev = 407,062
[info]   CI (99.9%): [79681,782, 82816,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1798,854 ±(99.9%) 37,531 MB/sec [Average]
[info]   (min, avg, max) = (1786,197, 1798,854, 1809,591), stdev = 9,747
[info]   CI (99.9%): [1761,324, 1836,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34831,476 ±(99.9%) 592,754 B/op [Average]
[info]   (min, avg, max) = (34611,745, 34831,476, 35030,709), stdev = 153,936
[info]   CI (99.9%): [34238,722, 35424,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1741,449 ±(99.9%) 1419,911 MB/sec [Average]
[info]   (min, avg, max) = (1336,851, 1741,449, 2013,657), stdev = 368,746
[info]   CI (99.9%): [321,538, 3161,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33734,268 ±(99.9%) 27794,662 B/op [Average]
[info]   (min, avg, max) = (25806,272, 33734,268, 39336,569), stdev = 7218,185
[info]   CI (99.9%): [5939,607, 61528,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,833 ±(99.9%) 6,904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,833, 4,040), stdev = 1,793
[info]   CI (99.9%): [≈ 0, 7,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16,125 ±(99.9%) 133,660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,125, 78,209), stdev = 34,711
[info]   CI (99.9%): [≈ 0, 149,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,83% complete, ETA 00:57:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25205,370 ops/s
[info] # Warmup Iteration   2: 93331,493 ops/s
[info] # Warmup Iteration   3: 92786,420 ops/s
[info] # Warmup Iteration   4: 95736,403 ops/s
[info] # Warmup Iteration   5: 94971,037 ops/s
[info] Iteration   1: 85582,616 ops/s
[info]                  ·gc.alloc.rate:                   1124,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              20663,891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24537,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,383 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 96162,466 ops/s
[info]                  ·gc.alloc.rate:               1240,376 MB/sec
[info]                  ·gc.alloc.rate.norm:          20292,763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10929,367 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 95508,312 ops/s
[info]                  ·gc.alloc.rate:                   1268,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              20901,617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22013,642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 95718,628 ops/s
[info]                  ·gc.alloc.rate:                   1273,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              20933,219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21981,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 96438,357 ops/s
[info]                  ·gc.alloc.rate:                   1280,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              20895,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21796,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,737 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   93882,076 ±(99.9%) 17920,328 ops/s [Average]
[info]   (min, avg, max) = (85582,616, 93882,076, 96438,357), stdev = 4653,852
[info]   CI (99.9%): [75961,748, 111802,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1237,566 ±(99.9%) 251,299 MB/sec [Average]
[info]   (min, avg, max) = (1124,101, 1237,566, 1280,846), stdev = 65,261
[info]   CI (99.9%): [986,267, 1488,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20737,389 ±(99.9%) 1042,878 B/op [Average]
[info]   (min, avg, max) = (20292,763, 20737,389, 20933,219), stdev = 270,832
[info]   CI (99.9%): [19694,511, 21780,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202,552 ±(99.9%) 1150,567 MB/sec [Average]
[info]   (min, avg, max) = (668,047, 1202,552, 1337,383), stdev = 298,799
[info]   CI (99.9%): [51,985, 2353,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20251,753 ±(99.9%) 20534,886 B/op [Average]
[info]   (min, avg, max) = (10929,367, 20251,753, 24537,335), stdev = 5332,845
[info]   CI (99.9%): [≈ 0, 40786,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,908 ±(99.9%) 7,244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,908, 4,269), stdev = 1,881
[info]   CI (99.9%): [≈ 0, 8,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14,925 ±(99.9%) 119,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,925, 70,164), stdev = 30,917
[info]   CI (99.9%): [≈ 0, 133,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,03% complete, ETA 00:56:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54066,741 ops/s
[info] # Warmup Iteration   2: 104763,599 ops/s
[info] # Warmup Iteration   3: 106104,940 ops/s
[info] # Warmup Iteration   4: 106843,326 ops/s
[info] # Warmup Iteration   5: 106674,351 ops/s
[info] Iteration   1: 106767,865 ops/s
[info]                  ·gc.alloc.rate:                   1325,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              19535,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19801,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 106824,423 ops/s
[info]                  ·gc.alloc.rate:                   1324,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              19504,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19801,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,613 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 106591,492 ops/s
[info]                  ·gc.alloc.rate:                   1321,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              19499,883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19848,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 105588,713 ops/s
[info]                  ·gc.alloc.rate:                   1294,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              19292,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10018,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,998 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 105566,732 ops/s
[info]                  ·gc.alloc.rate:                   1321,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              19692,962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20002,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,931 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   106267,845 ±(99.9%) 2448,511 ops/s [Average]
[info]   (min, avg, max) = (105566,732, 106267,845, 106824,423), stdev = 635,871
[info]   CI (99.9%): [103819,334, 108716,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1317,486 ±(99.9%) 49,479 MB/sec [Average]
[info]   (min, avg, max) = (1294,771, 1317,486, 1325,766), stdev = 12,850
[info]   CI (99.9%): [1268,006, 1366,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19504,938 ±(99.9%) 550,200 B/op [Average]
[info]   (min, avg, max) = (19292,006, 19504,938, 19692,962), stdev = 142,885
[info]   CI (99.9%): [18954,738, 20055,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209,515 ±(99.9%) 1156,274 MB/sec [Average]
[info]   (min, avg, max) = (672,360, 1209,515, 1344,752), stdev = 300,281
[info]   CI (99.9%): [53,241, 2365,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17894,245 ±(99.9%) 16956,942 B/op [Average]
[info]   (min, avg, max) = (10018,116, 17894,245, 20002,198), stdev = 4403,664
[info]   CI (99.9%): [937,303, 34851,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 4,907 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,758, 2,999), stdev = 1,274
[info]   CI (99.9%): [≈ 0, 5,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11,206 ±(99.9%) 72,421 B/op [Average]
[info]   (min, avg, max) = (0,613, 11,206, 44,262), stdev = 18,808
[info]   CI (99.9%): [≈ 0, 83,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,600, 5,000), stdev = 1,949
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,23% complete, ETA 00:56:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7620,853 ops/s
[info] # Warmup Iteration   2: 44917,432 ops/s
[info] # Warmup Iteration   3: 50226,829 ops/s
[info] # Warmup Iteration   4: 50201,108 ops/s
[info] # Warmup Iteration   5: 50227,052 ops/s
[info] Iteration   1: 50584,441 ops/s
[info]                  ·gc.alloc.rate:                   2370,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              73725,342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83149,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150,258 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 50943,650 ops/s
[info]                  ·gc.alloc.rate:                   2383,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              73618,539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61714,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,929 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 50691,825 ops/s
[info]                  ·gc.alloc.rate:                   2375,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              73735,729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82696,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,646 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 50975,583 ops/s
[info]                  ·gc.alloc.rate:               2387,759 MB/sec
[info]                  ·gc.alloc.rate.norm:          73694,694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61812,203 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 50872,322 ops/s
[info]                  ·gc.alloc.rate:               2410,613 MB/sec
[info]                  ·gc.alloc.rate.norm:          74548,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82799,669 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   50813,564 ±(99.9%) 649,899 ops/s [Average]
[info]   (min, avg, max) = (50584,441, 50813,564, 50975,583), stdev = 168,777
[info]   CI (99.9%): [50163,665, 51463,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2385,692 ±(99.9%) 59,618 MB/sec [Average]
[info]   (min, avg, max) = (2370,483, 2385,692, 2410,613), stdev = 15,482
[info]   CI (99.9%): [2326,075, 2445,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73864,548 ±(99.9%) 1482,677 B/op [Average]
[info]   (min, avg, max) = (73618,539, 73864,548, 74548,434), stdev = 385,046
[info]   CI (99.9%): [72381,871, 75347,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2403,314 ±(99.9%) 1415,801 MB/sec [Average]
[info]   (min, avg, max) = (1998,399, 2403,314, 2677,426), stdev = 367,679
[info]   CI (99.9%): [987,513, 3819,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74434,698 ±(99.9%) 44545,872 B/op [Average]
[info]   (min, avg, max) = (61714,835, 74434,698, 83149,917), stdev = 11568,422
[info]   CI (99.9%): [29888,826, 118980,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,983 ±(99.9%) 8,284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,983, 4,831), stdev = 2,151
[info]   CI (99.9%): [≈ 0, 9,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30,567 ±(99.9%) 257,663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,567, 150,258), stdev = 66,914
[info]   CI (99.9%): [≈ 0, 288,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 7,000), stdev = 1,517
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,43% complete, ETA 00:56:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37457,334 ops/s
[info] # Warmup Iteration   2: 79840,867 ops/s
[info] # Warmup Iteration   3: 85696,004 ops/s
[info] # Warmup Iteration   4: 82427,382 ops/s
[info] # Warmup Iteration   5: 86563,002 ops/s
[info] Iteration   1: 86534,703 ops/s
[info]                  ·gc.alloc.rate:               1566,106 MB/sec
[info]                  ·gc.alloc.rate.norm:          28473,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24424,652 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 86223,676 ops/s
[info]                  ·gc.alloc.rate:                   1573,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              28715,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36779,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59,274 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 86431,137 ops/s
[info]                  ·gc.alloc.rate:                   1561,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              28421,697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24440,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 84944,992 ops/s
[info]                  ·gc.alloc.rate:                   1547,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              28653,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24806,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,386 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 86696,314 ops/s
[info]                  ·gc.alloc.rate:                   1578,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              28642,753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24281,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,378 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   86166,164 ±(99.9%) 2710,303 ops/s [Average]
[info]   (min, avg, max) = (84944,992, 86166,164, 86696,314), stdev = 703,857
[info]   CI (99.9%): [83455,861, 88876,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1565,366 ±(99.9%) 46,867 MB/sec [Average]
[info]   (min, avg, max) = (1547,072, 1565,366, 1578,428), stdev = 12,171
[info]   CI (99.9%): [1518,499, 1612,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28581,349 ±(99.9%) 487,098 B/op [Average]
[info]   (min, avg, max) = (28421,697, 28581,349, 28715,555), stdev = 126,498
[info]   CI (99.9%): [28094,251, 29068,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1475,879 ±(99.9%) 1162,220 MB/sec [Average]
[info]   (min, avg, max) = (1338,103, 1475,879, 2015,785), stdev = 301,825
[info]   CI (99.9%): [313,659, 2638,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26946,735 ±(99.9%) 21179,977 B/op [Average]
[info]   (min, avg, max) = (24281,718, 26946,735, 36779,982), stdev = 5500,373
[info]   CI (99.9%): [5766,757, 48126,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,808 ±(99.9%) 5,395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,808, 3,249), stdev = 1,401
[info]   CI (99.9%): [≈ 0, 6,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   14,737 ±(99.9%) 98,437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,737, 59,274), stdev = 25,564
[info]   CI (99.9%): [≈ 0, 113,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 8,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,63% complete, ETA 00:56:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62049,963 ops/s
[info] # Warmup Iteration   2: 121505,913 ops/s
[info] # Warmup Iteration   3: 123892,563 ops/s
[info] # Warmup Iteration   4: 119943,318 ops/s
[info] # Warmup Iteration   5: 125398,155 ops/s
[info] Iteration   1: 125248,880 ops/s
[info]                  ·gc.alloc.rate:               1210,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          15207,504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16824,895 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 125931,425 ops/s
[info]                  ·gc.alloc.rate:               1190,342 MB/sec
[info]                  ·gc.alloc.rate.norm:          14872,293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8370,726 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 124638,846 ops/s
[info]                  ·gc.alloc.rate:                   1201,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              15169,354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16919,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 124444,870 ops/s
[info]                  ·gc.alloc.rate:                   1198,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              15148,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16959,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,387 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 126343,605 ops/s
[info]                  ·gc.alloc.rate:                   1218,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              15167,346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16695,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,927 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   125321,525 ±(99.9%) 3138,024 ops/s [Average]
[info]   (min, avg, max) = (124444,870, 125321,525, 126343,605), stdev = 814,935
[info]   CI (99.9%): [122183,501, 128459,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1203,805 ±(99.9%) 41,531 MB/sec [Average]
[info]   (min, avg, max) = (1190,342, 1203,805, 1218,008), stdev = 10,785
[info]   CI (99.9%): [1162,274, 1245,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15113,002 ±(99.9%) 524,669 B/op [Average]
[info]   (min, avg, max) = (14872,293, 15113,002, 15207,504), stdev = 136,255
[info]   CI (99.9%): [14588,334, 15637,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1206,390 ±(99.9%) 1154,683 MB/sec [Average]
[info]   (min, avg, max) = (669,973, 1206,390, 1341,489), stdev = 299,868
[info]   CI (99.9%): [51,707, 2361,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15153,815 ±(99.9%) 14606,352 B/op [Average]
[info]   (min, avg, max) = (8370,726, 15153,815, 16959,124), stdev = 3793,223
[info]   CI (99.9%): [547,463, 29760,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 5,632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,353), stdev = 1,463
[info]   CI (99.9%): [≈ 0, 6,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,515 ±(99.9%) 71,219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,515, 42,387), stdev = 18,495
[info]   CI (99.9%): [≈ 0, 80,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,83% complete, ETA 00:55:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197360,761 ops/s
[info] # Warmup Iteration   2: 347939,164 ops/s
[info] # Warmup Iteration   3: 362153,907 ops/s
[info] # Warmup Iteration   4: 352293,687 ops/s
[info] # Warmup Iteration   5: 364664,126 ops/s
[info] Iteration   1: 362231,343 ops/s
[info]                  ·gc.alloc.rate:                   562,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              2441,136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2895,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 362020,213 ops/s
[info]                  ·gc.alloc.rate:      537,554 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,177 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 367850,304 ops/s
[info]                  ·gc.alloc.rate:               572,007 MB/sec
[info]                  ·gc.alloc.rate.norm:          2446,520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2851,552 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 359082,242 ops/s
[info]                  ·gc.alloc.rate:                   557,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              2442,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2925,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,274 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 355915,549 ops/s
[info]                  ·gc.alloc.rate:               547,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          2418,098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2951,586 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   361419,930 ±(99.9%) 17018,304 ops/s [Average]
[info]   (min, avg, max) = (355915,549, 361419,930, 367850,304), stdev = 4419,599
[info]   CI (99.9%): [344401,626, 378438,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555,188 ±(99.9%) 51,352 MB/sec [Average]
[info]   (min, avg, max) = (537,554, 555,188, 572,007), stdev = 13,336
[info]   CI (99.9%): [503,836, 606,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2416,795 ±(99.9%) 178,697 B/op [Average]
[info]   (min, avg, max) = (2336,177, 2416,795, 2446,520), stdev = 46,407
[info]   CI (99.9%): [2238,097, 2595,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533,750 ±(99.9%) 1148,939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533,750, 667,724), stdev = 298,376
[info]   CI (99.9%): [≈ 0, 1682,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2324,856 ±(99.9%) 5006,472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2324,856, 2951,586), stdev = 1300,165
[info]   CI (99.9%): [≈ 0, 7331,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,073 ±(99.9%) 0,458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,073, 0,274), stdev = 0,119
[info]   CI (99.9%): [≈ 0, 0,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,03% complete, ETA 00:55:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500939,401 ops/s
[info] # Warmup Iteration   2: 760271,176 ops/s
[info] # Warmup Iteration   3: 742943,876 ops/s
[info] # Warmup Iteration   4: 752230,958 ops/s
[info] # Warmup Iteration   5: 740986,502 ops/s
[info] Iteration   1: 745421,958 ops/s
[info]                  ·gc.alloc.rate:               941,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1987,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1416,248 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 743942,454 ops/s
[info]                  ·gc.alloc.rate:               940,874 MB/sec
[info]                  ·gc.alloc.rate.norm:          1989,752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1419,748 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 747599,203 ops/s
[info]                  ·gc.alloc.rate:                   958,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              2016,890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2826,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 747373,138 ops/s
[info]                  ·gc.alloc.rate:               952,480 MB/sec
[info]                  ·gc.alloc.rate.norm:          2005,328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1414,009 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 774547,131 ops/s
[info]                  ·gc.alloc.rate:                   1001,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              2034,271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2731,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   751776,777 ±(99.9%) 49353,387 ops/s [Average]
[info]   (min, avg, max) = (743942,454, 751776,777, 774547,131), stdev = 12816,918
[info]   CI (99.9%): [702423,390, 801130,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   958,942 ±(99.9%) 95,874 MB/sec [Average]
[info]   (min, avg, max) = (940,874, 958,942, 1001,452), stdev = 24,898
[info]   CI (99.9%): [863,068, 1054,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2006,660 ±(99.9%) 75,529 B/op [Average]
[info]   (min, avg, max) = (1987,057, 2006,660, 2034,271), stdev = 19,615
[info]   CI (99.9%): [1931,131, 2082,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940,352 ±(99.9%) 1418,452 MB/sec [Average]
[info]   (min, avg, max) = (671,043, 940,352, 1344,695), stdev = 368,368
[info]   CI (99.9%): [≈ 0, 2358,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1961,577 ±(99.9%) 2876,058 B/op [Average]
[info]   (min, avg, max) = (1414,009, 1961,577, 2826,371), stdev = 746,903
[info]   CI (99.9%): [≈ 0, 4837,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,131), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,23% complete, ETA 00:55:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538980,818 ops/s
[info] # Warmup Iteration   2: 806982,894 ops/s
[info] # Warmup Iteration   3: 828939,211 ops/s
[info] # Warmup Iteration   4: 833131,336 ops/s
[info] # Warmup Iteration   5: 840144,010 ops/s
[info] Iteration   1: 830522,455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 843062,468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 821294,285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 823630,730 ops/s
[info]                  ·gc.alloc.rate:      1,067 MB/sec
[info]                  ·gc.alloc.rate.norm: 2,038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 822653,507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   828232,689 ±(99.9%) 34741,906 ops/s [Average]
[info]   (min, avg, max) = (821294,285, 828232,689, 843062,468), stdev = 9022,363
[info]   CI (99.9%): [793490,783, 862974,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,214 ±(99.9%) 1,837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,214, 1,067), stdev = 0,477
[info]   CI (99.9%): [≈ 0, 2,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,408 ±(99.9%) 3,508 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,408, 2,038), stdev = 0,911
[info]   CI (99.9%): [≈ 0, 3,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,43% complete, ETA 00:55:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106117,407 ops/s
[info] # Warmup Iteration   2: 259912,650 ops/s
[info] # Warmup Iteration   3: 264404,904 ops/s
[info] # Warmup Iteration   4: 267181,162 ops/s
[info] # Warmup Iteration   5: 265073,241 ops/s
[info] Iteration   1: 268312,825 ops/s
[info]                  ·gc.alloc.rate:                   883,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              5182,782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3915,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 268373,738 ops/s
[info]                  ·gc.alloc.rate:               881,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          5168,197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3914,215 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 265061,107 ops/s
[info]                  ·gc.alloc.rate:                   881,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              5233,432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7934,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,371 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 267453,743 ops/s
[info]                  ·gc.alloc.rate:               873,160 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136,445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3935,575 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 265114,277 ops/s
[info]                  ·gc.alloc.rate:               873,863 MB/sec
[info]                  ·gc.alloc.rate.norm:          5186,247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3970,381 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   266863,138 ±(99.9%) 6396,634 ops/s [Average]
[info]   (min, avg, max) = (265061,107, 266863,138, 268373,738), stdev = 1661,186
[info]   CI (99.9%): [260466,504, 273259,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   878,842 ±(99.9%) 19,088 MB/sec [Average]
[info]   (min, avg, max) = (873,160, 878,842, 883,882), stdev = 4,957
[info]   CI (99.9%): [859,754, 897,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5181,421 ±(99.9%) 135,158 B/op [Average]
[info]   (min, avg, max) = (5136,445, 5181,421, 5233,432), stdev = 35,100
[info]   CI (99.9%): [5046,263, 5316,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802,027 ±(99.9%) 1151,018 MB/sec [Average]
[info]   (min, avg, max) = (667,680, 802,027, 1336,742), stdev = 298,916
[info]   CI (99.9%): [≈ 0, 1953,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4733,919 ±(99.9%) 6889,789 B/op [Average]
[info]   (min, avg, max) = (3914,215, 4733,919, 7934,379), stdev = 1789,256
[info]   CI (99.9%): [≈ 0, 11623,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,099, 0,371), stdev = 0,161
[info]   CI (99.9%): [≈ 0, 0,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,63% complete, ETA 00:54:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22648,247 ops/s
[info] # Warmup Iteration   2: 28130,632 ops/s
[info] # Warmup Iteration   3: 29201,849 ops/s
[info] # Warmup Iteration   4: 29365,114 ops/s
[info] # Warmup Iteration   5: 29181,397 ops/s
[info] Iteration   1: 29369,107 ops/s
[info]                  ·gc.alloc.rate:               404,701 MB/sec
[info]                  ·gc.alloc.rate.norm:          21678,868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27413,752 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 29514,408 ops/s
[info]                  ·gc.alloc.rate:      395,611 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29370,890 ops/s
[info]                  ·gc.alloc.rate:               418,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          22437,661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35942,407 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 29491,528 ops/s
[info]                  ·gc.alloc.rate:      395,322 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29198,274 ops/s
[info]                  ·gc.alloc.rate:                   409,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              22049,745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36155,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   29388,842 ±(99.9%) 484,551 ops/s [Average]
[info]   (min, avg, max) = (29198,274, 29388,842, 29514,408), stdev = 125,836
[info]   CI (99.9%): [28904,291, 29873,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   404,753 ±(99.9%) 38,160 MB/sec [Average]
[info]   (min, avg, max) = (395,322, 404,753, 418,906), stdev = 9,910
[info]   CI (99.9%): [366,593, 442,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   21668,461 ±(99.9%) 2286,994 B/op [Average]
[info]   (min, avg, max) = (21088,015, 21668,461, 22437,661), stdev = 593,925
[info]   CI (99.9%): [19381,467, 23955,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370,762 ±(99.9%) 1327,110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,762, 671,037), stdev = 344,646
[info]   CI (99.9%): [≈ 0, 1697,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   19902,295 ±(99.9%) 71264,762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19902,295, 36155,317), stdev = 18507,232
[info]   CI (99.9%): [≈ 0, 91167,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,224 ±(99.9%) 1,932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,224, 1,122), stdev = 0,502
[info]   CI (99.9%): [≈ 0, 2,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 4,000), stdev = 1,789
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,84% complete, ETA 00:54:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44588,413 ops/s
[info] # Warmup Iteration   2: 129753,469 ops/s
[info] # Warmup Iteration   3: 135499,040 ops/s
[info] # Warmup Iteration   4: 138175,886 ops/s
[info] # Warmup Iteration   5: 137672,827 ops/s
[info] Iteration   1: 138413,363 ops/s
[info]                  ·gc.alloc.rate:                   1969,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              22384,269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22874,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,161 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 139649,963 ops/s
[info]                  ·gc.alloc.rate:                   1972,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              22217,338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22634,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,507 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 139385,620 ops/s
[info]                  ·gc.alloc.rate:               1973,105 MB/sec
[info]                  ·gc.alloc.rate.norm:          22270,704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22632,598 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 139468,667 ops/s
[info]                  ·gc.alloc.rate:               1970,933 MB/sec
[info]                  ·gc.alloc.rate.norm:          22234,790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22618,482 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 138218,918 ops/s
[info]                  ·gc.alloc.rate:                   1969,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              22414,964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22864,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   139027,306 ±(99.9%) 2540,628 ops/s [Average]
[info]   (min, avg, max) = (138218,918, 139027,306, 139649,963), stdev = 659,793
[info]   CI (99.9%): [136486,678, 141567,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1970,927 ±(99.9%) 6,448 MB/sec [Average]
[info]   (min, avg, max) = (1969,268, 1970,927, 1973,105), stdev = 1,675
[info]   CI (99.9%): [1964,479, 1977,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22304,413 ±(99.9%) 345,294 B/op [Average]
[info]   (min, avg, max) = (22217,338, 22304,413, 22414,964), stdev = 89,672
[info]   CI (99.9%): [21959,119, 22649,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2008,074 ±(99.9%) 11,968 MB/sec [Average]
[info]   (min, avg, max) = (2004,944, 2008,074, 2012,427), stdev = 3,108
[info]   CI (99.9%): [1996,106, 2020,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22724,933 ±(99.9%) 508,970 B/op [Average]
[info]   (min, avg, max) = (22618,482, 22724,933, 22874,166), stdev = 132,178
[info]   CI (99.9%): [22215,963, 23233,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,791 ±(99.9%) 5,446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,791, 3,269), stdev = 1,414
[info]   CI (99.9%): [≈ 0, 6,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8,981 ±(99.9%) 61,912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,981, 37,161), stdev = 16,078
[info]   CI (99.9%): [≈ 0, 70,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 9,000), stdev = 2,683
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,04% complete, ETA 00:54:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76241,749 ops/s
[info] # Warmup Iteration   2: 194377,794 ops/s
[info] # Warmup Iteration   3: 199368,251 ops/s
[info] # Warmup Iteration   4: 202420,487 ops/s
[info] # Warmup Iteration   5: 201587,649 ops/s
[info] Iteration   1: 203487,186 ops/s
[info]                  ·gc.alloc.rate:                   1247,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              9642,392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10340,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,161 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 203858,583 ops/s
[info]                  ·gc.alloc.rate:               1241,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          9582,356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10327,048 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 198668,146 ops/s
[info]                  ·gc.alloc.rate:               1223,710 MB/sec
[info]                  ·gc.alloc.rate.norm:          9690,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10607,455 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 202360,876 ops/s
[info]                  ·gc.alloc.rate:                   1230,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              9568,713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5209,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,714 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 204091,318 ops/s
[info]                  ·gc.alloc.rate:                   1255,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              9674,147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10317,930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,619 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   202493,222 ±(99.9%) 8622,091 ops/s [Average]
[info]   (min, avg, max) = (198668,146, 202493,222, 204091,318), stdev = 2239,130
[info]   CI (99.9%): [193871,131, 211115,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239,685 ±(99.9%) 48,295 MB/sec [Average]
[info]   (min, avg, max) = (1223,710, 1239,685, 1255,008), stdev = 12,542
[info]   CI (99.9%): [1191,390, 1287,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9631,579 ±(99.9%) 208,704 B/op [Average]
[info]   (min, avg, max) = (9568,713, 9631,579, 9690,286), stdev = 54,200
[info]   CI (99.9%): [9422,875, 9840,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204,774 ±(99.9%) 1150,945 MB/sec [Average]
[info]   (min, avg, max) = (670,093, 1204,774, 1339,532), stdev = 298,897
[info]   CI (99.9%): [53,829, 2355,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9360,539 ±(99.9%) 8947,594 B/op [Average]
[info]   (min, avg, max) = (5209,488, 9360,539, 10607,455), stdev = 2323,662
[info]   CI (99.9%): [412,945, 18308,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,837 ±(99.9%) 5,723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,837, 3,436), stdev = 1,486
[info]   CI (99.9%): [≈ 0, 6,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,499 ±(99.9%) 44,495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,499, 26,714), stdev = 11,555
[info]   CI (99.9%): [≈ 0, 50,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 6,000), stdev = 1,225
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,24% complete, ETA 00:54:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225264,973 ops/s
[info] # Warmup Iteration   2: 490771,390 ops/s
[info] # Warmup Iteration   3: 500951,506 ops/s
[info] # Warmup Iteration   4: 504118,231 ops/s
[info] # Warmup Iteration   5: 501686,597 ops/s
[info] Iteration   1: 502031,055 ops/s
[info]                  ·gc.alloc.rate:               339,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064,512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1603,790 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 497941,666 ops/s
[info]                  ·gc.alloc.rate:      324,087 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 497812,223 ops/s
[info]                  ·gc.alloc.rate:               344,658 MB/sec
[info]                  ·gc.alloc.rate.norm:          1089,243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1617,409 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 486741,807 ops/s
[info]                  ·gc.alloc.rate:      316,825 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 502636,982 ops/s
[info]                  ·gc.alloc.rate:                   349,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              1095,296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2099,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   497432,746 ±(99.9%) 24575,413 ops/s [Average]
[info]   (min, avg, max) = (486741,807, 497432,746, 502636,982), stdev = 6382,157
[info]   CI (99.9%): [472857,334, 522008,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335,043 ±(99.9%) 54,064 MB/sec [Average]
[info]   (min, avg, max) = (316,825, 335,043, 349,964), stdev = 14,040
[info]   CI (99.9%): [280,979, 389,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1059,411 ±(99.9%) 132,154 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1059,411, 1095,296), stdev = 34,320
[info]   CI (99.9%): [927,256, 1191,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,872 ±(99.9%) 1217,137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,872, 670,815), stdev = 316,087
[info]   CI (99.9%): [≈ 0, 1556,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1064,135 ±(99.9%) 3818,762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1064,135, 2099,476), stdev = 991,720
[info]   CI (99.9%): [≈ 0, 4882,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,065), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,44% complete, ETA 00:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12484,074 ops/s
[info] # Warmup Iteration   2: 71645,179 ops/s
[info] # Warmup Iteration   3: 75048,505 ops/s
[info] # Warmup Iteration   4: 76793,872 ops/s
[info] # Warmup Iteration   5: 76959,778 ops/s
[info] Iteration   1: 77006,450 ops/s
[info]                  ·gc.alloc.rate:                   3102,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              63377,802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68656,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,404 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 76592,153 ops/s
[info]                  ·gc.alloc.rate:                   3089,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              63453,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55366,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 76773,704 ops/s
[info]                  ·gc.alloc.rate:               3098,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          63497,429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55360,705 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 76750,471 ops/s
[info]                  ·gc.alloc.rate:               3123,479 MB/sec
[info]                  ·gc.alloc.rate.norm:          64025,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69389,653 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 75930,015 ops/s
[info]                  ·gc.alloc.rate:               3065,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          63515,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56217,603 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76610,559 ±(99.9%) 1571,704 ops/s [Average]
[info]   (min, avg, max) = (75930,015, 76610,559, 77006,450), stdev = 408,167
[info]   CI (99.9%): [75038,854, 78182,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3095,781 ±(99.9%) 81,122 MB/sec [Average]
[info]   (min, avg, max) = (3065,503, 3095,781, 3123,479), stdev = 21,067
[info]   CI (99.9%): [3014,659, 3176,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63573,989 ±(99.9%) 992,492 B/op [Average]
[info]   (min, avg, max) = (63377,802, 63573,989, 64025,128), stdev = 257,747
[info]   CI (99.9%): [62581,497, 64566,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2971,186 ±(99.9%) 1412,422 MB/sec [Average]
[info]   (min, avg, max) = (2695,464, 2971,186, 3385,188), stdev = 366,802
[info]   CI (99.9%): [1558,763, 4383,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60998,061 ±(99.9%) 28258,114 B/op [Average]
[info]   (min, avg, max) = (55360,705, 60998,061, 69389,653), stdev = 7338,542
[info]   CI (99.9%): [32739,947, 89256,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,167), stdev = 0,073
[info]   CI (99.9%): [≈ 0, 0,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,766 ±(99.9%) 5,722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,404), stdev = 1,486
[info]   CI (99.9%): [≈ 0, 6,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 1,000
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,64% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72289,673 ops/s
[info] # Warmup Iteration   2: 178236,461 ops/s
[info] # Warmup Iteration   3: 180050,478 ops/s
[info] # Warmup Iteration   4: 180032,984 ops/s
[info] # Warmup Iteration   5: 180046,047 ops/s
[info] Iteration   1: 180284,716 ops/s
[info]                  ·gc.alloc.rate:                   2000,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              17457,847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17616,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,438 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 181114,696 ops/s
[info]                  ·gc.alloc.rate:                   2022,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              17565,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17480,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,713 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 180966,366 ops/s
[info]                  ·gc.alloc.rate:               2008,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          17461,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17472,018 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 181310,272 ops/s
[info]                  ·gc.alloc.rate:               2026,559 MB/sec
[info]                  ·gc.alloc.rate.norm:          17585,362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17453,523 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 181270,041 ops/s
[info]                  ·gc.alloc.rate:               2025,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          17566,757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17425,228 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   180989,218 ±(99.9%) 1604,531 ops/s [Average]
[info]   (min, avg, max) = (180284,716, 180989,218, 181310,272), stdev = 416,692
[info]   CI (99.9%): [179384,687, 182593,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2016,727 ±(99.9%) 44,660 MB/sec [Average]
[info]   (min, avg, max) = (2000,597, 2016,727, 2026,559), stdev = 11,598
[info]   CI (99.9%): [1972,067, 2061,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17527,201 ±(99.9%) 240,239 B/op [Average]
[info]   (min, avg, max) = (17457,847, 17527,201, 17585,362), stdev = 62,389
[info]   CI (99.9%): [17286,962, 17767,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2012,374 ±(99.9%) 14,498 MB/sec [Average]
[info]   (min, avg, max) = (2009,591, 2012,374, 2018,779), stdev = 3,765
[info]   CI (99.9%): [1997,876, 2026,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17489,615 ±(99.9%) 285,160 B/op [Average]
[info]   (min, avg, max) = (17425,228, 17489,615, 17616,505), stdev = 74,055
[info]   CI (99.9%): [17204,455, 17774,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,737 ±(99.9%) 5,699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,737, 3,374), stdev = 1,480
[info]   CI (99.9%): [≈ 0, 6,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,430 ±(99.9%) 49,733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,430, 29,438), stdev = 12,915
[info]   CI (99.9%): [≈ 0, 56,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 7,000), stdev = 1,789
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,84% complete, ETA 00:53:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94403,323 ops/s
[info] # Warmup Iteration   2: 191537,594 ops/s
[info] # Warmup Iteration   3: 199524,451 ops/s
[info] # Warmup Iteration   4: 201834,351 ops/s
[info] # Warmup Iteration   5: 201068,258 ops/s
[info] Iteration   1: 201618,897 ops/s
[info]                  ·gc.alloc.rate:                   1319,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              10298,492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10464,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 198163,750 ops/s
[info]                  ·gc.alloc.rate:               1291,385 MB/sec
[info]                  ·gc.alloc.rate.norm:          10253,094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5324,990 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 201862,236 ops/s
[info]                  ·gc.alloc.rate:                   1318,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              10277,497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10460,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 201940,922 ops/s
[info]                  ·gc.alloc.rate:                   1331,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              10374,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10466,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 202244,085 ops/s
[info]                  ·gc.alloc.rate:                   1336,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              10397,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10419,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   201165,978 ±(99.9%) 6519,464 ops/s [Average]
[info]   (min, avg, max) = (198163,750, 201165,978, 202244,085), stdev = 1693,084
[info]   CI (99.9%): [194646,514, 207685,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1319,616 ±(99.9%) 67,504 MB/sec [Average]
[info]   (min, avg, max) = (1291,385, 1319,616, 1336,581), stdev = 17,531
[info]   CI (99.9%): [1252,112, 1387,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10320,095 ±(99.9%) 240,755 B/op [Average]
[info]   (min, avg, max) = (10253,094, 10320,095, 10397,086), stdev = 62,523
[info]   CI (99.9%): [10079,340, 10560,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207,361 ±(99.9%) 1155,247 MB/sec [Average]
[info]   (min, avg, max) = (670,686, 1207,361, 1343,428), stdev = 300,014
[info]   CI (99.9%): [52,114, 2362,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9427,130 ±(99.9%) 8830,478 B/op [Average]
[info]   (min, avg, max) = (5324,990, 9427,130, 10466,447), stdev = 2293,247
[info]   CI (99.9%): [596,651, 18257,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,762 ±(99.9%) 6,384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,762, 3,728), stdev = 1,658
[info]   CI (99.9%): [≈ 0, 7,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,938 ±(99.9%) 49,733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,938, 29,041), stdev = 12,916
[info]   CI (99.9%): [≈ 0, 55,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,04% complete, ETA 00:53:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247269,606 ops/s
[info] # Warmup Iteration   2: 598909,476 ops/s
[info] # Warmup Iteration   3: 596575,443 ops/s
[info] # Warmup Iteration   4: 583966,669 ops/s
[info] # Warmup Iteration   5: 594969,665 ops/s
[info] Iteration   1: 602981,274 ops/s
[info]                  ·gc.alloc.rate:               619,314 MB/sec
[info]                  ·gc.alloc.rate.norm:          1615,830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1738,762 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 595173,403 ops/s
[info]                  ·gc.alloc.rate:               606,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          1602,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1761,572 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 596909,127 ops/s
[info]                  ·gc.alloc.rate:                   612,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1614,365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1759,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 595521,299 ops/s
[info]                  ·gc.alloc.rate:                   606,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1602,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1763,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 535331,349 ops/s
[info]                  ·gc.alloc.rate:      528,095 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   585183,290 ±(99.9%) 107992,480 ops/s [Average]
[info]   (min, avg, max) = (535331,349, 585183,290, 602981,274), stdev = 28045,304
[info]   CI (99.9%): [477190,810, 693175,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   594,525 ±(99.9%) 144,476 MB/sec [Average]
[info]   (min, avg, max) = (528,095, 594,525, 619,314), stdev = 37,520
[info]   CI (99.9%): [450,049, 739,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1597,346 ±(99.9%) 100,707 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1597,346, 1615,830), stdev = 26,153
[info]   CI (99.9%): [1496,639, 1698,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533,547 ±(99.9%) 1148,503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533,547, 667,437), stdev = 298,262
[info]   CI (99.9%): [≈ 0, 1682,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1404,519 ±(99.9%) 3023,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1404,519, 1763,181), stdev = 785,212
[info]   CI (99.9%): [≈ 0, 4428,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,055), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,24% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 815480,019 ops/s
[info] # Warmup Iteration   2: 1278536,645 ops/s
[info] # Warmup Iteration   3: 1276519,285 ops/s
[info] # Warmup Iteration   4: 1265570,887 ops/s
[info] # Warmup Iteration   5: 1277197,149 ops/s
[info] Iteration   1: 1284302,475 ops/s
[info]                  ·gc.alloc.rate:                   967,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1185,368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1279881,663 ops/s
[info]                  ·gc.alloc.rate:               981,177 MB/sec
[info]                  ·gc.alloc.rate.norm:          1206,111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1652,217 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 1284627,409 ops/s
[info]                  ·gc.alloc.rate:               979,691 MB/sec
[info]                  ·gc.alloc.rate.norm:          1199,822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 823,444 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1276549,351 ops/s
[info]                  ·gc.alloc.rate:               972,148 MB/sec
[info]                  ·gc.alloc.rate.norm:          1198,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 828,668 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1280652,772 ops/s
[info]                  ·gc.alloc.rate:                   1003,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1652,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1281202,734 ±(99.9%) 12920,970 ops/s [Average]
[info]   (min, avg, max) = (1276549,351, 1281202,734, 1284627,409), stdev = 3355,535
[info]   CI (99.9%): [1268281,764, 1294123,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   980,831 ±(99.9%) 53,222 MB/sec [Average]
[info]   (min, avg, max) = (967,648, 980,831, 1003,492), stdev = 13,822
[info]   CI (99.9%): [927,610, 1034,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1204,452 ±(99.9%) 67,580 B/op [Average]
[info]   (min, avg, max) = (1185,368, 1204,452, 1232,807), stdev = 17,550
[info]   CI (99.9%): [1136,872, 1272,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,174 ±(99.9%) 1418,545 MB/sec [Average]
[info]   (min, avg, max) = (671,693, 941,174, 1345,366), stdev = 368,392
[info]   CI (99.9%): [≈ 0, 2359,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1155,991 ±(99.9%) 1745,358 B/op [Average]
[info]   (min, avg, max) = (822,824, 1155,991, 1652,805), stdev = 453,264
[info]   CI (99.9%): [≈ 0, 2901,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,051), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,140
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,44% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 931996,091 ops/s
[info] # Warmup Iteration   2: 1367785,265 ops/s
[info] # Warmup Iteration   3: 1188821,658 ops/s
[info] # Warmup Iteration   4: 1405240,783 ops/s
[info] # Warmup Iteration   5: 1279163,346 ops/s
[info] Iteration   1: 1405643,021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1114642,689 ops/s
[info]                  ·gc.alloc.rate:      1,410 MB/sec
[info]                  ·gc.alloc.rate.norm: 1,991 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1406734,078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1404562,928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1403460,691 ops/s
[info]                  ·gc.alloc.rate:      0,035 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1347008,682 ±(99.9%) 500207,331 ops/s [Average]
[info]   (min, avg, max) = (1114642,689, 1347008,682, 1406734,078), stdev = 129902,255
[info]   CI (99.9%): [846801,350, 1847216,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,289 ±(99.9%) 2,414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,289, 1,410), stdev = 0,627
[info]   CI (99.9%): [≈ 0, 2,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,406 ±(99.9%) 3,411 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,406, 1,991), stdev = 0,886
[info]   CI (99.9%): [≈ 0, 3,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,64% complete, ETA 00:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162187,454 ops/s
[info] # Warmup Iteration   2: 397151,051 ops/s
[info] # Warmup Iteration   3: 396141,683 ops/s
[info] # Warmup Iteration   4: 399164,702 ops/s
[info] # Warmup Iteration   5: 397507,137 ops/s
[info] Iteration   1: 399871,516 ops/s
[info]                  ·gc.alloc.rate:                   1120,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              4408,726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5251,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 398397,261 ops/s
[info]                  ·gc.alloc.rate:               1126,658 MB/sec
[info]                  ·gc.alloc.rate.norm:          4449,331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5276,354 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 361831,066 ops/s
[info]                  ·gc.alloc.rate:                   998,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              4342,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2906,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 398948,736 ops/s
[info]                  ·gc.alloc.rate:               1124,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          4436,532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5276,700 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 339521,777 ops/s
[info]                  ·gc.alloc.rate:                   947,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              4390,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3101,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,887 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         132,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   379714,071 ±(99.9%) 106513,622 ops/s [Average]
[info]   (min, avg, max) = (339521,777, 379714,071, 399871,516), stdev = 27661,249
[info]   CI (99.9%): [273200,449, 486227,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1063,655 ±(99.9%) 326,126 MB/sec [Average]
[info]   (min, avg, max) = (947,489, 1063,655, 1126,658), stdev = 84,694
[info]   CI (99.9%): [737,529, 1389,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4405,396 ±(99.9%) 162,795 B/op [Average]
[info]   (min, avg, max) = (4342,057, 4405,396, 4449,331), stdev = 42,277
[info]   CI (99.9%): [4242,601, 4568,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1069,335 ±(99.9%) 1407,604 MB/sec [Average]
[info]   (min, avg, max) = (668,385, 1069,335, 1338,042), stdev = 365,550
[info]   CI (99.9%): [≈ 0, 2476,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4362,546 ±(99.9%) 4783,012 B/op [Average]
[info]   (min, avg, max) = (2906,216, 4362,546, 5276,700), stdev = 1242,133
[info]   CI (99.9%): [≈ 0, 9145,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,737 ±(99.9%) 6,258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,737, 3,644), stdev = 1,625
[info]   CI (99.9%): [≈ 0, 6,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,412 ±(99.9%) 29,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,412, 16,887), stdev = 7,533
[info]   CI (99.9%): [≈ 0, 32,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   151,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 30,200, 132,000), stdev = 56,918
[info]   CI (99.9%): [151,000, 151,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,84% complete, ETA 00:51:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35025,031 ops/s
[info] # Warmup Iteration   2: 50009,849 ops/s
[info] # Warmup Iteration   3: 49562,283 ops/s
[info] # Warmup Iteration   4: 49420,116 ops/s
[info] # Warmup Iteration   5: 49968,143 ops/s
[info] Iteration   1: 49987,306 ops/s
[info]                  ·gc.alloc.rate:      373,642 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49855,040 ops/s
[info]                  ·gc.alloc.rate:               386,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          12188,340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16150,379 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 49872,266 ops/s
[info]                  ·gc.alloc.rate:      372,791 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49743,242 ops/s
[info]                  ·gc.alloc.rate:                   385,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              12204,148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21223,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,659 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 49804,332 ops/s
[info]                  ·gc.alloc.rate:               390,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          12323,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21198,025 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   49852,437 ±(99.9%) 348,835 ops/s [Average]
[info]   (min, avg, max) = (49743,242, 49852,437, 49987,306), stdev = 90,591
[info]   CI (99.9%): [49503,602, 50201,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   381,723 ±(99.9%) 30,597 MB/sec [Average]
[info]   (min, avg, max) = (372,791, 381,723, 390,092), stdev = 7,946
[info]   CI (99.9%): [351,126, 412,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12047,130 ±(99.9%) 1029,013 B/op [Average]
[info]   (min, avg, max) = (11760,009, 12047,130, 12323,139), stdev = 267,231
[info]   CI (99.9%): [11018,117, 13076,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370,765 ±(99.9%) 1327,115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,765, 671,028), stdev = 344,648
[info]   CI (99.9%): [≈ 0, 1697,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11714,314 ±(99.9%) 41938,797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11714,314, 21223,163), stdev = 10891,372
[info]   CI (99.9%): [≈ 0, 53653,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,132 ±(99.9%) 1,134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,132, 0,659), stdev = 0,295
[info]   CI (99.9%): [≈ 0, 1,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,04% complete, ETA 00:51:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239,919 ops/s
[info] # Warmup Iteration   2: 644,971 ops/s
[info] # Warmup Iteration   3: 667,105 ops/s
[info] # Warmup Iteration   4: 671,572 ops/s
[info] # Warmup Iteration   5: 657,536 ops/s
[info] Iteration   1: 631,987 ops/s
[info]                  ·gc.alloc.rate:                   1346,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              3350357,826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3327944,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103,532 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 670,568 ops/s
[info]                  ·gc.alloc.rate:                   1448,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              3395192,869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4704548,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         12,000 ms
[info] Iteration   3: 672,182 ops/s
[info]                  ·gc.alloc.rate:                   1437,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              3362407,441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3131705,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13292,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 642,842 ops/s
[info]                  ·gc.alloc.rate:                   1401,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              3429555,583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3261511,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305,767 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 671,360 ops/s
[info]                  ·gc.alloc.rate:                   1432,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              3356889,964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3111399,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   657,788 ±(99.9%) 73,157 ops/s [Average]
[info]   (min, avg, max) = (631,987, 657,788, 672,182), stdev = 18,999
[info]   CI (99.9%): [584,630, 730,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1413,156 ±(99.9%) 158,445 MB/sec [Average]
[info]   (min, avg, max) = (1346,427, 1413,156, 1448,096), stdev = 41,148
[info]   CI (99.9%): [1254,711, 1571,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3378880,737 ±(99.9%) 127748,350 B/op [Average]
[info]   (min, avg, max) = (3350357,826, 3378880,737, 3429555,583), stdev = 33175,841
[info]   CI (99.9%): [3251132,386, 3506629,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1468,636 ±(99.9%) 1158,019 MB/sec [Average]
[info]   (min, avg, max) = (1328,049, 1468,636, 2006,554), stdev = 300,734
[info]   CI (99.9%): [310,618, 2626,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3507422,058 ±(99.9%) 2600106,202 B/op [Average]
[info]   (min, avg, max) = (3111399,619, 3507422,058, 4704548,571), stdev = 675239,324
[info]   CI (99.9%): [907315,857, 6107528,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1,194 ±(99.9%) 9,659 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 1,194, 5,681), stdev = 2,508
[info]   CI (99.9%): [≈ 0, 10,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2798,818 ±(99.9%) 22590,186 B/op [Average]
[info]   (min, avg, max) = (97,524, 2798,818, 13292,220), stdev = 5866,600
[info]   CI (99.9%): [≈ 0, 25389,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,800, 12,000), stdev = 4,147
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,24% complete, ETA 00:51:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260,512 ops/s
[info] # Warmup Iteration   2: 633,558 ops/s
[info] # Warmup Iteration   3: 640,957 ops/s
[info] # Warmup Iteration   4: 627,721 ops/s
[info] # Warmup Iteration   5: 653,065 ops/s
[info] Iteration   1: 660,016 ops/s
[info]                  ·gc.alloc.rate:               1401,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          3339003,873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3173489,089 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   2: 657,791 ops/s
[info]                  ·gc.alloc.rate:                   1385,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              3312594,906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3189551,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,799 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 657,320 ops/s
[info]                  ·gc.alloc.rate:                   1397,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              3345029,860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3191941,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12848,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   4: 631,871 ops/s
[info]                  ·gc.alloc.rate:                   1387,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              3455004,570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3316619,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1503,595 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 642,486 ops/s
[info]                  ·gc.alloc.rate:               1373,712 MB/sec
[info]                  ·gc.alloc.rate.norm:          3362795,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3248465,617 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   649,897 ±(99.9%) 47,147 ops/s [Average]
[info]   (min, avg, max) = (631,871, 649,897, 660,016), stdev = 12,244
[info]   CI (99.9%): [602,750, 697,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1389,139 ±(99.9%) 42,372 MB/sec [Average]
[info]   (min, avg, max) = (1373,712, 1389,139, 1401,414), stdev = 11,004
[info]   CI (99.9%): [1346,766, 1431,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3362885,728 ±(99.9%) 210065,164 B/op [Average]
[info]   (min, avg, max) = (3312594,906, 3362885,728, 3455004,570), stdev = 54553,256
[info]   CI (99.9%): [3152820,565, 3572950,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1331,704 ±(99.9%) 10,655 MB/sec [Average]
[info]   (min, avg, max) = (1327,008, 1331,704, 1333,913), stdev = 2,767
[info]   CI (99.9%): [1321,049, 1342,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3224013,470 ±(99.9%) 227340,396 B/op [Average]
[info]   (min, avg, max) = (3173489,089, 3224013,470, 3316619,342), stdev = 59039,579
[info]   CI (99.9%): [2996673,073, 3451353,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1,199 ±(99.9%) 9,032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,199, 5,369), stdev = 2,346
[info]   CI (99.9%): [≈ 0, 10,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2880,327 ±(99.9%) 21599,607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2880,327, 12848,243), stdev = 5609,349
[info]   CI (99.9%): [≈ 0, 24479,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,400, 8,000), stdev = 2,702
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,45% complete, ETA 00:51:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24052,971 ops/s
[info] # Warmup Iteration   2: 39558,195 ops/s
[info] # Warmup Iteration   3: 39154,272 ops/s
[info] # Warmup Iteration   4: 39588,180 ops/s
[info] # Warmup Iteration   5: 40632,870 ops/s
[info] Iteration   1: 40698,042 ops/s
[info]                  ·gc.alloc.rate:               744,351 MB/sec
[info]                  ·gc.alloc.rate.norm:          28776,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25914,936 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 40433,339 ops/s
[info]                  ·gc.alloc.rate:               733,040 MB/sec
[info]                  ·gc.alloc.rate.norm:          28523,110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26084,754 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 39885,857 ops/s
[info]                  ·gc.alloc.rate:               721,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          28466,690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26441,757 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 39735,999 ops/s
[info]                  ·gc.alloc.rate:                   717,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              28400,420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26541,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,649 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 38888,396 ops/s
[info]                  ·gc.alloc.rate:               700,894 MB/sec
[info]                  ·gc.alloc.rate.norm:          28356,396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27120,901 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   39928,327 ±(99.9%) 2700,773 ops/s [Average]
[info]   (min, avg, max) = (38888,396, 39928,327, 40698,042), stdev = 701,382
[info]   CI (99.9%): [37227,554, 42629,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   723,461 ±(99.9%) 63,223 MB/sec [Average]
[info]   (min, avg, max) = (700,894, 723,461, 744,351), stdev = 16,419
[info]   CI (99.9%): [660,238, 786,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28504,539 ±(99.9%) 633,595 B/op [Average]
[info]   (min, avg, max) = (28356,396, 28504,539, 28776,076), stdev = 164,543
[info]   CI (99.9%): [27870,944, 29138,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670,361 ±(99.9%) 0,052 MB/sec [Average]
[info]   (min, avg, max) = (670,342, 670,361, 670,375), stdev = 0,013
[info]   CI (99.9%): [670,309, 670,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26420,780 ±(99.9%) 1799,932 B/op [Average]
[info]   (min, avg, max) = (25914,936, 26420,780, 27120,901), stdev = 467,437
[info]   CI (99.9%): [24620,848, 28220,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,330 ±(99.9%) 2,840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,330, 1,649), stdev = 0,737
[info]   CI (99.9%): [≈ 0, 3,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,65% complete, ETA 00:50:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185,224 ops/s
[info] # Warmup Iteration   2: 531,118 ops/s
[info] # Warmup Iteration   3: 633,225 ops/s
[info] # Warmup Iteration   4: 634,153 ops/s
[info] # Warmup Iteration   5: 641,403 ops/s
[info] Iteration   1: 640,102 ops/s
[info]                  ·gc.alloc.rate:                   1401,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              3443287,788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3274959,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 641,953 ops/s
[info]                  ·gc.alloc.rate:                   1412,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              3460116,952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3265588,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101,922 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 636,903 ops/s
[info]                  ·gc.alloc.rate:                   1405,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3470402,169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3292824,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12994,207 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   4: 638,186 ops/s
[info]                  ·gc.alloc.rate:                   1412,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480980,469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280287,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2410,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 637,296 ops/s
[info]                  ·gc.alloc.rate:                   1419,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              3504052,188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3273923,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   638,888 ±(99.9%) 8,131 ops/s [Average]
[info]   (min, avg, max) = (636,903, 638,888, 641,953), stdev = 2,112
[info]   CI (99.9%): [630,757, 647,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1410,421 ±(99.9%) 27,229 MB/sec [Average]
[info]   (min, avg, max) = (1401,530, 1410,421, 1419,853), stdev = 7,071
[info]   CI (99.9%): [1383,192, 1437,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3471767,913 ±(99.9%) 87721,043 B/op [Average]
[info]   (min, avg, max) = (3443287,788, 3471767,913, 3504052,188), stdev = 22780,876
[info]   CI (99.9%): [3384046,870, 3559488,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1331,513 ±(99.9%) 11,206 MB/sec [Average]
[info]   (min, avg, max) = (1326,604, 1331,513, 1333,703), stdev = 2,910
[info]   CI (99.9%): [1320,307, 1342,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3277516,713 ±(99.9%) 38685,595 B/op [Average]
[info]   (min, avg, max) = (3265588,554, 3277516,713, 3292824,476), stdev = 10046,526
[info]   CI (99.9%): [3238831,119, 3316202,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1,265 ±(99.9%) 8,751 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 1,265, 5,263), stdev = 2,273
[info]   CI (99.9%): [≈ 0, 10,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3121,755 ±(99.9%) 21607,155 B/op [Average]
[info]   (min, avg, max) = (51,120, 3121,755, 12994,207), stdev = 5611,309
[info]   CI (99.9%): [≈ 0, 24728,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,800, 9,000), stdev = 3,114
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,85% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214,675 ops/s
[info] # Warmup Iteration   2: 605,398 ops/s
[info] # Warmup Iteration   3: 663,156 ops/s
[info] # Warmup Iteration   4: 659,936 ops/s
[info] # Warmup Iteration   5: 666,229 ops/s
[info] Iteration   1: 665,809 ops/s
[info]                  ·gc.alloc.rate:                   1408,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              3329206,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3164621,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,201 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 665,680 ops/s
[info]                  ·gc.alloc.rate:                   1418,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353298,619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3164621,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,201 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 666,381 ops/s
[info]                  ·gc.alloc.rate:                   1407,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              3321639,676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3159876,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11495,820 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   4: 628,255 ops/s
[info]                  ·gc.alloc.rate:                   1356,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              3394627,167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3344107,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2031,720 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 658,526 ops/s
[info]                  ·gc.alloc.rate:                   1411,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              3372080,571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180733,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   656,930 ±(99.9%) 62,964 ops/s [Average]
[info]   (min, avg, max) = (628,255, 656,930, 666,381), stdev = 16,352
[info]   CI (99.9%): [593,966, 719,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1400,608 ±(99.9%) 97,479 MB/sec [Average]
[info]   (min, avg, max) = (1356,034, 1400,608, 1418,999), stdev = 25,315
[info]   CI (99.9%): [1303,129, 1498,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3354170,422 ±(99.9%) 116155,323 B/op [Average]
[info]   (min, avg, max) = (3321639,676, 3354170,422, 3394627,167), stdev = 30165,169
[info]   CI (99.9%): [3238015,099, 3470325,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1336,944 ±(99.9%) 12,740 MB/sec [Average]
[info]   (min, avg, max) = (1331,595, 1336,944, 1339,343), stdev = 3,308
[info]   CI (99.9%): [1324,204, 1349,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3202792,008 ±(99.9%) 305710,001 B/op [Average]
[info]   (min, avg, max) = (3159876,702, 3202792,008, 3344107,243), stdev = 79391,917
[info]   CI (99.9%): [2897082,007, 3508502,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,159 ±(99.9%) 8,092 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 1,159, 4,871), stdev = 2,102
[info]   CI (99.9%): [≈ 0, 9,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2760,197 ±(99.9%) 19081,467 B/op [Average]
[info]   (min, avg, max) = (49,201, 2760,197, 11495,820), stdev = 4955,396
[info]   CI (99.9%): [≈ 0, 21841,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,200, 8,000), stdev = 2,588
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,05% complete, ETA 00:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5781,180 ops/s
[info] # Warmup Iteration   2: 15678,691 ops/s
[info] # Warmup Iteration   3: 15936,476 ops/s
[info] # Warmup Iteration   4: 16199,733 ops/s
[info] # Warmup Iteration   5: 15964,347 ops/s
[info] Iteration   1: 16055,017 ops/s
[info]                  ·gc.alloc.rate:               1275,874 MB/sec
[info]                  ·gc.alloc.rate.norm:          125024,669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130794,478 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   2: 15659,900 ops/s
[info]                  ·gc.alloc.rate:                   1266,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              127279,212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134159,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 15853,606 ops/s
[info]                  ·gc.alloc.rate:               1284,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          127446,375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132584,655 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   4: 16117,730 ops/s
[info]                  ·gc.alloc.rate:                   1303,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              127227,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130486,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 565,106 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 16131,660 ops/s
[info]                  ·gc.alloc.rate:               1293,385 MB/sec
[info]                  ·gc.alloc.rate.norm:          126137,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129845,358 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   15963,583 ±(99.9%) 781,334 ops/s [Average]
[info]   (min, avg, max) = (15659,900, 15963,583, 16131,660), stdev = 202,910
[info]   CI (99.9%): [15182,249, 16744,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1284,750 ±(99.9%) 55,232 MB/sec [Average]
[info]   (min, avg, max) = (1266,859, 1284,750, 1303,438), stdev = 14,344
[info]   CI (99.9%): [1229,518, 1339,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126622,926 ±(99.9%) 3975,963 B/op [Average]
[info]   (min, avg, max) = (125024,669, 126622,926, 127446,375), stdev = 1032,545
[info]   CI (99.9%): [122646,964, 130598,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1334,862 ±(99.9%) 8,000 MB/sec [Average]
[info]   (min, avg, max) = (1331,409, 1334,862, 1336,828), stdev = 2,078
[info]   CI (99.9%): [1326,862, 1342,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   131574,189 ±(99.9%) 6803,392 B/op [Average]
[info]   (min, avg, max) = (129845,358, 131574,189, 134159,887), stdev = 1766,819
[info]   CI (99.9%): [124770,797, 138377,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1,162 ±(99.9%) 9,961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,162, 5,789), stdev = 2,587
[info]   CI (99.9%): [≈ 0, 11,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   113,440 ±(99.9%) 972,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113,440, 565,106), stdev = 252,491
[info]   CI (99.9%): [≈ 0, 1085,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,600, 7,000), stdev = 1,673
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,25% complete, ETA 00:50:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8978,171 ops/s
[info] # Warmup Iteration   2: 18489,803 ops/s
[info] # Warmup Iteration   3: 19024,968 ops/s
[info] # Warmup Iteration   4: 18988,165 ops/s
[info] # Warmup Iteration   5: 19011,186 ops/s
[info] Iteration   1: 18976,730 ops/s
[info]                  ·gc.alloc.rate:               1153,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          95638,502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110486,908 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 18816,517 ops/s
[info]                  ·gc.alloc.rate:               1141,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          95412,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55768,800 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 19013,184 ops/s
[info]                  ·gc.alloc.rate:                   1165,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              96441,111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110415,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,446 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 18688,132 ops/s
[info]                  ·gc.alloc.rate:                   1158,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              97516,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112391,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445,275 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 19130,583 ops/s
[info]                  ·gc.alloc.rate:                   1157,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              95204,706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54908,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54,799 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18925,029 ±(99.9%) 668,593 ops/s [Average]
[info]   (min, avg, max) = (18688,132, 18925,029, 19130,583), stdev = 173,632
[info]   CI (99.9%): [18256,436, 19593,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1155,281 ±(99.9%) 34,560 MB/sec [Average]
[info]   (min, avg, max) = (1141,192, 1155,281, 1165,547), stdev = 8,975
[info]   CI (99.9%): [1120,721, 1189,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   96042,642 ±(99.9%) 3650,600 B/op [Average]
[info]   (min, avg, max) = (95204,706, 96042,642, 97516,850), stdev = 948,049
[info]   CI (99.9%): [92392,042, 99693,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067,385 ±(99.9%) 1406,150 MB/sec [Average]
[info]   (min, avg, max) = (667,032, 1067,385, 1335,081), stdev = 365,173
[info]   CI (99.9%): [≈ 0, 2473,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   88794,252 ±(99.9%) 117646,665 B/op [Average]
[info]   (min, avg, max) = (54908,448, 88794,252, 112391,505), stdev = 30552,465
[info]   CI (99.9%): [≈ 0, 206440,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1,199 ±(99.9%) 8,871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,199, 5,289), stdev = 2,304
[info]   CI (99.9%): [≈ 0, 10,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   100,704 ±(99.9%) 747,109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100,704, 445,275), stdev = 194,022
[info]   CI (99.9%): [≈ 0, 847,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 5,000, 7,000), stdev = 2,550
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,45% complete, ETA 00:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126635,649 ops/s
[info] # Warmup Iteration   2: 227068,188 ops/s
[info] # Warmup Iteration   3: 231548,876 ops/s
[info] # Warmup Iteration   4: 227935,722 ops/s
[info] # Warmup Iteration   5: 228573,465 ops/s
[info] Iteration   1: 229815,141 ops/s
[info]                  ·gc.alloc.rate:               853,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          5843,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4589,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 231230,898 ops/s
[info]                  ·gc.alloc.rate:               857,891 MB/sec
[info]                  ·gc.alloc.rate.norm:          5837,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4561,096 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 229943,082 ops/s
[info]                  ·gc.alloc.rate:               867,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          5933,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9173,239 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 230414,454 ops/s
[info]                  ·gc.alloc.rate:                   859,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              5869,836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4577,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,284 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 228835,159 ops/s
[info]                  ·gc.alloc.rate:               843,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          5799,300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4608,763 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   230047,747 ±(99.9%) 3373,300 ops/s [Average]
[info]   (min, avg, max) = (228835,159, 230047,747, 231230,898), stdev = 876,035
[info]   CI (99.9%): [226674,447, 233421,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   856,351 ±(99.9%) 33,505 MB/sec [Average]
[info]   (min, avg, max) = (843,525, 856,351, 867,164), stdev = 8,701
[info]   CI (99.9%): [822,846, 889,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5856,489 ±(99.9%) 191,366 B/op [Average]
[info]   (min, avg, max) = (5799,300, 5856,489, 5933,134), stdev = 49,697
[info]   CI (99.9%): [5665,123, 6047,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804,433 ±(99.9%) 1154,408 MB/sec [Average]
[info]   (min, avg, max) = (670,348, 804,433, 1340,725), stdev = 299,796
[info]   CI (99.9%): [≈ 0, 1958,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5501,931 ±(99.9%) 7903,050 B/op [Average]
[info]   (min, avg, max) = (4561,096, 5501,931, 9173,239), stdev = 2052,397
[info]   CI (99.9%): [≈ 0, 13404,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,057 ±(99.9%) 0,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,057, 0,284), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 6,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,65% complete, ETA 00:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179785,602 ops/s
[info] # Warmup Iteration   2: 255420,916 ops/s
[info] # Warmup Iteration   3: 257195,166 ops/s
[info] # Warmup Iteration   4: 256593,213 ops/s
[info] # Warmup Iteration   5: 256776,283 ops/s
[info] Iteration   1: 256605,048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 256317,450 ops/s
[info]                  ·gc.alloc.rate:      0,928 MB/sec
[info]                  ·gc.alloc.rate.norm: 5,695 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 246147,725 ops/s
[info]                  ·gc.alloc.rate:      6,269 MB/sec
[info]                  ·gc.alloc.rate.norm: 40,065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 255341,757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 255092,469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   253900,890 ±(99.9%) 16868,255 ops/s [Average]
[info]   (min, avg, max) = (246147,725, 253900,890, 256605,048), stdev = 4380,632
[info]   CI (99.9%): [237032,634, 270769,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1,439 ±(99.9%) 10,509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1,439, 6,269), stdev = 2,729
[info]   CI (99.9%): [≈ 0, 11,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   9,153 ±(99.9%) 67,214 B/op [Average]
[info]   (min, avg, max) = (0,002, 9,153, 40,065), stdev = 17,455
[info]   CI (99.9%): [≈ 0, 76,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,85% complete, ETA 00:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9888,136 ops/s
[info] # Warmup Iteration   2: 17113,325 ops/s
[info] # Warmup Iteration   3: 19681,741 ops/s
[info] # Warmup Iteration   4: 19673,772 ops/s
[info] # Warmup Iteration   5: 19787,786 ops/s
[info] Iteration   1: 19643,485 ops/s
[info]                  ·gc.alloc.rate:                   1288,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              103245,833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106848,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 19744,583 ops/s
[info]                  ·gc.alloc.rate:               1289,489 MB/sec
[info]                  ·gc.alloc.rate.norm:          102743,621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106349,574 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   3: 19739,971 ops/s
[info]                  ·gc.alloc.rate:                   1281,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              102120,156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106435,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 19776,971 ops/s
[info]                  ·gc.alloc.rate:                   1283,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              102119,403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106235,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488,704 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 19214,384 ops/s
[info]                  ·gc.alloc.rate:                   1261,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              103252,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108906,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,410 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   19623,879 ±(99.9%) 902,140 ops/s [Average]
[info]   (min, avg, max) = (19214,384, 19623,879, 19776,971), stdev = 234,283
[info]   CI (99.9%): [18721,738, 20526,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1280,929 ±(99.9%) 44,821 MB/sec [Average]
[info]   (min, avg, max) = (1261,037, 1280,929, 1289,489), stdev = 11,640
[info]   CI (99.9%): [1236,108, 1325,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102696,222 ±(99.9%) 2176,453 B/op [Average]
[info]   (min, avg, max) = (102119,403, 102696,222, 103252,095), stdev = 565,218
[info]   CI (99.9%): [100519,769, 104872,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1333,964 ±(99.9%) 8,701 MB/sec [Average]
[info]   (min, avg, max) = (1330,090, 1333,964, 1335,540), stdev = 2,260
[info]   CI (99.9%): [1325,263, 1342,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106954,987 ±(99.9%) 4293,187 B/op [Average]
[info]   (min, avg, max) = (106235,910, 106954,987, 108906,114), stdev = 1114,927
[info]   CI (99.9%): [102661,799, 111248,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1,245 ±(99.9%) 10,544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,245, 6,143), stdev = 2,738
[info]   CI (99.9%): [≈ 0, 11,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99,088 ±(99.9%) 838,689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99,088, 488,704), stdev = 217,805
[info]   CI (99.9%): [≈ 0, 937,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,800, 7,000), stdev = 2,168
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,05% complete, ETA 00:49:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4524,243 ops/s
[info] # Warmup Iteration   2: 7558,976 ops/s
[info] # Warmup Iteration   3: 7677,696 ops/s
[info] # Warmup Iteration   4: 7708,441 ops/s
[info] # Warmup Iteration   5: 7749,575 ops/s
[info] Iteration   1: 7792,486 ops/s
[info]                  ·gc.alloc.rate:               1105,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          223115,454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135343,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 7755,600 ops/s
[info]                  ·gc.alloc.rate:                   1105,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              224250,684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271978,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,224 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 7683,917 ops/s
[info]                  ·gc.alloc.rate:               1080,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          221139,772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137263,169 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 7678,393 ops/s
[info]                  ·gc.alloc.rate:               1117,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          228959,133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 274705,067 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 7724,488 ops/s
[info]                  ·gc.alloc.rate:                   1111,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              226325,559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273069,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1047,592 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   7726,977 ±(99.9%) 185,985 ops/s [Average]
[info]   (min, avg, max) = (7678,393, 7726,977, 7792,486), stdev = 48,300
[info]   CI (99.9%): [7540,991, 7912,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1103,883 ±(99.9%) 54,688 MB/sec [Average]
[info]   (min, avg, max) = (1080,116, 1103,883, 1117,431), stdev = 14,202
[info]   CI (99.9%): [1049,195, 1158,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   224758,120 ±(99.9%) 11576,561 B/op [Average]
[info]   (min, avg, max) = (221139,772, 224758,120, 228959,133), stdev = 3006,396
[info]   CI (99.9%): [213181,560, 236334,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1072,615 ±(99.9%) 1413,866 MB/sec [Average]
[info]   (min, avg, max) = (670,350, 1072,615, 1340,836), stdev = 367,176
[info]   CI (99.9%): [≈ 0, 2486,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   218471,892 ±(99.9%) 288870,003 B/op [Average]
[info]   (min, avg, max) = (135343,528, 218471,892, 274705,067), stdev = 75018,622
[info]   CI (99.9%): [≈ 0, 507341,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,033 ±(99.9%) 8,849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,033, 5,144), stdev = 2,298
[info]   CI (99.9%): [≈ 0, 9,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   210,363 ±(99.9%) 1802,212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 210,363, 1047,592), stdev = 468,029
[info]   CI (99.9%): [≈ 0, 2012,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,25% complete, ETA 00:48:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136238,333 ops/s
[info] # Warmup Iteration   2: 1678310,332 ops/s
[info] # Warmup Iteration   3: 1712608,915 ops/s
[info] # Warmup Iteration   4: 1713900,019 ops/s
[info] # Warmup Iteration   5: 1687063,426 ops/s
[info] Iteration   1: 1713467,423 ops/s
[info]                  ·gc.alloc.rate:      69,704 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1683973,168 ops/s
[info]                  ·gc.alloc.rate:      83,783 MB/sec
[info]                  ·gc.alloc.rate.norm: 78,275 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1712914,670 ops/s
[info]                  ·gc.alloc.rate:      69,682 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1713517,043 ops/s
[info]                  ·gc.alloc.rate:      69,705 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1714405,454 ops/s
[info]                  ·gc.alloc.rate:      69,741 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1707655,552 ±(99.9%) 51019,569 ops/s [Average]
[info]   (min, avg, max) = (1683973,168, 1707655,552, 1714405,454), stdev = 13249,620
[info]   CI (99.9%): [1656635,983, 1758675,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   72,523 ±(99.9%) 24,238 MB/sec [Average]
[info]   (min, avg, max) = (69,682, 72,523, 83,783), stdev = 6,295
[info]   CI (99.9%): [48,285, 96,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   66,855 ±(99.9%) 24,582 B/op [Average]
[info]   (min, avg, max) = (64,000, 66,855, 78,275), stdev = 6,384
[info]   CI (99.9%): [42,274, 91,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,45% complete, ETA 00:48:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9590,353 ops/s
[info] # Warmup Iteration   2: 79782,408 ops/s
[info] # Warmup Iteration   3: 88594,501 ops/s
[info] # Warmup Iteration   4: 89600,829 ops/s
[info] # Warmup Iteration   5: 89650,784 ops/s
[info] Iteration   1: 89861,592 ops/s
[info]                  ·gc.alloc.rate:                   3832,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              67096,235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59024,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,365 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 89761,327 ops/s
[info]                  ·gc.alloc.rate:                   3858,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              67621,148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71130,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,365 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 89794,794 ops/s
[info]                  ·gc.alloc.rate:                   3834,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              67177,196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59407,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,095 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 89847,841 ops/s
[info]                  ·gc.alloc.rate:               3862,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          67637,301 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4075,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71371,033 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 90261,193 ops/s
[info]                  ·gc.alloc.rate:                   3853,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              67174,451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59281,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   89905,349 ±(99.9%) 781,622 ops/s [Average]
[info]   (min, avg, max) = (89761,327, 89905,349, 90261,193), stdev = 202,985
[info]   CI (99.9%): [89123,728, 90686,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3848,256 ±(99.9%) 54,011 MB/sec [Average]
[info]   (min, avg, max) = (3832,510, 3848,256, 3862,693), stdev = 14,026
[info]   CI (99.9%): [3794,245, 3902,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67341,266 ±(99.9%) 1020,161 B/op [Average]
[info]   (min, avg, max) = (67096,235, 67341,266, 67637,301), stdev = 264,932
[info]   CI (99.9%): [66321,105, 68361,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3659,484 ±(99.9%) 1433,637 MB/sec [Average]
[info]   (min, avg, max) = (3371,475, 3659,484, 4075,922), stdev = 372,311
[info]   CI (99.9%): [2225,847, 5093,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64043,093 ±(99.9%) 25343,977 B/op [Average]
[info]   (min, avg, max) = (59024,836, 64043,093, 71371,033), stdev = 6581,750
[info]   CI (99.9%): [38699,115, 89387,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,437 ±(99.9%) 1,539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,437, 1,095), stdev = 0,400
[info]   CI (99.9%): [≈ 0, 1,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,000, 7,000), stdev = 0,707
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,65% complete, ETA 00:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 725854,852 ops/s
[info] # Warmup Iteration   2: 1932949,819 ops/s
[info] # Warmup Iteration   3: 1927266,652 ops/s
[info] # Warmup Iteration   4: 1948445,541 ops/s
[info] # Warmup Iteration   5: 1944940,568 ops/s
[info] Iteration   1: 1865914,348 ops/s
[info]                  ·gc.alloc.rate:               1002,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          845,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 563,297 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1774067,911 ops/s
[info]                  ·gc.alloc.rate:                   962,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              853,925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1186,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 1931141,355 ops/s
[info]                  ·gc.alloc.rate:               1026,555 MB/sec
[info]                  ·gc.alloc.rate.norm:          836,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545,353 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1949435,007 ops/s
[info]                  ·gc.alloc.rate:                   1060,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1080,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1956139,241 ops/s
[info]                  ·gc.alloc.rate:                   1050,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              845,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1895339,572 ±(99.9%) 295003,955 ops/s [Average]
[info]   (min, avg, max) = (1774067,911, 1895339,572, 1956139,241), stdev = 76611,590
[info]   CI (99.9%): [1600335,618, 2190343,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1020,758 ±(99.9%) 151,583 MB/sec [Average]
[info]   (min, avg, max) = (962,942, 1020,758, 1060,872), stdev = 39,366
[info]   CI (99.9%): [869,176, 1172,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   847,389 ±(99.9%) 30,593 B/op [Average]
[info]   (min, avg, max) = (836,304, 847,389, 856,201), stdev = 7,945
[info]   CI (99.9%): [816,796, 877,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936,751 ±(99.9%) 1411,382 MB/sec [Average]
[info]   (min, avg, max) = (668,093, 936,751, 1339,006), stdev = 366,531
[info]   CI (99.9%): [≈ 0, 2348,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   782,815 ±(99.9%) 1241,129 B/op [Average]
[info]   (min, avg, max) = (538,649, 782,815, 1186,101), stdev = 322,317
[info]   CI (99.9%): [≈ 0, 2023,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,050), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 6,000), stdev = 2,049
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,86% complete, ETA 00:47:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1243816,643 ops/s
[info] # Warmup Iteration   2: 2149711,265 ops/s
[info] # Warmup Iteration   3: 2318331,434 ops/s
[info] # Warmup Iteration   4: 2330829,891 ops/s
[info] # Warmup Iteration   5: 2265796,652 ops/s
[info] Iteration   1: 2371109,233 ops/s
[info]                  ·gc.alloc.rate:               685,425 MB/sec
[info]                  ·gc.alloc.rate.norm:          454,775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 445,492 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2353944,237 ops/s
[info]                  ·gc.alloc.rate:                   671,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              448,971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2141281,669 ops/s
[info]                  ·gc.alloc.rate:                   620,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              456,158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2334532,068 ops/s
[info]                  ·gc.alloc.rate:               678,658 MB/sec
[info]                  ·gc.alloc.rate.norm:          457,344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452,690 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 2336695,463 ops/s
[info]                  ·gc.alloc.rate:               666,866 MB/sec
[info]                  ·gc.alloc.rate.norm:          448,983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452,728 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2307512,534 ±(99.9%) 362323,098 ops/s [Average]
[info]   (min, avg, max) = (2141281,669, 2307512,534, 2371109,233), stdev = 94094,158
[info]   CI (99.9%): [1945189,436, 2669835,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664,717 ±(99.9%) 98,172 MB/sec [Average]
[info]   (min, avg, max) = (620,871, 664,717, 685,425), stdev = 25,495
[info]   CI (99.9%): [566,545, 762,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   453,246 ±(99.9%) 15,411 B/op [Average]
[info]   (min, avg, max) = (448,971, 453,246, 457,344), stdev = 4,002
[info]   CI (99.9%): [437,835, 468,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,761 ±(99.9%) 1,574 MB/sec [Average]
[info]   (min, avg, max) = (671,420, 671,761, 672,428), stdev = 0,409
[info]   CI (99.9%): [670,187, 673,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   458,641 ±(99.9%) 76,052 B/op [Average]
[info]   (min, avg, max) = (445,492, 458,641, 493,555), stdev = 19,750
[info]   CI (99.9%): [382,589, 534,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,015), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,06% complete, ETA 00:47:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1430722,860 ops/s
[info] # Warmup Iteration   2: 2528325,310 ops/s
[info] # Warmup Iteration   3: 2577181,260 ops/s
[info] # Warmup Iteration   4: 2570611,322 ops/s
[info] # Warmup Iteration   5: 2572087,460 ops/s
[info] Iteration   1: 2572886,870 ops/s
[info]                  ·gc.alloc.rate:      26,167 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2575930,708 ops/s
[info]                  ·gc.alloc.rate:      26,198 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2570483,106 ops/s
[info]                  ·gc.alloc.rate:      26,142 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2571567,081 ops/s
[info]                  ·gc.alloc.rate:      26,153 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2563909,045 ops/s
[info]                  ·gc.alloc.rate:      26,075 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2570955,362 ±(99.9%) 17083,650 ops/s [Average]
[info]   (min, avg, max) = (2563909,045, 2570955,362, 2575930,708), stdev = 4436,570
[info]   CI (99.9%): [2553871,712, 2588039,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   26,147 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (26,075, 26,147, 26,198), stdev = 0,045
[info]   CI (99.9%): [25,973, 26,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,26% complete, ETA 00:47:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18013,624 ops/s
[info] # Warmup Iteration   2: 55640,264 ops/s
[info] # Warmup Iteration   3: 55718,363 ops/s
[info] # Warmup Iteration   4: 56633,297 ops/s
[info] # Warmup Iteration   5: 56721,274 ops/s
[info] Iteration   1: 57030,318 ops/s
[info]                  ·gc.alloc.rate:                   2436,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              67205,190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55276,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 57030,036 ops/s
[info]                  ·gc.alloc.rate:                   2476,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              68315,441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73602,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,021 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 57046,209 ops/s
[info]                  ·gc.alloc.rate:                   2467,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              68035,392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55223,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 56606,672 ops/s
[info]                  ·gc.alloc.rate:                   2474,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              68769,268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74415,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 56911,088 ops/s
[info]                  ·gc.alloc.rate:               2461,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          68052,481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55658,914 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   56924,864 ±(99.9%) 716,112 ops/s [Average]
[info]   (min, avg, max) = (56606,672, 56924,864, 57046,209), stdev = 185,972
[info]   CI (99.9%): [56208,752, 57640,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2463,149 ±(99.9%) 62,477 MB/sec [Average]
[info]   (min, avg, max) = (2436,100, 2463,149, 2476,505), stdev = 16,225
[info]   CI (99.9%): [2400,672, 2525,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68075,554 ±(99.9%) 2193,908 B/op [Average]
[info]   (min, avg, max) = (67205,190, 68075,554, 68769,268), stdev = 569,751
[info]   CI (99.9%): [65881,646, 70269,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2273,053 ±(99.9%) 1405,485 MB/sec [Average]
[info]   (min, avg, max) = (2002,459, 2273,053, 2677,534), stdev = 365,000
[info]   CI (99.9%): [867,569, 3678,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62835,387 ±(99.9%) 39297,334 B/op [Average]
[info]   (min, avg, max) = (55223,998, 62835,387, 74415,429), stdev = 10205,393
[info]   CI (99.9%): [23538,053, 102132,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,396), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,334 ±(99.9%) 17,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,334, 10,915), stdev = 4,511
[info]   CI (99.9%): [≈ 0, 20,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 1,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,46% complete, ETA 00:47:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142930,875 ops/s
[info] # Warmup Iteration   2: 800396,393 ops/s
[info] # Warmup Iteration   3: 968738,647 ops/s
[info] # Warmup Iteration   4: 966884,512 ops/s
[info] # Warmup Iteration   5: 974260,505 ops/s
[info] Iteration   1: 967183,168 ops/s
[info]                  ·gc.alloc.rate:               3126,072 MB/sec
[info]                  ·gc.alloc.rate.norm:          5085,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3345,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5441,399 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 977076,547 ops/s
[info]                  ·gc.alloc.rate:                   3151,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              5074,560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4313,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 973516,312 ops/s
[info]                  ·gc.alloc.rate:               3166,281 MB/sec
[info]                  ·gc.alloc.rate.norm:          5116,984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3357,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5426,441 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 975476,550 ops/s
[info]                  ·gc.alloc.rate:               3144,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          5072,081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4347,250 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 973281,381 ops/s
[info]                  ·gc.alloc.rate:               3166,238 MB/sec
[info]                  ·gc.alloc.rate.norm:          5118,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5462,966 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   973306,791 ±(99.9%) 14467,127 ops/s [Average]
[info]   (min, avg, max) = (967183,168, 973306,791, 977076,547), stdev = 3757,067
[info]   CI (99.9%): [958839,664, 987773,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3150,994 ±(99.9%) 64,611 MB/sec [Average]
[info]   (min, avg, max) = (3126,072, 3150,994, 3166,281), stdev = 16,779
[info]   CI (99.9%): [3086,382, 3215,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5093,354 ±(99.9%) 87,115 B/op [Average]
[info]   (min, avg, max) = (5072,081, 5093,354, 5118,128), stdev = 22,624
[info]   CI (99.9%): [5006,239, 5180,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3091,329 ±(99.9%) 1421,974 MB/sec [Average]
[info]   (min, avg, max) = (2678,782, 3091,329, 3379,566), stdev = 369,282
[info]   CI (99.9%): [1669,355, 4513,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4998,261 ±(99.9%) 2349,141 B/op [Average]
[info]   (min, avg, max) = (4313,251, 4998,261, 5462,966), stdev = 610,064
[info]   CI (99.9%): [2649,121, 7347,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,66% complete, ETA 00:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,697 ops/s
[info] # Warmup Iteration   2: 5251828,203 ops/s
[info] # Warmup Iteration   3: 5519703,946 ops/s
[info] # Warmup Iteration   4: 4851789,851 ops/s
[info] # Warmup Iteration   5: 5278181,496 ops/s
[info] Iteration   1: 5084616,481 ops/s
[info]                  ·gc.alloc.rate:               322,395 MB/sec
[info]                  ·gc.alloc.rate.norm:          99,617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      510,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157,691 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 5679042,127 ops/s
[info]                  ·gc.alloc.rate:      346,534 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5675883,742 ops/s
[info]                  ·gc.alloc.rate:               358,884 MB/sec
[info]                  ·gc.alloc.rate.norm:          99,476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184,524 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 5701719,433 ops/s
[info]                  ·gc.alloc.rate:      347,917 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5622867,312 ops/s
[info]                  ·gc.alloc.rate:                   361,337 MB/sec
[info]                  ·gc.alloc.rate.norm:              101,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5552825,819 ±(99.9%) 1013986,696 ops/s [Average]
[info]   (min, avg, max) = (5084616,481, 5552825,819, 5701719,433), stdev = 263329,125
[info]   CI (99.9%): [4538839,123, 6566812,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   347,413 ±(99.9%) 59,417 MB/sec [Average]
[info]   (min, avg, max) = (322,395, 347,413, 361,337), stdev = 15,430
[info]   CI (99.9%): [287,997, 406,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98,438 ±(99.9%) 8,910 B/op [Average]
[info]   (min, avg, max) = (96,000, 98,438, 101,096), stdev = 2,314
[info]   CI (99.9%): [89,528, 107,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368,362 ±(99.9%) 1317,683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368,362, 665,747), stdev = 342,198
[info]   CI (99.9%): [≈ 0, 1686,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   105,696 ±(99.9%) 374,087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105,696, 186,264), stdev = 97,149
[info]   CI (99.9%): [≈ 0, 479,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,055), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 4,000), stdev = 1,789
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,86% complete, ETA 00:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69258,620 ops/s
[info] # Warmup Iteration   2: 919319,146 ops/s
[info] # Warmup Iteration   3: 1073858,231 ops/s
[info] # Warmup Iteration   4: 1086970,796 ops/s
[info] # Warmup Iteration   5: 1078205,113 ops/s
[info] Iteration   1: 1092959,484 ops/s
[info]                  ·gc.alloc.rate:               1265,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          1822,233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961,120 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1013179,355 ops/s
[info]                  ·gc.alloc.rate:                   1192,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1852,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 1092099,534 ops/s
[info]                  ·gc.alloc.rate:               1287,899 MB/sec
[info]                  ·gc.alloc.rate.norm:          1855,168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1926,804 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 1085440,883 ops/s
[info]                  ·gc.alloc.rate:                   1281,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              1857,548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1940,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1091035,011 ops/s
[info]                  ·gc.alloc.rate:                   1301,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1876,189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1928,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1074942,853 ±(99.9%) 133429,765 ops/s [Average]
[info]   (min, avg, max) = (1013179,355, 1074942,853, 1092959,484), stdev = 34651,286
[info]   CI (99.9%): [941513,088, 1208372,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1265,857 ±(99.9%) 164,720 MB/sec [Average]
[info]   (min, avg, max) = (1192,756, 1265,857, 1301,092), stdev = 42,777
[info]   CI (99.9%): [1101,136, 1430,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1852,635 ±(99.9%) 74,815 B/op [Average]
[info]   (min, avg, max) = (1822,233, 1852,635, 1876,189), stdev = 19,429
[info]   CI (99.9%): [1777,820, 1927,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,411 ±(99.9%) 1153,177 MB/sec [Average]
[info]   (min, avg, max) = (667,694, 1203,411, 1338,522), stdev = 299,476
[info]   CI (99.9%): [50,234, 2356,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1766,136 ±(99.9%) 1749,294 B/op [Average]
[info]   (min, avg, max) = (961,120, 1766,136, 2074,628), stdev = 454,286
[info]   CI (99.9%): [16,842, 3515,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,860 ±(99.9%) 7,205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,860, 4,207), stdev = 1,871
[info]   CI (99.9%): [≈ 0, 8,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,247 ±(99.9%) 10,441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,247, 6,097), stdev = 2,712
[info]   CI (99.9%): [≈ 0, 11,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,06% complete, ETA 00:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4395245,942 ops/s
[info] # Warmup Iteration   2: 9000000,057 ops/s
[info] # Warmup Iteration   3: 9426340,598 ops/s
[info] # Warmup Iteration   4: 9445093,569 ops/s
[info] # Warmup Iteration   5: 9447353,941 ops/s
[info] Iteration   1: 9433092,994 ops/s
[info]                  ·gc.alloc.rate:               447,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          74,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85,357 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 9466684,599 ops/s
[info]                  ·gc.alloc.rate:      433,233 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9419435,038 ops/s
[info]                  ·gc.alloc.rate:               452,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          75,598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112,243 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 7987543,888 ops/s
[info]                  ·gc.alloc.rate:      365,542 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8945540,015 ops/s
[info]                  ·gc.alloc.rate:                   422,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              74,375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9050459,307 ±(99.9%) 2432766,293 ops/s [Average]
[info]   (min, avg, max) = (7987543,888, 9050459,307, 9466684,599), stdev = 631781,681
[info]   CI (99.9%): [6617693,014, 11483225,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   424,433 ±(99.9%) 134,673 MB/sec [Average]
[info]   (min, avg, max) = (365,542, 424,433, 452,618), stdev = 34,974
[info]   CI (99.9%): [289,760, 559,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   73,735 ±(99.9%) 6,336 B/op [Average]
[info]   (min, avg, max) = (72,000, 73,735, 75,598), stdev = 1,646
[info]   CI (99.9%): [67,398, 80,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371,170 ±(99.9%) 1328,811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,170, 672,042), stdev = 345,088
[info]   CI (99.9%): [≈ 0, 1699,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   63,159 ±(99.9%) 227,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63,159, 118,196), stdev = 58,969
[info]   CI (99.9%): [≈ 0, 290,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,26% complete, ETA 00:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19093,697 ops/s
[info] # Warmup Iteration   2: 296986,175 ops/s
[info] # Warmup Iteration   3: 525651,283 ops/s
[info] # Warmup Iteration   4: 528679,253 ops/s
[info] # Warmup Iteration   5: 530217,274 ops/s
[info] Iteration   1: 530032,706 ops/s
[info]                  ·gc.alloc.rate:                   2427,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              7206,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5969,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,585 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 530790,311 ops/s
[info]                  ·gc.alloc.rate:                   2429,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              7199,889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7960,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 533242,540 ops/s
[info]                  ·gc.alloc.rate:               2417,817 MB/sec
[info]                  ·gc.alloc.rate.norm:          7133,476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5952,177 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 531273,641 ops/s
[info]                  ·gc.alloc.rate:               2461,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          7289,146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7982,133 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 531435,577 ops/s
[info]                  ·gc.alloc.rate:               2436,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          7211,606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5997,944 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   531354,955 ±(99.9%) 4573,705 ops/s [Average]
[info]   (min, avg, max) = (530032,706, 531354,955, 533242,540), stdev = 1187,777
[info]   CI (99.9%): [526781,250, 535928,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2434,438 ±(99.9%) 62,884 MB/sec [Average]
[info]   (min, avg, max) = (2417,817, 2434,438, 2461,233), stdev = 16,331
[info]   CI (99.9%): [2371,554, 2497,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7208,158 ±(99.9%) 212,824 B/op [Average]
[info]   (min, avg, max) = (7133,476, 7208,158, 7289,146), stdev = 55,270
[info]   CI (99.9%): [6995,334, 7420,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2287,141 ±(99.9%) 1418,346 MB/sec [Average]
[info]   (min, avg, max) = (2011,064, 2287,141, 2695,225), stdev = 368,340
[info]   CI (99.9%): [868,795, 3705,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6772,478 ±(99.9%) 4215,026 B/op [Average]
[info]   (min, avg, max) = (5952,177, 6772,478, 7982,133), stdev = 1094,629
[info]   CI (99.9%): [2557,453, 10987,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,254 ±(99.9%) 2,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,254, 1,208), stdev = 0,534
[info]   CI (99.9%): [≈ 0, 2,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,754 ±(99.9%) 6,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 3,585), stdev = 1,585
[info]   CI (99.9%): [≈ 0, 6,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,46% complete, ETA 00:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272971,311 ops/s
[info] # Warmup Iteration   2: 1312703,397 ops/s
[info] # Warmup Iteration   3: 1400522,909 ops/s
[info] # Warmup Iteration   4: 1392863,687 ops/s
[info] # Warmup Iteration   5: 1387168,451 ops/s
[info] Iteration   1: 1377201,018 ops/s
[info]                  ·gc.alloc.rate:                   1966,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              2246,681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2305,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,283 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 1372152,891 ops/s
[info]                  ·gc.alloc.rate:                   1937,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              2221,450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2310,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,860 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1395497,786 ops/s
[info]                  ·gc.alloc.rate:               1978,094 MB/sec
[info]                  ·gc.alloc.rate.norm:          2230,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2266,518 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1400975,385 ops/s
[info]                  ·gc.alloc.rate:               1975,372 MB/sec
[info]                  ·gc.alloc.rate.norm:          2218,320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2257,698 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 1401146,325 ops/s
[info]                  ·gc.alloc.rate:               1976,217 MB/sec
[info]                  ·gc.alloc.rate.norm:          2218,990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1506,178 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   1389394,681 ±(99.9%) 52917,519 ops/s [Average]
[info]   (min, avg, max) = (1372152,891, 1389394,681, 1401146,325), stdev = 13742,512
[info]   CI (99.9%): [1336477,162, 1442312,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1966,770 ±(99.9%) 65,220 MB/sec [Average]
[info]   (min, avg, max) = (1937,512, 1966,770, 1978,094), stdev = 16,937
[info]   CI (99.9%): [1901,550, 2031,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2227,100 ±(99.9%) 45,843 B/op [Average]
[info]   (min, avg, max) = (2218,320, 2227,100, 2246,681), stdev = 11,905
[info]   CI (99.9%): [2181,257, 2272,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1879,151 ±(99.9%) 1157,640 MB/sec [Average]
[info]   (min, avg, max) = (1341,392, 1879,151, 2018,369), stdev = 300,636
[info]   CI (99.9%): [721,511, 3036,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2129,317 ±(99.9%) 1344,342 B/op [Average]
[info]   (min, avg, max) = (1506,178, 2129,317, 2310,436), stdev = 349,121
[info]   CI (99.9%): [784,975, 3473,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,725 ±(99.9%) 4,792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,725, 2,874), stdev = 1,244
[info]   CI (99.9%): [≈ 0, 5,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,828 ±(99.9%) 5,474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,828, 3,283), stdev = 1,422
[info]   CI (99.9%): [≈ 0, 6,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 9,000), stdev = 2,828
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,66% complete, ETA 00:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1141,564 ops/s
[info] # Warmup Iteration   2: 4547,321 ops/s
[info] # Warmup Iteration   3: 4643,643 ops/s
[info] # Warmup Iteration   4: 4629,930 ops/s
[info] # Warmup Iteration   5: 4925,218 ops/s
[info] Iteration   1: 4952,025 ops/s
[info]                  ·gc.alloc.rate:                   2491,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              791539,137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     848091,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205,089 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 4981,068 ops/s
[info]                  ·gc.alloc.rate:                   2491,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              787085,768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630997,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,659 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4955,674 ops/s
[info]                  ·gc.alloc.rate:                   2494,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              791989,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846137,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,831 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 4965,661 ops/s
[info]                  ·gc.alloc.rate:                   2525,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              800191,570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846967,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65,971 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 4958,043 ops/s
[info]                  ·gc.alloc.rate:               2496,087 MB/sec
[info]                  ·gc.alloc.rate.norm:          792005,581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 638130,374 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4962,494 ±(99.9%) 44,364 ops/s [Average]
[info]   (min, avg, max) = (4952,025, 4962,494, 4981,068), stdev = 11,521
[info]   CI (99.9%): [4918,131, 5006,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2499,971 ±(99.9%) 55,859 MB/sec [Average]
[info]   (min, avg, max) = (2491,466, 2499,971, 2525,684), stdev = 14,506
[info]   CI (99.9%): [2444,112, 2555,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792562,351 ±(99.9%) 18253,315 B/op [Average]
[info]   (min, avg, max) = (787085,768, 792562,351, 800191,570), stdev = 4740,328
[info]   CI (99.9%): [774309,036, 810815,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2403,392 ±(99.9%) 1402,674 MB/sec [Average]
[info]   (min, avg, max) = (1997,667, 2403,392, 2673,325), stdev = 364,270
[info]   CI (99.9%): [1000,718, 3806,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   762064,847 ±(99.9%) 448296,333 B/op [Average]
[info]   (min, avg, max) = (630997,762, 762064,847, 848091,148), stdev = 116421,134
[info]   CI (99.9%): [313768,514, 1210361,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,246 ±(99.9%) 0,981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,246, 0,646), stdev = 0,255
[info]   CI (99.9%): [≈ 0, 1,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77,910 ±(99.9%) 311,586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77,910, 205,089), stdev = 80,918
[info]   CI (99.9%): [≈ 0, 389,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 6,000), stdev = 1,342
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65,86% complete, ETA 00:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1510,387 ops/s
[info] # Warmup Iteration   2: 7014,944 ops/s
[info] # Warmup Iteration   3: 7714,129 ops/s
[info] # Warmup Iteration   4: 7761,158 ops/s
[info] # Warmup Iteration   5: 7806,889 ops/s
[info] Iteration   1: 7775,133 ops/s
[info]                  ·gc.alloc.rate:                   2669,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              540139,301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542018,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80,056 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 7832,898 ops/s
[info]                  ·gc.alloc.rate:                   2649,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              532247,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404374,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,182 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 7816,804 ops/s
[info]                  ·gc.alloc.rate:               2687,548 MB/sec
[info]                  ·gc.alloc.rate.norm:          540886,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541386,534 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 7745,110 ops/s
[info]                  ·gc.alloc.rate:               2667,570 MB/sec
[info]                  ·gc.alloc.rate.norm:          541887,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547907,015 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 7758,694 ops/s
[info]                  ·gc.alloc.rate:               2663,833 MB/sec
[info]                  ·gc.alloc.rate.norm:          540103,817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 548269,734 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7785,728 ±(99.9%) 145,150 ops/s [Average]
[info]   (min, avg, max) = (7745,110, 7785,728, 7832,898), stdev = 37,695
[info]   CI (99.9%): [7640,578, 7930,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2667,698 ±(99.9%) 51,868 MB/sec [Average]
[info]   (min, avg, max) = (2649,995, 2667,698, 2687,548), stdev = 13,470
[info]   CI (99.9%): [2615,830, 2719,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   539052,654 ±(99.9%) 14913,120 B/op [Average]
[info]   (min, avg, max) = (532247,051, 539052,654, 541887,047), stdev = 3872,890
[info]   CI (99.9%): [524139,534, 553965,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2556,701 ±(99.9%) 1170,198 MB/sec [Average]
[info]   (min, avg, max) = (2013,332, 2556,701, 2704,108), stdev = 303,897
[info]   CI (99.9%): [1386,503, 3726,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   516791,150 ±(99.9%) 242299,996 B/op [Average]
[info]   (min, avg, max) = (404374,267, 516791,150, 548269,734), stdev = 62924,540
[info]   CI (99.9%): [274491,153, 759091,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,396), stdev = 0,175
[info]   CI (99.9%): [≈ 0, 0,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16,848 ±(99.9%) 136,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,848, 80,056), stdev = 35,381
[info]   CI (99.9%): [≈ 0, 153,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,06% complete, ETA 00:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26336,374 ops/s
[info] # Warmup Iteration   2: 52886,855 ops/s
[info] # Warmup Iteration   3: 53411,528 ops/s
[info] # Warmup Iteration   4: 53064,007 ops/s
[info] # Warmup Iteration   5: 53829,124 ops/s
[info] Iteration   1: 53572,413 ops/s
[info]                  ·gc.alloc.rate:               877,195 MB/sec
[info]                  ·gc.alloc.rate.norm:          25756,392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19727,218 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 53690,398 ops/s
[info]                  ·gc.alloc.rate:                   907,440 MB/sec
[info]                  ·gc.alloc.rate.norm:              26587,201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39376,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 53415,037 ops/s
[info]                  ·gc.alloc.rate:                   878,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              25885,755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19793,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,410 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 53407,406 ops/s
[info]                  ·gc.alloc.rate:               876,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          25832,605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19807,046 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 53547,979 ops/s
[info]                  ·gc.alloc.rate:               877,660 MB/sec
[info]                  ·gc.alloc.rate.norm:          25786,314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19754,162 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   53526,647 ±(99.9%) 455,774 ops/s [Average]
[info]   (min, avg, max) = (53407,406, 53526,647, 53690,398), stdev = 118,363
[info]   CI (99.9%): [53070,873, 53982,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   883,617 ±(99.9%) 51,362 MB/sec [Average]
[info]   (min, avg, max) = (876,913, 883,617, 907,440), stdev = 13,339
[info]   CI (99.9%): [832,256, 934,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25969,653 ±(99.9%) 1342,599 B/op [Average]
[info]   (min, avg, max) = (25756,392, 25969,653, 26587,201), stdev = 348,669
[info]   CI (99.9%): [24627,054, 27312,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,514 ±(99.9%) 1156,888 MB/sec [Average]
[info]   (min, avg, max) = (671,857, 806,514, 1343,957), stdev = 300,440
[info]   CI (99.9%): [≈ 0, 1963,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23691,743 ±(99.9%) 33763,411 B/op [Average]
[info]   (min, avg, max) = (19727,218, 23691,743, 39376,765), stdev = 8768,251
[info]   CI (99.9%): [≈ 0, 57455,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,368 ±(99.9%) 2,354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,368, 1,410), stdev = 0,611
[info]   CI (99.9%): [≈ 0, 2,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,27% complete, ETA 00:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1346,584 ops/s
[info] # Warmup Iteration   2: 4814,572 ops/s
[info] # Warmup Iteration   3: 5040,121 ops/s
[info] # Warmup Iteration   4: 5067,391 ops/s
[info] # Warmup Iteration   5: 5098,271 ops/s
[info] Iteration   1: 5025,151 ops/s
[info]                  ·gc.alloc.rate:                   1116,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              349611,148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418324,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,518 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 5083,277 ops/s
[info]                  ·gc.alloc.rate:                   1116,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              345360,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     413212,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 5041,905 ops/s
[info]                  ·gc.alloc.rate:               1088,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          339671,546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 208758,736 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 5035,965 ops/s
[info]                  ·gc.alloc.rate:                   1127,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              352279,752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418139,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 5060,345 ops/s
[info]                  ·gc.alloc.rate:                   1102,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              342882,429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208182,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200,986 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5049,329 ±(99.9%) 88,064 ops/s [Average]
[info]   (min, avg, max) = (5025,151, 5049,329, 5083,277), stdev = 22,870
[info]   CI (99.9%): [4961,265, 5137,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1110,465 ±(99.9%) 58,015 MB/sec [Average]
[info]   (min, avg, max) = (1088,577, 1110,465, 1127,662), stdev = 15,066
[info]   CI (99.9%): [1052,450, 1168,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   345960,980 ±(99.9%) 19506,297 B/op [Average]
[info]   (min, avg, max) = (339671,546, 345960,980, 352279,752), stdev = 5065,723
[info]   CI (99.9%): [326454,683, 365467,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1069,836 ±(99.9%) 1407,876 MB/sec [Average]
[info]   (min, avg, max) = (669,029, 1069,836, 1338,483), stdev = 365,621
[info]   CI (99.9%): [≈ 0, 2477,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   333323,711 ±(99.9%) 438948,250 B/op [Average]
[info]   (min, avg, max) = (208182,315, 333323,711, 418324,879), stdev = 113993,467
[info]   CI (99.9%): [≈ 0, 772271,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,814 ±(99.9%) 6,565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,814, 3,863), stdev = 1,705
[info]   CI (99.9%): [≈ 0, 7,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   253,138 ±(99.9%) 2040,957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 253,138, 1200,986), stdev = 530,030
[info]   CI (99.9%): [≈ 0, 2294,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 6,000), stdev = 1,643
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,47% complete, ETA 00:44:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1680,434 ops/s
[info] # Warmup Iteration   2: 5360,304 ops/s
[info] # Warmup Iteration   3: 5709,455 ops/s
[info] # Warmup Iteration   4: 5785,653 ops/s
[info] # Warmup Iteration   5: 5742,109 ops/s
[info] Iteration   1: 5767,982 ops/s
[info]                  ·gc.alloc.rate:               429,735 MB/sec
[info]                  ·gc.alloc.rate.norm:          117209,604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139592,021 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 5765,880 ops/s
[info]                  ·gc.alloc.rate:               436,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          119026,812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180459,802 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 5751,495 ops/s
[info]                  ·gc.alloc.rate:      416,429 MB/sec
[info]                  ·gc.alloc.rate.norm: 113903,043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5768,873 ops/s
[info]                  ·gc.alloc.rate:               439,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          119920,803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180365,976 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 5781,843 ops/s
[info]                  ·gc.alloc.rate:      418,578 MB/sec
[info]                  ·gc.alloc.rate.norm: 113894,225 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5767,215 ±(99.9%) 41,571 ops/s [Average]
[info]   (min, avg, max) = (5751,495, 5767,215, 5781,843), stdev = 10,796
[info]   CI (99.9%): [5725,643, 5808,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   428,146 ±(99.9%) 39,992 MB/sec [Average]
[info]   (min, avg, max) = (416,429, 428,146, 439,743), stdev = 10,386
[info]   CI (99.9%): [388,154, 468,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   116790,897 ±(99.9%) 10840,323 B/op [Average]
[info]   (min, avg, max) = (113894,225, 116790,897, 119920,803), stdev = 2815,198
[info]   CI (99.9%): [105950,574, 127631,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366,919 ±(99.9%) 1311,038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366,919, 661,406), stdev = 340,472
[info]   CI (99.9%): [≈ 0, 1677,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100083,560 ±(99.9%) 357612,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100083,560, 180459,802), stdev = 92870,828
[info]   CI (99.9%): [≈ 0, 457696,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,67% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5047,253 ops/s
[info] # Warmup Iteration   2: 7025,679 ops/s
[info] # Warmup Iteration   3: 7223,765 ops/s
[info] # Warmup Iteration   4: 7219,211 ops/s
[info] # Warmup Iteration   5: 7205,819 ops/s
[info] Iteration   1: 7252,096 ops/s
[info]                  ·gc.alloc.rate:                   368,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              79942,541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111015,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,517 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7245,514 ops/s
[info]                  ·gc.alloc.rate:               370,104 MB/sec
[info]                  ·gc.alloc.rate.norm:          80360,437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111122,722 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 7284,506 ops/s
[info]                  ·gc.alloc.rate:      356,016 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888,065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7252,252 ops/s
[info]                  ·gc.alloc.rate:               375,268 MB/sec
[info]                  ·gc.alloc.rate.norm:          81408,369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145563,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 7279,038 ops/s
[info]                  ·gc.alloc.rate:      355,746 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888,065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   7262,681 ±(99.9%) 68,326 ops/s [Average]
[info]   (min, avg, max) = (7245,514, 7262,681, 7284,506), stdev = 17,744
[info]   CI (99.9%): [7194,355, 7331,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   365,127 ±(99.9%) 33,898 MB/sec [Average]
[info]   (min, avg, max) = (355,746, 365,127, 375,268), stdev = 8,803
[info]   CI (99.9%): [331,229, 399,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79097,495 ±(99.9%) 8034,023 B/op [Average]
[info]   (min, avg, max) = (76888,065, 79097,495, 81408,369), stdev = 2086,410
[info]   CI (99.9%): [71063,473, 87131,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338,903 ±(99.9%) 1217,311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,903, 671,003), stdev = 316,132
[info]   CI (99.9%): [≈ 0, 1556,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73540,299 ±(99.9%) 264130,663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73540,299, 145563,280), stdev = 68593,894
[info]   CI (99.9%): [≈ 0, 337670,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,903 ±(99.9%) 7,779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,903, 4,517), stdev = 2,020
[info]   CI (99.9%): [≈ 0, 8,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66,87% complete, ETA 00:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4695,131 ops/s
[info] # Warmup Iteration   2: 6958,835 ops/s
[info] # Warmup Iteration   3: 7295,691 ops/s
[info] # Warmup Iteration   4: 7305,716 ops/s
[info] # Warmup Iteration   5: 7271,224 ops/s
[info] Iteration   1: 7312,176 ops/s
[info]                  ·gc.alloc.rate:      303,981 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400,085 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7300,895 ops/s
[info]                  ·gc.alloc.rate:               313,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          67621,540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110285,726 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 7270,056 ops/s
[info]                  ·gc.alloc.rate:                   315,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              68180,647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110740,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 7301,736 ops/s
[info]                  ·gc.alloc.rate:      304,929 MB/sec
[info]                  ·gc.alloc.rate.norm: 65700,234 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7296,417 ops/s
[info]                  ·gc.alloc.rate:               327,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          70657,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144613,832 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7296,256 ±(99.9%) 60,625 ops/s [Average]
[info]   (min, avg, max) = (7270,056, 7296,256, 7312,176), stdev = 15,744
[info]   CI (99.9%): [7235,632, 7356,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   313,100 ±(99.9%) 36,881 MB/sec [Average]
[info]   (min, avg, max) = (303,981, 313,100, 327,679), stdev = 9,578
[info]   CI (99.9%): [276,219, 349,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67511,923 ±(99.9%) 8189,628 B/op [Average]
[info]   (min, avg, max) = (65400,085, 67511,923, 70657,106), stdev = 2126,820
[info]   CI (99.9%): [59322,295, 75701,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338,851 ±(99.9%) 1217,009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,851, 670,660), stdev = 316,053
[info]   CI (99.9%): [≈ 0, 1555,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   73128,051 ±(99.9%) 262586,281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73128,051, 144613,832), stdev = 68192,823
[info]   CI (99.9%): [≈ 0, 335714,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,802 ±(99.9%) 15,519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,802, 9,012), stdev = 4,030
[info]   CI (99.9%): [≈ 0, 17,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,643
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,07% complete, ETA 00:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3562,560 ops/s
[info] # Warmup Iteration   2: 7582,278 ops/s
[info] # Warmup Iteration   3: 8954,128 ops/s
[info] # Warmup Iteration   4: 8996,250 ops/s
[info] # Warmup Iteration   5: 8897,756 ops/s
[info] Iteration   1: 8742,169 ops/s
[info]                  ·gc.alloc.rate:                   1864,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              335487,546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362156,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602,243 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 8986,664 ops/s
[info]                  ·gc.alloc.rate:                   1930,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              337943,924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351702,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136,359 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 8831,907 ops/s
[info]                  ·gc.alloc.rate:                   1870,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              333129,117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238107,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,419 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8667,218 ops/s
[info]                  ·gc.alloc.rate:                   1844,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              334726,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363959,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,875 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 8599,612 ops/s
[info]                  ·gc.alloc.rate:               1826,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          334164,347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367038,170 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8765,514 ±(99.9%) 580,942 ops/s [Average]
[info]   (min, avg, max) = (8599,612, 8765,514, 8986,664), stdev = 150,869
[info]   CI (99.9%): [8184,572, 9346,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1867,093 ±(99.9%) 151,604 MB/sec [Average]
[info]   (min, avg, max) = (1826,614, 1867,093, 1930,443), stdev = 39,371
[info]   CI (99.9%): [1715,489, 2018,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   335090,274 ±(99.9%) 6978,331 B/op [Average]
[info]   (min, avg, max) = (333129,117, 335090,274, 337943,924), stdev = 1812,250
[info]   CI (99.9%): [328111,943, 342068,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1873,914 ±(99.9%) 1156,469 MB/sec [Average]
[info]   (min, avg, max) = (1336,689, 1873,914, 2012,442), stdev = 300,331
[info]   CI (99.9%): [717,445, 3030,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   336593,015 ±(99.9%) 213155,021 B/op [Average]
[info]   (min, avg, max) = (238107,704, 336593,015, 367038,170), stdev = 55355,682
[info]   CI (99.9%): [123437,994, 549748,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,848 ±(99.9%) 5,520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,848, 3,347), stdev = 1,434
[info]   CI (99.9%): [≈ 0, 6,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   151,779 ±(99.9%) 993,599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151,779, 602,243), stdev = 258,034
[info]   CI (99.9%): [≈ 0, 1145,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 9,000), stdev = 2,702
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67,27% complete, ETA 00:43:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,786 ops/s
[info] # Warmup Iteration   2: 19365,614 ops/s
[info] # Warmup Iteration   3: 21173,980 ops/s
[info] # Warmup Iteration   4: 21173,610 ops/s
[info] # Warmup Iteration   5: 21204,261 ops/s
[info] Iteration   1: 21207,664 ops/s
[info]                  ·gc.alloc.rate:                   548,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              40691,874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49309,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,545 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 20686,837 ops/s
[info]                  ·gc.alloc.rate:               532,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          40496,554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50551,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 21228,499 ops/s
[info]                  ·gc.alloc.rate:               536,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          39794,313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49310,184 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 21325,968 ops/s
[info]                  ·gc.alloc.rate:      526,364 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832,022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21199,525 ops/s
[info]                  ·gc.alloc.rate:                   541,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              40162,885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49377,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   21129,699 ±(99.9%) 972,935 ops/s [Average]
[info]   (min, avg, max) = (20686,837, 21129,699, 21325,968), stdev = 252,668
[info]   CI (99.9%): [20156,764, 22102,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   537,130 ±(99.9%) 32,438 MB/sec [Average]
[info]   (min, avg, max) = (526,364, 537,130, 548,544), stdev = 8,424
[info]   CI (99.9%): [504,693, 569,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39995,530 ±(99.9%) 2828,433 B/op [Average]
[info]   (min, avg, max) = (38832,022, 39995,530, 40691,874), stdev = 734,535
[info]   CI (99.9%): [37167,097, 42823,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532,052 ±(99.9%) 1145,283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532,052, 665,404), stdev = 297,426
[info]   CI (99.9%): [≈ 0, 1677,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   39709,712 ±(99.9%) 85502,366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39709,712, 50551,185), stdev = 22204,693
[info]   CI (99.9%): [≈ 0, 125212,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,376 ±(99.9%) 2,577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,376, 1,545), stdev = 0,669
[info]   CI (99.9%): [≈ 0, 2,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,47% complete, ETA 00:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5801,049 ops/s
[info] # Warmup Iteration   2: 16227,184 ops/s
[info] # Warmup Iteration   3: 17559,841 ops/s
[info] # Warmup Iteration   4: 17385,695 ops/s
[info] # Warmup Iteration   5: 17588,416 ops/s
[info] Iteration   1: 17650,003 ops/s
[info]                  ·gc.alloc.rate:      468,952 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17527,312 ops/s
[info]                  ·gc.alloc.rate:                   488,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              43836,841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59367,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,869 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17657,229 ops/s
[info]                  ·gc.alloc.rate:               491,278 MB/sec
[info]                  ·gc.alloc.rate.norm:          43767,918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58930,446 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 17655,292 ops/s
[info]                  ·gc.alloc.rate:      469,086 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800,031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17606,196 ops/s
[info]                  ·gc.alloc.rate:                   489,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              43759,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59273,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,861 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   17619,206 ±(99.9%) 213,617 ops/s [Average]
[info]   (min, avg, max) = (17527,312, 17619,206, 17657,229), stdev = 55,476
[info]   CI (99.9%): [17405,589, 17832,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   481,482 ±(99.9%) 43,986 MB/sec [Average]
[info]   (min, avg, max) = (468,952, 481,482, 491,278), stdev = 11,423
[info]   CI (99.9%): [437,496, 525,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42992,952 ±(99.9%) 4194,875 B/op [Average]
[info]   (min, avg, max) = (41800,027, 42992,952, 43836,841), stdev = 1089,396
[info]   CI (99.9%): [38798,078, 47187,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397,238 ±(99.9%) 1396,352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397,238, 663,332), stdev = 362,628
[info]   CI (99.9%): [≈ 0, 1793,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   35514,189 ±(99.9%) 124838,950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35514,189, 59367,466), stdev = 32420,279
[info]   CI (99.9%): [≈ 0, 160353,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,746 ±(99.9%) 3,933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,746, 1,869), stdev = 1,021
[info]   CI (99.9%): [≈ 0, 4,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,67% complete, ETA 00:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17640,235 ops/s
[info] # Warmup Iteration   2: 24926,766 ops/s
[info] # Warmup Iteration   3: 25796,736 ops/s
[info] # Warmup Iteration   4: 25772,771 ops/s
[info] # Warmup Iteration   5: 25409,448 ops/s
[info] Iteration   1: 24907,568 ops/s
[info]                  ·gc.alloc.rate:      458,003 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25778,281 ops/s
[info]                  ·gc.alloc.rate:               495,135 MB/sec
[info]                  ·gc.alloc.rate.norm:          30217,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40935,216 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 25569,920 ops/s
[info]                  ·gc.alloc.rate:                   494,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              30411,955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41268,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,281 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 25780,824 ops/s
[info]                  ·gc.alloc.rate:      474,026 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25757,278 ops/s
[info]                  ·gc.alloc.rate:                   490,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              29934,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41010,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,918 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   25558,774 ±(99.9%) 1442,177 ops/s [Average]
[info]   (min, avg, max) = (24907,568, 25558,774, 25780,824), stdev = 374,529
[info]   CI (99.9%): [24116,597, 27000,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   482,307 ±(99.9%) 61,729 MB/sec [Average]
[info]   (min, avg, max) = (458,003, 482,307, 495,135), stdev = 16,031
[info]   CI (99.9%): [420,578, 544,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29683,929 ±(99.9%) 2736,485 B/op [Average]
[info]   (min, avg, max) = (28928,017, 29683,929, 30411,955), stdev = 710,656
[info]   CI (99.9%): [26947,444, 32420,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402,584 ±(99.9%) 1415,140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402,584, 671,421), stdev = 367,507
[info]   CI (99.9%): [≈ 0, 1817,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24642,850 ±(99.9%) 86624,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24642,850, 41268,153), stdev = 22496,080
[info]   CI (99.9%): [≈ 0, 111267,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,021), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,440 ±(99.9%) 2,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,440, 1,281), stdev = 0,616
[info]   CI (99.9%): [≈ 0, 2,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,87% complete, ETA 00:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141,904 ops/s
[info] # Warmup Iteration   2: 3501,651 ops/s
[info] # Warmup Iteration   3: 4537,831 ops/s
[info] # Warmup Iteration   4: 4554,895 ops/s
[info] # Warmup Iteration   5: 4622,610 ops/s
[info] Iteration   1: 4623,436 ops/s
[info]                  ·gc.alloc.rate:                   2847,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              968888,299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     912317,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56,680 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 4635,217 ops/s
[info]                  ·gc.alloc.rate:                   2830,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              960676,401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910748,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63,600 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 4650,241 ops/s
[info]                  ·gc.alloc.rate:               2868,156 MB/sec
[info]                  ·gc.alloc.rate.norm:          970330,899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 909614,886 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 4643,204 ops/s
[info]                  ·gc.alloc.rate:                   2863,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              970296,749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     913243,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 4509,072 ops/s
[info]                  ·gc.alloc.rate:                   2785,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              971699,419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942695,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,264 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4612,234 ±(99.9%) 225,352 ops/s [Average]
[info]   (min, avg, max) = (4509,072, 4612,234, 4650,241), stdev = 58,523
[info]   CI (99.9%): [4386,882, 4837,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2839,011 ±(99.9%) 129,001 MB/sec [Average]
[info]   (min, avg, max) = (2785,281, 2839,011, 2868,156), stdev = 33,501
[info]   CI (99.9%): [2710,009, 2968,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   968378,354 ±(99.9%) 17015,127 B/op [Average]
[info]   (min, avg, max) = (960676,401, 968378,354, 971699,419), stdev = 4418,774
[info]   CI (99.9%): [951363,227, 985393,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2690,141 ±(99.9%) 33,323 MB/sec [Average]
[info]   (min, avg, max) = (2681,140, 2690,141, 2702,144), stdev = 8,654
[info]   CI (99.9%): [2656,818, 2723,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   917723,941 ±(99.9%) 54022,550 B/op [Average]
[info]   (min, avg, max) = (909614,886, 917723,941, 942695,626), stdev = 14029,485
[info]   CI (99.9%): [863701,392, 971746,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,187), stdev = 0,090
[info]   CI (99.9%): [≈ 0, 0,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26,920 ±(99.9%) 117,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,920, 63,600), stdev = 30,564
[info]   CI (99.9%): [≈ 0, 144,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 0,707
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,07% complete, ETA 00:42:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4562,462 ops/s
[info] # Warmup Iteration   2: 10537,870 ops/s
[info] # Warmup Iteration   3: 10952,462 ops/s
[info] # Warmup Iteration   4: 11086,401 ops/s
[info] # Warmup Iteration   5: 11092,526 ops/s
[info] Iteration   1: 11096,293 ops/s
[info]                  ·gc.alloc.rate:                   1406,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              199452,658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190366,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,905 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 11107,408 ops/s
[info]                  ·gc.alloc.rate:               1417,662 MB/sec
[info]                  ·gc.alloc.rate.norm:          200795,261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190272,657 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 11059,701 ops/s
[info]                  ·gc.alloc.rate:                   1399,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              199118,362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191128,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441,330 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 11108,969 ops/s
[info]                  ·gc.alloc.rate:                   1413,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              200126,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190096,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,773 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10814,490 ops/s
[info]                  ·gc.alloc.rate:                   1411,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              205397,446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194941,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   11037,372 ±(99.9%) 485,844 ops/s [Average]
[info]   (min, avg, max) = (10814,490, 11037,372, 11108,969), stdev = 126,172
[info]   CI (99.9%): [10551,528, 11523,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1409,858 ±(99.9%) 26,378 MB/sec [Average]
[info]   (min, avg, max) = (1399,777, 1409,858, 1417,662), stdev = 6,850
[info]   CI (99.9%): [1383,480, 1436,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   200977,963 ±(99.9%) 9831,510 B/op [Average]
[info]   (min, avg, max) = (199118,362, 200977,963, 205397,446), stdev = 2553,212
[info]   CI (99.9%): [191146,453, 210809,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1342,411 ±(99.9%) 5,435 MB/sec [Average]
[info]   (min, avg, max) = (1340,053, 1342,411, 1343,608), stdev = 1,412
[info]   CI (99.9%): [1336,975, 1347,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   191361,312 ±(99.9%) 7855,660 B/op [Average]
[info]   (min, avg, max) = (190096,864, 191361,312, 194941,882), stdev = 2040,090
[info]   CI (99.9%): [183505,653, 199216,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,741 ±(99.9%) 5,142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,741, 3,102), stdev = 1,335
[info]   CI (99.9%): [≈ 0, 5,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   105,419 ±(99.9%) 731,451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105,419, 441,330), stdev = 189,955
[info]   CI (99.9%): [≈ 0, 836,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,27% complete, ETA 00:42:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3604,395 ops/s
[info] # Warmup Iteration   2: 10584,076 ops/s
[info] # Warmup Iteration   3: 11241,260 ops/s
[info] # Warmup Iteration   4: 11135,436 ops/s
[info] # Warmup Iteration   5: 11248,233 ops/s
[info] Iteration   1: 11294,341 ops/s
[info]                  ·gc.alloc.rate:                   2427,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              338188,490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372761,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110,223 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 11471,929 ops/s
[info]                  ·gc.alloc.rate:                   2447,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              335709,326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274709,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,856 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 11332,562 ops/s
[info]                  ·gc.alloc.rate:                   2452,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              340438,584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371108,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,891 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 11344,801 ops/s
[info]                  ·gc.alloc.rate:                   2427,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              336658,754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278730,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,663 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11329,847 ops/s
[info]                  ·gc.alloc.rate:                   2451,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              340352,279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373149,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,891 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   11354,696 ±(99.9%) 262,520 ops/s [Average]
[info]   (min, avg, max) = (11294,341, 11354,696, 11471,929), stdev = 68,176
[info]   CI (99.9%): [11092,176, 11617,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2441,304 ±(99.9%) 48,317 MB/sec [Average]
[info]   (min, avg, max) = (2427,631, 2441,304, 2452,289), stdev = 12,548
[info]   CI (99.9%): [2392,986, 2489,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338269,487 ±(99.9%) 8213,354 B/op [Average]
[info]   (min, avg, max) = (335709,326, 338269,487, 340438,584), stdev = 2132,982
[info]   CI (99.9%): [330056,132, 346482,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2409,868 ±(99.9%) 1418,260 MB/sec [Average]
[info]   (min, avg, max) = (2002,984, 2409,868, 2687,319), stdev = 368,318
[info]   CI (99.9%): [991,608, 3828,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   334091,858 ±(99.9%) 201766,256 B/op [Average]
[info]   (min, avg, max) = (274709,731, 334091,858, 373149,829), stdev = 52398,056
[info]   CI (99.9%): [132325,603, 535858,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,183 ±(99.9%) 1,311 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,183, 0,791), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 1,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25,505 ±(99.9%) 182,617 B/op [Average]
[info]   (min, avg, max) = (2,856, 25,505, 110,223), stdev = 47,425
[info]   CI (99.9%): [≈ 0, 208,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 5,000), stdev = 0,837
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,47% complete, ETA 00:41:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,810 ops/s
[info] # Warmup Iteration   2: 58349,458 ops/s
[info] # Warmup Iteration   3: 62089,531 ops/s
[info] # Warmup Iteration   4: 61898,504 ops/s
[info] # Warmup Iteration   5: 62657,096 ops/s
[info] Iteration   1: 63001,607 ops/s
[info]                  ·gc.alloc.rate:               608,060 MB/sec
[info]                  ·gc.alloc.rate.norm:          15184,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16573,804 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 63069,425 ops/s
[info]                  ·gc.alloc.rate:      589,773 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62882,558 ops/s
[info]                  ·gc.alloc.rate:                   601,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              15055,594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16622,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 63181,020 ops/s
[info]                  ·gc.alloc.rate:                   608,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              15162,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16543,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 62944,855 ops/s
[info]                  ·gc.alloc.rate:               611,668 MB/sec
[info]                  ·gc.alloc.rate.norm:          15287,583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16623,177 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   63015,893 ±(99.9%) 443,917 ops/s [Average]
[info]   (min, avg, max) = (62882,558, 63015,893, 63181,020), stdev = 115,284
[info]   CI (99.9%): [62571,977, 63459,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   604,048 ±(99.9%) 33,739 MB/sec [Average]
[info]   (min, avg, max) = (589,773, 604,048, 611,668), stdev = 8,762
[info]   CI (99.9%): [570,309, 637,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15080,352 ±(99.9%) 853,982 B/op [Average]
[info]   (min, avg, max) = (14712,007, 15080,352, 15287,583), stdev = 221,776
[info]   CI (99.9%): [14226,370, 15934,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531,527 ±(99.9%) 1144,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531,527, 665,106), stdev = 297,133
[info]   CI (99.9%): [≈ 0, 1675,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13272,506 ±(99.9%) 28570,366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13272,506, 16623,177), stdev = 7419,633
[info]   CI (99.9%): [≈ 0, 41842,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,015), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,104 ±(99.9%) 0,617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,363), stdev = 0,160
[info]   CI (99.9%): [≈ 0, 0,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,600, 4,000), stdev = 1,517
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,67% complete, ETA 00:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24682,365 ops/s
[info] # Warmup Iteration   2: 48785,018 ops/s
[info] # Warmup Iteration   3: 48953,646 ops/s
[info] # Warmup Iteration   4: 48366,731 ops/s
[info] # Warmup Iteration   5: 50372,198 ops/s
[info] Iteration   1: 46449,595 ops/s
[info]                  ·gc.alloc.rate:               680,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          23041,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22492,380 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 50580,075 ops/s
[info]                  ·gc.alloc.rate:               751,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          23364,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20686,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 50525,039 ops/s
[info]                  ·gc.alloc.rate:                   743,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              23140,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20709,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 50498,925 ops/s
[info]                  ·gc.alloc.rate:               742,581 MB/sec
[info]                  ·gc.alloc.rate.norm:          23133,716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20750,623 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 50497,210 ops/s
[info]                  ·gc.alloc.rate:                   740,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              23078,422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20752,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,792 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   49710,169 ±(99.9%) 7019,814 ops/s [Average]
[info]   (min, avg, max) = (46449,595, 49710,169, 50580,075), stdev = 1823,023
[info]   CI (99.9%): [42690,354, 56729,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   731,591 ±(99.9%) 111,508 MB/sec [Average]
[info]   (min, avg, max) = (680,283, 731,591, 751,152), stdev = 28,958
[info]   CI (99.9%): [620,083, 843,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23151,609 ±(99.9%) 484,541 B/op [Average]
[info]   (min, avg, max) = (23041,099, 23151,609, 23364,494), stdev = 125,834
[info]   CI (99.9%): [22667,068, 23636,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665,283 ±(99.9%) 3,239 MB/sec [Average]
[info]   (min, avg, max) = (664,082, 665,283, 666,094), stdev = 0,841
[info]   CI (99.9%): [662,044, 668,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21078,161 ±(99.9%) 3046,126 B/op [Average]
[info]   (min, avg, max) = (20686,306, 21078,161, 22492,380), stdev = 791,069
[info]   CI (99.9%): [18032,035, 24124,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 1,339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,792), stdev = 0,348
[info]   CI (99.9%): [≈ 0, 1,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,88% complete, ETA 00:41:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52776,507 ops/s
[info] # Warmup Iteration   2: 98165,474 ops/s
[info] # Warmup Iteration   3: 98551,319 ops/s
[info] # Warmup Iteration   4: 100109,707 ops/s
[info] # Warmup Iteration   5: 99799,865 ops/s
[info] Iteration   1: 98621,947 ops/s
[info]                  ·gc.alloc.rate:               775,979 MB/sec
[info]                  ·gc.alloc.rate.norm:          12378,567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10704,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 100202,856 ops/s
[info]                  ·gc.alloc.rate:                   790,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              12415,801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21082,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,654 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 100386,408 ops/s
[info]                  ·gc.alloc.rate:               774,073 MB/sec
[info]                  ·gc.alloc.rate.norm:          12131,442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10526,907 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 100027,483 ops/s
[info]                  ·gc.alloc.rate:               768,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          12082,368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10564,575 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 99674,747 ops/s
[info]                  ·gc.alloc.rate:               765,420 MB/sec
[info]                  ·gc.alloc.rate.norm:          12081,376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10607,560 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   99782,688 ±(99.9%) 2695,392 ops/s [Average]
[info]   (min, avg, max) = (98621,947, 99782,688, 100386,408), stdev = 699,985
[info]   CI (99.9%): [97087,296, 102478,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   774,893 ±(99.9%) 37,980 MB/sec [Average]
[info]   (min, avg, max) = (765,420, 774,893, 790,791), stdev = 9,863
[info]   CI (99.9%): [736,913, 812,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12217,911 ±(99.9%) 636,993 B/op [Average]
[info]   (min, avg, max) = (12081,376, 12217,911, 12415,801), stdev = 165,425
[info]   CI (99.9%): [11580,918, 12854,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805,848 ±(99.9%) 1155,750 MB/sec [Average]
[info]   (min, avg, max) = (671,038, 805,848, 1342,762), stdev = 300,145
[info]   CI (99.9%): [≈ 0, 1961,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12697,115 ±(99.9%) 18050,912 B/op [Average]
[info]   (min, avg, max) = (10526,907, 12697,115, 21082,004), stdev = 4687,764
[info]   CI (99.9%): [≈ 0, 30748,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,131 ±(99.9%) 1,126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,131, 0,654), stdev = 0,292
[info]   CI (99.9%): [≈ 0, 1,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,08% complete, ETA 00:41:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63010,147 ops/s
[info] # Warmup Iteration   2: 113691,374 ops/s
[info] # Warmup Iteration   3: 116116,501 ops/s
[info] # Warmup Iteration   4: 116038,833 ops/s
[info] # Warmup Iteration   5: 116002,408 ops/s
[info] Iteration   1: 115997,848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 116189,953 ops/s
[info]                  ·gc.alloc.rate:      0,481 MB/sec
[info]                  ·gc.alloc.rate.norm: 6,506 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116083,752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 115693,331 ops/s
[info]                  ·gc.alloc.rate:      0,305 MB/sec
[info]                  ·gc.alloc.rate.norm: 4,147 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 115921,394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   115977,256 ±(99.9%) 722,290 ops/s [Average]
[info]   (min, avg, max) = (115693,331, 115977,256, 116189,953), stdev = 187,576
[info]   CI (99.9%): [115254,966, 116699,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,157 ±(99.9%) 0,861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,157, 0,481), stdev = 0,224
[info]   CI (99.9%): [≈ 0, 1,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2,133 ±(99.9%) 11,675 B/op [Average]
[info]   (min, avg, max) = (0,004, 2,133, 6,506), stdev = 3,032
[info]   CI (99.9%): [≈ 0, 13,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,28% complete, ETA 00:40:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 984,332 ops/s
[info] # Warmup Iteration   2: 6189,349 ops/s
[info] # Warmup Iteration   3: 7924,575 ops/s
[info] # Warmup Iteration   4: 8011,671 ops/s
[info] # Warmup Iteration   5: 8009,819 ops/s
[info] Iteration   1: 8069,174 ops/s
[info]                  ·gc.alloc.rate:                   2663,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              519390,239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522793,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 8086,845 ops/s
[info]                  ·gc.alloc.rate:                   2642,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              514100,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391676,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,051 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 8118,652 ops/s
[info]                  ·gc.alloc.rate:               2682,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          519752,232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521060,023 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 8097,320 ops/s
[info]                  ·gc.alloc.rate:               2688,380 MB/sec
[info]                  ·gc.alloc.rate.norm:          522318,384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523705,458 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 8076,940 ops/s
[info]                  ·gc.alloc.rate:               2682,665 MB/sec
[info]                  ·gc.alloc.rate.norm:          522523,879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 526234,855 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   8089,786 ±(99.9%) 74,282 ops/s [Average]
[info]   (min, avg, max) = (8069,174, 8089,786, 8118,652), stdev = 19,291
[info]   CI (99.9%): [8015,504, 8164,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2671,996 ±(99.9%) 72,283 MB/sec [Average]
[info]   (min, avg, max) = (2642,733, 2671,996, 2688,380), stdev = 18,772
[info]   CI (99.9%): [2599,713, 2744,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   519616,956 ±(99.9%) 13094,158 B/op [Average]
[info]   (min, avg, max) = (514100,046, 519616,956, 522523,879), stdev = 3400,511
[info]   CI (99.9%): [506522,798, 532711,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2556,212 ±(99.9%) 1168,774 MB/sec [Average]
[info]   (min, avg, max) = (2013,415, 2556,212, 2701,717), stdev = 303,527
[info]   CI (99.9%): [1387,438, 3724,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   497094,183 ±(99.9%) 227033,216 B/op [Average]
[info]   (min, avg, max) = (391676,645, 497094,183, 526234,855), stdev = 58959,805
[info]   CI (99.9%): [270060,967, 724127,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,354), stdev = 0,156
[info]   CI (99.9%): [≈ 0, 0,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14,614 ±(99.9%) 117,306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,614, 69,019), stdev = 30,464
[info]   CI (99.9%): [≈ 0, 131,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,48% complete, ETA 00:40:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3370,499 ops/s
[info] # Warmup Iteration   2: 4827,451 ops/s
[info] # Warmup Iteration   3: 4807,001 ops/s
[info] # Warmup Iteration   4: 4975,529 ops/s
[info] # Warmup Iteration   5: 5029,814 ops/s
[info] Iteration   1: 5007,619 ops/s
[info]                  ·gc.alloc.rate:                   534,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              167781,278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210594,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,505 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5033,897 ops/s
[info]                  ·gc.alloc.rate:      515,789 MB/sec
[info]                  ·gc.alloc.rate.norm: 161189,315 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4998,400 ops/s
[info]                  ·gc.alloc.rate:                   530,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              167087,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210973,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,728 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 5013,527 ops/s
[info]                  ·gc.alloc.rate:               528,264 MB/sec
[info]                  ·gc.alloc.rate.norm:          165763,844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210447,008 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 5013,651 ops/s
[info]                  ·gc.alloc.rate:                   534,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              167713,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210447,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,033 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   5013,419 ±(99.9%) 50,156 ops/s [Average]
[info]   (min, avg, max) = (4998,400, 5013,419, 5033,897), stdev = 13,025
[info]   CI (99.9%): [4963,263, 5063,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   528,699 ±(99.9%) 29,445 MB/sec [Average]
[info]   (min, avg, max) = (515,789, 528,699, 534,475), stdev = 7,647
[info]   CI (99.9%): [499,254, 558,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   165906,989 ±(99.9%) 10623,399 B/op [Average]
[info]   (min, avg, max) = (161189,315, 165906,989, 167781,278), stdev = 2758,863
[info]   CI (99.9%): [155283,591, 176530,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   536,403 ±(99.9%) 1154,647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536,403, 670,663), stdev = 299,858
[info]   CI (99.9%): [≈ 0, 1691,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   168492,386 ±(99.9%) 362693,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168492,386, 210973,491), stdev = 94190,353
[info]   CI (99.9%): [≈ 0, 531185,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,014 ±(99.9%) 0,061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,038), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,453 ±(99.9%) 19,088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,453, 12,033), stdev = 4,957
[info]   CI (99.9%): [≈ 0, 23,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,600, 6,000), stdev = 2,191
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,68% complete, ETA 00:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1607755,568 ops/s
[info] # Warmup Iteration   2: 8938660,218 ops/s
[info] # Warmup Iteration   3: 9741593,270 ops/s
[info] # Warmup Iteration   4: 9637960,110 ops/s
[info] # Warmup Iteration   5: 9840264,441 ops/s
[info] Iteration   1: 9865370,886 ops/s
[info]                  ·gc.alloc.rate:                   5427,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              865,501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5401,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 9723841,600 ops/s
[info]                  ·gc.alloc.rate:                   5328,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              862,056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4744,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 9865322,779 ops/s
[info]                  ·gc.alloc.rate:               5433,003 MB/sec
[info]                  ·gc.alloc.rate.norm:          866,407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      5436,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 866,888 B/op
[info]                  ·gc.count:                    8,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Iteration   4: 9851183,729 ops/s
[info]                  ·gc.alloc.rate:                   5413,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              864,237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5440,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   5: 9845408,154 ops/s
[info]                  ·gc.alloc.rate:               5395,935 MB/sec
[info]                  ·gc.alloc.rate.norm:          862,272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4767,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 761,774 B/op
[info]                  ·gc.count:                    7,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9830225,430 ±(99.9%) 231473,924 ops/s [Average]
[info]   (min, avg, max) = (9723841,600, 9830225,430, 9865370,886), stdev = 60113,043
[info]   CI (99.9%): [9598751,505, 10061699,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   5399,551 ±(99.9%) 163,320 MB/sec [Average]
[info]   (min, avg, max) = (5328,111, 5399,551, 5433,003), stdev = 42,414
[info]   CI (99.9%): [5236,231, 5562,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   864,095 ±(99.9%) 7,413 B/op [Average]
[info]   (min, avg, max) = (862,056, 864,095, 866,407), stdev = 1,925
[info]   CI (99.9%): [856,682, 871,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5157,934 ±(99.9%) 1414,530 MB/sec [Average]
[info]   (min, avg, max) = (4744,860, 5157,934, 5440,127), stdev = 367,349
[info]   CI (99.9%): [3743,404, 6572,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   825,252 ±(99.9%) 213,130 B/op [Average]
[info]   (min, avg, max) = (761,774, 825,252, 868,492), stdev = 55,349
[info]   CI (99.9%): [612,122, 1038,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,167), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,027), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   38,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,600, 8,000), stdev = 0,548
[info]   CI (99.9%): [38,000, 38,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   36,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 7,200, 8,000), stdev = 0,837
[info]   CI (99.9%): [36,000, 36,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,88% complete, ETA 00:39:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,817 ops/s
[info] # Warmup Iteration   2: 40386799,130 ops/s
[info] # Warmup Iteration   3: 42271581,295 ops/s
[info] # Warmup Iteration   4: 41748507,310 ops/s
[info] # Warmup Iteration   5: 41938984,510 ops/s
[info] Iteration   1: 42022202,251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42080147,831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42068168,700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42033031,671 ops/s
[info]                  ·gc.alloc.rate:      0,155 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42033367,948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42047383,680 ±(99.9%) 97071,975 ops/s [Average]
[info]   (min, avg, max) = (42022202,251, 42047383,680, 42080147,831), stdev = 25209,284
[info]   CI (99.9%): [41950311,705, 42144455,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0,031 ±(99.9%) 0,266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,031, 0,155), stdev = 0,069
[info]   CI (99.9%): [≈ 0, 0,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,08% complete, ETA 00:39:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1330753,799 ops/s
[info] # Warmup Iteration   2: 9653638,786 ops/s
[info] # Warmup Iteration   3: 11889576,773 ops/s
[info] # Warmup Iteration   4: 11632027,187 ops/s
[info] # Warmup Iteration   5: 12055504,996 ops/s
[info] Iteration   1: 12046562,736 ops/s
[info]                  ·gc.alloc.rate:                   4136,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              540,221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4016,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 12050905,284 ops/s
[info]                  ·gc.alloc.rate:                   4142,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              540,778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     526,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 12041411,482 ops/s
[info]                  ·gc.alloc.rate:               4139,142 MB/sec
[info]                  ·gc.alloc.rate.norm:          540,791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4052,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 529,432 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 12000588,186 ops/s
[info]                  ·gc.alloc.rate:               4126,947 MB/sec
[info]                  ·gc.alloc.rate.norm:          541,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4066,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 533,054 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 12026163,320 ops/s
[info]                  ·gc.alloc.rate:                   4141,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              541,754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4074,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   12033126,202 ±(99.9%) 78738,048 ops/s [Average]
[info]   (min, avg, max) = (12000588,186, 12033126,202, 12050905,284), stdev = 20448,021
[info]   CI (99.9%): [11954388,154, 12111864,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   4137,214 ±(99.9%) 23,681 MB/sec [Average]
[info]   (min, avg, max) = (4126,947, 4137,214, 4142,289), stdev = 6,150
[info]   CI (99.9%): [4113,534, 4160,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540,916 ±(99.9%) 2,140 B/op [Average]
[info]   (min, avg, max) = (540,221, 540,916, 541,754), stdev = 0,556
[info]   CI (99.9%): [538,776, 543,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   4048,911 ±(99.9%) 91,007 MB/sec [Average]
[info]   (min, avg, max) = (4016,478, 4048,911, 4074,974), stdev = 23,634
[info]   CI (99.9%): [3957,904, 4139,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   529,375 ±(99.9%) 14,605 B/op [Average]
[info]   (min, avg, max) = (524,546, 529,375, 533,091), stdev = 3,793
[info]   CI (99.9%): [514,769, 543,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   32,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,28% complete, ETA 00:39:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25571428,261 ops/s
[info] # Warmup Iteration   2: 52235889,211 ops/s
[info] # Warmup Iteration   3: 53873954,095 ops/s
[info] # Warmup Iteration   4: 53935629,367 ops/s
[info] # Warmup Iteration   5: 53920361,823 ops/s
[info] Iteration   1: 53889914,160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 53838491,459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 53905100,009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 53880322,893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 54041733,365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   53911112,377 ±(99.9%) 296831,613 ops/s [Average]
[info]   (min, avg, max) = (53838491,459, 53911112,377, 54041733,365), stdev = 77086,227
[info]   CI (99.9%): [53614280,764, 54207943,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,48% complete, ETA 00:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14903032,009 ops/s
[info] # Warmup Iteration   2: 33646410,949 ops/s
[info] # Warmup Iteration   3: 34871256,598 ops/s
[info] # Warmup Iteration   4: 34803161,977 ops/s
[info] # Warmup Iteration   5: 34800551,013 ops/s
[info] Iteration   1: 34901806,755 ops/s
[info]                  ·gc.alloc.rate:               904,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          40,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30,308 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 34852586,080 ops/s
[info]                  ·gc.alloc.rate:                   918,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              41,477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 34660950,841 ops/s
[info]                  ·gc.alloc.rate:               894,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          40,620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30,548 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 34918432,592 ops/s
[info]                  ·gc.alloc.rate:                   901,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              40,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34794542,140 ops/s
[info]                  ·gc.alloc.rate:               925,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          41,830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60,893 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   34825663,682 ±(99.9%) 400298,117 ops/s [Average]
[info]   (min, avg, max) = (34660950,841, 34825663,682, 34918432,592), stdev = 103956,150
[info]   CI (99.9%): [34425365,565, 35225961,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   908,895 ±(99.9%) 48,553 MB/sec [Average]
[info]   (min, avg, max) = (894,904, 908,895, 925,113), stdev = 12,609
[info]   CI (99.9%): [860,343, 957,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41,060 ±(99.9%) 2,153 B/op [Average]
[info]   (min, avg, max) = (40,612, 41,060, 41,830), stdev = 0,559
[info]   CI (99.9%): [38,907, 43,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   942,096 ±(99.9%) 1419,936 MB/sec [Average]
[info]   (min, avg, max) = (672,356, 942,096, 1346,705), stdev = 368,753
[info]   CI (99.9%): [≈ 0, 2362,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   42,560 ±(99.9%) 64,156 B/op [Average]
[info]   (min, avg, max) = (30,308, 42,560, 60,893), stdev = 16,661
[info]   CI (99.9%): [≈ 0, 106,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,68% complete, ETA 00:38:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1773226,036 ops/s
[info] # Warmup Iteration   2: 8999347,946 ops/s
[info] # Warmup Iteration   3: 9604264,013 ops/s
[info] # Warmup Iteration   4: 9679453,294 ops/s
[info] # Warmup Iteration   5: 9757824,435 ops/s
[info] Iteration   1: 9725999,567 ops/s
[info]                  ·gc.alloc.rate:                   4112,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              665,281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 9828798,079 ops/s
[info]                  ·gc.alloc.rate:                   4157,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              665,535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4040,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 9737657,501 ops/s
[info]                  ·gc.alloc.rate:                   4120,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              665,765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4056,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 9767371,317 ops/s
[info]                  ·gc.alloc.rate:                   4134,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              665,878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 9687813,827 ops/s
[info]                  ·gc.alloc.rate:                   4104,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              666,546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4076,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9749528,058 ±(99.9%) 202893,352 ops/s [Average]
[info]   (min, avg, max) = (9687813,827, 9749528,058, 9828798,079), stdev = 52690,759
[info]   CI (99.9%): [9546634,706, 9952421,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4125,956 ±(99.9%) 80,366 MB/sec [Average]
[info]   (min, avg, max) = (4104,484, 4125,956, 4157,810), stdev = 20,871
[info]   CI (99.9%): [4045,591, 4206,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   665,801 ±(99.9%) 1,831 B/op [Average]
[info]   (min, avg, max) = (665,281, 665,801, 666,546), stdev = 0,476
[info]   CI (99.9%): [663,970, 667,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4052,530 ±(99.9%) 83,210 MB/sec [Average]
[info]   (min, avg, max) = (4022,338, 4052,530, 4076,340), stdev = 21,609
[info]   CI (99.9%): [3969,320, 4135,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   653,971 ±(99.9%) 22,034 B/op [Average]
[info]   (min, avg, max) = (646,723, 653,971, 661,976), stdev = 5,722
[info]   CI (99.9%): [631,938, 676,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,006, 0,010), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,88% complete, ETA 00:38:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4118783,136 ops/s
[info] # Warmup Iteration   2: 10714225,172 ops/s
[info] # Warmup Iteration   3: 12491154,792 ops/s
[info] # Warmup Iteration   4: 12597902,631 ops/s
[info] # Warmup Iteration   5: 12555717,745 ops/s
[info] Iteration   1: 12253892,163 ops/s
[info]                  ·gc.alloc.rate:                   5258,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              675,130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5406,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 12659516,133 ops/s
[info]                  ·gc.alloc.rate:                   5428,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              674,567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5425,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 12413175,644 ops/s
[info]                  ·gc.alloc.rate:                   5302,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              671,987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     603,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 12508071,677 ops/s
[info]                  ·gc.alloc.rate:                   5372,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              675,720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5445,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     684,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 12652236,890 ops/s
[info]                  ·gc.alloc.rate:                   5396,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              671,088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4767,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     592,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   12497378,501 ±(99.9%) 657885,064 ops/s [Average]
[info]   (min, avg, max) = (12253892,163, 12497378,501, 12659516,133), stdev = 170850,662
[info]   CI (99.9%): [11839493,438, 13155263,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   5351,566 ±(99.9%) 268,229 MB/sec [Average]
[info]   (min, avg, max) = (5258,670, 5351,566, 5428,194), stdev = 69,658
[info]   CI (99.9%): [5083,336, 5619,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   673,698 ±(99.9%) 7,853 B/op [Average]
[info]   (min, avg, max) = (671,088, 673,698, 675,720), stdev = 2,039
[info]   CI (99.9%): [665,846, 681,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   5160,772 ±(99.9%) 1399,872 MB/sec [Average]
[info]   (min, avg, max) = (4758,556, 5160,772, 5445,490), stdev = 363,542
[info]   CI (99.9%): [3760,900, 6560,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   649,853 ±(99.9%) 184,969 B/op [Average]
[info]   (min, avg, max) = (592,803, 649,853, 694,146), stdev = 48,036
[info]   CI (99.9%): [464,884, 834,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,125), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,006, 0,016), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   38,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,600, 8,000), stdev = 0,548
[info]   CI (99.9%): [38,000, 38,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   34,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 8,000), stdev = 0,837
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,08% complete, ETA 00:38:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5582396,859 ops/s
[info] # Warmup Iteration   2: 14965052,984 ops/s
[info] # Warmup Iteration   3: 15642864,976 ops/s
[info] # Warmup Iteration   4: 15771625,134 ops/s
[info] # Warmup Iteration   5: 15655240,821 ops/s
[info] Iteration   1: 15675411,264 ops/s
[info]                  ·gc.alloc.rate:                   1909,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              191,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 15137250,379 ops/s
[info]                  ·gc.alloc.rate:                   1848,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 15876134,127 ops/s
[info]                  ·gc.alloc.rate:               1909,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          189,231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132,861 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 15850020,472 ops/s
[info]                  ·gc.alloc.rate:                   1918,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              190,443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 15809768,353 ops/s
[info]                  ·gc.alloc.rate:               1928,057 MB/sec
[info]                  ·gc.alloc.rate.norm:          191,870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 200,267 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   15669716,919 ±(99.9%) 1184166,736 ops/s [Average]
[info]   (min, avg, max) = (15137250,379, 15669716,919, 15876134,127), stdev = 307524,341
[info]   CI (99.9%): [14485550,183, 16853883,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1902,890 ±(99.9%) 120,958 MB/sec [Average]
[info]   (min, avg, max) = (1848,363, 1902,890, 1928,057), stdev = 31,412
[info]   CI (99.9%): [1781,932, 2023,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   191,069 ±(99.9%) 4,669 B/op [Average]
[info]   (min, avg, max) = (189,231, 191,069, 192,113), stdev = 1,212
[info]   CI (99.9%): [186,400, 195,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1878,893 ±(99.9%) 1158,539 MB/sec [Average]
[info]   (min, avg, max) = (1340,691, 1878,893, 2015,766), stdev = 300,869
[info]   CI (99.9%): [720,353, 3037,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   188,888 ±(99.9%) 121,520 B/op [Average]
[info]   (min, avg, max) = (132,861, 188,888, 209,374), stdev = 31,558
[info]   CI (99.9%): [67,368, 310,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,675 ±(99.9%) 4,645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 2,811), stdev = 1,206
[info]   CI (99.9%): [≈ 0, 5,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,068 ±(99.9%) 0,466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,068, 0,282), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 7,000), stdev = 1,949
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,29% complete, ETA 00:38:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,744 ops/s
[info] # Warmup Iteration   2: 43830288,076 ops/s
[info] # Warmup Iteration   3: 45278162,738 ops/s
[info] # Warmup Iteration   4: 46935445,527 ops/s
[info] # Warmup Iteration   5: 46684470,033 ops/s
[info] Iteration   1: 46944799,410 ops/s
[info]                  ·gc.alloc.rate:                   979,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 46840841,243 ops/s
[info]                  ·gc.alloc.rate:                   988,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              33,216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 46808381,536 ops/s
[info]                  ·gc.alloc.rate:               969,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22,442 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 46844671,912 ops/s
[info]                  ·gc.alloc.rate:               978,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22,425 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 46812242,200 ops/s
[info]                  ·gc.alloc.rate:                   991,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              33,306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   46850187,260 ±(99.9%) 213152,987 ops/s [Average]
[info]   (min, avg, max) = (46808381,536, 46850187,260, 46944799,410), stdev = 55355,154
[info]   CI (99.9%): [46637034,274, 47063340,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   981,397 ±(99.9%) 33,826 MB/sec [Average]
[info]   (min, avg, max) = (969,346, 981,397, 991,025), stdev = 8,784
[info]   CI (99.9%): [947,571, 1015,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32,956 ±(99.9%) 1,156 B/op [Average]
[info]   (min, avg, max) = (32,580, 32,956, 33,306), stdev = 0,300
[info]   CI (99.9%): [31,800, 34,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   934,402 ±(99.9%) 1408,510 MB/sec [Average]
[info]   (min, avg, max) = (666,393, 934,402, 1336,112), stdev = 365,786
[info]   CI (99.9%): [≈ 0, 2342,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   31,382 ±(99.9%) 47,362 B/op [Average]
[info]   (min, avg, max) = (22,333, 31,382, 44,904), stdev = 12,300
[info]   CI (99.9%): [≈ 0, 78,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,022 ±(99.9%) 0,097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,060), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 6,000), stdev = 1,871
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,49% complete, ETA 00:37:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2978277,989 ops/s
[info] # Warmup Iteration   2: 13797175,958 ops/s
[info] # Warmup Iteration   3: 14468845,368 ops/s
[info] # Warmup Iteration   4: 14569632,276 ops/s
[info] # Warmup Iteration   5: 14816416,585 ops/s
[info] Iteration   1: 14628374,049 ops/s
[info]                  ·gc.alloc.rate:               3030,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          325,922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3341,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359,410 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 14647765,493 ops/s
[info]                  ·gc.alloc.rate:                   3009,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              323,198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 14794193,464 ops/s
[info]                  ·gc.alloc.rate:               3038,239 MB/sec
[info]                  ·gc.alloc.rate.norm:          323,102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285,520 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 14788690,184 ops/s
[info]                  ·gc.alloc.rate:               3065,557 MB/sec
[info]                  ·gc.alloc.rate.norm:          326,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358,183 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 14769842,288 ops/s
[info]                  ·gc.alloc.rate:               3035,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          323,373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287,906 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   14725773,096 ±(99.9%) 311365,464 ops/s [Average]
[info]   (min, avg, max) = (14628374,049, 14725773,096, 14794193,464), stdev = 80860,622
[info]   CI (99.9%): [14414407,632, 15037138,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   3035,789 ±(99.9%) 77,893 MB/sec [Average]
[info]   (min, avg, max) = (3009,023, 3035,789, 3065,557), stdev = 20,228
[info]   CI (99.9%): [2957,896, 3113,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   324,346 ±(99.9%) 5,932 B/op [Average]
[info]   (min, avg, max) = (323,102, 324,346, 326,134), stdev = 1,541
[info]   CI (99.9%): [318,414, 330,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2954,677 ±(99.9%) 1405,678 MB/sec [Average]
[info]   (min, avg, max) = (2677,191, 2954,677, 3366,797), stdev = 365,050
[info]   CI (99.9%): [1549,000, 4360,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   315,715 ±(99.9%) 151,486 B/op [Average]
[info]   (min, avg, max) = (285,520, 315,715, 359,410), stdev = 39,341
[info]   CI (99.9%): [164,228, 467,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,69% complete, ETA 00:37:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16368478,940 ops/s
[info] # Warmup Iteration   2: 49852352,497 ops/s
[info] # Warmup Iteration   3: 53234528,272 ops/s
[info] # Warmup Iteration   4: 53997579,934 ops/s
[info] # Warmup Iteration   5: 53954051,619 ops/s
[info] Iteration   1: 53833802,013 ops/s
[info]                  ·gc.alloc.rate:               1125,635 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39,263 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 53612901,336 ops/s
[info]                  ·gc.alloc.rate:               1117,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19,722 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 53772732,471 ops/s
[info]                  ·gc.alloc.rate:               1144,787 MB/sec
[info]                  ·gc.alloc.rate.norm:          33,493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39,347 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 53335206,292 ops/s
[info]                  ·gc.alloc.rate:                   1124,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              33,168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 53399509,701 ops/s
[info]                  ·gc.alloc.rate:                   1112,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   53590830,362 ±(99.9%) 849235,030 ops/s [Average]
[info]   (min, avg, max) = (53335206,292, 53590830,362, 53833802,013), stdev = 220543,640
[info]   CI (99.9%): [52741595,333, 54440065,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1124,832 ±(99.9%) 47,904 MB/sec [Average]
[info]   (min, avg, max) = (1112,080, 1124,832, 1144,787), stdev = 12,441
[info]   CI (99.9%): [1076,928, 1172,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   33,021 ±(99.9%) 1,189 B/op [Average]
[info]   (min, avg, max) = (32,765, 33,021, 33,493), stdev = 0,309
[info]   CI (99.9%): [31,832, 34,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,798 ±(99.9%) 1417,390 MB/sec [Average]
[info]   (min, avg, max) = (672,107, 1075,798, 1345,425), stdev = 368,092
[info]   CI (99.9%): [≈ 0, 2493,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31,570 ±(99.9%) 41,462 B/op [Average]
[info]   (min, avg, max) = (19,722, 31,570, 39,688), stdev = 10,767
[info]   CI (99.9%): [≈ 0, 73,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,616 ±(99.9%) 5,218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 3,040), stdev = 1,355
[info]   CI (99.9%): [≈ 0, 5,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,090), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,140
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,89% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22822286,230 ops/s
[info] # Warmup Iteration   2: 60905866,166 ops/s
[info] # Warmup Iteration   3: 68677680,072 ops/s
[info] # Warmup Iteration   4: 68741570,178 ops/s
[info] # Warmup Iteration   5: 68703486,970 ops/s
[info] Iteration   1: 68742523,405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 68833172,162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 68926927,631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 68903788,552 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 68880303,485 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   68857343,047 ±(99.9%) 280952,985 ops/s [Average]
[info]   (min, avg, max) = (68742523,405, 68857343,047, 68926927,631), stdev = 72962,598
[info]   CI (99.9%): [68576390,062, 69138296,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,09% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7653840,363 ops/s
[info] # Warmup Iteration   2: 19436749,636 ops/s
[info] # Warmup Iteration   3: 19524235,477 ops/s
[info] # Warmup Iteration   4: 19677571,174 ops/s
[info] # Warmup Iteration   5: 18474483,544 ops/s
[info] Iteration   1: 19751308,878 ops/s
[info]                  ·gc.alloc.rate:               1860,652 MB/sec
[info]                  ·gc.alloc.rate.norm:          148,213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161,100 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 19744088,749 ops/s
[info]                  ·gc.alloc.rate:                   1871,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              149,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 19726412,967 ops/s
[info]                  ·gc.alloc.rate:                   1858,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              148,240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19734197,574 ops/s
[info]                  ·gc.alloc.rate:                   1861,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              148,439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 19796081,862 ops/s
[info]                  ·gc.alloc.rate:                   1888,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              150,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   19750418,006 ±(99.9%) 104844,082 ops/s [Average]
[info]   (min, avg, max) = (19726412,967, 19750418,006, 19796081,862), stdev = 27227,675
[info]   CI (99.9%): [19645573,923, 19855262,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1868,185 ±(99.9%) 47,193 MB/sec [Average]
[info]   (min, avg, max) = (1858,696, 1868,185, 1888,306), stdev = 12,256
[info]   CI (99.9%): [1820,993, 1915,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148,815 ±(99.9%) 3,043 B/op [Average]
[info]   (min, avg, max) = (148,213, 148,815, 150,069), stdev = 0,790
[info]   CI (99.9%): [145,772, 151,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1889,752 ±(99.9%) 1161,742 MB/sec [Average]
[info]   (min, avg, max) = (1350,058, 1889,752, 2025,912), stdev = 301,701
[info]   CI (99.9%): [728,010, 3051,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   150,521 ±(99.9%) 92,235 B/op [Average]
[info]   (min, avg, max) = (107,673, 150,521, 161,455), stdev = 23,953
[info]   CI (99.9%): [58,286, 242,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,331 ±(99.9%) 2,455 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,331, 1,468), stdev = 0,638
[info]   CI (99.9%): [≈ 0, 2,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,117), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,29% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598690,959 ops/s
[info] # Warmup Iteration   2: 2891892,105 ops/s
[info] # Warmup Iteration   3: 2987968,686 ops/s
[info] # Warmup Iteration   4: 3035374,211 ops/s
[info] # Warmup Iteration   5: 3010824,371 ops/s
[info] Iteration   1: 3054359,645 ops/s
[info]                  ·gc.alloc.rate:                   2451,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262,533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1036,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,397 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3035132,293 ops/s
[info]                  ·gc.alloc.rate:                   2452,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              1271,253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1388,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3059059,654 ops/s
[info]                  ·gc.alloc.rate:               2471,426 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270,664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1376,734 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 3047906,620 ops/s
[info]                  ·gc.alloc.rate:               2449,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1039,671 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 2923056,544 ops/s
[info]                  ·gc.alloc.rate:               2353,379 MB/sec
[info]                  ·gc.alloc.rate.norm:          1266,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1085,870 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3023902,951 ±(99.9%) 219823,175 ops/s [Average]
[info]   (min, avg, max) = (2923056,544, 3023902,951, 3059059,654), stdev = 57087,381
[info]   CI (99.9%): [2804079,776, 3243726,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2435,650 ±(99.9%) 180,331 MB/sec [Average]
[info]   (min, avg, max) = (2353,379, 2435,650, 2471,426), stdev = 46,832
[info]   CI (99.9%): [2255,319, 2615,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1267,146 ±(99.9%) 14,574 B/op [Average]
[info]   (min, avg, max) = (1262,533, 1267,146, 1271,253), stdev = 3,785
[info]   CI (99.9%): [1252,572, 1281,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2280,176 ±(99.9%) 1399,462 MB/sec [Average]
[info]   (min, avg, max) = (2012,764, 2280,176, 2678,860), stdev = 363,436
[info]   CI (99.9%): [880,714, 3679,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1185,519 ±(99.9%) 697,173 B/op [Average]
[info]   (min, avg, max) = (1036,756, 1185,519, 1388,562), stdev = 181,054
[info]   CI (99.9%): [488,346, 1882,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,162 ±(99.9%) 1,311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,770), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 1,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,397), stdev = 0,175
[info]   CI (99.9%): [≈ 0, 0,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,49% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5534630,024 ops/s
[info] # Warmup Iteration   2: 12606001,230 ops/s
[info] # Warmup Iteration   3: 13195356,009 ops/s
[info] # Warmup Iteration   4: 13255525,170 ops/s
[info] # Warmup Iteration   5: 13230650,338 ops/s
[info] Iteration   1: 13204384,623 ops/s
[info]                  ·gc.alloc.rate:                   2369,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              282,344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 13217872,800 ops/s
[info]                  ·gc.alloc.rate:                   2349,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              279,603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 13238014,421 ops/s
[info]                  ·gc.alloc.rate:               2393,341 MB/sec
[info]                  ·gc.alloc.rate.norm:          284,428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319,156 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 13253288,230 ops/s
[info]                  ·gc.alloc.rate:               2370,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          281,371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239,443 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 13259899,662 ops/s
[info]                  ·gc.alloc.rate:               2371,984 MB/sec
[info]                  ·gc.alloc.rate.norm:          281,436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239,725 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   13234691,947 ±(99.9%) 90176,356 ops/s [Average]
[info]   (min, avg, max) = (13204384,623, 13234691,947, 13259899,662), stdev = 23418,513
[info]   CI (99.9%): [13144515,591, 13324868,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2370,852 ±(99.9%) 60,321 MB/sec [Average]
[info]   (min, avg, max) = (2349,110, 2370,852, 2393,341), stdev = 15,665
[info]   CI (99.9%): [2310,531, 2431,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   281,836 ±(99.9%) 6,763 B/op [Average]
[info]   (min, avg, max) = (279,603, 281,836, 284,428), stdev = 1,756
[info]   CI (99.9%): [275,073, 288,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2285,118 ±(99.9%) 1414,634 MB/sec [Average]
[info]   (min, avg, max) = (2013,120, 2285,118, 2689,526), stdev = 367,376
[info]   CI (99.9%): [870,484, 3699,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   271,677 ±(99.9%) 169,178 B/op [Average]
[info]   (min, avg, max) = (239,443, 271,677, 320,449), stdev = 43,935
[info]   CI (99.9%): [102,499, 440,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,167 ±(99.9%) 1,390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,167, 0,812), stdev = 0,361
[info]   CI (99.9%): [≈ 0, 1,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,097), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,69% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83375,598 ops/s
[info] # Warmup Iteration   2: 179726,760 ops/s
[info] # Warmup Iteration   3: 187246,175 ops/s
[info] # Warmup Iteration   4: 186889,249 ops/s
[info] # Warmup Iteration   5: 188516,010 ops/s
[info] Iteration   1: 188611,401 ops/s
[info]                  ·gc.alloc.rate:               3590,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          29953,311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3357,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28008,197 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 188884,162 ops/s
[info]                  ·gc.alloc.rate:                   3597,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              29962,416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28049,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,347 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 188284,171 ops/s
[info]                  ·gc.alloc.rate:                   3589,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              29996,314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28221,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,174 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 187566,834 ops/s
[info]                  ·gc.alloc.rate:                   3575,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              29990,121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28401,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,349 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 187577,128 ops/s
[info]                  ·gc.alloc.rate:                   3576,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              30001,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28456,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   188184,739 ±(99.9%) 2304,054 ops/s [Average]
[info]   (min, avg, max) = (187566,834, 188184,739, 188884,162), stdev = 598,355
[info]   CI (99.9%): [185880,685, 190488,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3586,075 ±(99.9%) 36,723 MB/sec [Average]
[info]   (min, avg, max) = (3575,463, 3586,075, 3597,329), stdev = 9,537
[info]   CI (99.9%): [3549,351, 3622,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29980,660 ±(99.9%) 82,469 B/op [Average]
[info]   (min, avg, max) = (29953,311, 29980,660, 30001,138), stdev = 21,417
[info]   CI (99.9%): [29898,191, 30063,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3376,318 ±(99.9%) 53,907 MB/sec [Average]
[info]   (min, avg, max) = (3357,698, 3376,318, 3392,608), stdev = 13,999
[info]   CI (99.9%): [3322,411, 3430,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28227,491 ±(99.9%) 776,302 B/op [Average]
[info]   (min, avg, max) = (28008,197, 28227,491, 28456,430), stdev = 201,603
[info]   CI (99.9%): [27451,189, 29003,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,279 ±(99.9%) 0,766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,279, 0,524), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 1,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,89% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2698,170 ops/s
[info] # Warmup Iteration   2: 27587,623 ops/s
[info] # Warmup Iteration   3: 36792,581 ops/s
[info] # Warmup Iteration   4: 36303,781 ops/s
[info] # Warmup Iteration   5: 36610,669 ops/s
[info] Iteration   1: 36769,835 ops/s
[info]                  ·gc.alloc.rate:                   2759,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              118049,250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114831,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,455 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 37121,291 ops/s
[info]                  ·gc.alloc.rate:                   2785,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              118065,690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114021,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,765 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 36963,686 ops/s
[info]                  ·gc.alloc.rate:                   2803,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              119322,565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114809,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,659 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 37025,003 ops/s
[info]                  ·gc.alloc.rate:                   2806,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              119255,969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114907,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,885 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 37042,548 ops/s
[info]                  ·gc.alloc.rate:               2809,535 MB/sec
[info]                  ·gc.alloc.rate.norm:          119325,244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115060,344 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   36984,473 ±(99.9%) 510,250 ops/s [Average]
[info]   (min, avg, max) = (36769,835, 36984,473, 37121,291), stdev = 132,510
[info]   CI (99.9%): [36474,222, 37494,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2792,908 ±(99.9%) 81,050 MB/sec [Average]
[info]   (min, avg, max) = (2759,018, 2792,908, 2809,535), stdev = 21,048
[info]   CI (99.9%): [2711,858, 2873,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118803,744 ±(99.9%) 2625,528 B/op [Average]
[info]   (min, avg, max) = (118049,250, 118803,744, 119325,244), stdev = 681,841
[info]   CI (99.9%): [116178,216, 121429,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2697,022 ±(99.9%) 39,213 MB/sec [Average]
[info]   (min, avg, max) = (2683,802, 2697,022, 2709,117), stdev = 10,184
[info]   CI (99.9%): [2657,808, 2736,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114725,984 ±(99.9%) 1562,541 B/op [Average]
[info]   (min, avg, max) = (114021,697, 114725,984, 115060,344), stdev = 405,787
[info]   CI (99.9%): [113163,443, 116288,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,953 ±(99.9%) 6,599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,953, 4,455), stdev = 1,714
[info]   CI (99.9%): [≈ 0, 8,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,09% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60599,640 ops/s
[info] # Warmup Iteration   2: 156348,028 ops/s
[info] # Warmup Iteration   3: 158720,890 ops/s
[info] # Warmup Iteration   4: 158669,503 ops/s
[info] # Warmup Iteration   5: 159532,508 ops/s
[info] Iteration   1: 159213,904 ops/s
[info]                  ·gc.alloc.rate:                   1370,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              13545,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13205,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 156914,569 ops/s
[info]                  ·gc.alloc.rate:                   1349,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              13533,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13409,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,418 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 158456,988 ops/s
[info]                  ·gc.alloc.rate:                   1387,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              13773,542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13291,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,595 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 159656,277 ops/s
[info]                  ·gc.alloc.rate:                   1383,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              13636,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13178,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,540 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 159097,797 ops/s
[info]                  ·gc.alloc.rate:               1377,829 MB/sec
[info]                  ·gc.alloc.rate.norm:          13625,314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13199,209 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   158667,907 ±(99.9%) 4119,683 ops/s [Average]
[info]   (min, avg, max) = (156914,569, 158667,907, 159656,277), stdev = 1069,868
[info]   CI (99.9%): [154548,224, 162787,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1373,912 ±(99.9%) 57,165 MB/sec [Average]
[info]   (min, avg, max) = (1349,818, 1373,912, 1387,262), stdev = 14,846
[info]   CI (99.9%): [1316,747, 1431,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13622,738 ±(99.9%) 369,772 B/op [Average]
[info]   (min, avg, max) = (13533,483, 13622,738, 13773,542), stdev = 96,028
[info]   CI (99.9%): [13252,966, 13992,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336,955 ±(99.9%) 5,708 MB/sec [Average]
[info]   (min, avg, max) = (1334,740, 1336,955, 1338,732), stdev = 1,482
[info]   CI (99.9%): [1331,247, 1342,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13256,922 ±(99.9%) 368,105 B/op [Average]
[info]   (min, avg, max) = (13178,856, 13256,922, 13409,447), stdev = 95,596
[info]   CI (99.9%): [12888,817, 13625,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,866 ±(99.9%) 6,135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,866, 3,686), stdev = 1,593
[info]   CI (99.9%): [≈ 0, 7,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,593 ±(99.9%) 60,916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,593, 36,595), stdev = 15,820
[info]   CI (99.9%): [≈ 0, 69,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,29% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316607,938 ops/s
[info] # Warmup Iteration   2: 474811,530 ops/s
[info] # Warmup Iteration   3: 483609,945 ops/s
[info] # Warmup Iteration   4: 489717,266 ops/s
[info] # Warmup Iteration   5: 484845,466 ops/s
[info] Iteration   1: 490585,448 ops/s
[info]                  ·gc.alloc.rate:                   1981,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              6354,171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6474,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,617 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 491641,597 ops/s
[info]                  ·gc.alloc.rate:                   1988,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              6363,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6446,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 489326,024 ops/s
[info]                  ·gc.alloc.rate:               1966,343 MB/sec
[info]                  ·gc.alloc.rate.norm:          6321,986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6468,248 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 490974,647 ops/s
[info]                  ·gc.alloc.rate:                   1986,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              6364,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6451,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 491308,530 ops/s
[info]                  ·gc.alloc.rate:               1961,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          6280,827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4301,885 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   490767,249 ±(99.9%) 3449,855 ops/s [Average]
[info]   (min, avg, max) = (489326,024, 490767,249, 491641,597), stdev = 895,916
[info]   CI (99.9%): [487317,394, 494217,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1976,719 ±(99.9%) 47,076 MB/sec [Average]
[info]   (min, avg, max) = (1961,190, 1976,719, 1988,396), stdev = 12,226
[info]   CI (99.9%): [1929,643, 2023,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6336,937 ±(99.9%) 137,747 B/op [Average]
[info]   (min, avg, max) = (6280,827, 6336,937, 6364,612), stdev = 35,773
[info]   CI (99.9%): [6199,189, 6474,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1880,366 ±(99.9%) 1156,194 MB/sec [Average]
[info]   (min, avg, max) = (1343,265, 1880,366, 2018,877), stdev = 300,260
[info]   CI (99.9%): [724,172, 3036,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6028,504 ±(99.9%) 3716,937 B/op [Average]
[info]   (min, avg, max) = (4301,885, 6028,504, 6474,235), stdev = 965,277
[info]   CI (99.9%): [2311,566, 9745,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 5,058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 2,999), stdev = 1,314
[info]   CI (99.9%): [≈ 0, 5,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,110 ±(99.9%) 16,221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,110, 9,617), stdev = 4,212
[info]   CI (99.9%): [≈ 0, 18,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,49% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334979,675 ops/s
[info] # Warmup Iteration   2: 525095,967 ops/s
[info] # Warmup Iteration   3: 520725,217 ops/s
[info] # Warmup Iteration   4: 508909,759 ops/s
[info] # Warmup Iteration   5: 532761,461 ops/s
[info] Iteration   1: 532195,116 ops/s
[info]                  ·gc.alloc.rate:                   1525,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508,315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3977,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 529163,563 ops/s
[info]                  ·gc.alloc.rate:                   1541,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6003,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,234 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 525045,202 ops/s
[info]                  ·gc.alloc.rate:                   1506,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              4514,292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4030,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 527230,399 ops/s
[info]                  ·gc.alloc.rate:                   1510,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              4507,335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4006,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 532506,389 ops/s
[info]                  ·gc.alloc.rate:                   1523,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              4502,452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,246 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   529228,134 ±(99.9%) 12334,384 ops/s [Average]
[info]   (min, avg, max) = (525045,202, 529228,134, 532506,389), stdev = 3203,200
[info]   CI (99.9%): [516893,750, 541562,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1521,556 ±(99.9%) 53,616 MB/sec [Average]
[info]   (min, avg, max) = (1506,533, 1521,556, 1541,810), stdev = 13,924
[info]   CI (99.9%): [1467,940, 1575,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4523,295 ±(99.9%) 131,844 B/op [Average]
[info]   (min, avg, max) = (4502,452, 4523,295, 4584,080), stdev = 34,239
[info]   CI (99.9%): [4391,451, 4655,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478,936 ±(99.9%) 1163,360 MB/sec [Average]
[info]   (min, avg, max) = (1342,088, 1478,936, 2019,380), stdev = 302,121
[info]   CI (99.9%): [315,576, 2642,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4396,749 ±(99.9%) 3461,080 B/op [Average]
[info]   (min, avg, max) = (3965,241, 4396,749, 6003,982), stdev = 898,831
[info]   CI (99.9%): [935,669, 7857,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,675 ±(99.9%) 4,554 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,675, 2,770), stdev = 1,183
[info]   CI (99.9%): [≈ 0, 5,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2,008 ±(99.9%) 13,540 B/op [Average]
[info]   (min, avg, max) = (0,123, 2,008, 8,234), stdev = 3,516
[info]   CI (99.9%): [≈ 0, 15,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 7,000), stdev = 2,302
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,69% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14173,465 ops/s
[info] # Warmup Iteration   2: 65764,996 ops/s
[info] # Warmup Iteration   3: 70322,449 ops/s
[info] # Warmup Iteration   4: 70469,291 ops/s
[info] # Warmup Iteration   5: 66199,899 ops/s
[info] Iteration   1: 70486,954 ops/s
[info]                  ·gc.alloc.rate:                   1668,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              37234,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29792,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,465 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 70767,466 ops/s
[info]                  ·gc.alloc.rate:                   1702,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              37846,691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44614,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,926 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 70490,390 ops/s
[info]                  ·gc.alloc.rate:                   1682,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              37556,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29939,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,592 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 70114,558 ops/s
[info]                  ·gc.alloc.rate:               1686,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          37843,898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45210,261 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 70496,325 ops/s
[info]                  ·gc.alloc.rate:               1669,986 MB/sec
[info]                  ·gc.alloc.rate.norm:          37268,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30010,727 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   70471,139 ±(99.9%) 895,254 ops/s [Average]
[info]   (min, avg, max) = (70114,558, 70471,139, 70767,466), stdev = 232,495
[info]   CI (99.9%): [69575,885, 71366,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1681,936 ±(99.9%) 53,444 MB/sec [Average]
[info]   (min, avg, max) = (1668,153, 1681,936, 1702,328), stdev = 13,879
[info]   CI (99.9%): [1628,491, 1735,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37549,775 ±(99.9%) 1145,104 B/op [Average]
[info]   (min, avg, max) = (37234,042, 37549,775, 37846,691), stdev = 297,380
[info]   CI (99.9%): [36404,671, 38694,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1608,509 ±(99.9%) 1414,232 MB/sec [Average]
[info]   (min, avg, max) = (1334,749, 1608,509, 2014,854), stdev = 367,272
[info]   CI (99.9%): [194,277, 3022,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35913,559 ±(99.9%) 31644,387 B/op [Average]
[info]   (min, avg, max) = (29792,302, 35913,559, 45210,261), stdev = 8217,947
[info]   CI (99.9%): [4269,172, 67557,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,179 ±(99.9%) 1,409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,179, 0,833), stdev = 0,366
[info]   CI (99.9%): [≈ 0, 1,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,996 ±(99.9%) 31,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,996, 18,592), stdev = 8,168
[info]   CI (99.9%): [≈ 0, 35,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,90% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113362,384 ops/s
[info] # Warmup Iteration   2: 356533,415 ops/s
[info] # Warmup Iteration   3: 352488,761 ops/s
[info] # Warmup Iteration   4: 348214,809 ops/s
[info] # Warmup Iteration   5: 367904,942 ops/s
[info] Iteration   1: 368080,625 ops/s
[info]                  ·gc.alloc.rate:               2748,419 MB/sec
[info]                  ·gc.alloc.rate.norm:          11747,477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11452,579 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 367729,937 ops/s
[info]                  ·gc.alloc.rate:                   2760,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              11812,226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11463,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 367921,333 ops/s
[info]                  ·gc.alloc.rate:               2763,234 MB/sec
[info]                  ·gc.alloc.rate.norm:          11815,975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11479,272 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 367562,582 ops/s
[info]                  ·gc.alloc.rate:               2761,855 MB/sec
[info]                  ·gc.alloc.rate.norm:          11821,533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11522,845 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 367891,753 ops/s
[info]                  ·gc.alloc.rate:                   2764,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              11823,923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11542,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   367837,246 ±(99.9%) 761,003 ops/s [Average]
[info]   (min, avg, max) = (367562,582, 367837,246, 368080,625), stdev = 197,630
[info]   CI (99.9%): [367076,243, 368598,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2759,868 ±(99.9%) 25,315 MB/sec [Average]
[info]   (min, avg, max) = (2748,419, 2759,868, 2764,908), stdev = 6,574
[info]   CI (99.9%): [2734,553, 2785,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11804,227 ±(99.9%) 123,431 B/op [Average]
[info]   (min, avg, max) = (11747,477, 11804,227, 11823,923), stdev = 32,055
[info]   CI (99.9%): [11680,795, 11927,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2686,921 ±(99.9%) 33,115 MB/sec [Average]
[info]   (min, avg, max) = (2679,411, 2686,921, 2699,201), stdev = 8,600
[info]   CI (99.9%): [2653,805, 2720,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11492,221 ±(99.9%) 150,064 B/op [Average]
[info]   (min, avg, max) = (11452,579, 11492,221, 11542,934), stdev = 38,971
[info]   CI (99.9%): [11342,157, 11642,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,089), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,10% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201661,387 ops/s
[info] # Warmup Iteration   2: 621406,772 ops/s
[info] # Warmup Iteration   3: 635957,410 ops/s
[info] # Warmup Iteration   4: 633031,404 ops/s
[info] # Warmup Iteration   5: 639518,988 ops/s
[info] Iteration   1: 632975,890 ops/s
[info]                  ·gc.alloc.rate:                   1715,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              4263,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4982,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   2: 637063,257 ops/s
[info]                  ·gc.alloc.rate:                   1700,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3304,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,852 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 633001,715 ops/s
[info]                  ·gc.alloc.rate:                   1706,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238,824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4965,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 636800,795 ops/s
[info]                  ·gc.alloc.rate:               1698,755 MB/sec
[info]                  ·gc.alloc.rate.norm:          4196,852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3291,170 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 637005,344 ops/s
[info]                  ·gc.alloc.rate:               1699,439 MB/sec
[info]                  ·gc.alloc.rate.norm:          4197,191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3290,116 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   635369,400 ±(99.9%) 8376,629 ops/s [Average]
[info]   (min, avg, max) = (632975,890, 635369,400, 637063,257), stdev = 2175,384
[info]   CI (99.9%): [626992,772, 643746,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1704,075 ±(99.9%) 26,419 MB/sec [Average]
[info]   (min, avg, max) = (1698,755, 1704,075, 1715,184), stdev = 6,861
[info]   CI (99.9%): [1677,656, 1730,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4219,248 ±(99.9%) 116,362 B/op [Average]
[info]   (min, avg, max) = (4196,852, 4219,248, 4263,087), stdev = 30,219
[info]   CI (99.9%): [4102,886, 4335,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601,202 ±(99.9%) 1408,100 MB/sec [Average]
[info]   (min, avg, max) = (1332,163, 1601,202, 2004,800), stdev = 365,679
[info]   CI (99.9%): [193,102, 3009,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3966,900 ±(99.9%) 3541,231 B/op [Average]
[info]   (min, avg, max) = (3290,116, 3966,900, 4982,926), stdev = 919,646
[info]   CI (99.9%): [425,670, 7508,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,904 ±(99.9%) 7,514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,904, 4,394), stdev = 1,951
[info]   CI (99.9%): [≈ 0, 8,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,232 ±(99.9%) 18,557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,232, 10,852), stdev = 4,819
[info]   CI (99.9%): [≈ 0, 20,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 10,000), stdev = 3,209
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,30% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 884284,093 ops/s
[info] # Warmup Iteration   2: 1471133,742 ops/s
[info] # Warmup Iteration   3: 1506081,088 ops/s
[info] # Warmup Iteration   4: 1491333,331 ops/s
[info] # Warmup Iteration   5: 1510578,137 ops/s
[info] Iteration   1: 1509124,231 ops/s
[info]                  ·gc.alloc.rate:                   3076,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              3206,943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3498,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1500959,532 ops/s
[info]                  ·gc.alloc.rate:                   3047,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              3194,749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2819,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1515334,341 ops/s
[info]                  ·gc.alloc.rate:                   3065,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2798,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1508613,855 ops/s
[info]                  ·gc.alloc.rate:                   3078,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              3210,878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3522,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1505922,780 ops/s
[info]                  ·gc.alloc.rate:                   3047,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183,872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2830,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1507990,948 ±(99.9%) 20130,057 ops/s [Average]
[info]   (min, avg, max) = (1500959,532, 1507990,948, 1515334,341), stdev = 5227,712
[info]   CI (99.9%): [1487860,890, 1528121,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3063,309 ±(99.9%) 57,732 MB/sec [Average]
[info]   (min, avg, max) = (3047,614, 3063,309, 3078,964), stdev = 14,993
[info]   CI (99.9%): [3005,577, 3121,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3195,893 ±(99.9%) 49,392 B/op [Average]
[info]   (min, avg, max) = (3183,022, 3195,893, 3210,878), stdev = 12,827
[info]   CI (99.9%): [3146,500, 3245,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2965,854 ±(99.9%) 1411,208 MB/sec [Average]
[info]   (min, avg, max) = (2689,616, 2965,854, 3378,229), stdev = 366,486
[info]   CI (99.9%): [1554,646, 4377,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3094,076 ±(99.9%) 1465,920 B/op [Average]
[info]   (min, avg, max) = (2798,925, 3094,076, 3522,965), stdev = 380,695
[info]   CI (99.9%): [1628,155, 4559,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,037 B/op [Average]
[info]   (min, avg, max) = (0,022, 0,026, 0,043), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,50% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19093,780 ops/s
[info] # Warmup Iteration   2: 105279,191 ops/s
[info] # Warmup Iteration   3: 115145,591 ops/s
[info] # Warmup Iteration   4: 116299,139 ops/s
[info] # Warmup Iteration   5: 117729,741 ops/s
[info] Iteration   1: 117437,859 ops/s
[info]                  ·gc.alloc.rate:                   3947,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              52886,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4011,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53746,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,837 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 117386,306 ops/s
[info]                  ·gc.alloc.rate:                   3947,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              52905,813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54022,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,279 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 117589,203 ops/s
[info]                  ·gc.alloc.rate:                   3931,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              52596,955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45127,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,279 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 116712,993 ops/s
[info]                  ·gc.alloc.rate:                   3928,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              52950,900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54749,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,561 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 117501,117 ops/s
[info]                  ·gc.alloc.rate:                   3928,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              52600,929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45421,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,836 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   117325,496 ±(99.9%) 1350,290 ops/s [Average]
[info]   (min, avg, max) = (116712,993, 117325,496, 117589,203), stdev = 350,666
[info]   CI (99.9%): [115975,205, 118675,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3936,627 ±(99.9%) 38,766 MB/sec [Average]
[info]   (min, avg, max) = (3928,166, 3936,627, 3947,772), stdev = 10,068
[info]   CI (99.9%): [3897,861, 3975,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52788,271 ±(99.9%) 671,558 B/op [Average]
[info]   (min, avg, max) = (52596,955, 52788,271, 52950,900), stdev = 174,402
[info]   CI (99.9%): [52116,713, 53459,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3773,915 ±(99.9%) 1377,261 MB/sec [Average]
[info]   (min, avg, max) = (3372,867, 3773,915, 4061,559), stdev = 357,670
[info]   CI (99.9%): [2396,654, 5151,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50613,512 ±(99.9%) 18824,314 B/op [Average]
[info]   (min, avg, max) = (45127,222, 50613,512, 54749,008), stdev = 4888,615
[info]   CI (99.9%): [31789,198, 69437,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,558 ±(99.9%) 1,074 B/op [Average]
[info]   (min, avg, max) = (0,279, 0,558, 0,837), stdev = 0,279
[info]   CI (99.9%): [≈ 0, 1,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 7,000), stdev = 0,837
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,70% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 325730,510 ops/s
[info] # Warmup Iteration   2: 639242,779 ops/s
[info] # Warmup Iteration   3: 667704,789 ops/s
[info] # Warmup Iteration   4: 671174,739 ops/s
[info] # Warmup Iteration   5: 671845,670 ops/s
[info] Iteration   1: 668363,162 ops/s
[info]                  ·gc.alloc.rate:                   3000,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              7062,383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6315,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 676846,749 ops/s
[info]                  ·gc.alloc.rate:                   3053,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              7098,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6245,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 668519,815 ops/s
[info]                  ·gc.alloc.rate:                   3046,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              7170,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7924,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 670468,877 ops/s
[info]                  ·gc.alloc.rate:                   3028,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              7104,795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6338,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,195 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 674191,349 ops/s
[info]                  ·gc.alloc.rate:                   3044,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              7104,576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6316,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   671677,990 ±(99.9%) 14337,787 ops/s [Average]
[info]   (min, avg, max) = (668363,162, 671677,990, 676846,749), stdev = 3723,478
[info]   CI (99.9%): [657340,203, 686015,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   3034,687 ±(99.9%) 82,509 MB/sec [Average]
[info]   (min, avg, max) = (3000,251, 3034,687, 3053,696), stdev = 21,427
[info]   CI (99.9%): [2952,177, 3117,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7108,015 ±(99.9%) 149,647 B/op [Average]
[info]   (min, avg, max) = (7062,383, 7108,015, 7170,004), stdev = 38,863
[info]   CI (99.9%): [6958,368, 7257,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2829,041 ±(99.9%) 1159,491 MB/sec [Average]
[info]   (min, avg, max) = (2682,796, 2829,041, 3367,398), stdev = 301,116
[info]   CI (99.9%): [1669,550, 3988,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6627,933 ±(99.9%) 2793,919 B/op [Average]
[info]   (min, avg, max) = (6245,212, 6627,933, 7924,356), stdev = 725,572
[info]   CI (99.9%): [3834,015, 9421,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,245 B/op [Average]
[info]   (min, avg, max) = (0,049, 0,107, 0,195), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,90% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139120,528 ops/s
[info] # Warmup Iteration   2: 376294,325 ops/s
[info] # Warmup Iteration   3: 378187,667 ops/s
[info] # Warmup Iteration   4: 378102,648 ops/s
[info] # Warmup Iteration   5: 378915,084 ops/s
[info] Iteration   1: 378495,223 ops/s
[info]                  ·gc.alloc.rate:               1301,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          5412,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5573,082 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 378946,564 ops/s
[info]                  ·gc.alloc.rate:               1310,090 MB/sec
[info]                  ·gc.alloc.rate.norm:          5439,291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5572,013 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 377497,725 ops/s
[info]                  ·gc.alloc.rate:                   1305,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              5441,216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5593,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 378417,407 ops/s
[info]                  ·gc.alloc.rate:                   1321,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              5495,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5585,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,978 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 377597,237 ops/s
[info]                  ·gc.alloc.rate:                   1307,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5445,348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5581,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   378190,831 ±(99.9%) 2395,361 ops/s [Average]
[info]   (min, avg, max) = (377497,725, 378190,831, 378946,564), stdev = 622,068
[info]   CI (99.9%): [375795,471, 380586,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1309,282 ±(99.9%) 29,126 MB/sec [Average]
[info]   (min, avg, max) = (1301,964, 1309,282, 1321,763), stdev = 7,564
[info]   CI (99.9%): [1280,155, 1338,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5446,588 ±(99.9%) 115,959 B/op [Average]
[info]   (min, avg, max) = (5412,025, 5446,588, 5495,057), stdev = 30,114
[info]   CI (99.9%): [5330,628, 5562,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341,584 ±(99.9%) 5,695 MB/sec [Average]
[info]   (min, avg, max) = (1339,595, 1341,584, 1343,466), stdev = 1,479
[info]   CI (99.9%): [1335,889, 1347,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5580,974 ±(99.9%) 34,218 B/op [Average]
[info]   (min, avg, max) = (5572,013, 5580,974, 5593,413), stdev = 8,886
[info]   CI (99.9%): [5546,755, 5615,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,729 ±(99.9%) 6,186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,729, 3,603), stdev = 1,607
[info]   CI (99.9%): [≈ 0, 6,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,030 ±(99.9%) 25,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,030, 14,978), stdev = 6,679
[info]   CI (99.9%): [≈ 0, 28,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,10% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451024,016 ops/s
[info] # Warmup Iteration   2: 922212,906 ops/s
[info] # Warmup Iteration   3: 922299,035 ops/s
[info] # Warmup Iteration   4: 928563,083 ops/s
[info] # Warmup Iteration   5: 925742,644 ops/s
[info] Iteration   1: 920092,805 ops/s
[info]                  ·gc.alloc.rate:                   689,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1179,285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 905991,985 ops/s
[info]                  ·gc.alloc.rate:               675,325 MB/sec
[info]                  ·gc.alloc.rate.norm:          1172,713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1158,885 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 925716,501 ops/s
[info]                  ·gc.alloc.rate:                   688,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169,319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 922394,105 ops/s
[info]                  ·gc.alloc.rate:               683,366 MB/sec
[info]                  ·gc.alloc.rate.norm:          1165,602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1139,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 929309,224 ops/s
[info]                  ·gc.alloc.rate:               684,758 MB/sec
[info]                  ·gc.alloc.rate.norm:          1159,295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1130,936 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   920700,924 ±(99.9%) 34379,179 ops/s [Average]
[info]   (min, avg, max) = (905991,985, 920700,924, 929309,224), stdev = 8928,164
[info]   CI (99.9%): [886321,746, 955080,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   684,232 ±(99.9%) 21,479 MB/sec [Average]
[info]   (min, avg, max) = (675,325, 684,232, 689,675), stdev = 5,578
[info]   CI (99.9%): [662,752, 705,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1169,243 ±(99.9%) 28,888 B/op [Average]
[info]   (min, avg, max) = (1159,295, 1169,243, 1179,285), stdev = 7,502
[info]   CI (99.9%): [1140,355, 1198,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667,488 ±(99.9%) 2,112 MB/sec [Average]
[info]   (min, avg, max) = (666,693, 667,488, 668,009), stdev = 0,548
[info]   CI (99.9%): [665,376, 669,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1140,682 ±(99.9%) 41,763 B/op [Average]
[info]   (min, avg, max) = (1130,936, 1140,682, 1158,885), stdev = 10,846
[info]   CI (99.9%): [1098,919, 1182,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,071), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,30% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1446775,223 ops/s
[info] # Warmup Iteration   2: 2294047,529 ops/s
[info] # Warmup Iteration   3: 2332285,105 ops/s
[info] # Warmup Iteration   4: 2331529,507 ops/s
[info] # Warmup Iteration   5: 2331516,974 ops/s
[info] Iteration   1: 2338574,461 ops/s
[info]                  ·gc.alloc.rate:               1108,635 MB/sec
[info]                  ·gc.alloc.rate.norm:          745,854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452,107 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2336203,252 ops/s
[info]                  ·gc.alloc.rate:                   1111,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              748,261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2337116,173 ops/s
[info]                  ·gc.alloc.rate:               1107,535 MB/sec
[info]                  ·gc.alloc.rate.norm:          745,569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452,607 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2338189,331 ops/s
[info]                  ·gc.alloc.rate:               1121,935 MB/sec
[info]                  ·gc.alloc.rate.norm:          754,889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 905,725 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 2339129,324 ops/s
[info]                  ·gc.alloc.rate:                   1122,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              755,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,157 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2337842,508 ±(99.9%) 4526,210 ops/s [Average]
[info]   (min, avg, max) = (2336203,252, 2337842,508, 2339129,324), stdev = 1175,442
[info]   CI (99.9%): [2333316,298, 2342368,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1114,342 ±(99.9%) 28,121 MB/sec [Average]
[info]   (min, avg, max) = (1107,535, 1114,342, 1122,488), stdev = 7,303
[info]   CI (99.9%): [1086,221, 1142,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749,916 ±(99.9%) 18,142 B/op [Average]
[info]   (min, avg, max) = (745,569, 749,916, 755,008), stdev = 4,712
[info]   CI (99.9%): [731,774, 768,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076,168 ±(99.9%) 1420,089 MB/sec [Average]
[info]   (min, avg, max) = (672,011, 1076,168, 1346,110), stdev = 368,793
[info]   CI (99.9%): [≈ 0, 2496,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   724,226 ±(99.9%) 955,660 B/op [Average]
[info]   (min, avg, max) = (452,107, 724,226, 905,725), stdev = 248,182
[info]   CI (99.9%): [≈ 0, 1679,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,207), stdev = 1,430
[info]   CI (99.9%): [≈ 0, 6,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,437 ±(99.9%) 3,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,437, 2,157), stdev = 0,962
[info]   CI (99.9%): [≈ 0, 4,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,517
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,50% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1412323,185 ops/s
[info] # Warmup Iteration   2: 2585455,293 ops/s
[info] # Warmup Iteration   3: 2588979,712 ops/s
[info] # Warmup Iteration   4: 2590572,063 ops/s
[info] # Warmup Iteration   5: 2588876,083 ops/s
[info] Iteration   1: 2590907,648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2589859,664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2587993,013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2588306,098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2000713,484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2471555,981 ±(99.9%) 1013534,196 ops/s [Average]
[info]   (min, avg, max) = (2000713,484, 2471555,981, 2590907,648), stdev = 263211,612
[info]   CI (99.9%): [1458021,786, 3485090,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,70% complete, ETA 00:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198038,591 ops/s
[info] # Warmup Iteration   2: 502712,683 ops/s
[info] # Warmup Iteration   3: 517177,387 ops/s
[info] # Warmup Iteration   4: 523774,950 ops/s
[info] # Warmup Iteration   5: 525092,709 ops/s
[info] Iteration   1: 523765,251 ops/s
[info]                  ·gc.alloc.rate:               770,610 MB/sec
[info]                  ·gc.alloc.rate.norm:          2314,646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2008,743 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 523958,831 ops/s
[info]                  ·gc.alloc.rate:               780,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          2344,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2008,996 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 514932,580 ops/s
[info]                  ·gc.alloc.rate:                   782,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              2390,577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4090,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 515658,034 ops/s
[info]                  ·gc.alloc.rate:               759,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          2317,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2043,223 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 501020,867 ops/s
[info]                  ·gc.alloc.rate:               747,089 MB/sec
[info]                  ·gc.alloc.rate.norm:          2346,176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2104,070 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   515867,113 ±(99.9%) 35977,492 ops/s [Average]
[info]   (min, avg, max) = (501020,867, 515867,113, 523958,831), stdev = 9343,240
[info]   CI (99.9%): [479889,621, 551844,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   768,081 ±(99.9%) 57,429 MB/sec [Average]
[info]   (min, avg, max) = (747,089, 768,081, 782,439), stdev = 14,914
[info]   CI (99.9%): [710,652, 825,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2342,608 ±(99.9%) 117,923 B/op [Average]
[info]   (min, avg, max) = (2314,646, 2342,608, 2390,577), stdev = 30,624
[info]   CI (99.9%): [2224,685, 2460,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   803,259 ±(99.9%) 1152,751 MB/sec [Average]
[info]   (min, avg, max) = (668,766, 803,259, 1338,780), stdev = 299,366
[info]   CI (99.9%): [≈ 0, 1956,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2451,079 ±(99.9%) 3531,854 B/op [Average]
[info]   (min, avg, max) = (2008,743, 2451,079, 4090,361), stdev = 917,211
[info]   CI (99.9%): [≈ 0, 5982,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,127), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,90% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82432,159 ops/s
[info] # Warmup Iteration   2: 180684,978 ops/s
[info] # Warmup Iteration   3: 180074,361 ops/s
[info] # Warmup Iteration   4: 181204,368 ops/s
[info] # Warmup Iteration   5: 182227,246 ops/s
[info] Iteration   1: 181942,578 ops/s
[info]                  ·gc.alloc.rate:               1085,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          9386,477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11616,400 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 182683,920 ops/s
[info]                  ·gc.alloc.rate:               1072,511 MB/sec
[info]                  ·gc.alloc.rate.norm:          9236,475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5784,550 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 181934,939 ops/s
[info]                  ·gc.alloc.rate:                   1094,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              9468,768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11628,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 182793,574 ops/s
[info]                  ·gc.alloc.rate:               1082,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          9320,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5786,932 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 181613,660 ops/s
[info]                  ·gc.alloc.rate:                   1091,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              9458,168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11654,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,961 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   182193,734 ±(99.9%) 1988,430 ops/s [Average]
[info]   (min, avg, max) = (181613,660, 182193,734, 182793,574), stdev = 516,389
[info]   CI (99.9%): [180205,304, 184182,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1085,533 ±(99.9%) 33,620 MB/sec [Average]
[info]   (min, avg, max) = (1072,511, 1085,533, 1094,988), stdev = 8,731
[info]   CI (99.9%): [1051,913, 1119,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9374,124 ±(99.9%) 375,174 B/op [Average]
[info]   (min, avg, max) = (9236,475, 9374,124, 9468,768), stdev = 97,431
[info]   CI (99.9%): [8998,950, 9749,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,493 ±(99.9%) 1418,295 MB/sec [Average]
[info]   (min, avg, max) = (671,684, 1075,493, 1345,348), stdev = 368,327
[info]   CI (99.9%): [≈ 0, 2493,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9294,240 ±(99.9%) 12332,986 B/op [Average]
[info]   (min, avg, max) = (5784,550, 9294,240, 11654,821), stdev = 3202,837
[info]   CI (99.9%): [≈ 0, 21627,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,228), stdev = 1,441
[info]   CI (99.9%): [≈ 0, 6,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,628 ±(99.9%) 48,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,628, 27,961), stdev = 12,485
[info]   CI (99.9%): [≈ 0, 53,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,643
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,10% complete, ETA 00:31:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22663,032 ops/s
[info] # Warmup Iteration   2: 64189,369 ops/s
[info] # Warmup Iteration   3: 64930,751 ops/s
[info] # Warmup Iteration   4: 65155,213 ops/s
[info] # Warmup Iteration   5: 65658,185 ops/s
[info] Iteration   1: 65887,383 ops/s
[info]                  ·gc.alloc.rate:                   2297,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              54854,299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48071,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,404 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 66094,855 ops/s
[info]                  ·gc.alloc.rate:                   2316,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              55146,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47808,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,478 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 65888,973 ops/s
[info]                  ·gc.alloc.rate:                   2326,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              55554,559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63956,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,497 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 66118,818 ops/s
[info]                  ·gc.alloc.rate:               2319,898 MB/sec
[info]                  ·gc.alloc.rate.norm:          55202,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47862,190 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 65929,061 ops/s
[info]                  ·gc.alloc.rate:               2314,430 MB/sec
[info]                  ·gc.alloc.rate.norm:          55226,323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48109,956 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   65983,818 ±(99.9%) 438,397 ops/s [Average]
[info]   (min, avg, max) = (65887,383, 65983,818, 66118,818), stdev = 113,850
[info]   CI (99.9%): [65545,421, 66422,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2315,017 ±(99.9%) 42,088 MB/sec [Average]
[info]   (min, avg, max) = (2297,262, 2315,017, 2326,639), stdev = 10,930
[info]   CI (99.9%): [2272,929, 2357,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55196,760 ±(99.9%) 960,197 B/op [Average]
[info]   (min, avg, max) = (54854,299, 55196,760, 55554,559), stdev = 249,360
[info]   CI (99.9%): [54236,563, 56156,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145,580 ±(99.9%) 1147,257 MB/sec [Average]
[info]   (min, avg, max) = (2008,550, 2145,580, 2678,526), stdev = 297,939
[info]   CI (99.9%): [998,323, 3292,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51161,662 ±(99.9%) 27546,976 B/op [Average]
[info]   (min, avg, max) = (47808,188, 51161,662, 63956,771), stdev = 7153,862
[info]   CI (99.9%): [23614,686, 78708,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,171 ±(99.9%) 1,213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,171, 0,729), stdev = 0,315
[info]   CI (99.9%): [≈ 0, 1,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,076 ±(99.9%) 28,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,076, 17,404), stdev = 7,520
[info]   CI (99.9%): [≈ 0, 33,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,31% complete, ETA 00:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32143,880 ops/s
[info] # Warmup Iteration   2: 99375,768 ops/s
[info] # Warmup Iteration   3: 102834,167 ops/s
[info] # Warmup Iteration   4: 104380,790 ops/s
[info] # Warmup Iteration   5: 103944,881 ops/s
[info] Iteration   1: 103776,550 ops/s
[info]                  ·gc.alloc.rate:                   1912,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              28999,256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30432,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,403 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 104353,019 ops/s
[info]                  ·gc.alloc.rate:                   1933,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              29149,338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30223,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 104193,653 ops/s
[info]                  ·gc.alloc.rate:                   1945,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              29371,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30184,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,201 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 99016,733 ops/s
[info]                  ·gc.alloc.rate:               1813,543 MB/sec
[info]                  ·gc.alloc.rate.norm:          28814,491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21176,081 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 104495,097 ops/s
[info]                  ·gc.alloc.rate:               1952,593 MB/sec
[info]                  ·gc.alloc.rate.norm:          29398,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30129,303 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   103167,010 ±(99.9%) 8993,699 ops/s [Average]
[info]   (min, avg, max) = (99016,733, 103167,010, 104495,097), stdev = 2335,635
[info]   CI (99.9%): [94173,312, 112160,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1911,562 ±(99.9%) 218,748 MB/sec [Average]
[info]   (min, avg, max) = (1813,543, 1911,562, 1952,593), stdev = 56,808
[info]   CI (99.9%): [1692,814, 2130,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29146,475 ±(99.9%) 954,364 B/op [Average]
[info]   (min, avg, max) = (28814,491, 29146,475, 29398,139), stdev = 247,845
[info]   CI (99.9%): [28192,112, 30100,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1869,068 ±(99.9%) 1154,441 MB/sec [Average]
[info]   (min, avg, max) = (1332,792, 1869,068, 2007,509), stdev = 299,805
[info]   CI (99.9%): [714,627, 3023,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28429,342 ±(99.9%) 15619,449 B/op [Average]
[info]   (min, avg, max) = (21176,081, 28429,342, 30432,818), stdev = 4056,321
[info]   CI (99.9%): [12809,893, 44048,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,920 ±(99.9%) 6,383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,920, 3,853), stdev = 1,658
[info]   CI (99.9%): [≈ 0, 7,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13,942 ±(99.9%) 96,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,942, 58,403), stdev = 25,134
[info]   CI (99.9%): [≈ 0, 110,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 9,000), stdev = 2,702
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,51% complete, ETA 00:31:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65137,982 ops/s
[info] # Warmup Iteration   2: 178348,400 ops/s
[info] # Warmup Iteration   3: 184136,993 ops/s
[info] # Warmup Iteration   4: 183690,962 ops/s
[info] # Warmup Iteration   5: 183725,519 ops/s
[info] Iteration   1: 169479,022 ops/s
[info]                  ·gc.alloc.rate:               2686,831 MB/sec
[info]                  ·gc.alloc.rate.norm:          24942,350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24892,893 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 185323,272 ops/s
[info]                  ·gc.alloc.rate:                   2972,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              25231,901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28477,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 184875,629 ops/s
[info]                  ·gc.alloc.rate:                   2940,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              25025,742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22895,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 182515,700 ops/s
[info]                  ·gc.alloc.rate:               2904,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          25032,936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23249,799 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 184123,403 ops/s
[info]                  ·gc.alloc.rate:                   2916,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              24917,303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23103,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   181263,405 ±(99.9%) 25697,834 ops/s [Average]
[info]   (min, avg, max) = (169479,022, 181263,405, 185323,272), stdev = 6673,646
[info]   CI (99.9%): [155565,571, 206961,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2884,003 ±(99.9%) 436,087 MB/sec [Average]
[info]   (min, avg, max) = (2686,831, 2884,003, 2972,132), stdev = 113,250
[info]   CI (99.9%): [2447,916, 3320,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25030,046 ±(99.9%) 476,197 B/op [Average]
[info]   (min, avg, max) = (24917,303, 25030,046, 25231,901), stdev = 123,667
[info]   CI (99.9%): [24553,849, 25506,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2825,522 ±(99.9%) 1138,943 MB/sec [Average]
[info]   (min, avg, max) = (2681,504, 2825,522, 3354,421), stdev = 295,780
[info]   CI (99.9%): [1686,579, 3964,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24523,971 ±(99.9%) 9042,022 B/op [Average]
[info]   (min, avg, max) = (22895,973, 24523,971, 28477,342), stdev = 2348,184
[info]   CI (99.9%): [15481,950, 33565,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,106 ±(99.9%) 0,374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,106, 0,178), stdev = 0,097
[info]   CI (99.9%): [≈ 0, 0,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 6,000), stdev = 1,140
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,71% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5690,195 ops/s
[info] # Warmup Iteration   2: 31187,064 ops/s
[info] # Warmup Iteration   3: 36205,027 ops/s
[info] # Warmup Iteration   4: 34186,395 ops/s
[info] # Warmup Iteration   5: 36186,696 ops/s
[info] Iteration   1: 35903,512 ops/s
[info]                  ·gc.alloc.rate:                   2406,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              105440,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116884,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,737 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 36315,794 ops/s
[info]                  ·gc.alloc.rate:                   2431,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              105350,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86962,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,902 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 36186,658 ops/s
[info]                  ·gc.alloc.rate:               2427,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          105537,842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116753,088 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 36141,991 ops/s
[info]                  ·gc.alloc.rate:               2422,375 MB/sec
[info]                  ·gc.alloc.rate.norm:          105445,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87963,892 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 36175,406 ops/s
[info]                  ·gc.alloc.rate:               2453,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          106685,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117509,830 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   36144,672 ±(99.9%) 578,094 ops/s [Average]
[info]   (min, avg, max) = (35903,512, 36144,672, 36315,794), stdev = 150,129
[info]   CI (99.9%): [35566,578, 36722,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2428,235 ±(99.9%) 65,554 MB/sec [Average]
[info]   (min, avg, max) = (2406,163, 2428,235, 2453,222), stdev = 17,024
[info]   CI (99.9%): [2362,681, 2493,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105691,635 ±(99.9%) 2153,691 B/op [Average]
[info]   (min, avg, max) = (105350,046, 105691,635, 106685,073), stdev = 559,307
[info]   CI (99.9%): [103537,944, 107845,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2416,640 ±(99.9%) 1415,929 MB/sec [Average]
[info]   (min, avg, max) = (2007,398, 2416,640, 2702,137), stdev = 367,712
[info]   CI (99.9%): [1000,711, 3832,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105214,872 ±(99.9%) 62423,779 B/op [Average]
[info]   (min, avg, max) = (86962,757, 105214,872, 117509,830), stdev = 16211,257
[info]   CI (99.9%): [42791,092, 167638,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,728 ±(99.9%) 4,580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,728, 2,737), stdev = 1,189
[info]   CI (99.9%): [≈ 0, 5,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,91% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70863,543 ops/s
[info] # Warmup Iteration   2: 171172,305 ops/s
[info] # Warmup Iteration   3: 174064,636 ops/s
[info] # Warmup Iteration   4: 175540,716 ops/s
[info] # Warmup Iteration   5: 175951,683 ops/s
[info] Iteration   1: 175553,149 ops/s
[info]                  ·gc.alloc.rate:                   1176,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              10540,143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11967,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 169864,414 ops/s
[info]                  ·gc.alloc.rate:               1122,853 MB/sec
[info]                  ·gc.alloc.rate.norm:          10399,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6190,313 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 174806,725 ops/s
[info]                  ·gc.alloc.rate:                   1180,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              10621,443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12036,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 175825,663 ops/s
[info]                  ·gc.alloc.rate:                   1185,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              10605,480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11975,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 176888,617 ops/s
[info]                  ·gc.alloc.rate:                   1180,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496,687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5953,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   174587,714 ±(99.9%) 10565,837 ops/s [Average]
[info]   (min, avg, max) = (169864,414, 174587,714, 176888,617), stdev = 2743,914
[info]   CI (99.9%): [164021,877, 185153,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1168,910 ±(99.9%) 99,924 MB/sec [Average]
[info]   (min, avg, max) = (1122,853, 1168,910, 1185,246), stdev = 25,950
[info]   CI (99.9%): [1068,987, 1268,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10532,730 ±(99.9%) 345,278 B/op [Average]
[info]   (min, avg, max) = (10399,897, 10532,730, 10621,443), stdev = 89,668
[info]   CI (99.9%): [10187,452, 10878,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069,784 ±(99.9%) 1409,288 MB/sec [Average]
[info]   (min, avg, max) = (668,354, 1069,784, 1338,398), stdev = 365,988
[info]   CI (99.9%): [≈ 0, 2479,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9624,769 ±(99.9%) 12493,261 B/op [Average]
[info]   (min, avg, max) = (5953,575, 9624,769, 12036,536), stdev = 3244,460
[info]   CI (99.9%): [≈ 0, 22118,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,866 ±(99.9%) 6,380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,866, 3,811), stdev = 1,657
[info]   CI (99.9%): [≈ 0, 7,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,747 ±(99.9%) 57,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,747, 34,099), stdev = 14,827
[info]   CI (99.9%): [≈ 0, 64,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,600, 6,000), stdev = 1,949
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,11% complete, ETA 00:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309782,142 ops/s
[info] # Warmup Iteration   2: 506467,120 ops/s
[info] # Warmup Iteration   3: 498680,392 ops/s
[info] # Warmup Iteration   4: 502791,417 ops/s
[info] # Warmup Iteration   5: 509804,342 ops/s
[info] Iteration   1: 512096,850 ops/s
[info]                  ·gc.alloc.rate:                   585,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1798,851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2061,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 512500,173 ops/s
[info]                  ·gc.alloc.rate:               581,106 MB/sec
[info]                  ·gc.alloc.rate.norm:          1783,924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2060,002 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 512226,875 ops/s
[info]                  ·gc.alloc.rate:               591,820 MB/sec
[info]                  ·gc.alloc.rate.norm:          1817,773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2063,207 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 508455,215 ops/s
[info]                  ·gc.alloc.rate:      561,058 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 509922,842 ops/s
[info]                  ·gc.alloc.rate:               577,537 MB/sec
[info]                  ·gc.alloc.rate.norm:          1781,842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   511040,391 ±(99.9%) 6830,652 ops/s [Average]
[info]   (min, avg, max) = (508455,215, 511040,391, 512500,173), stdev = 1773,899
[info]   CI (99.9%): [504209,739, 517871,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   579,407 ±(99.9%) 44,510 MB/sec [Average]
[info]   (min, avg, max) = (561,058, 579,407, 591,820), stdev = 11,559
[info]   CI (99.9%): [534,898, 623,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1783,678 ±(99.9%) 116,625 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1783,678, 1817,773), stdev = 30,287
[info]   CI (99.9%): [1667,054, 1900,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537,112 ±(99.9%) 1156,175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,112, 671,753), stdev = 300,255
[info]   CI (99.9%): [≈ 0, 1693,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1651,468 ±(99.9%) 3554,959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1651,468, 2072,520), stdev = 923,212
[info]   CI (99.9%): [≈ 0, 5206,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,064), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,31% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270900,280 ops/s
[info] # Warmup Iteration   2: 509787,393 ops/s
[info] # Warmup Iteration   3: 549166,171 ops/s
[info] # Warmup Iteration   4: 551011,287 ops/s
[info] # Warmup Iteration   5: 549144,691 ops/s
[info] Iteration   1: 550401,508 ops/s
[info]                  ·gc.alloc.rate:      5,598 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 550853,045 ops/s
[info]                  ·gc.alloc.rate:      5,603 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 547040,114 ops/s
[info]                  ·gc.alloc.rate:      5,564 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 545467,606 ops/s
[info]                  ·gc.alloc.rate:      6,493 MB/sec
[info]                  ·gc.alloc.rate.norm: 18,728 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 547948,298 ops/s
[info]                  ·gc.alloc.rate:      6,011 MB/sec
[info]                  ·gc.alloc.rate.norm: 17,261 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   548342,114 ±(99.9%) 8751,000 ops/s [Average]
[info]   (min, avg, max) = (545467,606, 548342,114, 550853,045), stdev = 2272,607
[info]   CI (99.9%): [539591,115, 557093,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,854 ±(99.9%) 1,547 MB/sec [Average]
[info]   (min, avg, max) = (5,564, 5,854, 6,493), stdev = 0,402
[info]   CI (99.9%): [4,307, 7,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,798 ±(99.9%) 4,655 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,798, 18,728), stdev = 1,209
[info]   CI (99.9%): [12,143, 21,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,51% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17183,017 ops/s
[info] # Warmup Iteration   2: 64726,548 ops/s
[info] # Warmup Iteration   3: 70938,521 ops/s
[info] # Warmup Iteration   4: 71947,031 ops/s
[info] # Warmup Iteration   5: 71932,190 ops/s
[info] Iteration   1: 71951,428 ops/s
[info]                  ·gc.alloc.rate:                   1503,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              32877,413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29068,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 70934,074 ops/s
[info]                  ·gc.alloc.rate:                   1499,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              33257,924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44345,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,924 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 71022,176 ops/s
[info]                  ·gc.alloc.rate:               1485,643 MB/sec
[info]                  ·gc.alloc.rate.norm:          32908,824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29603,570 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 70107,954 ops/s
[info]                  ·gc.alloc.rate:                   1477,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              33155,574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30056,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 70566,666 ops/s
[info]                  ·gc.alloc.rate:                   1489,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              33197,889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29913,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   70916,460 ±(99.9%) 2624,859 ops/s [Average]
[info]   (min, avg, max) = (70107,954, 70916,460, 71951,428), stdev = 681,668
[info]   CI (99.9%): [68291,600, 73541,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1491,078 ±(99.9%) 40,630 MB/sec [Average]
[info]   (min, avg, max) = (1477,524, 1491,078, 1503,579), stdev = 10,552
[info]   CI (99.9%): [1450,448, 1531,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33079,525 ±(99.9%) 671,405 B/op [Average]
[info]   (min, avg, max) = (32877,413, 33079,525, 33257,924), stdev = 174,362
[info]   CI (99.9%): [32408,120, 33750,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469,290 ±(99.9%) 1141,392 MB/sec [Average]
[info]   (min, avg, max) = (1329,364, 1469,290, 1999,469), stdev = 296,416
[info]   CI (99.9%): [327,898, 2610,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32597,368 ±(99.9%) 25330,355 B/op [Average]
[info]   (min, avg, max) = (29068,020, 32597,368, 44345,266), stdev = 6578,213
[info]   CI (99.9%): [7267,013, 57927,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,427 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,092, 0,271), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,048 ±(99.9%) 9,579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,048, 6,075), stdev = 2,488
[info]   CI (99.9%): [≈ 0, 11,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,71% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412302,031 ops/s
[info] # Warmup Iteration   2: 2535435,242 ops/s
[info] # Warmup Iteration   3: 3090019,267 ops/s
[info] # Warmup Iteration   4: 3096200,009 ops/s
[info] # Warmup Iteration   5: 3113454,147 ops/s
[info] Iteration   1: 3130225,120 ops/s
[info]                  ·gc.alloc.rate:                   4358,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190,518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2023,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 3105877,563 ops/s
[info]                  ·gc.alloc.rate:                   4342,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              2198,791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4714,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2387,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 3123175,857 ops/s
[info]                  ·gc.alloc.rate:                   4353,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              2193,176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2045,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 2969513,732 ops/s
[info]                  ·gc.alloc.rate:                   4147,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              2197,329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2157,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 3116131,262 ops/s
[info]                  ·gc.alloc.rate:                   4344,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              2193,442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2058,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   3088984,707 ±(99.9%) 259493,295 ops/s [Average]
[info]   (min, avg, max) = (2969513,732, 3088984,707, 3130225,120), stdev = 67389,585
[info]   CI (99.9%): [2829491,412, 3348478,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   4309,295 ±(99.9%) 349,627 MB/sec [Average]
[info]   (min, avg, max) = (4147,300, 4309,295, 4358,400), stdev = 90,797
[info]   CI (99.9%): [3959,668, 4658,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2194,651 ±(99.9%) 12,920 B/op [Average]
[info]   (min, avg, max) = (2190,518, 2194,651, 2198,791), stdev = 3,355
[info]   CI (99.9%): [2181,731, 2207,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4190,274 ±(99.9%) 1131,862 MB/sec [Average]
[info]   (min, avg, max) = (4026,572, 4190,274, 4714,895), stdev = 293,941
[info]   CI (99.9%): [3058,413, 5322,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2134,510 ±(99.9%) 578,838 B/op [Average]
[info]   (min, avg, max) = (2023,742, 2134,510, 2387,392), stdev = 150,322
[info]   CI (99.9%): [1555,672, 2713,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,049 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,021, 0,042), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,000, 7,000), stdev = 0,707
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,91% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,722 ops/s
[info] # Warmup Iteration   2: 827859,736 ops/s
[info] # Warmup Iteration   3: 937954,403 ops/s
[info] # Warmup Iteration   4: 949797,567 ops/s
[info] # Warmup Iteration   5: 950578,540 ops/s
[info] Iteration   1: 949856,074 ops/s
[info]                  ·gc.alloc.rate:                   550,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1102,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 931887,342 ops/s
[info]                  ·gc.alloc.rate:               540,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          912,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123,872 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 932956,723 ops/s
[info]                  ·gc.alloc.rate:                   549,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              926,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 923256,545 ops/s
[info]                  ·gc.alloc.rate:      535,186 MB/sec
[info]                  ·gc.alloc.rate.norm: 912,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 922045,660 ops/s
[info]                  ·gc.alloc.rate:               535,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          913,977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1136,436 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   932000,469 ±(99.9%) 42848,873 ops/s [Average]
[info]   (min, avg, max) = (922045,660, 932000,469, 949856,074), stdev = 11127,716
[info]   CI (99.9%): [889151,596, 974849,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   542,258 ±(99.9%) 28,646 MB/sec [Average]
[info]   (min, avg, max) = (535,186, 542,258, 550,626), stdev = 7,439
[info]   CI (99.9%): [513,612, 570,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   915,360 ±(99.9%) 24,753 B/op [Average]
[info]   (min, avg, max) = (912,000, 915,360, 926,759), stdev = 6,428
[info]   CI (99.9%): [890,607, 940,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532,699 ±(99.9%) 1146,674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532,699, 666,041), stdev = 297,788
[info]   CI (99.9%): [≈ 0, 1679,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   897,215 ±(99.9%) 1931,888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 897,215, 1136,436), stdev = 501,705
[info]   CI (99.9%): [≈ 0, 2829,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,013 ±(99.9%) 0,078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,046), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,078), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,11% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32001,473 ops/s
[info] # Warmup Iteration   2: 248022,235 ops/s
[info] # Warmup Iteration   3: 310119,439 ops/s
[info] # Warmup Iteration   4: 318702,152 ops/s
[info] # Warmup Iteration   5: 318726,561 ops/s
[info] Iteration   1: 318264,654 ops/s
[info]                  ·gc.alloc.rate:               798,901 MB/sec
[info]                  ·gc.alloc.rate.norm:          3949,184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3295,638 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 313794,601 ops/s
[info]                  ·gc.alloc.rate:                   807,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6688,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,209 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   3: 317338,133 ops/s
[info]                  ·gc.alloc.rate:                   812,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              4029,386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3310,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 318517,999 ops/s
[info]                  ·gc.alloc.rate:               811,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          4010,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3297,999 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 311761,780 ops/s
[info]                  ·gc.alloc.rate:                   793,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              4005,445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3371,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   315935,433 ±(99.9%) 11562,361 ops/s [Average]
[info]   (min, avg, max) = (311761,780, 315935,433, 318517,999), stdev = 3002,708
[info]   CI (99.9%): [304373,073, 327497,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   804,966 ±(99.9%) 32,186 MB/sec [Average]
[info]   (min, avg, max) = (793,719, 804,966, 812,746), stdev = 8,359
[info]   CI (99.9%): [772,780, 837,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4008,630 ±(99.9%) 143,517 B/op [Average]
[info]   (min, avg, max) = (3949,184, 4008,630, 4048,341), stdev = 37,271
[info]   CI (99.9%): [3865,114, 4152,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800,838 ±(99.9%) 1147,856 MB/sec [Average]
[info]   (min, avg, max) = (666,692, 800,838, 1334,085), stdev = 298,095
[info]   CI (99.9%): [≈ 0, 1948,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3992,727 ±(99.9%) 5804,221 B/op [Average]
[info]   (min, avg, max) = (3295,638, 3992,727, 6688,574), stdev = 1507,338
[info]   CI (99.9%): [≈ 0, 9796,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,083 ±(99.9%) 0,336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,209), stdev = 0,087
[info]   CI (99.9%): [≈ 0, 0,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 11,000), stdev = 3,493
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,31% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444095,997 ops/s
[info] # Warmup Iteration   2: 724710,084 ops/s
[info] # Warmup Iteration   3: 819780,494 ops/s
[info] # Warmup Iteration   4: 811082,378 ops/s
[info] # Warmup Iteration   5: 799381,774 ops/s
[info] Iteration   1: 819754,502 ops/s
[info]                  ·gc.alloc.rate:               753,128 MB/sec
[info]                  ·gc.alloc.rate.norm:          1445,407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1289,094 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 793853,652 ops/s
[info]                  ·gc.alloc.rate:               736,089 MB/sec
[info]                  ·gc.alloc.rate.norm:          1458,820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1332,547 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 789577,393 ops/s
[info]                  ·gc.alloc.rate:               727,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          1449,272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1339,768 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 792060,838 ops/s
[info]                  ·gc.alloc.rate:                   722,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1434,438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1336,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 781660,374 ops/s
[info]                  ·gc.alloc.rate:               717,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          1443,589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354,015 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   795381,352 ±(99.9%) 55446,642 ops/s [Average]
[info]   (min, avg, max) = (781660,374, 795381,352, 819754,502), stdev = 14399,317
[info]   CI (99.9%): [739934,710, 850827,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   731,184 ±(99.9%) 54,348 MB/sec [Average]
[info]   (min, avg, max) = (717,226, 731,184, 753,128), stdev = 14,114
[info]   CI (99.9%): [676,836, 785,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1446,305 ±(99.9%) 34,142 B/op [Average]
[info]   (min, avg, max) = (1434,438, 1446,305, 1458,820), stdev = 8,866
[info]   CI (99.9%): [1412,164, 1480,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,365 ±(99.9%) 1,607 MB/sec [Average]
[info]   (min, avg, max) = (671,681, 672,365, 672,722), stdev = 0,417
[info]   CI (99.9%): [670,758, 673,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1330,317 ±(99.9%) 94,111 B/op [Average]
[info]   (min, avg, max) = (1289,094, 1330,317, 1354,015), stdev = 24,440
[info]   CI (99.9%): [1236,206, 1424,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,51% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1213462,015 ops/s
[info] # Warmup Iteration   2: 2659226,540 ops/s
[info] # Warmup Iteration   3: 3677181,691 ops/s
[info] # Warmup Iteration   4: 3694538,829 ops/s
[info] # Warmup Iteration   5: 3682135,157 ops/s
[info] Iteration   1: 3683054,188 ops/s
[info]                  ·gc.alloc.rate:                   2216,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              946,716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     864,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,112 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 3498240,537 ops/s
[info]                  ·gc.alloc.rate:                   2097,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              943,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     908,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3694323,052 ops/s
[info]                  ·gc.alloc.rate:               2224,077 MB/sec
[info]                  ·gc.alloc.rate.norm:          947,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 859,366 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 3658941,186 ops/s
[info]                  ·gc.alloc.rate:               2245,599 MB/sec
[info]                  ·gc.alloc.rate.norm:          965,563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1157,845 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 3643893,612 ops/s
[info]                  ·gc.alloc.rate:                   2217,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              957,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     873,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3635690,515 ±(99.9%) 305523,014 ops/s [Average]
[info]   (min, avg, max) = (3498240,537, 3635690,515, 3694323,052), stdev = 79343,357
[info]   CI (99.9%): [3330167,501, 3941213,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2200,051 ±(99.9%) 226,235 MB/sec [Average]
[info]   (min, avg, max) = (2097,103, 2200,051, 2245,599), stdev = 58,752
[info]   CI (99.9%): [1973,817, 2426,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   951,924 ±(99.9%) 35,690 B/op [Average]
[info]   (min, avg, max) = (943,050, 951,924, 965,563), stdev = 9,269
[info]   CI (99.9%): [916,234, 987,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2155,207 ±(99.9%) 1157,213 MB/sec [Average]
[info]   (min, avg, max) = (2018,126, 2155,207, 2692,788), stdev = 300,525
[info]   CI (99.9%): [997,994, 3312,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   932,548 ±(99.9%) 490,503 B/op [Average]
[info]   (min, avg, max) = (859,366, 932,548, 1157,845), stdev = 127,382
[info]   CI (99.9%): [442,045, 1423,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,529 ±(99.9%) 4,465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,529, 2,603), stdev = 1,160
[info]   CI (99.9%): [≈ 0, 4,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,226 ±(99.9%) 1,907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,226, 1,112), stdev = 0,495
[info]   CI (99.9%): [≈ 0, 2,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,140
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,71% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2603139,267 ops/s
[info] # Warmup Iteration   2: 5250397,338 ops/s
[info] # Warmup Iteration   3: 8885165,667 ops/s
[info] # Warmup Iteration   4: 8709138,387 ops/s
[info] # Warmup Iteration   5: 8758912,460 ops/s
[info] Iteration   1: 8805341,292 ops/s
[info]                  ·gc.alloc.rate:                   960,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              171,591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8860721,124 ops/s
[info]                  ·gc.alloc.rate:               964,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          171,270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119,385 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 8874754,793 ops/s
[info]                  ·gc.alloc.rate:                   979,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              173,570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 9048778,180 ops/s
[info]                  ·gc.alloc.rate:               992,593 MB/sec
[info]                  ·gc.alloc.rate.norm:          172,580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117,075 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8937449,218 ops/s
[info]                  ·gc.alloc.rate:                   1006,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              177,105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8905408,921 ±(99.9%) 357776,060 ops/s [Average]
[info]   (min, avg, max) = (8805341,292, 8905408,921, 9048778,180), stdev = 92913,307
[info]   CI (99.9%): [8547632,861, 9263184,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   980,550 ±(99.9%) 73,653 MB/sec [Average]
[info]   (min, avg, max) = (960,345, 980,550, 1006,105), stdev = 19,128
[info]   CI (99.9%): [906,897, 1054,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   173,223 ±(99.9%) 9,047 B/op [Average]
[info]   (min, avg, max) = (171,270, 173,223, 177,105), stdev = 2,349
[info]   CI (99.9%): [164,176, 182,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   942,261 ±(99.9%) 1421,338 MB/sec [Average]
[info]   (min, avg, max) = (672,366, 942,261, 1347,150), stdev = 369,117
[info]   CI (99.9%): [≈ 0, 2363,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   166,470 ±(99.9%) 251,053 B/op [Average]
[info]   (min, avg, max) = (117,075, 166,470, 238,617), stdev = 65,198
[info]   CI (99.9%): [≈ 0, 417,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,007), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,600, 5,000), stdev = 1,817
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,92% complete, ETA 00:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14114,475 ops/s
[info] # Warmup Iteration   2: 109084,028 ops/s
[info] # Warmup Iteration   3: 222213,864 ops/s
[info] # Warmup Iteration   4: 249802,338 ops/s
[info] # Warmup Iteration   5: 251008,193 ops/s
[info] Iteration   1: 251979,198 ops/s
[info]                  ·gc.alloc.rate:                   2183,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              13630,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12546,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 241802,997 ops/s
[info]                  ·gc.alloc.rate:                   2117,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              13774,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13100,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,962 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   3: 243301,467 ops/s
[info]                  ·gc.alloc.rate:               2115,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          13678,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13040,307 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 246397,640 ops/s
[info]                  ·gc.alloc.rate:               2128,849 MB/sec
[info]                  ·gc.alloc.rate.norm:          13593,161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12894,717 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 246047,689 ops/s
[info]                  ·gc.alloc.rate:               2180,671 MB/sec
[info]                  ·gc.alloc.rate.norm:          13943,945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17256,407 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   245905,798 ±(99.9%) 15008,098 ops/s [Average]
[info]   (min, avg, max) = (241802,997, 245905,798, 251979,198), stdev = 3897,555
[info]   CI (99.9%): [230897,701, 260913,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2144,989 ±(99.9%) 131,205 MB/sec [Average]
[info]   (min, avg, max) = (2115,358, 2144,989, 2183,058), stdev = 34,073
[info]   CI (99.9%): [2013,784, 2276,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13723,857 ±(99.9%) 540,899 B/op [Average]
[info]   (min, avg, max) = (13593,161, 13723,857, 13943,945), stdev = 140,470
[info]   CI (99.9%): [13182,958, 14264,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151,572 ±(99.9%) 1177,825 MB/sec [Average]
[info]   (min, avg, max) = (2009,531, 2151,572, 2698,702), stdev = 305,877
[info]   CI (99.9%): [973,746, 3329,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13767,647 ±(99.9%) 7555,230 B/op [Average]
[info]   (min, avg, max) = (12546,647, 13767,647, 17256,407), stdev = 1962,069
[info]   CI (99.9%): [6212,416, 21322,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,187 ±(99.9%) 1,569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,187, 0,916), stdev = 0,408
[info]   CI (99.9%): [≈ 0, 1,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,218 ±(99.9%) 10,212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,218, 5,962), stdev = 2,652
[info]   CI (99.9%): [≈ 0, 11,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,600, 11,000), stdev = 3,130
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,12% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111440,723 ops/s
[info] # Warmup Iteration   2: 296167,956 ops/s
[info] # Warmup Iteration   3: 340647,965 ops/s
[info] # Warmup Iteration   4: 341059,357 ops/s
[info] # Warmup Iteration   5: 341169,573 ops/s
[info] Iteration   1: 328318,727 ops/s
[info]                  ·gc.alloc.rate:                   642,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              3077,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3213,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 317889,060 ops/s
[info]                  ·gc.alloc.rate:               625,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          3096,110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3319,447 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 321786,090 ops/s
[info]                  ·gc.alloc.rate:                   633,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              3095,680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 322867,387 ops/s
[info]                  ·gc.alloc.rate:               627,149 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3269,900 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 322652,614 ops/s
[info]                  ·gc.alloc.rate:               640,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          3125,250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3275,206 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   322702,776 ±(99.9%) 14353,749 ops/s [Average]
[info]   (min, avg, max) = (317889,060, 322702,776, 328318,727), stdev = 3727,623
[info]   CI (99.9%): [308349,027, 337056,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   633,789 ±(99.9%) 29,345 MB/sec [Average]
[info]   (min, avg, max) = (625,576, 633,789, 642,125), stdev = 7,621
[info]   CI (99.9%): [604,444, 663,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3090,072 ±(99.9%) 98,489 B/op [Average]
[info]   (min, avg, max) = (3056,286, 3090,072, 3125,250), stdev = 25,577
[info]   CI (99.9%): [2991,583, 3188,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   671,017 ±(99.9%) 1,546 MB/sec [Average]
[info]   (min, avg, max) = (670,686, 671,017, 671,676), stdev = 0,401
[info]   CI (99.9%): [669,471, 672,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3271,852 ±(99.9%) 145,609 B/op [Average]
[info]   (min, avg, max) = (3213,895, 3271,852, 3319,447), stdev = 37,814
[info]   CI (99.9%): [3126,243, 3417,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,061, 0,204), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,32% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944838,641 ops/s
[info] # Warmup Iteration   2: 1663793,307 ops/s
[info] # Warmup Iteration   3: 1749255,890 ops/s
[info] # Warmup Iteration   4: 1701597,026 ops/s
[info] # Warmup Iteration   5: 1746399,045 ops/s
[info] Iteration   1: 1743605,672 ops/s
[info]                  ·gc.alloc.rate:      97,939 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,372 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1746743,510 ops/s
[info]                  ·gc.alloc.rate:      97,705 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1743764,832 ops/s
[info]                  ·gc.alloc.rate:      97,539 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1715807,929 ops/s
[info]                  ·gc.alloc.rate:                   113,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,617 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1743857,312 ops/s
[info]                  ·gc.alloc.rate:      97,652 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,101 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1738755,851 ±(99.9%) 49651,115 ops/s [Average]
[info]   (min, avg, max) = (1715807,929, 1738755,851, 1746743,510), stdev = 12894,237
[info]   CI (99.9%): [1689104,736, 1788406,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   100,883 ±(99.9%) 27,340 MB/sec [Average]
[info]   (min, avg, max) = (97,539, 100,883, 113,582), stdev = 7,100
[info]   CI (99.9%): [73,543, 128,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   91,327 ±(99.9%) 27,633 B/op [Average]
[info]   (min, avg, max) = (88,000, 91,327, 104,161), stdev = 7,176
[info]   CI (99.9%): [63,694, 118,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,341 ±(99.9%) 881,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,341, 511,704), stdev = 228,841
[info]   CI (99.9%): [≈ 0, 983,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   93,853 ±(99.9%) 808,099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93,853, 469,263), stdev = 209,861
[info]   CI (99.9%): [≈ 0, 901,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,135 ±(99.9%) 1,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,135, 0,673), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 1,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,123 ±(99.9%) 1,063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,123, 0,617), stdev = 0,276
[info]   CI (99.9%): [≈ 0, 1,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 3,000), stdev = 1,342
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,52% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8665,340 ops/s
[info] # Warmup Iteration   2: 78089,704 ops/s
[info] # Warmup Iteration   3: 83075,010 ops/s
[info] # Warmup Iteration   4: 83250,022 ops/s
[info] # Warmup Iteration   5: 83576,664 ops/s
[info] Iteration   1: 83607,457 ops/s
[info]                  ·gc.alloc.rate:               3685,030 MB/sec
[info]                  ·gc.alloc.rate.norm:          69341,816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63410,610 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 83722,876 ops/s
[info]                  ·gc.alloc.rate:                   3718,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              69882,233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4056,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76220,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 83675,055 ops/s
[info]                  ·gc.alloc.rate:               3692,963 MB/sec
[info]                  ·gc.alloc.rate.norm:          69434,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3389,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63722,429 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 83400,024 ops/s
[info]                  ·gc.alloc.rate:               3678,949 MB/sec
[info]                  ·gc.alloc.rate.norm:          69398,995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64047,938 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   5: 83525,649 ops/s
[info]                  ·gc.alloc.rate:               3686,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          69428,157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3399,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64037,667 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   83586,212 ±(99.9%) 492,203 ops/s [Average]
[info]   (min, avg, max) = (83400,024, 83586,212, 83722,876), stdev = 127,823
[info]   CI (99.9%): [83094,009, 84078,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3692,392 ±(99.9%) 60,295 MB/sec [Average]
[info]   (min, avg, max) = (3678,949, 3692,392, 3718,953), stdev = 15,659
[info]   CI (99.9%): [3632,096, 3752,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69497,226 ±(99.9%) 840,738 B/op [Average]
[info]   (min, avg, max) = (69341,816, 69497,226, 69882,233), stdev = 218,337
[info]   CI (99.9%): [68656,488, 70337,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3522,073 ±(99.9%) 1150,690 MB/sec [Average]
[info]   (min, avg, max) = (3369,828, 3522,073, 4056,245), stdev = 298,830
[info]   CI (99.9%): [2371,383, 4672,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66287,775 ±(99.9%) 21404,230 B/op [Average]
[info]   (min, avg, max) = (63410,610, 66287,775, 76220,231), stdev = 5558,611
[info]   CI (99.9%): [44883,544, 87692,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,078 ±(99.9%) 0,674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,078, 0,391), stdev = 0,175
[info]   CI (99.9%): [≈ 0, 0,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 7,000), stdev = 0,837
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,72% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 672975,105 ops/s
[info] # Warmup Iteration   2: 1626521,063 ops/s
[info] # Warmup Iteration   3: 1698393,160 ops/s
[info] # Warmup Iteration   4: 1676540,870 ops/s
[info] # Warmup Iteration   5: 1692478,117 ops/s
[info] Iteration   1: 1688996,327 ops/s
[info]                  ·gc.alloc.rate:                   907,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              844,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1625419,014 ops/s
[info]                  ·gc.alloc.rate:               887,026 MB/sec
[info]                  ·gc.alloc.rate.norm:          858,512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1293,249 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 1681635,491 ops/s
[info]                  ·gc.alloc.rate:               897,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          839,417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 625,292 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1679338,412 ops/s
[info]                  ·gc.alloc.rate:                   894,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              838,142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1682756,677 ops/s
[info]                  ·gc.alloc.rate:               930,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          869,611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1251,353 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1671629,184 ±(99.9%) 100419,466 ops/s [Average]
[info]   (min, avg, max) = (1625419,014, 1671629,184, 1688996,327), stdev = 26078,617
[info]   CI (99.9%): [1571209,718, 1772048,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   903,224 ±(99.9%) 64,152 MB/sec [Average]
[info]   (min, avg, max) = (887,026, 903,224, 930,113), stdev = 16,660
[info]   CI (99.9%): [839,072, 967,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   850,127 ±(99.9%) 52,198 B/op [Average]
[info]   (min, avg, max) = (838,142, 850,127, 869,611), stdev = 13,556
[info]   CI (99.9%): [797,929, 902,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935,946 ±(99.9%) 1410,850 MB/sec [Average]
[info]   (min, avg, max) = (667,711, 935,946, 1338,415), stdev = 366,393
[info]   CI (99.9%): [≈ 0, 2346,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   883,729 ±(99.9%) 1367,092 B/op [Average]
[info]   (min, avg, max) = (621,956, 883,729, 1293,249), stdev = 355,030
[info]   CI (99.9%): [≈ 0, 2250,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,059), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 1,095
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,92% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1014823,087 ops/s
[info] # Warmup Iteration   2: 1719090,250 ops/s
[info] # Warmup Iteration   3: 1811324,652 ops/s
[info] # Warmup Iteration   4: 1806733,359 ops/s
[info] # Warmup Iteration   5: 1812249,728 ops/s
[info] Iteration   1: 1730132,125 ops/s
[info]                  ·gc.alloc.rate:      483,864 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1778226,604 ops/s
[info]                  ·gc.alloc.rate:               528,269 MB/sec
[info]                  ·gc.alloc.rate.norm:          467,395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 593,424 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1823045,434 ops/s
[info]                  ·gc.alloc.rate:               532,312 MB/sec
[info]                  ·gc.alloc.rate.norm:          459,377 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 578,806 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1819456,246 ops/s
[info]                  ·gc.alloc.rate:                   532,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              460,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1824832,863 ops/s
[info]                  ·gc.alloc.rate:      511,560 MB/sec
[info]                  ·gc.alloc.rate.norm: 441,059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1795138,654 ±(99.9%) 158342,322 ops/s [Average]
[info]   (min, avg, max) = (1730132,125, 1795138,654, 1824832,863), stdev = 41120,998
[info]   CI (99.9%): [1636796,333, 1953480,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   517,622 ±(99.9%) 79,738 MB/sec [Average]
[info]   (min, avg, max) = (483,864, 517,622, 532,312), stdev = 20,708
[info]   CI (99.9%): [437,883, 597,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   453,589 ±(99.9%) 47,485 B/op [Average]
[info]   (min, avg, max) = (440,000, 453,589, 467,395), stdev = 12,332
[info]   CI (99.9%): [406,103, 501,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402,555 ±(99.9%) 1415,038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402,555, 671,361), stdev = 367,481
[info]   CI (99.9%): [≈ 0, 1817,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   350,551 ±(99.9%) 1232,429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 350,551, 593,424), stdev = 320,058
[info]   CI (99.9%): [≈ 0, 1582,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,12% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 981924,934 ops/s
[info] # Warmup Iteration   2: 1626362,143 ops/s
[info] # Warmup Iteration   3: 1732681,290 ops/s
[info] # Warmup Iteration   4: 1924020,086 ops/s
[info] # Warmup Iteration   5: 1925681,694 ops/s
[info] Iteration   1: 1924391,949 ops/s
[info]                  ·gc.alloc.rate:      19,571 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1924518,467 ops/s
[info]                  ·gc.alloc.rate:      19,573 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1923237,813 ops/s
[info]                  ·gc.alloc.rate:      19,560 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1924191,159 ops/s
[info]                  ·gc.alloc.rate:      19,569 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1681466,166 ops/s
[info]                  ·gc.alloc.rate:      17,099 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1875561,111 ±(99.9%) 417808,489 ops/s [Average]
[info]   (min, avg, max) = (1681466,166, 1875561,111, 1924518,467), stdev = 108503,538
[info]   CI (99.9%): [1457752,622, 2293369,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   19,074 ±(99.9%) 4,253 MB/sec [Average]
[info]   (min, avg, max) = (17,099, 19,074, 19,573), stdev = 1,104
[info]   CI (99.9%): [14,822, 23,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,32% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15483,354 ops/s
[info] # Warmup Iteration   2: 54242,951 ops/s
[info] # Warmup Iteration   3: 55385,458 ops/s
[info] # Warmup Iteration   4: 57110,542 ops/s
[info] # Warmup Iteration   5: 57567,496 ops/s
[info] Iteration   1: 57060,361 ops/s
[info]                  ·gc.alloc.rate:                   2477,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              68319,791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73471,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,574 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 57414,713 ops/s
[info]                  ·gc.alloc.rate:                   2467,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              67610,678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54955,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,141 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 57024,018 ops/s
[info]                  ·gc.alloc.rate:                   2493,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              68797,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73964,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 57171,233 ops/s
[info]                  ·gc.alloc.rate:                   2497,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              68730,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74044,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,573 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 56992,598 ops/s
[info]                  ·gc.alloc.rate:               2465,343 MB/sec
[info]                  ·gc.alloc.rate.norm:          68053,127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55854,768 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   57132,585 ±(99.9%) 660,498 ops/s [Average]
[info]   (min, avg, max) = (56992,598, 57132,585, 57414,713), stdev = 171,529
[info]   CI (99.9%): [56472,087, 57793,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2480,372 ±(99.9%) 56,874 MB/sec [Average]
[info]   (min, avg, max) = (2465,343, 2480,372, 2497,634), stdev = 14,770
[info]   CI (99.9%): [2423,498, 2537,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68302,145 ±(99.9%) 1894,766 B/op [Average]
[info]   (min, avg, max) = (67610,678, 68302,145, 68797,086), stdev = 492,065
[info]   CI (99.9%): [66407,379, 70196,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2413,075 ±(99.9%) 1401,755 MB/sec [Average]
[info]   (min, avg, max) = (2005,541, 2413,075, 2690,753), stdev = 364,031
[info]   CI (99.9%): [1011,320, 3814,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66458,117 ±(99.9%) 38881,879 B/op [Average]
[info]   (min, avg, max) = (54955,148, 66458,117, 74044,311), stdev = 10097,501
[info]   CI (99.9%): [27576,238, 105339,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,688 ±(99.9%) 1,844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,688, 1,149), stdev = 0,479
[info]   CI (99.9%): [≈ 0, 2,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,52% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176725,016 ops/s
[info] # Warmup Iteration   2: 293171,173 ops/s
[info] # Warmup Iteration   3: 300178,879 ops/s
[info] # Warmup Iteration   4: 300150,307 ops/s
[info] # Warmup Iteration   5: 301053,794 ops/s
[info] Iteration   1: 298691,213 ops/s
[info]                  ·gc.alloc.rate:                   1198,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              6312,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7075,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 301239,663 ops/s
[info]                  ·gc.alloc.rate:                   1227,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              6408,350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7022,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 302421,207 ops/s
[info]                  ·gc.alloc.rate:               1201,251 MB/sec
[info]                  ·gc.alloc.rate.norm:          6249,198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3499,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 301751,584 ops/s
[info]                  ·gc.alloc.rate:                   1221,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              6366,774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7016,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,766 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 302432,028 ops/s
[info]                  ·gc.alloc.rate:                   1223,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              6362,941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6995,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   301307,139 ±(99.9%) 5950,360 ops/s [Average]
[info]   (min, avg, max) = (298691,213, 301307,139, 302432,028), stdev = 1545,289
[info]   CI (99.9%): [295356,779, 307257,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1214,194 ±(99.9%) 51,308 MB/sec [Average]
[info]   (min, avg, max) = (1198,397, 1214,194, 1227,027), stdev = 13,325
[info]   CI (99.9%): [1162,886, 1265,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6339,896 ±(99.9%) 235,266 B/op [Average]
[info]   (min, avg, max) = (6249,198, 6339,896, 6408,350), stdev = 61,098
[info]   CI (99.9%): [6104,630, 6575,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,244 ±(99.9%) 1157,146 MB/sec [Average]
[info]   (min, avg, max) = (672,683, 1210,244, 1345,739), stdev = 300,507
[info]   CI (99.9%): [53,098, 2367,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6321,996 ±(99.9%) 6076,794 B/op [Average]
[info]   (min, avg, max) = (3499,459, 6321,996, 7075,843), stdev = 1578,124
[info]   CI (99.9%): [245,202, 12398,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 4,694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 2,832), stdev = 1,219
[info]   CI (99.9%): [≈ 0, 5,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,625 ±(99.9%) 24,473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,625, 14,766), stdev = 6,356
[info]   CI (99.9%): [≈ 0, 28,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,72% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5971,814 ops/s
[info] # Warmup Iteration   2: 38461,077 ops/s
[info] # Warmup Iteration   3: 44388,586 ops/s
[info] # Warmup Iteration   4: 41125,471 ops/s
[info] # Warmup Iteration   5: 44483,080 ops/s
[info] Iteration   1: 44722,071 ops/s
[info]                  ·gc.alloc.rate:                   2171,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              76387,686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70663,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,837 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 42586,871 ops/s
[info]                  ·gc.alloc.rate:               2092,306 MB/sec
[info]                  ·gc.alloc.rate.norm:          77292,548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74332,087 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 44780,220 ops/s
[info]                  ·gc.alloc.rate:                   2174,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              76388,406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70857,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,195 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 44769,263 ops/s
[info]                  ·gc.alloc.rate:                   2186,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              76824,566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70990,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,659 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 44659,041 ops/s
[info]                  ·gc.alloc.rate:               2195,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          77325,593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71325,233 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   44303,493 ±(99.9%) 3699,737 ops/s [Average]
[info]   (min, avg, max) = (42586,871, 44303,493, 44780,220), stdev = 960,810
[info]   CI (99.9%): [40603,756, 48003,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2163,832 ±(99.9%) 158,217 MB/sec [Average]
[info]   (min, avg, max) = (2092,306, 2163,832, 2195,067), stdev = 41,088
[info]   CI (99.9%): [2005,615, 2322,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76843,760 ±(99.9%) 1774,320 B/op [Average]
[info]   (min, avg, max) = (76387,686, 76843,760, 77325,593), stdev = 460,785
[info]   CI (99.9%): [75069,439, 78618,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2016,512 ±(99.9%) 24,347 MB/sec [Average]
[info]   (min, avg, max) = (2008,723, 2016,512, 2024,733), stdev = 6,323
[info]   CI (99.9%): [1992,164, 2040,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71633,986 ±(99.9%) 5881,596 B/op [Average]
[info]   (min, avg, max) = (70663,783, 71633,986, 74332,087), stdev = 1527,432
[info]   CI (99.9%): [65752,390, 77515,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,192 ±(99.9%) 1,302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,192, 0,791), stdev = 0,338
[info]   CI (99.9%): [≈ 0, 1,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,738 ±(99.9%) 45,808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,738, 27,837), stdev = 11,896
[info]   CI (99.9%): [≈ 0, 52,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,92% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53039,600 ops/s
[info] # Warmup Iteration   2: 119248,720 ops/s
[info] # Warmup Iteration   3: 122381,876 ops/s
[info] # Warmup Iteration   4: 122860,071 ops/s
[info] # Warmup Iteration   5: 122248,259 ops/s
[info] Iteration   1: 108329,406 ops/s
[info]                  ·gc.alloc.rate:               1087,985 MB/sec
[info]                  ·gc.alloc.rate.norm:          15800,891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19413,594 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 121595,991 ops/s
[info]                  ·gc.alloc.rate:                   1229,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              15905,899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17312,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 122135,605 ops/s
[info]                  ·gc.alloc.rate:               1207,265 MB/sec
[info]                  ·gc.alloc.rate.norm:          15551,111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8626,546 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 121664,744 ops/s
[info]                  ·gc.alloc.rate:                   1241,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              16049,169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17324,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,971 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 122198,253 ops/s
[info]                  ·gc.alloc.rate:                   1247,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              16060,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17232,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,652 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   119184,800 ±(99.9%) 23390,220 ops/s [Average]
[info]   (min, avg, max) = (108329,406, 119184,800, 122198,253), stdev = 6074,366
[info]   CI (99.9%): [95794,579, 142575,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1202,619 ±(99.9%) 253,689 MB/sec [Average]
[info]   (min, avg, max) = (1087,985, 1202,619, 1247,341), stdev = 65,882
[info]   CI (99.9%): [948,930, 1456,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15873,432 ±(99.9%) 807,562 B/op [Average]
[info]   (min, avg, max) = (15551,111, 15873,432, 16060,091), stdev = 209,721
[info]   CI (99.9%): [15065,870, 16680,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204,537 ±(99.9%) 1151,291 MB/sec [Average]
[info]   (min, avg, max) = (669,697, 1204,537, 1339,798), stdev = 298,987
[info]   CI (99.9%): [53,246, 2355,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15981,932 ±(99.9%) 16224,755 B/op [Average]
[info]   (min, avg, max) = (8626,546, 15981,932, 19413,594), stdev = 4213,517
[info]   CI (99.9%): [≈ 0, 32206,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,858 ±(99.9%) 5,770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,858, 3,478), stdev = 1,498
[info]   CI (99.9%): [≈ 0, 6,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11,086 ±(99.9%) 74,609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,086, 44,971), stdev = 19,376
[info]   CI (99.9%): [≈ 0, 85,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 6,000), stdev = 1,817
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,12% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169714,377 ops/s
[info] # Warmup Iteration   2: 333418,501 ops/s
[info] # Warmup Iteration   3: 341714,682 ops/s
[info] # Warmup Iteration   4: 341422,724 ops/s
[info] # Warmup Iteration   5: 335599,286 ops/s
[info] Iteration   1: 341899,430 ops/s
[info]                  ·gc.alloc.rate:               479,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          2205,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2355,110 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 343238,032 ops/s
[info]                  ·gc.alloc.rate:               476,044 MB/sec
[info]                  ·gc.alloc.rate.norm:          2181,983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3074,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 344871,498 ops/s
[info]                  ·gc.alloc.rate:      464,774 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120,255 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 339115,465 ops/s
[info]                  ·gc.alloc.rate:                   471,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              2185,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3111,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 343068,261 ops/s
[info]                  ·gc.alloc.rate:               487,208 MB/sec
[info]                  ·gc.alloc.rate.norm:          2234,320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3078,825 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   342438,537 ±(99.9%) 8233,647 ops/s [Average]
[info]   (min, avg, max) = (339115,465, 342438,537, 344871,498), stdev = 2138,252
[info]   CI (99.9%): [334204,890, 350672,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   475,667 ±(99.9%) 32,550 MB/sec [Average]
[info]   (min, avg, max) = (464,774, 475,667, 487,208), stdev = 8,453
[info]   CI (99.9%): [443,117, 508,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2185,441 ±(99.9%) 161,502 B/op [Average]
[info]   (min, avg, max) = (2120,255, 2185,441, 2234,320), stdev = 41,941
[info]   CI (99.9%): [2023,940, 2346,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504,919 ±(99.9%) 1118,775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504,919, 671,358), stdev = 290,542
[info]   CI (99.9%): [≈ 0, 1623,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2323,974 ±(99.9%) 5150,022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2323,974, 3111,699), stdev = 1337,444
[info]   CI (99.9%): [≈ 0, 7473,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,097), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,33% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236553,331 ops/s
[info] # Warmup Iteration   2: 386797,228 ops/s
[info] # Warmup Iteration   3: 404776,951 ops/s
[info] # Warmup Iteration   4: 403679,177 ops/s
[info] # Warmup Iteration   5: 400598,632 ops/s
[info] Iteration   1: 402388,097 ops/s
[info]                  ·gc.alloc.rate:      4,093 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 403455,783 ops/s
[info]                  ·gc.alloc.rate:      13,270 MB/sec
[info]                  ·gc.alloc.rate.norm: 51,748 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 404304,987 ops/s
[info]                  ·gc.alloc.rate:      4,112 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 404385,639 ops/s
[info]                  ·gc.alloc.rate:      4,113 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 403406,420 ops/s
[info]                  ·gc.alloc.rate:      4,103 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   403588,185 ±(99.9%) 3128,584 ops/s [Average]
[info]   (min, avg, max) = (402388,097, 403588,185, 404385,639), stdev = 812,483
[info]   CI (99.9%): [400459,601, 406716,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,938 ±(99.9%) 15,783 MB/sec [Average]
[info]   (min, avg, max) = (4,093, 5,938, 13,270), stdev = 4,099
[info]   CI (99.9%): [≈ 0, 21,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   23,151 ±(99.9%) 61,558 B/op [Average]
[info]   (min, avg, max) = (16,001, 23,151, 51,748), stdev = 15,986
[info]   CI (99.9%): [≈ 0, 84,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,53% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15616,504 ops/s
[info] # Warmup Iteration   2: 54663,147 ops/s
[info] # Warmup Iteration   3: 58140,047 ops/s
[info] # Warmup Iteration   4: 58108,038 ops/s
[info] # Warmup Iteration   5: 58548,976 ops/s
[info] Iteration   1: 58488,559 ops/s
[info]                  ·gc.alloc.rate:                   1557,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              41887,921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35956,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 58724,161 ops/s
[info]                  ·gc.alloc.rate:               1560,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          41803,394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35805,339 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 58786,268 ops/s
[info]                  ·gc.alloc.rate:                   1556,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              41650,765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35701,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,557 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 58706,082 ops/s
[info]                  ·gc.alloc.rate:               1549,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          41519,458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35697,192 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 58082,437 ops/s
[info]                  ·gc.alloc.rate:               1559,033 MB/sec
[info]                  ·gc.alloc.rate.norm:          42228,517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54094,782 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   58557,501 ±(99.9%) 1110,403 ops/s [Average]
[info]   (min, avg, max) = (58082,437, 58557,501, 58786,268), stdev = 288,368
[info]   CI (99.9%): [57447,098, 59667,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1556,492 ±(99.9%) 16,576 MB/sec [Average]
[info]   (min, avg, max) = (1549,355, 1556,492, 1560,508), stdev = 4,305
[info]   CI (99.9%): [1539,916, 1573,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41818,011 ±(99.9%) 1038,106 B/op [Average]
[info]   (min, avg, max) = (41519,458, 41818,011, 42228,517), stdev = 269,593
[info]   CI (99.9%): [40779,905, 42856,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467,312 ±(99.9%) 1140,482 MB/sec [Average]
[info]   (min, avg, max) = (1332,089, 1467,312, 1997,123), stdev = 296,180
[info]   CI (99.9%): [326,830, 2607,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39451,026 ±(99.9%) 31524,397 B/op [Average]
[info]   (min, avg, max) = (35697,192, 39451,026, 54094,782), stdev = 8186,786
[info]   CI (99.9%): [7926,629, 70975,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,336 ±(99.9%) 1,928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,336, 1,120), stdev = 0,501
[info]   CI (99.9%): [≈ 0, 2,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 7,000), stdev = 1,949
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,73% complete, ETA 00:24:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16013,763 ops/s
[info] # Warmup Iteration   2: 77462,497 ops/s
[info] # Warmup Iteration   3: 80536,505 ops/s
[info] # Warmup Iteration   4: 83303,993 ops/s
[info] # Warmup Iteration   5: 83142,020 ops/s
[info] Iteration   1: 83190,889 ops/s
[info]                  ·gc.alloc.rate:                   1791,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              33885,789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38101,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,788 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 83008,717 ops/s
[info]                  ·gc.alloc.rate:                   1786,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              33866,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25461,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,252 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 82531,113 ops/s
[info]                  ·gc.alloc.rate:                   1777,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              33884,515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38310,642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,794 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 82907,302 ops/s
[info]                  ·gc.alloc.rate:               1784,143 MB/sec
[info]                  ·gc.alloc.rate.norm:          33855,519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25390,903 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 83476,960 ops/s
[info]                  ·gc.alloc.rate:               1809,278 MB/sec
[info]                  ·gc.alloc.rate.norm:          34098,503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37837,547 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   83022,996 ±(99.9%) 1347,464 ops/s [Average]
[info]   (min, avg, max) = (82531,113, 83022,996, 83476,960), stdev = 349,932
[info]   CI (99.9%): [81675,533, 84370,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1789,927 ±(99.9%) 46,084 MB/sec [Average]
[info]   (min, avg, max) = (1777,567, 1789,927, 1809,278), stdev = 11,968
[info]   CI (99.9%): [1743,843, 1836,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33918,178 ±(99.9%) 391,223 B/op [Average]
[info]   (min, avg, max) = (33855,519, 33918,178, 34098,503), stdev = 101,599
[info]   CI (99.9%): [33526,955, 34309,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742,708 ±(99.9%) 1413,009 MB/sec [Average]
[info]   (min, avg, max) = (1338,069, 1742,708, 2014,616), stdev = 366,954
[info]   CI (99.9%): [329,698, 3155,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33020,285 ±(99.9%) 26703,037 B/op [Average]
[info]   (min, avg, max) = (25390,903, 33020,285, 38310,642), stdev = 6934,694
[info]   CI (99.9%): [6317,248, 59723,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,758 ±(99.9%) 6,348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,758, 3,707), stdev = 1,649
[info]   CI (99.9%): [≈ 0, 7,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14,367 ±(99.9%) 120,306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,367, 70,252), stdev = 31,243
[info]   CI (99.9%): [≈ 0, 134,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 9,000), stdev = 2,775
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,93% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47337,422 ops/s
[info] # Warmup Iteration   2: 134538,336 ops/s
[info] # Warmup Iteration   3: 143806,644 ops/s
[info] # Warmup Iteration   4: 147371,595 ops/s
[info] # Warmup Iteration   5: 138686,325 ops/s
[info] Iteration   1: 148735,995 ops/s
[info]                  ·gc.alloc.rate:               742,411 MB/sec
[info]                  ·gc.alloc.rate.norm:          7852,314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7045,442 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 148639,221 ops/s
[info]                  ·gc.alloc.rate:                   734,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              7776,588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7056,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 148289,996 ops/s
[info]                  ·gc.alloc.rate:               738,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          7829,862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7073,365 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 148395,163 ops/s
[info]                  ·gc.alloc.rate:                   736,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              7806,913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7075,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 148322,225 ops/s
[info]                  ·gc.alloc.rate:               730,846 MB/sec
[info]                  ·gc.alloc.rate.norm:          7752,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7079,242 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   148476,520 ±(99.9%) 767,756 ops/s [Average]
[info]   (min, avg, max) = (148289,996, 148476,520, 148735,995), stdev = 199,384
[info]   CI (99.9%): [147708,764, 149244,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   736,483 ±(99.9%) 16,386 MB/sec [Average]
[info]   (min, avg, max) = (730,846, 736,483, 742,411), stdev = 4,255
[info]   CI (99.9%): [720,097, 752,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7803,557 ±(99.9%) 154,682 B/op [Average]
[info]   (min, avg, max) = (7752,109, 7803,557, 7852,314), stdev = 40,170
[info]   CI (99.9%): [7648,875, 7958,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666,877 ±(99.9%) 2,114 MB/sec [Average]
[info]   (min, avg, max) = (666,123, 666,877, 667,425), stdev = 0,549
[info]   CI (99.9%): [664,763, 668,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7066,066 ±(99.9%) 55,469 B/op [Average]
[info]   (min, avg, max) = (7045,442, 7066,066, 7079,242), stdev = 14,405
[info]   CI (99.9%): [7010,597, 7121,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,088 ±(99.9%) 0,465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,088, 0,221), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,13% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110615,364 ops/s
[info] # Warmup Iteration   2: 322140,399 ops/s
[info] # Warmup Iteration   3: 321887,333 ops/s
[info] # Warmup Iteration   4: 323442,159 ops/s
[info] # Warmup Iteration   5: 310969,676 ops/s
[info] Iteration   1: 323266,396 ops/s
[info]                  ·gc.alloc.rate:                   1378,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              6711,223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6541,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 323149,214 ops/s
[info]                  ·gc.alloc.rate:                   1370,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              6672,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6547,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 322508,379 ops/s
[info]                  ·gc.alloc.rate:                   1379,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              6730,218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6563,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,339 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 323136,314 ops/s
[info]                  ·gc.alloc.rate:                   1383,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              6737,963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6543,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 319498,288 ops/s
[info]                  ·gc.alloc.rate:               1363,201 MB/sec
[info]                  ·gc.alloc.rate.norm:          6713,457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6605,239 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   322311,718 ±(99.9%) 6163,086 ops/s [Average]
[info]   (min, avg, max) = (319498,288, 322311,718, 323266,396), stdev = 1600,534
[info]   CI (99.9%): [316148,632, 328474,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1375,239 ±(99.9%) 31,988 MB/sec [Average]
[info]   (min, avg, max) = (1363,201, 1375,239, 1383,882), stdev = 8,307
[info]   CI (99.9%): [1343,251, 1407,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6712,977 ±(99.9%) 98,212 B/op [Average]
[info]   (min, avg, max) = (6672,023, 6712,977, 6737,963), stdev = 25,505
[info]   CI (99.9%): [6614,765, 6811,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1343,912 ±(99.9%) 6,158 MB/sec [Average]
[info]   (min, avg, max) = (1341,227, 1343,912, 1345,385), stdev = 1,599
[info]   CI (99.9%): [1337,754, 1350,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6560,157 ±(99.9%) 102,271 B/op [Average]
[info]   (min, avg, max) = (6541,600, 6560,157, 6605,239), stdev = 26,560
[info]   CI (99.9%): [6457,885, 6662,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,683 ±(99.9%) 5,311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 3,144), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 5,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,331 ±(99.9%) 25,907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,331, 15,339), stdev = 6,728
[info]   CI (99.9%): [≈ 0, 29,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 2,049
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,33% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900,620 ops/s
[info] # Warmup Iteration   2: 26883,918 ops/s
[info] # Warmup Iteration   3: 30078,523 ops/s
[info] # Warmup Iteration   4: 30062,616 ops/s
[info] # Warmup Iteration   5: 30178,615 ops/s
[info] Iteration   1: 30210,626 ops/s
[info]                  ·gc.alloc.rate:                   1670,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              86982,136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104229,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,507 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 30258,365 ops/s
[info]                  ·gc.alloc.rate:                   1633,641 MB/sec
[info]                  ·gc.alloc.rate.norm:              84939,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69540,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,579 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 30315,350 ops/s
[info]                  ·gc.alloc.rate:                   1647,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              85509,970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69543,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 30640,332 ops/s
[info]                  ·gc.alloc.rate:               1652,702 MB/sec
[info]                  ·gc.alloc.rate.norm:          84859,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103386,275 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 30529,173 ops/s
[info]                  ·gc.alloc.rate:                   1653,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              85195,963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69266,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   30390,769 ±(99.9%) 712,910 ops/s [Average]
[info]   (min, avg, max) = (30210,626, 30390,769, 30640,332), stdev = 185,140
[info]   CI (99.9%): [29677,859, 31103,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1651,564 ±(99.9%) 50,686 MB/sec [Average]
[info]   (min, avg, max) = (1633,641, 1651,564, 1670,345), stdev = 13,163
[info]   CI (99.9%): [1600,879, 1702,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85497,237 ±(99.9%) 3342,904 B/op [Average]
[info]   (min, avg, max) = (84859,090, 85497,237, 86982,136), stdev = 868,142
[info]   CI (99.9%): [82154,333, 88840,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1607,374 ±(99.9%) 1406,775 MB/sec [Average]
[info]   (min, avg, max) = (1337,472, 1607,374, 2013,535), stdev = 365,335
[info]   CI (99.9%): [200,599, 3014,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83193,058 ±(99.9%) 72474,382 B/op [Average]
[info]   (min, avg, max) = (69266,319, 83193,058, 104229,482), stdev = 18821,367
[info]   CI (99.9%): [10718,677, 155667,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,283 ±(99.9%) 1,827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,283, 1,125), stdev = 0,475
[info]   CI (99.9%): [≈ 0, 2,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14,703 ±(99.9%) 94,820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,703, 58,356), stdev = 24,624
[info]   CI (99.9%): [≈ 0, 109,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,095
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,53% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76779,353 ops/s
[info] # Warmup Iteration   2: 194524,779 ops/s
[info] # Warmup Iteration   3: 201060,956 ops/s
[info] # Warmup Iteration   4: 200992,897 ops/s
[info] # Warmup Iteration   5: 200765,371 ops/s
[info] Iteration   1: 201952,290 ops/s
[info]                  ·gc.alloc.rate:                   1141,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              8888,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5206,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 202264,580 ops/s
[info]                  ·gc.alloc.rate:               1161,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          9032,699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10399,979 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 200738,358 ops/s
[info]                  ·gc.alloc.rate:                   1140,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              8935,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10486,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,490 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 202036,241 ops/s
[info]                  ·gc.alloc.rate:               1143,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          8902,649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5212,369 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 201657,613 ops/s
[info]                  ·gc.alloc.rate:                   1168,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              9116,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10449,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,331 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   201729,816 ±(99.9%) 2292,319 ops/s [Average]
[info]   (min, avg, max) = (200738,358, 201729,816, 202264,580), stdev = 595,308
[info]   CI (99.9%): [199437,497, 204022,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1150,775 ±(99.9%) 50,477 MB/sec [Average]
[info]   (min, avg, max) = (1140,055, 1150,775, 1168,414), stdev = 13,109
[info]   CI (99.9%): [1100,298, 1201,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8975,069 ±(99.9%) 372,623 B/op [Average]
[info]   (min, avg, max) = (8888,850, 8975,069, 9116,005), stdev = 96,769
[info]   CI (99.9%): [8602,445, 9347,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,414 ±(99.9%) 1411,589 MB/sec [Average]
[info]   (min, avg, max) = (668,360, 1070,414, 1339,380), stdev = 366,585
[info]   CI (99.9%): [≈ 0, 2482,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8351,163 ±(99.9%) 11043,867 B/op [Average]
[info]   (min, avg, max) = (5206,724, 8351,163, 10486,857), stdev = 2868,057
[info]   CI (99.9%): [≈ 0, 19395,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,845 ±(99.9%) 7,101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,845, 4,144), stdev = 1,844
[info]   CI (99.9%): [≈ 0, 7,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,597 ±(99.9%) 55,401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,597, 32,331), stdev = 14,387
[info]   CI (99.9%): [≈ 0, 61,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,73% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317315,843 ops/s
[info] # Warmup Iteration   2: 520537,747 ops/s
[info] # Warmup Iteration   3: 522805,480 ops/s
[info] # Warmup Iteration   4: 533894,233 ops/s
[info] # Warmup Iteration   5: 533978,235 ops/s
[info] Iteration   1: 533348,344 ops/s
[info]                  ·gc.alloc.rate:                   1592,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              4698,757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3968,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 531486,546 ops/s
[info]                  ·gc.alloc.rate:                   1600,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              4735,756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5968,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,296 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 534437,596 ops/s
[info]                  ·gc.alloc.rate:                   1606,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              4727,851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3954,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,490 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 532861,173 ops/s
[info]                  ·gc.alloc.rate:               1612,597 MB/sec
[info]                  ·gc.alloc.rate.norm:          4761,253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3962,489 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 534653,688 ops/s
[info]                  ·gc.alloc.rate:               1618,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          4763,615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3949,239 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   533357,469 ±(99.9%) 4943,845 ops/s [Average]
[info]   (min, avg, max) = (531486,546, 533357,469, 534653,688), stdev = 1283,901
[info]   CI (99.9%): [528413,625, 538301,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1606,189 ±(99.9%) 38,889 MB/sec [Average]
[info]   (min, avg, max) = (1592,941, 1606,189, 1618,815), stdev = 10,099
[info]   CI (99.9%): [1567,300, 1645,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4737,446 ±(99.9%) 102,665 B/op [Average]
[info]   (min, avg, max) = (4698,757, 4737,446, 4763,615), stdev = 26,662
[info]   CI (99.9%): [4634,782, 4840,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478,059 ±(99.9%) 1160,743 MB/sec [Average]
[info]   (min, avg, max) = (1342,063, 1478,059, 2017,288), stdev = 301,441
[info]   CI (99.9%): [317,316, 2638,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4360,813 ±(99.9%) 3461,598 B/op [Average]
[info]   (min, avg, max) = (3949,239, 4360,813, 5968,877), stdev = 898,966
[info]   CI (99.9%): [899,215, 7822,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,142), stdev = 1,386
[info]   CI (99.9%): [≈ 0, 6,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,969 ±(99.9%) 15,790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,969, 9,296), stdev = 4,101
[info]   CI (99.9%): [≈ 0, 17,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 6,000), stdev = 1,949
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,93% complete, ETA 00:22:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323174,430 ops/s
[info] # Warmup Iteration   2: 556726,272 ops/s
[info] # Warmup Iteration   3: 568703,740 ops/s
[info] # Warmup Iteration   4: 565665,226 ops/s
[info] # Warmup Iteration   5: 572145,235 ops/s
[info] Iteration   1: 570862,751 ops/s
[info]                  ·gc.alloc.rate:                   1089,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3002,495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3703,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 575203,562 ops/s
[info]                  ·gc.alloc.rate:               1071,172 MB/sec
[info]                  ·gc.alloc.rate.norm:          2929,831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1838,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 561735,166 ops/s
[info]                  ·gc.alloc.rate:                   1084,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              3037,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3766,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 572569,661 ops/s
[info]                  ·gc.alloc.rate:               1077,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          2959,577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1849,428 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 562291,516 ops/s
[info]                  ·gc.alloc.rate:                   1072,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3766,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568532,531 ±(99.9%) 23688,928 ops/s [Average]
[info]   (min, avg, max) = (561735,166, 568532,531, 575203,562), stdev = 6151,939
[info]   CI (99.9%): [544843,603, 592221,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1078,910 ±(99.9%) 30,194 MB/sec [Average]
[info]   (min, avg, max) = (1071,172, 1078,910, 1089,446), stdev = 7,841
[info]   CI (99.9%): [1048,717, 1109,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2985,912 ±(99.9%) 160,486 B/op [Average]
[info]   (min, avg, max) = (2929,831, 2985,912, 3037,096), stdev = 41,678
[info]   CI (99.9%): [2825,426, 3146,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1075,964 ±(99.9%) 1418,065 MB/sec [Average]
[info]   (min, avg, max) = (672,013, 1075,964, 1346,182), stdev = 368,267
[info]   CI (99.9%): [≈ 0, 2494,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2984,752 ±(99.9%) 4012,049 B/op [Average]
[info]   (min, avg, max) = (1838,066, 2984,752, 3766,470), stdev = 1041,916
[info]   CI (99.9%): [≈ 0, 6996,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,571 ±(99.9%) 4,824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,571, 2,811), stdev = 1,253
[info]   CI (99.9%): [≈ 0, 5,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,596 ±(99.9%) 13,497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,596, 7,866), stdev = 3,505
[info]   CI (99.9%): [≈ 0, 15,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,400, 5,000), stdev = 1,342
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,13% complete, ETA 00:22:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11591,810 ops/s
[info] # Warmup Iteration   2: 69779,695 ops/s
[info] # Warmup Iteration   3: 71601,636 ops/s
[info] # Warmup Iteration   4: 76001,751 ops/s
[info] # Warmup Iteration   5: 75265,993 ops/s
[info] Iteration   1: 75549,298 ops/s
[info]                  ·gc.alloc.rate:               1692,418 MB/sec
[info]                  ·gc.alloc.rate.norm:          35245,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41763,469 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 76028,907 ops/s
[info]                  ·gc.alloc.rate:               1682,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          34823,321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27729,454 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 74342,135 ops/s
[info]                  ·gc.alloc.rate:                   1662,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              35176,322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42623,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 75490,369 ops/s
[info]                  ·gc.alloc.rate:               1686,530 MB/sec
[info]                  ·gc.alloc.rate.norm:          35149,910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28025,726 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 75897,144 ops/s
[info]                  ·gc.alloc.rate:               1695,318 MB/sec
[info]                  ·gc.alloc.rate.norm:          35141,748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27916,167 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   75461,571 ±(99.9%) 2563,830 ops/s [Average]
[info]   (min, avg, max) = (74342,135, 75461,571, 76028,907), stdev = 665,819
[info]   CI (99.9%): [72897,741, 78025,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1683,878 ±(99.9%) 50,226 MB/sec [Average]
[info]   (min, avg, max) = (1662,228, 1683,878, 1695,318), stdev = 13,043
[info]   CI (99.9%): [1633,652, 1734,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35107,327 ±(99.9%) 631,152 B/op [Average]
[info]   (min, avg, max) = (34823,321, 35107,327, 35245,334), stdev = 163,908
[info]   CI (99.9%): [34476,175, 35738,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1610,208 ±(99.9%) 1404,569 MB/sec [Average]
[info]   (min, avg, max) = (1340,072, 1610,208, 2014,116), stdev = 364,762
[info]   CI (99.9%): [205,639, 3014,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33611,570 ±(99.9%) 30191,265 B/op [Average]
[info]   (min, avg, max) = (27729,454, 33611,570, 42623,034), stdev = 7840,576
[info]   CI (99.9%): [3420,305, 63802,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,162 ±(99.9%) 1,399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,812), stdev = 0,363
[info]   CI (99.9%): [≈ 0, 1,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,437 ±(99.9%) 29,597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,437, 17,187), stdev = 7,686
[info]   CI (99.9%): [≈ 0, 33,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,33% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41245,965 ops/s
[info] # Warmup Iteration   2: 95678,826 ops/s
[info] # Warmup Iteration   3: 105721,593 ops/s
[info] # Warmup Iteration   4: 107050,452 ops/s
[info] # Warmup Iteration   5: 108109,690 ops/s
[info] Iteration   1: 106563,734 ops/s
[info]                  ·gc.alloc.rate:                   1768,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              26111,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29774,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,307 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 107718,068 ops/s
[info]                  ·gc.alloc.rate:                   1760,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              25709,421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19641,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,924 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 107217,697 ops/s
[info]                  ·gc.alloc.rate:                   1775,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              26050,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29519,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,528 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 107171,947 ops/s
[info]                  ·gc.alloc.rate:                   1776,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              26072,196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29492,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,917 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 106433,526 ops/s
[info]                  ·gc.alloc.rate:               1738,016 MB/sec
[info]                  ·gc.alloc.rate.norm:          25691,434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19798,763 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   107020,995 ±(99.9%) 2020,760 ops/s [Average]
[info]   (min, avg, max) = (106433,526, 107020,995, 107718,068), stdev = 524,785
[info]   CI (99.9%): [105000,235, 109041,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1763,714 ±(99.9%) 60,499 MB/sec [Average]
[info]   (min, avg, max) = (1738,016, 1763,714, 1776,133), stdev = 15,711
[info]   CI (99.9%): [1703,216, 1824,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25927,123 ±(99.9%) 801,638 B/op [Average]
[info]   (min, avg, max) = (25691,434, 25927,123, 26111,612), stdev = 208,183
[info]   CI (99.9%): [25125,486, 26728,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744,388 ±(99.9%) 1414,076 MB/sec [Average]
[info]   (min, avg, max) = (1339,379, 1744,388, 2016,771), stdev = 367,231
[info]   CI (99.9%): [330,312, 3158,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25645,310 ±(99.9%) 20833,448 B/op [Average]
[info]   (min, avg, max) = (19641,395, 25645,310, 29774,781), stdev = 5410,380
[info]   CI (99.9%): [4811,862, 46478,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,762 ±(99.9%) 6,162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,762, 3,624), stdev = 1,600
[info]   CI (99.9%): [≈ 0, 6,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11,135 ±(99.9%) 89,981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,135, 52,924), stdev = 23,368
[info]   CI (99.9%): [≈ 0, 101,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,000, 8,000), stdev = 2,550
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,53% complete, ETA 00:21:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28474,000 ops/s
[info] # Warmup Iteration   2: 189196,794 ops/s
[info] # Warmup Iteration   3: 193045,364 ops/s
[info] # Warmup Iteration   4: 195052,927 ops/s
[info] # Warmup Iteration   5: 194989,560 ops/s
[info] Iteration   1: 194381,856 ops/s
[info]                  ·gc.alloc.rate:                   843,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              6823,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10775,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,506 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 195854,257 ops/s
[info]                  ·gc.alloc.rate:               823,259 MB/sec
[info]                  ·gc.alloc.rate.norm:          6612,373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5350,697 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 194678,996 ops/s
[info]                  ·gc.alloc.rate:                   822,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              6650,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5390,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 171837,091 ops/s
[info]                  ·gc.alloc.rate:               724,734 MB/sec
[info]                  ·gc.alloc.rate.norm:          6635,318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6107,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 194498,989 ops/s
[info]                  ·gc.alloc.rate:                   817,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              6610,427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5400,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   190250,238 ±(99.9%) 39700,169 ops/s [Average]
[info]   (min, avg, max) = (171837,091, 190250,238, 195854,257), stdev = 10310,008
[info]   CI (99.9%): [150550,069, 229950,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   806,268 ±(99.9%) 179,554 MB/sec [Average]
[info]   (min, avg, max) = (724,734, 806,268, 843,182), stdev = 46,630
[info]   CI (99.9%): [626,715, 985,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6666,520 ±(99.9%) 344,860 B/op [Average]
[info]   (min, avg, max) = (6610,427, 6666,520, 6823,926), stdev = 89,559
[info]   CI (99.9%): [6321,660, 7011,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   799,891 ±(99.9%) 1144,318 MB/sec [Average]
[info]   (min, avg, max) = (666,177, 799,891, 1331,494), stdev = 297,176
[info]   CI (99.9%): [≈ 0, 1944,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6605,055 ±(99.9%) 9059,585 B/op [Average]
[info]   (min, avg, max) = (5350,697, 6605,055, 10775,867), stdev = 2352,746
[info]   CI (99.9%): [≈ 0, 15664,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,168 ±(99.9%) 0,795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,168, 0,506), stdev = 0,206
[info]   CI (99.9%): [≈ 0, 0,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 6,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,73% complete, ETA 00:21:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125314,227 ops/s
[info] # Warmup Iteration   2: 304404,377 ops/s
[info] # Warmup Iteration   3: 305491,533 ops/s
[info] # Warmup Iteration   4: 302354,209 ops/s
[info] # Warmup Iteration   5: 309126,118 ops/s
[info] Iteration   1: 308262,038 ops/s
[info]                  ·gc.alloc.rate:                   1134,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              5791,783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6856,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 307548,866 ops/s
[info]                  ·gc.alloc.rate:                   1138,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              5825,346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6875,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 309249,192 ops/s
[info]                  ·gc.alloc.rate:               1128,140 MB/sec
[info]                  ·gc.alloc.rate.norm:          5739,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3420,294 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 307347,917 ops/s
[info]                  ·gc.alloc.rate:               1147,751 MB/sec
[info]                  ·gc.alloc.rate.norm:          5875,123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6883,401 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 298566,530 ops/s
[info]                  ·gc.alloc.rate:                   1100,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              5801,448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7089,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,436 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   306194,909 ±(99.9%) 16668,938 ops/s [Average]
[info]   (min, avg, max) = (298566,530, 306194,909, 309249,192), stdev = 4328,870
[info]   CI (99.9%): [289525,971, 322863,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1130,091 ±(99.9%) 68,415 MB/sec [Average]
[info]   (min, avg, max) = (1100,952, 1130,091, 1147,751), stdev = 17,767
[info]   CI (99.9%): [1061,677, 1198,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5806,552 ±(99.9%) 191,130 B/op [Average]
[info]   (min, avg, max) = (5739,057, 5806,552, 5875,123), stdev = 49,636
[info]   CI (99.9%): [5615,421, 5997,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209,988 ±(99.9%) 1157,343 MB/sec [Average]
[info]   (min, avg, max) = (672,335, 1209,988, 1345,447), stdev = 300,558
[info]   CI (99.9%): [52,645, 2367,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6225,008 ±(99.9%) 6048,429 B/op [Average]
[info]   (min, avg, max) = (3420,294, 6225,008, 7089,813), stdev = 1570,758
[info]   CI (99.9%): [176,579, 12273,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,721 ±(99.9%) 5,981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,721, 3,499), stdev = 1,553
[info]   CI (99.9%): [≈ 0, 6,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,794 ±(99.9%) 31,523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,794, 18,436), stdev = 8,186
[info]   CI (99.9%): [≈ 0, 35,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,94% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14141,775 ops/s
[info] # Warmup Iteration   2: 69398,591 ops/s
[info] # Warmup Iteration   3: 75574,849 ops/s
[info] # Warmup Iteration   4: 76482,484 ops/s
[info] # Warmup Iteration   5: 77346,339 ops/s
[info] Iteration   1: 77787,888 ops/s
[info]                  ·gc.alloc.rate:               2949,536 MB/sec
[info]                  ·gc.alloc.rate.norm:          59652,399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2668,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53963,193 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 77905,769 ops/s
[info]                  ·gc.alloc.rate:                   2941,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              59410,767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53921,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,421 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 78112,776 ops/s
[info]                  ·gc.alloc.rate:               2965,065 MB/sec
[info]                  ·gc.alloc.rate.norm:          59719,146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53926,612 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 77635,102 ops/s
[info]                  ·gc.alloc.rate:               2974,329 MB/sec
[info]                  ·gc.alloc.rate.norm:          60271,811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68081,546 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 78047,560 ops/s
[info]                  ·gc.alloc.rate:               2962,772 MB/sec
[info]                  ·gc.alloc.rate.norm:          59723,831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54375,184 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   77897,819 ±(99.9%) 745,170 ops/s [Average]
[info]   (min, avg, max) = (77635,102, 77897,819, 78112,776), stdev = 193,518
[info]   CI (99.9%): [77152,649, 78642,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2958,736 ±(99.9%) 49,650 MB/sec [Average]
[info]   (min, avg, max) = (2941,976, 2958,736, 2974,329), stdev = 12,894
[info]   CI (99.9%): [2909,086, 3008,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59755,591 ±(99.9%) 1215,201 B/op [Average]
[info]   (min, avg, max) = (59410,767, 59755,591, 60271,811), stdev = 315,584
[info]   CI (99.9%): [58540,390, 60970,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2814,606 ±(99.9%) 1174,260 MB/sec [Average]
[info]   (min, avg, max) = (2668,231, 2814,606, 3359,728), stdev = 304,952
[info]   CI (99.9%): [1640,346, 3988,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56853,676 ±(99.9%) 24179,945 B/op [Average]
[info]   (min, avg, max) = (53921,844, 56853,676, 68081,546), stdev = 6279,455
[info]   CI (99.9%): [32673,731, 81033,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,421), stdev = 0,188
[info]   CI (99.9%): [≈ 0, 0,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,14% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83525,241 ops/s
[info] # Warmup Iteration   2: 166790,604 ops/s
[info] # Warmup Iteration   3: 175603,098 ops/s
[info] # Warmup Iteration   4: 175456,207 ops/s
[info] # Warmup Iteration   5: 175992,753 ops/s
[info] Iteration   1: 176147,739 ops/s
[info]                  ·gc.alloc.rate:               1484,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          13260,995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12010,253 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 175830,594 ops/s
[info]                  ·gc.alloc.rate:                   1493,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12043,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,559 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 175929,795 ops/s
[info]                  ·gc.alloc.rate:                   1469,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              13140,842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12037,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30,354 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 176524,806 ops/s
[info]                  ·gc.alloc.rate:                   1484,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              13232,808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11960,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 175750,519 ops/s
[info]                  ·gc.alloc.rate:               1507,928 MB/sec
[info]                  ·gc.alloc.rate.norm:          13498,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17997,234 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   176036,691 ±(99.9%) 1196,778 ops/s [Average]
[info]   (min, avg, max) = (175750,519, 176036,691, 176524,806), stdev = 310,799
[info]   CI (99.9%): [174839,913, 177233,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1488,028 ±(99.9%) 54,098 MB/sec [Average]
[info]   (min, avg, max) = (1469,453, 1488,028, 1507,928), stdev = 14,049
[info]   CI (99.9%): [1433,930, 1542,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   13298,736 ±(99.9%) 524,910 B/op [Average]
[info]   (min, avg, max) = (13140,842, 13298,736, 13498,151), stdev = 136,317
[info]   CI (99.9%): [12773,826, 13823,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477,871 ±(99.9%) 1146,620 MB/sec [Average]
[info]   (min, avg, max) = (1342,005, 1477,871, 2010,537), stdev = 297,774
[info]   CI (99.9%): [331,251, 2624,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13209,830 ±(99.9%) 10306,019 B/op [Average]
[info]   (min, avg, max) = (11960,649, 13209,830, 17997,234), stdev = 2676,440
[info]   CI (99.9%): [2903,810, 23515,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,741 ±(99.9%) 5,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,741, 3,394), stdev = 1,487
[info]   CI (99.9%): [≈ 0, 6,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,628 ±(99.9%) 51,192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,628, 30,354), stdev = 13,294
[info]   CI (99.9%): [≈ 0, 57,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,600, 5,000), stdev = 1,673
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,34% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105223,052 ops/s
[info] # Warmup Iteration   2: 217582,195 ops/s
[info] # Warmup Iteration   3: 225907,351 ops/s
[info] # Warmup Iteration   4: 226275,464 ops/s
[info] # Warmup Iteration   5: 224463,004 ops/s
[info] Iteration   1: 223655,116 ops/s
[info]                  ·gc.alloc.rate:               1573,087 MB/sec
[info]                  ·gc.alloc.rate.norm:          11065,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14163,611 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Iteration   2: 225949,076 ops/s
[info]                  ·gc.alloc.rate:                   1584,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              11033,746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9351,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,750 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 226165,294 ops/s
[info]                  ·gc.alloc.rate:                   1589,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              11056,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9331,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 225017,736 ops/s
[info]                  ·gc.alloc.rate:               1604,327 MB/sec
[info]                  ·gc.alloc.rate.norm:          11216,845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14037,605 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 225864,311 ops/s
[info]                  ·gc.alloc.rate:               1572,230 MB/sec
[info]                  ·gc.alloc.rate.norm:          10951,388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9320,345 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   225330,307 ±(99.9%) 3978,110 ops/s [Average]
[info]   (min, avg, max) = (223655,116, 225330,307, 226165,294), stdev = 1033,102
[info]   CI (99.9%): [221352,197, 229308,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1584,725 ±(99.9%) 50,861 MB/sec [Average]
[info]   (min, avg, max) = (1572,230, 1584,725, 1604,327), stdev = 13,208
[info]   CI (99.9%): [1533,863, 1635,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11064,790 ±(99.9%) 370,445 B/op [Average]
[info]   (min, avg, max) = (10951,388, 11064,790, 11216,845), stdev = 96,203
[info]   CI (99.9%): [10694,345, 11435,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608,754 ±(99.9%) 1412,643 MB/sec [Average]
[info]   (min, avg, max) = (1338,070, 1608,754, 2013,458), stdev = 366,859
[info]   CI (99.9%): [196,111, 3021,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11240,922 ±(99.9%) 10053,758 B/op [Average]
[info]   (min, avg, max) = (9320,345, 11240,922, 14163,611), stdev = 2610,929
[info]   CI (99.9%): [1187,164, 21294,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 5,208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,124), stdev = 1,353
[info]   CI (99.9%): [≈ 0, 5,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,393 ±(99.9%) 36,268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,393, 21,750), stdev = 9,419
[info]   CI (99.9%): [≈ 0, 41,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,400, 8,000), stdev = 2,608
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,54% complete, ETA 00:20:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243770,154 ops/s
[info] # Warmup Iteration   2: 542848,345 ops/s
[info] # Warmup Iteration   3: 552737,585 ops/s
[info] # Warmup Iteration   4: 507879,514 ops/s
[info] # Warmup Iteration   5: 549846,191 ops/s
[info] Iteration   1: 551097,981 ops/s
[info]                  ·gc.alloc.rate:                   450,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              1286,983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1461,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 556935,692 ops/s
[info]                  ·gc.alloc.rate:      438,979 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 555836,318 ops/s
[info]                  ·gc.alloc.rate:               451,612 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278,199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1885,294 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 560131,546 ops/s
[info]                  ·gc.alloc.rate:                   457,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1285,653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1870,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 559012,489 ops/s
[info]                  ·gc.alloc.rate:      440,584 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   556602,805 ±(99.9%) 13512,960 ops/s [Average]
[info]   (min, avg, max) = (551097,981, 556602,805, 560131,546), stdev = 3509,273
[info]   CI (99.9%): [543089,845, 570115,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   447,946 ±(99.9%) 30,564 MB/sec [Average]
[info]   (min, avg, max) = (438,979, 447,946, 457,724), stdev = 7,937
[info]   CI (99.9%): [417,382, 478,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1266,167 ±(99.9%) 92,878 B/op [Average]
[info]   (min, avg, max) = (1240,001, 1266,167, 1286,983), stdev = 24,120
[info]   CI (99.9%): [1173,289, 1359,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368,796 ±(99.9%) 1318,857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368,796, 666,110), stdev = 342,503
[info]   CI (99.9%): [≈ 0, 1687,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1043,433 ±(99.9%) 3725,983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1043,433, 1885,294), stdev = 967,626
[info]   CI (99.9%): [≈ 0, 4769,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,059 ±(99.9%) 0,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,059, 0,175), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,643
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,74% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512365,632 ops/s
[info] # Warmup Iteration   2: 691250,364 ops/s
[info] # Warmup Iteration   3: 708514,222 ops/s
[info] # Warmup Iteration   4: 701328,973 ops/s
[info] # Warmup Iteration   5: 708322,974 ops/s
[info] Iteration   1: 711171,873 ops/s
[info]                  ·gc.alloc.rate:      383,325 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 706166,500 ops/s
[info]                  ·gc.alloc.rate:               404,553 MB/sec
[info]                  ·gc.alloc.rate.norm:          901,303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1140,163 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 710109,744 ops/s
[info]                  ·gc.alloc.rate:               403,497 MB/sec
[info]                  ·gc.alloc.rate.norm:          893,942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1485,946 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 711757,158 ops/s
[info]                  ·gc.alloc.rate:      383,636 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 706353,124 ops/s
[info]                  ·gc.alloc.rate:               398,637 MB/sec
[info]                  ·gc.alloc.rate.norm:          887,901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1493,895 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   709111,680 ±(99.9%) 10282,516 ops/s [Average]
[info]   (min, avg, max) = (706166,500, 709111,680, 711757,158), stdev = 2670,337
[info]   CI (99.9%): [698829,163, 719394,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   394,730 ±(99.9%) 40,467 MB/sec [Average]
[info]   (min, avg, max) = (383,325, 394,730, 404,553), stdev = 10,509
[info]   CI (99.9%): [354,263, 435,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   875,829 ±(99.9%) 99,514 B/op [Average]
[info]   (min, avg, max) = (848,001, 875,829, 901,303), stdev = 25,843
[info]   CI (99.9%): [776,315, 975,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370,637 ±(99.9%) 1326,583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,637, 670,710), stdev = 344,509
[info]   CI (99.9%): [≈ 0, 1697,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   824,001 ±(99.9%) 2948,222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 824,001, 1493,895), stdev = 765,644
[info]   CI (99.9%): [≈ 0, 3772,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,94% complete, ETA 00:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527015,597 ops/s
[info] # Warmup Iteration   2: 739164,186 ops/s
[info] # Warmup Iteration   3: 766561,339 ops/s
[info] # Warmup Iteration   4: 765408,845 ops/s
[info] # Warmup Iteration   5: 763333,557 ops/s
[info] Iteration   1: 767118,100 ops/s
[info]                  ·gc.alloc.rate:      7,802 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 762601,639 ops/s
[info]                  ·gc.alloc.rate:      7,756 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 758565,742 ops/s
[info]                  ·gc.alloc.rate:      7,715 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 764518,261 ops/s
[info]                  ·gc.alloc.rate:      7,775 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759736,117 ops/s
[info]                  ·gc.alloc.rate:      7,727 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   762507,972 ±(99.9%) 13412,141 ops/s [Average]
[info]   (min, avg, max) = (758565,742, 762507,972, 767118,100), stdev = 3483,090
[info]   CI (99.9%): [749095,831, 775920,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,755 ±(99.9%) 0,136 MB/sec [Average]
[info]   (min, avg, max) = (7,715, 7,755, 7,802), stdev = 0,035
[info]   CI (99.9%): [7,619, 7,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,14% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12650,184 ops/s
[info] # Warmup Iteration   2: 38525,401 ops/s
[info] # Warmup Iteration   3: 39225,166 ops/s
[info] # Warmup Iteration   4: 39055,580 ops/s
[info] # Warmup Iteration   5: 38832,396 ops/s
[info] Iteration   1: 39177,698 ops/s
[info]                  ·gc.alloc.rate:                   2144,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              86098,263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80836,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159,713 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 38739,474 ops/s
[info]                  ·gc.alloc.rate:                   2106,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              85534,260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81538,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,846 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 39416,547 ops/s
[info]                  ·gc.alloc.rate:                   2132,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              85123,655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80044,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,831 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 39260,772 ops/s
[info]                  ·gc.alloc.rate:                   2150,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              86154,204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80438,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,669 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 39228,775 ops/s
[info]                  ·gc.alloc.rate:               2135,944 MB/sec
[info]                  ·gc.alloc.rate.norm:          85664,665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80655,581 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   39164,653 ±(99.9%) 977,465 ops/s [Average]
[info]   (min, avg, max) = (38739,474, 39164,653, 39416,547), stdev = 253,845
[info]   CI (99.9%): [38187,188, 40142,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2133,830 ±(99.9%) 64,853 MB/sec [Average]
[info]   (min, avg, max) = (2106,259, 2133,830, 2150,061), stdev = 16,842
[info]   CI (99.9%): [2068,977, 2198,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85715,010 ±(99.9%) 1638,991 B/op [Average]
[info]   (min, avg, max) = (85123,655, 85715,010, 86154,204), stdev = 425,641
[info]   CI (99.9%): [84076,019, 87354,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008,988 ±(99.9%) 11,640 MB/sec [Average]
[info]   (min, avg, max) = (2005,535, 2008,988, 2013,071), stdev = 3,023
[info]   CI (99.9%): [1997,349, 2020,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80702,847 ±(99.9%) 2127,030 B/op [Average]
[info]   (min, avg, max) = (80044,883, 80702,847, 81538,170), stdev = 552,383
[info]   CI (99.9%): [78575,816, 82829,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,812 ±(99.9%) 6,814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,812, 3,977), stdev = 1,769
[info]   CI (99.9%): [≈ 0, 7,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32,612 ±(99.9%) 273,605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,612, 159,713), stdev = 71,054
[info]   CI (99.9%): [≈ 0, 306,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 6,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,34% complete, ETA 00:19:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73604,961 ops/s
[info] # Warmup Iteration   2: 134417,705 ops/s
[info] # Warmup Iteration   3: 137023,177 ops/s
[info] # Warmup Iteration   4: 138121,389 ops/s
[info] # Warmup Iteration   5: 138305,726 ops/s
[info] Iteration   1: 137542,541 ops/s
[info]                  ·gc.alloc.rate:               1464,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          16756,701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15389,074 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 138330,971 ops/s
[info]                  ·gc.alloc.rate:               1475,528 MB/sec
[info]                  ·gc.alloc.rate.norm:          16781,570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15309,117 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 137583,508 ops/s
[info]                  ·gc.alloc.rate:                   1480,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              16931,555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15392,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,910 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 138495,075 ops/s
[info]                  ·gc.alloc.rate:                   1474,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              16751,066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15261,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 138132,126 ops/s
[info]                  ·gc.alloc.rate:                   1500,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              17086,270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22921,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   138016,844 ±(99.9%) 1671,169 ops/s [Average]
[info]   (min, avg, max) = (137542,541, 138016,844, 138495,075), stdev = 433,997
[info]   CI (99.9%): [136345,675, 139688,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1479,158 ±(99.9%) 49,894 MB/sec [Average]
[info]   (min, avg, max) = (1464,994, 1479,158, 1500,012), stdev = 12,957
[info]   CI (99.9%): [1429,264, 1529,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16861,432 ±(99.9%) 561,311 B/op [Average]
[info]   (min, avg, max) = (16751,066, 16861,432, 17086,270), stdev = 145,771
[info]   CI (99.9%): [16300,121, 17422,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1478,653 ±(99.9%) 1148,641 MB/sec [Average]
[info]   (min, avg, max) = (1343,442, 1478,653, 2012,262), stdev = 298,298
[info]   CI (99.9%): [330,012, 2627,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16854,618 ±(99.9%) 13060,500 B/op [Average]
[info]   (min, avg, max) = (15261,043, 16854,618, 22921,187), stdev = 3391,770
[info]   CI (99.9%): [3794,118, 29915,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,712 ±(99.9%) 5,439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,712, 3,228), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8,139 ±(99.9%) 62,202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,139, 36,910), stdev = 16,154
[info]   CI (99.9%): [≈ 0, 70,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,54% complete, ETA 00:19:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24901,496 ops/s
[info] # Warmup Iteration   2: 86047,219 ops/s
[info] # Warmup Iteration   3: 87216,464 ops/s
[info] # Warmup Iteration   4: 90191,154 ops/s
[info] # Warmup Iteration   5: 89138,520 ops/s
[info] Iteration   1: 90951,104 ops/s
[info]                  ·gc.alloc.rate:                   3391,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              58657,673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57891,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,161 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 91272,291 ops/s
[info]                  ·gc.alloc.rate:                   3444,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              59368,624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57857,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,359 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 89829,418 ops/s
[info]                  ·gc.alloc.rate:               3394,392 MB/sec
[info]                  ·gc.alloc.rate.norm:          59449,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58972,626 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 88342,630 ops/s
[info]                  ·gc.alloc.rate:               3312,952 MB/sec
[info]                  ·gc.alloc.rate.norm:          58998,975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48120,502 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 90050,754 ops/s
[info]                  ·gc.alloc.rate:               3402,321 MB/sec
[info]                  ·gc.alloc.rate.norm:          59445,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59160,382 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   90089,239 ±(99.9%) 4416,528 ops/s [Average]
[info]   (min, avg, max) = (88342,630, 90089,239, 91272,291), stdev = 1146,958
[info]   CI (99.9%): [85672,712, 94505,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3388,984 ±(99.9%) 182,954 MB/sec [Average]
[info]   (min, avg, max) = (3312,952, 3388,984, 3444,093), stdev = 47,512
[info]   CI (99.9%): [3206,030, 3571,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59183,866 ±(99.9%) 1339,058 B/op [Average]
[info]   (min, avg, max) = (58657,673, 59183,866, 59449,041), stdev = 347,749
[info]   CI (99.9%): [57844,808, 60522,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3231,723 ±(99.9%) 1141,437 MB/sec [Average]
[info]   (min, avg, max) = (2702,097, 3231,723, 3386,030), stdev = 296,428
[info]   CI (99.9%): [2090,286, 4373,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56400,510 ±(99.9%) 17972,359 B/op [Average]
[info]   (min, avg, max) = (48120,502, 56400,510, 59160,382), stdev = 4667,365
[info]   CI (99.9%): [38428,151, 74372,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,504 ±(99.9%) 3,617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,504, 2,161), stdev = 0,939
[info]   CI (99.9%): [≈ 0, 4,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 6,000), stdev = 1,095
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,74% complete, ETA 00:18:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46362,464 ops/s
[info] # Warmup Iteration   2: 153263,741 ops/s
[info] # Warmup Iteration   3: 155870,407 ops/s
[info] # Warmup Iteration   4: 157851,613 ops/s
[info] # Warmup Iteration   5: 153651,275 ops/s
[info] Iteration   1: 158600,495 ops/s
[info]                  ·gc.alloc.rate:                   2112,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              20955,115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26421,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 158423,310 ops/s
[info]                  ·gc.alloc.rate:               2102,939 MB/sec
[info]                  ·gc.alloc.rate.norm:          20883,462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19826,656 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 158499,483 ops/s
[info]                  ·gc.alloc.rate:               2090,692 MB/sec
[info]                  ·gc.alloc.rate.norm:          20752,591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19853,656 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 158766,462 ops/s
[info]                  ·gc.alloc.rate:                   2093,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              20746,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19865,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 159285,868 ops/s
[info]                  ·gc.alloc.rate:               2127,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          21015,786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19863,433 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   158715,124 ±(99.9%) 1324,393 ops/s [Average]
[info]   (min, avg, max) = (158423,310, 158715,124, 159285,868), stdev = 343,941
[info]   CI (99.9%): [157390,731, 160039,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2105,492 ±(99.9%) 58,098 MB/sec [Average]
[info]   (min, avg, max) = (2090,692, 2105,492, 2127,749), stdev = 15,088
[info]   CI (99.9%): [2047,394, 2163,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20870,599 ±(99.9%) 462,992 B/op [Average]
[info]   (min, avg, max) = (20746,042, 20870,599, 21015,786), stdev = 120,238
[info]   CI (99.9%): [20407,608, 21333,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2135,199 ±(99.9%) 1137,448 MB/sec [Average]
[info]   (min, avg, max) = (1996,520, 2135,199, 2663,522), stdev = 295,392
[info]   CI (99.9%): [997,750, 3272,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21166,117 ±(99.9%) 11312,696 B/op [Average]
[info]   (min, avg, max) = (19826,656, 21166,117, 26421,468), stdev = 2937,871
[info]   CI (99.9%): [9853,421, 32478,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,083 ±(99.9%) 0,435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,207), stdev = 0,113
[info]   CI (99.9%): [≈ 0, 0,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,94% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426380,130 ops/s
[info] # Warmup Iteration   2: 692263,666 ops/s
[info] # Warmup Iteration   3: 717332,348 ops/s
[info] # Warmup Iteration   4: 725067,160 ops/s
[info] # Warmup Iteration   5: 726617,218 ops/s
[info] Iteration   1: 717864,107 ops/s
[info]                  ·gc.alloc.rate:                   1952,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              4278,383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4425,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,526 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 729452,154 ops/s
[info]                  ·gc.alloc.rate:                   1984,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4344,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 727580,156 ops/s
[info]                  ·gc.alloc.rate:                   1939,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              4194,931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2902,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 733528,332 ops/s
[info]                  ·gc.alloc.rate:                   1996,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4281,105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4318,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 732158,679 ops/s
[info]                  ·gc.alloc.rate:               1992,951 MB/sec
[info]                  ·gc.alloc.rate.norm:          4282,365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4332,456 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   728116,685 ±(99.9%) 23800,152 ops/s [Average]
[info]   (min, avg, max) = (717864,107, 728116,685, 733528,332), stdev = 6180,824
[info]   CI (99.9%): [704316,534, 751916,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1973,096 ±(99.9%) 97,947 MB/sec [Average]
[info]   (min, avg, max) = (1939,965, 1973,096, 1996,063), stdev = 25,436
[info]   CI (99.9%): [1875,149, 2071,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4263,361 ±(99.9%) 147,407 B/op [Average]
[info]   (min, avg, max) = (4194,931, 4263,361, 4282,365), stdev = 38,281
[info]   CI (99.9%): [4115,954, 4410,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1881,093 ±(99.9%) 1160,349 MB/sec [Average]
[info]   (min, avg, max) = (1342,054, 1881,093, 2019,030), stdev = 301,339
[info]   CI (99.9%): [720,744, 3041,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4064,649 ±(99.9%) 2507,686 B/op [Average]
[info]   (min, avg, max) = (2902,024, 4064,649, 4425,074), stdev = 651,238
[info]   CI (99.9%): [1556,963, 6572,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,625 ±(99.9%) 5,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,625, 2,978), stdev = 1,316
[info]   CI (99.9%): [≈ 0, 5,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,368 ±(99.9%) 11,108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,368, 6,526), stdev = 2,885
[info]   CI (99.9%): [≈ 0, 12,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 7,000), stdev = 1,949
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,14% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 833,503 ops/s
[info] # Warmup Iteration   2: 7088,390 ops/s
[info] # Warmup Iteration   3: 18296,840 ops/s
[info] # Warmup Iteration   4: 21339,142 ops/s
[info] # Warmup Iteration   5: 21752,458 ops/s
[info] Iteration   1: 21714,987 ops/s
[info]                  ·gc.alloc.rate:                   2847,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              206272,757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193889,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120,698 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 21488,541 ops/s
[info]                  ·gc.alloc.rate:                   2894,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              211899,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245191,355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69,366 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 21580,072 ops/s
[info]                  ·gc.alloc.rate:                   2907,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              211977,105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195691,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28,842 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 21804,388 ops/s
[info]                  ·gc.alloc.rate:                   2869,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              207077,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194146,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,502 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 21037,110 ops/s
[info]                  ·gc.alloc.rate:               2752,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          205839,756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201697,147 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   21525,020 ±(99.9%) 1149,647 ops/s [Average]
[info]   (min, avg, max) = (21037,110, 21525,020, 21804,388), stdev = 298,560
[info]   CI (99.9%): [20375,372, 22674,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2854,302 ±(99.9%) 236,754 MB/sec [Average]
[info]   (min, avg, max) = (2752,474, 2854,302, 2907,713), stdev = 61,484
[info]   CI (99.9%): [2617,547, 3091,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   208613,280 ±(99.9%) 11812,087 B/op [Average]
[info]   (min, avg, max) = (205839,756, 208613,280, 211977,105), stdev = 3067,561
[info]   CI (99.9%): [196801,193, 220425,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2819,467 ±(99.9%) 1140,513 MB/sec [Average]
[info]   (min, avg, max) = (2676,172, 2819,467, 3349,123), stdev = 296,188
[info]   CI (99.9%): [1678,954, 3959,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   206123,160 ±(99.9%) 84972,804 B/op [Average]
[info]   (min, avg, max) = (193889,277, 206123,160, 245191,355), stdev = 22067,167
[info]   CI (99.9%): [121150,356, 291095,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,606 ±(99.9%) 2,719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,606, 1,666), stdev = 0,706
[info]   CI (99.9%): [≈ 0, 3,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44,082 ±(99.9%) 197,266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44,082, 120,698), stdev = 51,229
[info]   CI (99.9%): [≈ 0, 241,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 7,000), stdev = 1,140
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,35% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26492,398 ops/s
[info] # Warmup Iteration   2: 84153,004 ops/s
[info] # Warmup Iteration   3: 89061,217 ops/s
[info] # Warmup Iteration   4: 89713,326 ops/s
[info] # Warmup Iteration   5: 88617,713 ops/s
[info] Iteration   1: 90139,388 ops/s
[info]                  ·gc.alloc.rate:                   3665,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              63970,217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58454,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 90453,742 ops/s
[info]                  ·gc.alloc.rate:                   3681,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              64028,213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58454,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,362 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 89710,925 ops/s
[info]                  ·gc.alloc.rate:               3681,359 MB/sec
[info]                  ·gc.alloc.rate.norm:          64558,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4047,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70980,961 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 90050,410 ops/s
[info]                  ·gc.alloc.rate:               3667,411 MB/sec
[info]                  ·gc.alloc.rate.norm:          64071,289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59123,486 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 89808,385 ops/s
[info]                  ·gc.alloc.rate:               3658,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          64093,830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3391,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59417,011 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   90032,570 ±(99.9%) 1127,307 ops/s [Average]
[info]   (min, avg, max) = (89710,925, 90032,570, 90453,742), stdev = 292,758
[info]   CI (99.9%): [88905,263, 91159,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3670,768 ±(99.9%) 38,935 MB/sec [Average]
[info]   (min, avg, max) = (3658,778, 3670,768, 3681,359), stdev = 10,111
[info]   CI (99.9%): [3631,834, 3709,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   64144,327 ±(99.9%) 908,948 B/op [Average]
[info]   (min, avg, max) = (63970,217, 64144,327, 64558,089), stdev = 236,051
[info]   CI (99.9%): [63235,379, 65053,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3506,689 ±(99.9%) 1166,284 MB/sec [Average]
[info]   (min, avg, max) = (3349,059, 3506,689, 4047,617), stdev = 302,880
[info]   CI (99.9%): [2340,405, 4672,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61286,091 ±(99.9%) 20931,770 B/op [Average]
[info]   (min, avg, max) = (58454,473, 61286,091, 70980,961), stdev = 5435,914
[info]   CI (99.9%): [40354,321, 82217,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,145 ±(99.9%) 0,765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,145, 0,363), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 0,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,55% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134322,739 ops/s
[info] # Warmup Iteration   2: 309687,636 ops/s
[info] # Warmup Iteration   3: 326150,737 ops/s
[info] # Warmup Iteration   4: 325770,182 ops/s
[info] # Warmup Iteration   5: 329278,367 ops/s
[info] Iteration   1: 328956,453 ops/s
[info]                  ·gc.alloc.rate:                   1570,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              7512,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6393,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 319807,543 ops/s
[info]                  ·gc.alloc.rate:                   1553,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              7641,473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9876,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,929 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 326013,579 ops/s
[info]                  ·gc.alloc.rate:                   1556,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              7510,345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6452,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,764 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 314559,973 ops/s
[info]                  ·gc.alloc.rate:                        1516,492 MB/sec
[info]                  ·gc.alloc.rate.norm:                   7584,996 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0,018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0,088 B/op
[info]                  ·gc.churn.Metaspace:                   0,053 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0,263 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1347,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          6742,252 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2,490 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             12,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      0,833 B/op
[info]                  ·gc.count:                             4,000 counts
[info]                  ·gc.time:                              27,000 ms
[info] Iteration   5: 316793,170 ops/s
[info]                  ·gc.alloc.rate:                   1523,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              7566,793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6625,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   321226,144 ±(99.9%) 23484,093 ops/s [Average]
[info]   (min, avg, max) = (314559,973, 321226,144, 328956,453), stdev = 6098,744
[info]   CI (99.9%): [297742,051, 344710,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1544,113 ±(99.9%) 88,810 MB/sec [Average]
[info]   (min, avg, max) = (1516,492, 1544,113, 1570,695), stdev = 23,064
[info]   CI (99.9%): [1455,303, 1632,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7563,139 ±(99.9%) 211,090 B/op [Average]
[info]   (min, avg, max) = (7510,345, 7563,139, 7641,473), stdev = 54,819
[info]   CI (99.9%): [7352,049, 7774,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0,004 ±(99.9%) 0,030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0,018 ±(99.9%) 0,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,088), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.Metaspace":
[info]   0,011 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,053), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm":
[info]   0,053 ±(99.9%) 0,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,053, 0,263), stdev = 0,118
[info]   CI (99.9%): [≈ 0, 0,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472,722 ±(99.9%) 1151,807 MB/sec [Average]
[info]   (min, avg, max) = (1333,996, 1472,722, 2007,719), stdev = 299,121
[info]   CI (99.9%): [320,915, 2624,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7217,861 ±(99.9%) 5746,863 B/op [Average]
[info]   (min, avg, max) = (6393,251, 7217,861, 9876,113), stdev = 1492,442
[info]   CI (99.9%): [1470,998, 12964,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Old_Gen":
[info]   0,498 ±(99.9%) 4,288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,498, 2,490), stdev = 1,113
[info]   CI (99.9%): [≈ 0, 4,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   2,491 ±(99.9%) 21,445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,491, 12,453), stdev = 5,569
[info]   CI (99.9%): [≈ 0, 23,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,885 ±(99.9%) 6,004 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,885, 3,645), stdev = 1,559
[info]   CI (99.9%): [≈ 0, 6,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,346 ±(99.9%) 29,537 B/op [Average]
[info]   (min, avg, max) = (0,100, 4,346, 17,929), stdev = 7,671
[info]   CI (99.9%): [≈ 0, 33,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 4,000), stdev = 0,894
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   46,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 9,200, 27,000), stdev = 10,232
[info]   CI (99.9%): [46,000, 46,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,75% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 784223,109 ops/s
[info] # Warmup Iteration   2: 1375625,141 ops/s
[info] # Warmup Iteration   3: 1373388,005 ops/s
[info] # Warmup Iteration   4: 1353650,124 ops/s
[info] # Warmup Iteration   5: 1366221,825 ops/s
[info] Iteration   1: 1368513,865 ops/s
[info]                  ·gc.alloc.rate:               710,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          817,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 771,420 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1372601,616 ops/s
[info]                  ·gc.alloc.rate:               717,716 MB/sec
[info]                  ·gc.alloc.rate.norm:          822,640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 769,889 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1352521,738 ops/s
[info]                  ·gc.alloc.rate:                   696,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              810,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1363095,800 ops/s
[info]                  ·gc.alloc.rate:                   703,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              811,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1364848,472 ops/s
[info]                  ·gc.alloc.rate:               701,442 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 775,068 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1364316,298 ±(99.9%) 29017,517 ops/s [Average]
[info]   (min, avg, max) = (1352521,738, 1364316,298, 1372601,616), stdev = 7535,757
[info]   CI (99.9%): [1335298,781, 1393333,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   705,946 ±(99.9%) 32,276 MB/sec [Average]
[info]   (min, avg, max) = (696,329, 705,946, 717,716), stdev = 8,382
[info]   CI (99.9%): [673,670, 738,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   814,071 ±(99.9%) 22,256 B/op [Average]
[info]   (min, avg, max) = (808,610, 814,071, 822,640), stdev = 5,780
[info]   CI (99.9%): [791,814, 836,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,822 ±(99.9%) 2,123 MB/sec [Average]
[info]   (min, avg, max) = (671,025, 671,822, 672,346), stdev = 0,551
[info]   CI (99.9%): [669,699, 673,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   774,758 ±(99.9%) 17,240 B/op [Average]
[info]   (min, avg, max) = (769,889, 774,758, 781,357), stdev = 4,477
[info]   CI (99.9%): [757,518, 791,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,024), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,95% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 947055,461 ops/s
[info] # Warmup Iteration   2: 1480586,976 ops/s
[info] # Warmup Iteration   3: 1470285,791 ops/s
[info] # Warmup Iteration   4: 1476154,792 ops/s
[info] # Warmup Iteration   5: 1467682,112 ops/s
[info] Iteration   1: 1468053,039 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1472855,377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1471123,461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1472512,196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1472843,049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1471477,425 ±(99.9%) 7864,685 ops/s [Average]
[info]   (min, avg, max) = (1468053,039, 1471477,425, 1472855,377), stdev = 2042,434
[info]   CI (99.9%): [1463612,740, 1479342,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,15% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5375,119 ops/s
[info] # Warmup Iteration   2: 33775,923 ops/s
[info] # Warmup Iteration   3: 53242,935 ops/s
[info] # Warmup Iteration   4: 51291,677 ops/s
[info] # Warmup Iteration   5: 53307,116 ops/s
[info] Iteration   1: 53147,946 ops/s
[info]                  ·gc.alloc.rate:                   2871,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              84997,898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79315,339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,067 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 51227,275 ops/s
[info]                  ·gc.alloc.rate:                   2803,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              86100,591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82394,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,919 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 51160,238 ops/s
[info]                  ·gc.alloc.rate:                   2787,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              85724,871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82702,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,404 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 52920,297 ops/s
[info]                  ·gc.alloc.rate:               2893,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          86014,695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80114,138 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 53429,564 ops/s
[info]                  ·gc.alloc.rate:               2934,451 MB/sec
[info]                  ·gc.alloc.rate.norm:          86405,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79548,769 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   52377,064 ±(99.9%) 4218,080 ops/s [Average]
[info]   (min, avg, max) = (51160,238, 52377,064, 53429,564), stdev = 1095,422
[info]   CI (99.9%): [48158,984, 56595,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2858,046 ±(99.9%) 237,086 MB/sec [Average]
[info]   (min, avg, max) = (2787,765, 2858,046, 2934,451), stdev = 61,570
[info]   CI (99.9%): [2620,960, 3095,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85848,746 ±(99.9%) 2056,060 B/op [Average]
[info]   (min, avg, max) = (84997,898, 85848,746, 86405,674), stdev = 533,952
[info]   CI (99.9%): [83792,685, 87904,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2689,594 ±(99.9%) 34,347 MB/sec [Average]
[info]   (min, avg, max) = (2679,450, 2689,594, 2701,582), stdev = 8,920
[info]   CI (99.9%): [2655,247, 2723,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80815,060 ±(99.9%) 6209,331 B/op [Average]
[info]   (min, avg, max) = (79315,339, 80815,060, 82702,508), stdev = 1612,543
[info]   CI (99.9%): [74605,730, 87024,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,325 ±(99.9%) 2,238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,325, 1,354), stdev = 0,581
[info]   CI (99.9%): [≈ 0, 2,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9,678 ±(99.9%) 66,186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,678, 40,067), stdev = 17,188
[info]   CI (99.9%): [≈ 0, 75,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,35% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115404,464 ops/s
[info] # Warmup Iteration   2: 796366,170 ops/s
[info] # Warmup Iteration   3: 934889,566 ops/s
[info] # Warmup Iteration   4: 937132,509 ops/s
[info] # Warmup Iteration   5: 933468,902 ops/s
[info] Iteration   1: 934358,372 ops/s
[info]                  ·gc.alloc.rate:                   2511,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              4228,517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4512,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,648 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 938740,193 ops/s
[info]                  ·gc.alloc.rate:                   2484,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              4163,104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3361,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 932795,846 ops/s
[info]                  ·gc.alloc.rate:               2523,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          4256,119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4513,688 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 942476,032 ops/s
[info]                  ·gc.alloc.rate:               2523,179 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3357,073 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 938970,549 ops/s
[info]                  ·gc.alloc.rate:               2540,386 MB/sec
[info]                  ·gc.alloc.rate.norm:          4256,478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4503,992 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   937468,198 ±(99.9%) 14969,960 ops/s [Average]
[info]   (min, avg, max) = (932795,846, 937468,198, 942476,032), stdev = 3887,651
[info]   CI (99.9%): [922498,239, 952438,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2516,466 ±(99.9%) 80,444 MB/sec [Average]
[info]   (min, avg, max) = (2484,019, 2516,466, 2540,386), stdev = 20,891
[info]   CI (99.9%): [2436,022, 2596,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4223,246 ±(99.9%) 148,589 B/op [Average]
[info]   (min, avg, max) = (4163,104, 4223,246, 4256,478), stdev = 38,588
[info]   CI (99.9%): [4074,657, 4371,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2412,217 ±(99.9%) 1419,644 MB/sec [Average]
[info]   (min, avg, max) = (2005,734, 2412,217, 2688,109), stdev = 368,677
[info]   CI (99.9%): [992,573, 3831,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4049,786 ±(99.9%) 2427,221 B/op [Average]
[info]   (min, avg, max) = (3357,073, 4049,786, 4513,688), stdev = 630,342
[info]   CI (99.9%): [1622,565, 6477,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,200 ±(99.9%) 1,677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,200, 0,979), stdev = 0,435
[info]   CI (99.9%): [≈ 0, 1,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,337 ±(99.9%) 2,823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,337, 1,648), stdev = 0,733
[info]   CI (99.9%): [≈ 0, 3,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,55% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152996,552 ops/s
[info] # Warmup Iteration   2: 1757907,559 ops/s
[info] # Warmup Iteration   3: 2086230,623 ops/s
[info] # Warmup Iteration   4: 2079404,706 ops/s
[info] # Warmup Iteration   5: 2074677,355 ops/s
[info] Iteration   1: 2097692,125 ops/s
[info]                  ·gc.alloc.rate:                   1344,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008,119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1001,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 2070112,033 ops/s
[info]                  ·gc.alloc.rate:                   1337,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1015,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 2084315,128 ops/s
[info]                  ·gc.alloc.rate:               1331,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          1005,256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1009,474 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 2090197,919 ops/s
[info]                  ·gc.alloc.rate:                   1335,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1005,492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1007,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,393 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 2115318,642 ops/s
[info]                  ·gc.alloc.rate:               1352,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          1005,775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 992,267 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   2091527,170 ±(99.9%) 64330,807 ops/s [Average]
[info]   (min, avg, max) = (2070112,033, 2091527,170, 2115318,642), stdev = 16706,506
[info]   CI (99.9%): [2027196,363, 2155857,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1340,263 ±(99.9%) 31,183 MB/sec [Average]
[info]   (min, avg, max) = (1331,800, 1340,263, 1352,344), stdev = 8,098
[info]   CI (99.9%): [1309,080, 1371,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1008,160 ±(99.9%) 17,775 B/op [Average]
[info]   (min, avg, max) = (1005,256, 1008,160, 1016,160), stdev = 4,616
[info]   CI (99.9%): [990,385, 1025,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336,223 ±(99.9%) 5,918 MB/sec [Average]
[info]   (min, avg, max) = (1334,181, 1336,223, 1338,034), stdev = 1,537
[info]   CI (99.9%): [1330,306, 1342,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1005,158 ±(99.9%) 33,704 B/op [Average]
[info]   (min, avg, max) = (992,267, 1005,158, 1015,395), stdev = 8,753
[info]   CI (99.9%): [971,455, 1038,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,912 ±(99.9%) 7,741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,912, 4,508), stdev = 2,010
[info]   CI (99.9%): [≈ 0, 8,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,687 ±(99.9%) 5,827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,393), stdev = 1,513
[info]   CI (99.9%): [≈ 0, 6,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 5,000, 6,000), stdev = 1,732
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,75% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3531904,224 ops/s
[info] # Warmup Iteration   2: 9052162,287 ops/s
[info] # Warmup Iteration   3: 9239893,223 ops/s
[info] # Warmup Iteration   4: 9222715,519 ops/s
[info] # Warmup Iteration   5: 9256744,324 ops/s
[info] Iteration   1: 9206522,813 ops/s
[info]                  ·gc.alloc.rate:                   297,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              50,778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9237642,461 ops/s
[info]                  ·gc.alloc.rate:               301,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          51,324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87,162 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 8902187,424 ops/s
[info]                  ·gc.alloc.rate:      271,608 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9221315,292 ops/s
[info]                  ·gc.alloc.rate:                   296,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              50,512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 9252015,065 ops/s
[info]                  ·gc.alloc.rate:      282,271 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9163936,611 ±(99.9%) 567264,355 ops/s [Average]
[info]   (min, avg, max) = (8902187,424, 9163936,611, 9252015,065), stdev = 147316,752
[info]   CI (99.9%): [8596672,256, 9731200,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   289,687 ±(99.9%) 47,715 MB/sec [Average]
[info]   (min, avg, max) = (271,608, 289,687, 301,355), stdev = 12,391
[info]   CI (99.9%): [241,972, 337,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49,723 ±(99.9%) 6,160 B/op [Average]
[info]   (min, avg, max) = (48,000, 49,723, 51,324), stdev = 1,600
[info]   CI (99.9%): [43,563, 55,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,062 ±(99.9%) 1079,366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,062, 511,778), stdev = 280,308
[info]   CI (99.9%): [≈ 0, 1386,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   52,386 ±(99.9%) 184,146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52,386, 87,453), stdev = 47,822
[info]   CI (99.9%): [≈ 0, 236,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,95% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2637,117 ops/s
[info] # Warmup Iteration   2: 120761,161 ops/s
[info] # Warmup Iteration   3: 318520,309 ops/s
[info] # Warmup Iteration   4: 347583,490 ops/s
[info] # Warmup Iteration   5: 350958,226 ops/s
[info] Iteration   1: 351246,897 ops/s
[info]                  ·gc.alloc.rate:                   2289,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              10254,925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8994,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,223 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 354484,404 ops/s
[info]                  ·gc.alloc.rate:                   2314,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              10270,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11903,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,126 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 354907,292 ops/s
[info]                  ·gc.alloc.rate:               2323,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          10299,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8926,967 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 351638,040 ops/s
[info]                  ·gc.alloc.rate:               2329,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          10421,195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12035,171 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 352578,414 ops/s
[info]                  ·gc.alloc.rate:               2322,792 MB/sec
[info]                  ·gc.alloc.rate.norm:          10364,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9020,479 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   352971,009 ±(99.9%) 6369,021 ops/s [Average]
[info]   (min, avg, max) = (351246,897, 352971,009, 354907,292), stdev = 1654,014
[info]   CI (99.9%): [346601,989, 359340,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2315,830 ±(99.9%) 60,471 MB/sec [Average]
[info]   (min, avg, max) = (2289,487, 2315,830, 2329,275), stdev = 15,704
[info]   CI (99.9%): [2255,359, 2376,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10322,015 ±(99.9%) 267,503 B/op [Average]
[info]   (min, avg, max) = (10254,925, 10322,015, 10421,195), stdev = 69,470
[info]   CI (99.9%): [10054,512, 10589,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2283,150 ±(99.9%) 1416,501 MB/sec [Average]
[info]   (min, avg, max) = (2008,065, 2283,150, 2690,020), stdev = 367,861
[info]   CI (99.9%): [866,649, 3699,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10176,164 ±(99.9%) 6307,695 B/op [Average]
[info]   (min, avg, max) = (8926,967, 10176,164, 12035,171), stdev = 1638,088
[info]   CI (99.9%): [3868,468, 16483,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,329 ±(99.9%) 1,971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,329, 1,166), stdev = 0,512
[info]   CI (99.9%): [≈ 0, 2,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,470 ±(99.9%) 8,823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,470, 5,223), stdev = 2,291
[info]   CI (99.9%): [≈ 0, 10,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 5,000), stdev = 0,837
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,15% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56004,635 ops/s
[info] # Warmup Iteration   2: 1010585,244 ops/s
[info] # Warmup Iteration   3: 1171283,901 ops/s
[info] # Warmup Iteration   4: 1196636,232 ops/s
[info] # Warmup Iteration   5: 1194831,434 ops/s
[info] Iteration   1: 1192652,262 ops/s
[info]                  ·gc.alloc.rate:               1957,261 MB/sec
[info]                  ·gc.alloc.rate.norm:          2581,941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2652,976 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Iteration   2: 1199640,629 ops/s
[info]                  ·gc.alloc.rate:                   1969,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2582,202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2637,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,107 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1203885,078 ops/s
[info]                  ·gc.alloc.rate:               1973,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          2579,270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2621,342 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1196447,068 ops/s
[info]                  ·gc.alloc.rate:               1962,193 MB/sec
[info]                  ·gc.alloc.rate.norm:          2580,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2636,517 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 1201176,710 ops/s
[info]                  ·gc.alloc.rate:               1984,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          2599,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2628,900 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1198760,349 ±(99.9%) 16733,312 ops/s [Average]
[info]   (min, avg, max) = (1192652,262, 1198760,349, 1203885,078), stdev = 4345,588
[info]   CI (99.9%): [1182027,038, 1215493,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1969,374 ±(99.9%) 40,908 MB/sec [Average]
[info]   (min, avg, max) = (1957,261, 1969,374, 1984,676), stdev = 10,624
[info]   CI (99.9%): [1928,466, 2010,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2584,648 ±(99.9%) 32,711 B/op [Average]
[info]   (min, avg, max) = (2579,270, 2584,648, 2599,685), stdev = 8,495
[info]   CI (99.9%): [2551,937, 2617,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2008,049 ±(99.9%) 11,181 MB/sec [Average]
[info]   (min, avg, max) = (2005,067, 2008,049, 2011,174), stdev = 2,904
[info]   CI (99.9%): [1996,867, 2019,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2635,443 ±(99.9%) 45,331 B/op [Average]
[info]   (min, avg, max) = (2621,342, 2635,443, 2652,976), stdev = 11,772
[info]   CI (99.9%): [2590,112, 2680,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,779 ±(99.9%) 6,706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 3,894), stdev = 1,742
[info]   CI (99.9%): [≈ 0, 7,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,021 ±(99.9%) 8,794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,021, 5,107), stdev = 2,284
[info]   CI (99.9%): [≈ 0, 9,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 8,000), stdev = 2,191
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,35% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605705,735 ops/s
[info] # Warmup Iteration   2: 2738978,766 ops/s
[info] # Warmup Iteration   3: 2973491,276 ops/s
[info] # Warmup Iteration   4: 3060331,486 ops/s
[info] # Warmup Iteration   5: 3062957,751 ops/s
[info] Iteration   1: 3063025,464 ops/s
[info]                  ·gc.alloc.rate:               1348,670 MB/sec
[info]                  ·gc.alloc.rate.norm:          692,726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686,584 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 3065212,177 ops/s
[info]                  ·gc.alloc.rate:               1339,830 MB/sec
[info]                  ·gc.alloc.rate.norm:          687,687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686,779 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 3055175,021 ops/s
[info]                  ·gc.alloc.rate:                   1341,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              690,840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 3023429,070 ops/s
[info]                  ·gc.alloc.rate:                   1343,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              698,991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,081 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 3012363,197 ops/s
[info]                  ·gc.alloc.rate:               1341,124 MB/sec
[info]                  ·gc.alloc.rate.norm:          700,437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 698,159 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   3043840,986 ±(99.9%) 93546,279 ops/s [Average]
[info]   (min, avg, max) = (3012363,197, 3043840,986, 3065212,177), stdev = 24293,671
[info]   CI (99.9%): [2950294,707, 3137387,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1342,888 ±(99.9%) 13,314 MB/sec [Average]
[info]   (min, avg, max) = (1339,830, 1342,888, 1348,670), stdev = 3,458
[info]   CI (99.9%): [1329,574, 1356,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   694,136 ±(99.9%) 20,889 B/op [Average]
[info]   (min, avg, max) = (687,687, 694,136, 700,437), stdev = 5,425
[info]   CI (99.9%): [673,247, 715,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,193 ±(99.9%) 5,811 MB/sec [Average]
[info]   (min, avg, max) = (1336,712, 1338,193, 1340,047), stdev = 1,509
[info]   CI (99.9%): [1332,382, 1344,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   691,712 ±(99.9%) 21,745 B/op [Average]
[info]   (min, avg, max) = (686,584, 691,712, 698,159), stdev = 5,647
[info]   CI (99.9%): [669,967, 713,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,804 ±(99.9%) 6,876 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 3,998), stdev = 1,786
[info]   CI (99.9%): [≈ 0, 7,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,418 ±(99.9%) 3,578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,418, 2,081), stdev = 0,929
[info]   CI (99.9%): [≈ 0, 3,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,800, 6,000), stdev = 1,789
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,55% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1694739,797 ops/s
[info] # Warmup Iteration   2: 6879096,505 ops/s
[info] # Warmup Iteration   3: 7083950,902 ops/s
[info] # Warmup Iteration   4: 7164486,608 ops/s
[info] # Warmup Iteration   5: 7160727,983 ops/s
[info] Iteration   1: 7163418,972 ops/s
[info]                  ·gc.alloc.rate:               826,462 MB/sec
[info]                  ·gc.alloc.rate.norm:          181,509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 7159575,502 ops/s
[info]                  ·gc.alloc.rate:               841,240 MB/sec
[info]                  ·gc.alloc.rate.norm:          184,853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 295,069 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 7123512,669 ops/s
[info]                  ·gc.alloc.rate:                   813,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              179,611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148,348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7147947,380 ops/s
[info]                  ·gc.alloc.rate:               822,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          180,959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147,840 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 6247869,764 ops/s
[info]                  ·gc.alloc.rate:                   718,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              180,821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6968464,857 ±(99.9%) 1552293,712 ops/s [Average]
[info]   (min, avg, max) = (6247869,764, 6968464,857, 7163418,972), stdev = 403125,747
[info]   CI (99.9%): [5416171,146, 8520758,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   804,233 ±(99.9%) 189,552 MB/sec [Average]
[info]   (min, avg, max) = (718,055, 804,233, 841,240), stdev = 49,226
[info]   CI (99.9%): [614,681, 993,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181,551 ±(99.9%) 7,593 B/op [Average]
[info]   (min, avg, max) = (179,611, 181,551, 184,853), stdev = 1,972
[info]   CI (99.9%): [173,957, 189,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805,853 ±(99.9%) 1155,856 MB/sec [Average]
[info]   (min, avg, max) = (670,726, 805,853, 1342,817), stdev = 300,172
[info]   CI (99.9%): [≈ 0, 1961,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   181,574 ±(99.9%) 246,921 B/op [Average]
[info]   (min, avg, max) = (147,306, 181,574, 295,069), stdev = 64,125
[info]   CI (99.9%): [≈ 0, 428,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,005), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,76% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150406,099 ops/s
[info] # Warmup Iteration   2: 7090228,939 ops/s
[info] # Warmup Iteration   3: 7456878,789 ops/s
[info] # Warmup Iteration   4: 7482945,077 ops/s
[info] # Warmup Iteration   5: 7433598,760 ops/s
[info] Iteration   1: 7491495,873 ops/s
[info]                  ·gc.alloc.rate:               471,135 MB/sec
[info]                  ·gc.alloc.rate.norm:          98,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107,475 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 7542073,785 ops/s
[info]                  ·gc.alloc.rate:      460,225 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7496913,779 ops/s
[info]                  ·gc.alloc.rate:                   481,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              101,104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7395811,222 ops/s
[info]                  ·gc.alloc.rate:                   467,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              99,483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6426248,699 ops/s
[info]                  ·gc.alloc.rate:      392,138 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   7270508,671 ±(99.9%) 1828871,286 ops/s [Average]
[info]   (min, avg, max) = (6426248,699, 7270508,671, 7542073,785), stdev = 474952,065
[info]   CI (99.9%): [5441637,385, 9099379,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   454,590 ±(99.9%) 137,713 MB/sec [Average]
[info]   (min, avg, max) = (392,138, 454,590, 481,783), stdev = 35,764
[info]   CI (99.9%): [316,877, 592,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   98,306 ±(99.9%) 8,665 B/op [Average]
[info]   (min, avg, max) = (96,000, 98,306, 101,104), stdev = 2,250
[info]   CI (99.9%): [89,641, 106,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370,635 ±(99.9%) 1326,577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,635, 670,715), stdev = 344,508
[info]   CI (99.9%): [≈ 0, 1697,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   78,180 ±(99.9%) 280,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78,180, 142,672), stdev = 72,727
[info]   CI (99.9%): [≈ 0, 358,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 4,000), stdev = 1,673
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,96% complete, ETA 00:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5686,183 ops/s
[info] # Warmup Iteration   2: 296215,632 ops/s
[info] # Warmup Iteration   3: 477144,169 ops/s
[info] # Warmup Iteration   4: 483467,159 ops/s
[info] # Warmup Iteration   5: 483398,052 ops/s
[info] Iteration   1: 480727,084 ops/s
[info]                  ·gc.alloc.rate:                   2661,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              8711,825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8768,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,159 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 482655,991 ops/s
[info]                  ·gc.alloc.rate:                   2660,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8763,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 482131,599 ops/s
[info]                  ·gc.alloc.rate:               2672,978 MB/sec
[info]                  ·gc.alloc.rate.norm:          8722,650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8799,869 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 478701,743 ops/s
[info]                  ·gc.alloc.rate:                   2627,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              8636,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6663,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 481545,266 ops/s
[info]                  ·gc.alloc.rate:               2670,893 MB/sec
[info]                  ·gc.alloc.rate.norm:          8726,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8847,732 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   481152,337 ±(99.9%) 5953,129 ops/s [Average]
[info]   (min, avg, max) = (478701,743, 481152,337, 482655,991), stdev = 1546,009
[info]   CI (99.9%): [475199,207, 487105,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2658,806 ±(99.9%) 70,152 MB/sec [Average]
[info]   (min, avg, max) = (2627,693, 2658,806, 2672,978), stdev = 18,218
[info]   CI (99.9%): [2588,654, 2728,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8693,769 ±(99.9%) 149,180 B/op [Average]
[info]   (min, avg, max) = (8636,010, 8693,769, 8726,095), stdev = 38,741
[info]   CI (99.9%): [8544,589, 8842,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2559,998 ±(99.9%) 1147,206 MB/sec [Average]
[info]   (min, avg, max) = (2027,389, 2559,998, 2708,124), stdev = 297,926
[info]   CI (99.9%): [1412,792, 3707,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8368,580 ±(99.9%) 3673,469 B/op [Average]
[info]   (min, avg, max) = (6663,087, 8368,580, 8847,732), stdev = 953,988
[info]   CI (99.9%): [4695,111, 12042,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,354), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 0,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,259 ±(99.9%) 1,941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,259, 1,159), stdev = 0,504
[info]   CI (99.9%): [≈ 0, 2,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,16% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34853,091 ops/s
[info] # Warmup Iteration   2: 83038,739 ops/s
[info] # Warmup Iteration   3: 85539,738 ops/s
[info] # Warmup Iteration   4: 88301,174 ops/s
[info] # Warmup Iteration   5: 77421,587 ops/s
[info] Iteration   1: 88536,055 ops/s
[info]                  ·gc.alloc.rate:                   2475,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              43984,315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47699,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,172 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 90069,307 ops/s
[info]                  ·gc.alloc.rate:                   2530,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              44203,479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46770,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,546 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 88217,158 ops/s
[info]                  ·gc.alloc.rate:                   2455,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              43786,121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35843,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,371 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 86486,516 ops/s
[info]                  ·gc.alloc.rate:                   2447,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              44518,818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48826,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,379 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 87833,821 ops/s
[info]                  ·gc.alloc.rate:                   2457,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              44026,329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36160,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   88228,572 ±(99.9%) 4973,731 ops/s [Average]
[info]   (min, avg, max) = (86486,516, 88228,572, 90069,307), stdev = 1291,662
[info]   CI (99.9%): [83254,840, 93202,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2473,341 ±(99.9%) 129,694 MB/sec [Average]
[info]   (min, avg, max) = (2447,410, 2473,341, 2530,769), stdev = 33,681
[info]   CI (99.9%): [2343,647, 2603,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44103,812 ±(99.9%) 1060,455 B/op [Average]
[info]   (min, avg, max) = (43786,121, 44103,812, 44518,818), stdev = 275,397
[info]   CI (99.9%): [43043,357, 45164,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2415,002 ±(99.9%) 1408,432 MB/sec [Average]
[info]   (min, avg, max) = (2009,882, 2415,002, 2684,360), stdev = 365,765
[info]   CI (99.9%): [1006,569, 3823,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43059,959 ±(99.9%) 24971,403 B/op [Average]
[info]   (min, avg, max) = (35843,470, 43059,959, 48826,229), stdev = 6484,994
[info]   CI (99.9%): [18088,556, 68031,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,217 ±(99.9%) 1,386 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,217, 0,854), stdev = 0,360
[info]   CI (99.9%): [≈ 0, 1,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,843 ±(99.9%) 24,632 B/op [Average]
[info]   (min, avg, max) = (0,371, 3,843, 15,172), stdev = 6,397
[info]   CI (99.9%): [≈ 0, 28,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,36% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45566,335 ops/s
[info] # Warmup Iteration   2: 136634,585 ops/s
[info] # Warmup Iteration   3: 139533,750 ops/s
[info] # Warmup Iteration   4: 140534,643 ops/s
[info] # Warmup Iteration   5: 140598,814 ops/s
[info] Iteration   1: 140991,949 ops/s
[info]                  ·gc.alloc.rate:                   2237,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              24970,363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22396,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,191 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 137233,344 ops/s
[info]                  ·gc.alloc.rate:                   2206,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              25295,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30573,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,910 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 141644,151 ops/s
[info]                  ·gc.alloc.rate:                   2223,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              24692,843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22205,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 141282,233 ops/s
[info]                  ·gc.alloc.rate:               2243,315 MB/sec
[info]                  ·gc.alloc.rate.norm:          24979,886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22294,419 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 142042,795 ops/s
[info]                  ·gc.alloc.rate:               2255,477 MB/sec
[info]                  ·gc.alloc.rate.norm:          24981,539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22227,290 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   140638,894 ±(99.9%) 7485,959 ops/s [Average]
[info]   (min, avg, max) = (137233,344, 140638,894, 142042,795), stdev = 1944,080
[info]   CI (99.9%): [133152,935, 148124,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2233,293 ±(99.9%) 72,710 MB/sec [Average]
[info]   (min, avg, max) = (2206,569, 2233,293, 2255,477), stdev = 18,883
[info]   CI (99.9%): [2160,583, 2306,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24984,071 ±(99.9%) 821,716 B/op [Average]
[info]   (min, avg, max) = (24692,843, 24984,071, 25295,723), stdev = 213,397
[info]   CI (99.9%): [24162,355, 25805,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2136,474 ±(99.9%) 1141,933 MB/sec [Average]
[info]   (min, avg, max) = (1999,386, 2136,474, 2666,938), stdev = 296,556
[info]   CI (99.9%): [994,541, 3278,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23939,385 ±(99.9%) 14282,884 B/op [Average]
[info]   (min, avg, max) = (22205,714, 23939,385, 30573,312), stdev = 3709,220
[info]   CI (99.9%): [9656,501, 38222,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,937 ±(99.9%) 7,670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,937, 4,498), stdev = 1,992
[info]   CI (99.9%): [≈ 0, 8,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,466 ±(99.9%) 85,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,466, 50,191), stdev = 22,221
[info]   CI (99.9%): [≈ 0, 96,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,56% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79201,706 ops/s
[info] # Warmup Iteration   2: 186529,054 ops/s
[info] # Warmup Iteration   3: 191155,672 ops/s
[info] # Warmup Iteration   4: 195627,634 ops/s
[info] # Warmup Iteration   5: 197250,194 ops/s
[info] Iteration   1: 198507,267 ops/s
[info]                  ·gc.alloc.rate:               2993,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          23726,317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21263,162 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 198293,304 ops/s
[info]                  ·gc.alloc.rate:                   3045,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              24164,460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26640,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 197649,491 ops/s
[info]                  ·gc.alloc.rate:                   3011,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              23972,693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21434,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,332 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 197305,220 ops/s
[info]                  ·gc.alloc.rate:                   3006,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              23971,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21524,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 189138,843 ops/s
[info]                  ·gc.alloc.rate:                   2886,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              24008,652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22504,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,520 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   196178,825 ±(99.9%) 15267,893 ops/s [Average]
[info]   (min, avg, max) = (189138,843, 196178,825, 198507,267), stdev = 3965,023
[info]   CI (99.9%): [180910,932, 211446,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2988,705 ±(99.9%) 232,862 MB/sec [Average]
[info]   (min, avg, max) = (2886,210, 2988,705, 3045,812), stdev = 60,473
[info]   CI (99.9%): [2755,843, 3221,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23968,652 ±(99.9%) 604,837 B/op [Average]
[info]   (min, avg, max) = (23726,317, 23968,652, 24164,460), stdev = 157,074
[info]   CI (99.9%): [23363,815, 24573,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2827,670 ±(99.9%) 1141,946 MB/sec [Average]
[info]   (min, avg, max) = (2682,743, 2827,670, 3357,959), stdev = 296,560
[info]   CI (99.9%): [1685,724, 3969,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22673,499 ±(99.9%) 8741,492 B/op [Average]
[info]   (min, avg, max) = (21263,162, 22673,499, 26640,924), stdev = 2270,138
[info]   CI (99.9%): [13932,008, 31414,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,236 ±(99.9%) 0,758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,236, 0,520), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 0,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,76% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8671,572 ops/s
[info] # Warmup Iteration   2: 64036,550 ops/s
[info] # Warmup Iteration   3: 66397,666 ops/s
[info] # Warmup Iteration   4: 67993,167 ops/s
[info] # Warmup Iteration   5: 68843,448 ops/s
[info] Iteration   1: 68595,835 ops/s
[info]                  ·gc.alloc.rate:                   3376,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              77438,582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76532,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,955 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 68601,808 ops/s
[info]                  ·gc.alloc.rate:                   3405,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              78088,405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76725,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,478 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 68917,120 ops/s
[info]                  ·gc.alloc.rate:               3422,821 MB/sec
[info]                  ·gc.alloc.rate.norm:          78137,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76705,224 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   4: 67350,527 ops/s
[info]                  ·gc.alloc.rate:               3348,143 MB/sec
[info]                  ·gc.alloc.rate.norm:          78204,757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78781,728 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 68585,427 ops/s
[info]                  ·gc.alloc.rate:                   3408,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              78147,738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77508,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,477 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   68410,143 ±(99.9%) 2343,642 ops/s [Average]
[info]   (min, avg, max) = (67350,527, 68410,143, 68917,120), stdev = 608,636
[info]   CI (99.9%): [66066,502, 70753,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3392,102 ±(99.9%) 114,654 MB/sec [Average]
[info]   (min, avg, max) = (3348,143, 3392,102, 3422,821), stdev = 29,775
[info]   CI (99.9%): [3277,448, 3506,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78003,363 ±(99.9%) 1226,117 B/op [Average]
[info]   (min, avg, max) = (77438,582, 78003,363, 78204,757), stdev = 318,419
[info]   CI (99.9%): [76777,246, 79229,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3359,130 ±(99.9%) 69,548 MB/sec [Average]
[info]   (min, avg, max) = (3336,885, 3359,130, 3380,126), stdev = 18,061
[info]   CI (99.9%): [3289,582, 3428,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77250,629 ±(99.9%) 3601,566 B/op [Average]
[info]   (min, avg, max) = (76532,537, 77250,629, 78781,728), stdev = 935,315
[info]   CI (99.9%): [73649,063, 80852,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,382 ±(99.9%) 1,539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,382, 0,955), stdev = 0,400
[info]   CI (99.9%): [≈ 0, 1,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,96% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54277,498 ops/s
[info] # Warmup Iteration   2: 121908,077 ops/s
[info] # Warmup Iteration   3: 125478,062 ops/s
[info] # Warmup Iteration   4: 125672,230 ops/s
[info] # Warmup Iteration   5: 126302,763 ops/s
[info] Iteration   1: 127248,991 ops/s
[info]                  ·gc.alloc.rate:                   2549,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              31520,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33203,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,377 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 127299,337 ops/s
[info]                  ·gc.alloc.rate:                   2564,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              31698,843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33140,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,287 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 127398,028 ops/s
[info]                  ·gc.alloc.rate:                   2542,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              31396,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24868,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,257 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 126733,940 ops/s
[info]                  ·gc.alloc.rate:               2555,572 MB/sec
[info]                  ·gc.alloc.rate.norm:          31722,517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33390,215 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 126026,568 ops/s
[info]                  ·gc.alloc.rate:                   2531,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              31582,102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33627,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,519 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   126941,373 ±(99.9%) 2204,638 ops/s [Average]
[info]   (min, avg, max) = (126026,568, 126941,373, 127398,028), stdev = 572,537
[info]   CI (99.9%): [124736,735, 129146,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2548,648 ±(99.9%) 49,675 MB/sec [Average]
[info]   (min, avg, max) = (2531,007, 2548,648, 2564,941), stdev = 12,900
[info]   CI (99.9%): [2498,973, 2598,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   31583,956 ±(99.9%) 515,677 B/op [Average]
[info]   (min, avg, max) = (31396,165, 31583,956, 31722,517), stdev = 133,920
[info]   CI (99.9%): [31068,279, 32099,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2553,140 ±(99.9%) 1161,246 MB/sec [Average]
[info]   (min, avg, max) = (2013,746, 2553,140, 2694,912), stdev = 301,572
[info]   CI (99.9%): [1391,895, 3714,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   31645,945 ±(99.9%) 14606,329 B/op [Average]
[info]   (min, avg, max) = (24868,911, 31645,945, 33627,329), stdev = 3793,217
[info]   CI (99.9%): [17039,616, 46252,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,354), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 0,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,288 ±(99.9%) 6,903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,288, 4,377), stdev = 1,793
[info]   CI (99.9%): [≈ 0, 8,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,16% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95023,708 ops/s
[info] # Warmup Iteration   2: 201158,150 ops/s
[info] # Warmup Iteration   3: 210392,413 ops/s
[info] # Warmup Iteration   4: 208818,239 ops/s
[info] # Warmup Iteration   5: 209930,595 ops/s
[info] Iteration   1: 208618,682 ops/s
[info]                  ·gc.alloc.rate:               1483,142 MB/sec
[info]                  ·gc.alloc.rate.norm:          11184,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10115,899 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 209432,158 ops/s
[info]                  ·gc.alloc.rate:                   1489,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              11186,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10081,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 209097,954 ops/s
[info]                  ·gc.alloc.rate:                   1475,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              11101,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10102,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,419 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 209334,508 ops/s
[info]                  ·gc.alloc.rate:                   1488,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              11186,586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10066,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,096 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 208699,806 ops/s
[info]                  ·gc.alloc.rate:                   1487,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              11210,882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10087,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   209036,622 ±(99.9%) 1410,967 ops/s [Average]
[info]   (min, avg, max) = (208618,682, 209036,622, 209432,158), stdev = 366,424
[info]   CI (99.9%): [207625,655, 210447,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484,635 ±(99.9%) 21,782 MB/sec [Average]
[info]   (min, avg, max) = (1475,397, 1484,635, 1489,084), stdev = 5,657
[info]   CI (99.9%): [1462,852, 1506,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11173,877 ±(99.9%) 162,185 B/op [Average]
[info]   (min, avg, max) = (11101,091, 11173,877, 11210,882), stdev = 42,119
[info]   CI (99.9%): [11011,692, 11336,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340,724 ±(99.9%) 7,523 MB/sec [Average]
[info]   (min, avg, max) = (1338,019, 1340,724, 1342,720), stdev = 1,954
[info]   CI (99.9%): [1333,202, 1348,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10090,765 ±(99.9%) 73,670 B/op [Average]
[info]   (min, avg, max) = (10066,474, 10090,765, 10115,899), stdev = 19,132
[info]   CI (99.9%): [10017,094, 10164,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,766 ±(99.9%) 6,199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,766, 3,644), stdev = 1,610
[info]   CI (99.9%): [≈ 0, 6,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,766 ±(99.9%) 46,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,766, 27,419), stdev = 12,112
[info]   CI (99.9%): [≈ 0, 52,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,600, 5,000), stdev = 1,673
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,36% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257688,263 ops/s
[info] # Warmup Iteration   2: 513256,599 ops/s
[info] # Warmup Iteration   3: 511707,637 ops/s
[info] # Warmup Iteration   4: 517901,358 ops/s
[info] # Warmup Iteration   5: 516969,523 ops/s
[info] Iteration   1: 513637,139 ops/s
[info]                  ·gc.alloc.rate:               454,491 MB/sec
[info]                  ·gc.alloc.rate.norm:          1392,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1567,543 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 515873,165 ops/s
[info]                  ·gc.alloc.rate:               470,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434,381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2031,297 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 520501,177 ops/s
[info]                  ·gc.alloc.rate:      449,931 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 517431,931 ops/s
[info]                  ·gc.alloc.rate:                   463,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1409,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2025,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 516946,541 ops/s
[info]                  ·gc.alloc.rate:               461,905 MB/sec
[info]                  ·gc.alloc.rate.norm:          1405,809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2029,098 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   516877,990 ±(99.9%) 9617,330 ops/s [Average]
[info]   (min, avg, max) = (513637,139, 516877,990, 520501,177), stdev = 2497,590
[info]   CI (99.9%): [507260,660, 526495,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   460,064 ±(99.9%) 30,756 MB/sec [Average]
[info]   (min, avg, max) = (449,931, 460,064, 470,309), stdev = 7,987
[info]   CI (99.9%): [429,309, 490,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1400,453 ±(99.9%) 105,048 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1400,453, 1434,381), stdev = 27,281
[info]   CI (99.9%): [1295,405, 1505,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,097 ±(99.9%) 1111,066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,097, 666,698), stdev = 288,540
[info]   CI (99.9%): [≈ 0, 1613,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1530,619 ±(99.9%) 3383,249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1530,619, 2031,297), stdev = 878,619
[info]   CI (99.9%): [≈ 0, 4913,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,063), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,400, 4,000), stdev = 1,517
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,56% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465881,084 ops/s
[info] # Warmup Iteration   2: 733637,085 ops/s
[info] # Warmup Iteration   3: 730411,185 ops/s
[info] # Warmup Iteration   4: 739193,604 ops/s
[info] # Warmup Iteration   5: 739903,888 ops/s
[info] Iteration   1: 740981,404 ops/s
[info]                  ·gc.alloc.rate:      399,389 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 737902,646 ops/s
[info]                  ·gc.alloc.rate:                   413,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              881,881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 739641,936 ops/s
[info]                  ·gc.alloc.rate:                   424,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              902,539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 740934,797 ops/s
[info]                  ·gc.alloc.rate:      399,359 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 733621,267 ops/s
[info]                  ·gc.alloc.rate:               425,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          912,371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1438,373 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   738616,410 ±(99.9%) 11787,112 ops/s [Average]
[info]   (min, avg, max) = (733621,267, 738616,410, 740981,404), stdev = 3061,076
[info]   CI (99.9%): [726829,298, 750403,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   412,418 ±(99.9%) 49,171 MB/sec [Average]
[info]   (min, avg, max) = (399,359, 412,418, 425,431), stdev = 12,770
[info]   CI (99.9%): [363,247, 461,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   878,558 ±(99.9%) 115,470 B/op [Average]
[info]   (min, avg, max) = (848,001, 878,558, 912,371), stdev = 29,987
[info]   CI (99.9%): [763,089, 994,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370,636 ±(99.9%) 1326,577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,636, 670,705), stdev = 344,508
[info]   CI (99.9%): [≈ 0, 1697,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   791,244 ±(99.9%) 2832,669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 791,244, 1438,373), stdev = 735,635
[info]   CI (99.9%): [≈ 0, 3623,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,044), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,76% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484097,951 ops/s
[info] # Warmup Iteration   2: 767564,228 ops/s
[info] # Warmup Iteration   3: 769181,749 ops/s
[info] # Warmup Iteration   4: 763747,694 ops/s
[info] # Warmup Iteration   5: 759421,838 ops/s
[info] Iteration   1: 757316,341 ops/s
[info]                  ·gc.alloc.rate:      7,702 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 763355,058 ops/s
[info]                  ·gc.alloc.rate:      7,764 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 679674,790 ops/s
[info]                  ·gc.alloc.rate:      6,913 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 726718,775 ops/s
[info]                  ·gc.alloc.rate:      7,391 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 756334,435 ops/s
[info]                  ·gc.alloc.rate:      7,692 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   736679,880 ±(99.9%) 134394,287 ops/s [Average]
[info]   (min, avg, max) = (679674,790, 736679,880, 763355,058), stdev = 34901,770
[info]   CI (99.9%): [602285,592, 871074,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,492 ±(99.9%) 1,366 MB/sec [Average]
[info]   (min, avg, max) = (6,913, 7,492, 7,764), stdev = 0,355
[info]   CI (99.9%): [6,126, 8,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,96% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11617,524 ops/s
[info] # Warmup Iteration   2: 37623,981 ops/s
[info] # Warmup Iteration   3: 39049,579 ops/s
[info] # Warmup Iteration   4: 38643,223 ops/s
[info] # Warmup Iteration   5: 38959,749 ops/s
[info] Iteration   1: 38998,939 ops/s
[info]                  ·gc.alloc.rate:                   2121,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              85581,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81240,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 38565,889 ops/s
[info]                  ·gc.alloc.rate:                   2128,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              86771,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109019,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,393 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 39237,807 ops/s
[info]                  ·gc.alloc.rate:                   2135,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              85624,884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80396,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,340 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 39273,105 ops/s
[info]                  ·gc.alloc.rate:                   2150,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              86145,894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80374,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,668 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 39274,384 ops/s
[info]                  ·gc.alloc.rate:               2151,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          86184,640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80559,081 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   39070,025 ±(99.9%) 1171,699 ops/s [Average]
[info]   (min, avg, max) = (38565,889, 39070,025, 39274,384), stdev = 304,287
[info]   CI (99.9%): [37898,326, 40241,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2137,412 ±(99.9%) 51,380 MB/sec [Average]
[info]   (min, avg, max) = (2121,506, 2137,412, 2151,434), stdev = 13,343
[info]   CI (99.9%): [2086,032, 2188,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86061,655 ±(99.9%) 1874,853 B/op [Average]
[info]   (min, avg, max) = (85581,063, 86061,655, 86771,796), stdev = 486,893
[info]   CI (99.9%): [84186,803, 87936,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2142,037 ±(99.9%) 1144,588 MB/sec [Average]
[info]   (min, avg, max) = (2005,086, 2142,037, 2673,729), stdev = 297,246
[info]   CI (99.9%): [997,449, 3286,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86317,973 ±(99.9%) 48884,770 B/op [Average]
[info]   (min, avg, max) = (80374,277, 86317,973, 109019,111), stdev = 12695,220
[info]   CI (99.9%): [37433,203, 135202,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,835 ±(99.9%) 6,744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,835, 3,967), stdev = 1,751
[info]   CI (99.9%): [≈ 0, 7,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33,688 ±(99.9%) 272,033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,688, 160,039), stdev = 70,646
[info]   CI (99.9%): [≈ 0, 305,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 7,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,16% complete, ETA 00:11:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62607,063 ops/s
[info] # Warmup Iteration   2: 129204,085 ops/s
[info] # Warmup Iteration   3: 134156,201 ops/s
[info] # Warmup Iteration   4: 133848,286 ops/s
[info] # Warmup Iteration   5: 133770,732 ops/s
[info] Iteration   1: 133451,014 ops/s
[info]                  ·gc.alloc.rate:               1435,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          16926,617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15853,591 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 134033,430 ops/s
[info]                  ·gc.alloc.rate:               1452,158 MB/sec
[info]                  ·gc.alloc.rate.norm:          17045,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15791,996 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 134693,837 ops/s
[info]                  ·gc.alloc.rate:                   1461,869 MB/sec
[info]                  ·gc.alloc.rate.norm:              17075,964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15722,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 134066,115 ops/s
[info]                  ·gc.alloc.rate:                   1440,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              16906,210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15765,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,733 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 133988,879 ops/s
[info]                  ·gc.alloc.rate:                   1452,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              17055,748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15742,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,489 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   134046,655 ±(99.9%) 1697,697 ops/s [Average]
[info]   (min, avg, max) = (133451,014, 134046,655, 134693,837), stdev = 440,887
[info]   CI (99.9%): [132348,958, 135744,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1448,581 ±(99.9%) 39,962 MB/sec [Average]
[info]   (min, avg, max) = (1435,774, 1448,581, 1461,869), stdev = 10,378
[info]   CI (99.9%): [1408,619, 1488,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17001,919 ±(99.9%) 304,855 B/op [Average]
[info]   (min, avg, max) = (16906,210, 17001,919, 17075,964), stdev = 79,170
[info]   CI (99.9%): [16697,064, 17306,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,037 ±(99.9%) 8,166 MB/sec [Average]
[info]   (min, avg, max) = (1340,643, 1344,037, 1345,962), stdev = 2,121
[info]   CI (99.9%): [1335,871, 1352,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15775,130 ±(99.9%) 196,267 B/op [Average]
[info]   (min, avg, max) = (15722,063, 15775,130, 15853,591), stdev = 50,970
[info]   CI (99.9%): [15578,863, 15971,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,691 ±(99.9%) 5,729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 3,352), stdev = 1,488
[info]   CI (99.9%): [≈ 0, 6,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8,076 ±(99.9%) 66,920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,076, 39,159), stdev = 17,379
[info]   CI (99.9%): [≈ 0, 74,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,37% complete, ETA 00:11:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1254897,293 ops/s
[info] # Warmup Iteration   2: 3524753,851 ops/s
[info] # Warmup Iteration   3: 3632292,111 ops/s
[info] # Warmup Iteration   4: 3617405,824 ops/s
[info] # Warmup Iteration   5: 3640274,728 ops/s
[info] Iteration   1: 3571997,170 ops/s
[info]                  ·gc.alloc.rate:                   3048,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1342,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1476,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3640690,722 ops/s
[info]                  ·gc.alloc.rate:                   3065,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324,876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1160,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3634900,190 ops/s
[info]                  ·gc.alloc.rate:                   3090,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1337,804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1457,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 3640281,152 ops/s
[info]                  ·gc.alloc.rate:                   3067,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1325,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1167,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 3628972,973 ops/s
[info]                  ·gc.alloc.rate:                   3059,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              1326,269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3623368,441 ±(99.9%) 112091,126 ops/s [Average]
[info]   (min, avg, max) = (3571997,170, 3623368,441, 3640690,722), stdev = 29109,709
[info]   CI (99.9%): [3511277,315, 3735459,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3066,354 ±(99.9%) 60,676 MB/sec [Average]
[info]   (min, avg, max) = (3048,058, 3066,354, 3090,903), stdev = 15,757
[info]   CI (99.9%): [3005,678, 3127,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1331,470 ±(99.9%) 31,232 B/op [Average]
[info]   (min, avg, max) = (1324,876, 1331,470, 1342,494), stdev = 8,111
[info]   CI (99.9%): [1300,238, 1362,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2962,085 ±(99.9%) 1396,596 MB/sec [Average]
[info]   (min, avg, max) = (2684,841, 2962,085, 3366,520), stdev = 362,691
[info]   CI (99.9%): [1565,489, 4358,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1286,850 ±(99.9%) 633,103 B/op [Average]
[info]   (min, avg, max) = (1160,188, 1286,850, 1476,362), stdev = 164,415
[info]   CI (99.9%): [653,748, 1919,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,045 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,020, 0,036), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 5,000), stdev = 0,837
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,57% complete, ETA 00:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,912 ops/s
[info] # Warmup Iteration   2: 6330445,013 ops/s
[info] # Warmup Iteration   3: 6474827,216 ops/s
[info] # Warmup Iteration   4: 6611339,671 ops/s
[info] # Warmup Iteration   5: 6531564,166 ops/s
[info] Iteration   1: 6605738,354 ops/s
[info]                  ·gc.alloc.rate:                   1275,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              303,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 6562084,446 ops/s
[info]                  ·gc.alloc.rate:                   1264,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              303,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 6583096,700 ops/s
[info]                  ·gc.alloc.rate:               1278,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          305,537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319,474 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 6559469,732 ops/s
[info]                  ·gc.alloc.rate:                   1273,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              305,409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,977 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 6603807,218 ops/s
[info]                  ·gc.alloc.rate:                   1294,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              308,305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6582839,290 ±(99.9%) 84823,209 ops/s [Average]
[info]   (min, avg, max) = (6559469,732, 6582839,290, 6605738,354), stdev = 22028,318
[info]   CI (99.9%): [6498016,082, 6667662,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1277,085 ±(99.9%) 41,934 MB/sec [Average]
[info]   (min, avg, max) = (1264,291, 1277,085, 1294,141), stdev = 10,890
[info]   CI (99.9%): [1235,151, 1319,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305,205 ±(99.9%) 7,827 B/op [Average]
[info]   (min, avg, max) = (303,101, 305,205, 308,305), stdev = 2,033
[info]   CI (99.9%): [297,378, 313,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1336,292 ±(99.9%) 5,641 MB/sec [Average]
[info]   (min, avg, max) = (1334,223, 1336,292, 1338,094), stdev = 1,465
[info]   CI (99.9%): [1330,651, 1341,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   319,361 ±(99.9%) 4,934 B/op [Average]
[info]   (min, avg, max) = (317,753, 319,361, 320,933), stdev = 1,281
[info]   CI (99.9%): [314,427, 324,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,832 ±(99.9%) 6,976 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,832, 4,073), stdev = 1,812
[info]   CI (99.9%): [≈ 0, 7,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,200 ±(99.9%) 1,673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,200, 0,977), stdev = 0,435
[info]   CI (99.9%): [≈ 0, 1,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 5,000), stdev = 0,894
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,77% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1596682,944 ops/s
[info] # Warmup Iteration   2: 4317290,164 ops/s
[info] # Warmup Iteration   3: 4467098,462 ops/s
[info] # Warmup Iteration   4: 4481413,872 ops/s
[info] # Warmup Iteration   5: 4462870,532 ops/s
[info] Iteration   1: 4486562,210 ops/s
[info]                  ·gc.alloc.rate:                   2461,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              863,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 4487214,770 ops/s
[info]                  ·gc.alloc.rate:                   2486,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              871,721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 4484826,419 ops/s
[info]                  ·gc.alloc.rate:               2474,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          867,898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 703,875 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 4479147,904 ops/s
[info]                  ·gc.alloc.rate:               2496,987 MB/sec
[info]                  ·gc.alloc.rate.norm:          877,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 941,863 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 4487954,688 ops/s
[info]                  ·gc.alloc.rate:               2502,594 MB/sec
[info]                  ·gc.alloc.rate.norm:          877,315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943,031 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4485141,198 ±(99.9%) 13648,532 ops/s [Average]
[info]   (min, avg, max) = (4479147,904, 4485141,198, 4487954,688), stdev = 3544,480
[info]   CI (99.9%): [4471492,666, 4498789,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2484,211 ±(99.9%) 65,129 MB/sec [Average]
[info]   (min, avg, max) = (2461,052, 2484,211, 2502,594), stdev = 16,914
[info]   CI (99.9%): [2419,082, 2549,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   871,410 ±(99.9%) 23,568 B/op [Average]
[info]   (min, avg, max) = (863,026, 871,410, 877,315), stdev = 6,120
[info]   CI (99.9%): [847,842, 894,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2411,086 ±(99.9%) 1423,609 MB/sec [Average]
[info]   (min, avg, max) = (2005,790, 2411,086, 2690,054), stdev = 369,707
[info]   CI (99.9%): [987,477, 3834,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   845,770 ±(99.9%) 499,740 B/op [Average]
[info]   (min, avg, max) = (703,378, 845,770, 943,031), stdev = 129,781
[info]   CI (99.9%): [346,030, 1345,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,037), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,97% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4508576,633 ops/s
[info] # Warmup Iteration   2: 6416099,722 ops/s
[info] # Warmup Iteration   3: 6643578,582 ops/s
[info] # Warmup Iteration   4: 6642972,470 ops/s
[info] # Warmup Iteration   5: 6628603,725 ops/s
[info] Iteration   1: 6623551,428 ops/s
[info]                  ·gc.alloc.rate:               1284,890 MB/sec
[info]                  ·gc.alloc.rate.norm:          305,207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319,499 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 6630425,876 ops/s
[info]                  ·gc.alloc.rate:               1299,229 MB/sec
[info]                  ·gc.alloc.rate.norm:          308,287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319,325 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 6648245,598 ops/s
[info]                  ·gc.alloc.rate:                   1277,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              302,324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6642483,584 ops/s
[info]                  ·gc.alloc.rate:                   1289,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              305,353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,710 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6667623,649 ops/s
[info]                  ·gc.alloc.rate:                   1306,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              308,232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6642466,027 ±(99.9%) 65829,036 ops/s [Average]
[info]   (min, avg, max) = (6623551,428, 6642466,027, 6667623,649), stdev = 17095,592
[info]   CI (99.9%): [6576636,991, 6708295,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1291,420 ±(99.9%) 43,926 MB/sec [Average]
[info]   (min, avg, max) = (1277,558, 1291,420, 1306,243), stdev = 11,408
[info]   CI (99.9%): [1247,493, 1335,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305,881 ±(99.9%) 9,568 B/op [Average]
[info]   (min, avg, max) = (302,324, 305,881, 308,287), stdev = 2,485
[info]   CI (99.9%): [296,312, 315,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211,051 ±(99.9%) 1158,143 MB/sec [Average]
[info]   (min, avg, max) = (673,027, 1211,051, 1346,706), stdev = 300,766
[info]   CI (99.9%): [52,909, 2369,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   286,876 ±(99.9%) 274,710 B/op [Average]
[info]   (min, avg, max) = (159,266, 286,876, 319,499), stdev = 71,341
[info]   CI (99.9%): [12,166, 561,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,637 ±(99.9%) 5,090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,637, 2,999), stdev = 1,322
[info]   CI (99.9%): [≈ 0, 5,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 1,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,710), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,17% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2003723,061 ops/s
[info] # Warmup Iteration   2: 4365209,214 ops/s
[info] # Warmup Iteration   3: 4515741,544 ops/s
[info] # Warmup Iteration   4: 4490280,464 ops/s
[info] # Warmup Iteration   5: 4505478,805 ops/s
[info] Iteration   1: 4397903,618 ops/s
[info]                  ·gc.alloc.rate:               2611,407 MB/sec
[info]                  ·gc.alloc.rate.norm:          934,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 717,779 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 4525680,301 ops/s
[info]                  ·gc.alloc.rate:                   2726,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              947,772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 4518307,187 ops/s
[info]                  ·gc.alloc.rate:               2726,099 MB/sec
[info]                  ·gc.alloc.rate.norm:          949,232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 933,675 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 4506082,527 ops/s
[info]                  ·gc.alloc.rate:                   2716,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              948,454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     938,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 4482308,191 ops/s
[info]                  ·gc.alloc.rate:               2705,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          949,464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 946,436 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4486056,365 ±(99.9%) 200049,889 ops/s [Average]
[info]   (min, avg, max) = (4397903,618, 4486056,365, 4525680,301), stdev = 51952,321
[info]   CI (99.9%): [4286006,476, 4686106,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2697,075 ±(99.9%) 187,450 MB/sec [Average]
[info]   (min, avg, max) = (2611,407, 2697,075, 2726,360), stdev = 48,680
[info]   CI (99.9%): [2509,625, 2884,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   945,842 ±(99.9%) 25,007 B/op [Average]
[info]   (min, avg, max) = (934,286, 945,842, 949,464), stdev = 6,494
[info]   CI (99.9%): [920,834, 970,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2549,584 ±(99.9%) 1169,963 MB/sec [Average]
[info]   (min, avg, max) = (2006,252, 2549,584, 2696,395), stdev = 303,836
[info]   CI (99.9%): [1379,620, 3719,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   893,323 ±(99.9%) 378,619 B/op [Average]
[info]   (min, avg, max) = (717,779, 893,323, 946,436), stdev = 98,326
[info]   CI (99.9%): [514,704, 1271,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,007), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,37% complete, ETA 00:10:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2225635,778 ops/s
[info] # Warmup Iteration   2: 4018707,172 ops/s
[info] # Warmup Iteration   3: 4153003,471 ops/s
[info] # Warmup Iteration   4: 4121389,052 ops/s
[info] # Warmup Iteration   5: 4141942,500 ops/s
[info] Iteration   1: 4160947,191 ops/s
[info]                  ·gc.alloc.rate:                   2348,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              887,905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 4173538,607 ops/s
[info]                  ·gc.alloc.rate:                   2354,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              887,420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3899580,051 ops/s
[info]                  ·gc.alloc.rate:                   2248,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              906,991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1083,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   4: 4110782,934 ops/s
[info]                  ·gc.alloc.rate:                   2336,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              894,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 4165410,345 ops/s
[info]                  ·gc.alloc.rate:                   2367,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              894,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4102051,826 ±(99.9%) 446011,868 ops/s [Average]
[info]   (min, avg, max) = (3899580,051, 4102051,826, 4173538,607), stdev = 115827,866
[info]   CI (99.9%): [3656039,958, 4548063,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2330,770 ±(99.9%) 182,932 MB/sec [Average]
[info]   (min, avg, max) = (2248,150, 2330,770, 2367,047), stdev = 47,507
[info]   CI (99.9%): [2147,838, 2513,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   894,096 ±(99.9%) 30,392 B/op [Average]
[info]   (min, avg, max) = (887,420, 894,096, 906,991), stdev = 7,893
[info]   CI (99.9%): [863,704, 924,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2150,714 ±(99.9%) 1151,398 MB/sec [Average]
[info]   (min, avg, max) = (2013,314, 2150,714, 2685,583), stdev = 299,014
[info]   CI (99.9%): [999,316, 3302,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   828,044 ±(99.9%) 550,149 B/op [Average]
[info]   (min, avg, max) = (758,912, 828,044, 1083,469), stdev = 142,872
[info]   CI (99.9%): [277,895, 1378,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,466 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,292), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,176 B/op [Average]
[info]   (min, avg, max) = (0,008, 0,028, 0,110), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 11,000), stdev = 3,578
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,57% complete, ETA 00:09:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1296816,650 ops/s
[info] # Warmup Iteration   2: 2270868,046 ops/s
[info] # Warmup Iteration   3: 2308235,193 ops/s
[info] # Warmup Iteration   4: 2311225,138 ops/s
[info] # Warmup Iteration   5: 2312982,024 ops/s
[info] Iteration   1: 2304117,852 ops/s
[info]                  ·gc.alloc.rate:                   1385,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              946,295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2307734,796 ops/s
[info]                  ·gc.alloc.rate:               1381,060 MB/sec
[info]                  ·gc.alloc.rate.norm:          941,509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 915,608 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   3: 2315241,466 ops/s
[info]                  ·gc.alloc.rate:                   1380,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              938,342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     913,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,924 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2320155,155 ops/s
[info]                  ·gc.alloc.rate:                   1396,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              947,194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2316780,428 ops/s
[info]                  ·gc.alloc.rate:                   1394,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              947,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2312805,940 ±(99.9%) 25610,305 ops/s [Average]
[info]   (min, avg, max) = (2304117,852, 2312805,940, 2320155,155), stdev = 6650,915
[info]   CI (99.9%): [2287195,634, 2338416,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1387,891 ±(99.9%) 29,068 MB/sec [Average]
[info]   (min, avg, max) = (1380,867, 1387,891, 1396,845), stdev = 7,549
[info]   CI (99.9%): [1358,823, 1416,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   944,101 ±(99.9%) 15,361 B/op [Average]
[info]   (min, avg, max) = (938,342, 944,101, 947,194), stdev = 3,989
[info]   CI (99.9%): [928,740, 959,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342,614 ±(99.9%) 4,404 MB/sec [Average]
[info]   (min, avg, max) = (1340,728, 1342,614, 1343,713), stdev = 1,144
[info]   CI (99.9%): [1338,210, 1347,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   913,309 ±(99.9%) 10,752 B/op [Average]
[info]   (min, avg, max) = (910,447, 913,309, 916,643), stdev = 2,792
[info]   CI (99.9%): [902,556, 924,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 4,677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 2,832), stdev = 1,215
[info]   CI (99.9%): [≈ 0, 5,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,472 ±(99.9%) 3,179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,472, 1,924), stdev = 0,825
[info]   CI (99.9%): [≈ 0, 3,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,77% complete, ETA 00:09:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,944 ops/s
[info] # Warmup Iteration   2: 5951545,207 ops/s
[info] # Warmup Iteration   3: 6494011,252 ops/s
[info] # Warmup Iteration   4: 4950020,636 ops/s
[info] # Warmup Iteration   5: 4953263,739 ops/s
[info] Iteration   1: 6491547,214 ops/s
[info]                  ·gc.alloc.rate:               647,220 MB/sec
[info]                  ·gc.alloc.rate.norm:          156,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161,511 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 6119825,452 ops/s
[info]                  ·gc.alloc.rate:               613,992 MB/sec
[info]                  ·gc.alloc.rate.norm:          157,841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171,310 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6451701,294 ops/s
[info]                  ·gc.alloc.rate:                   644,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              157,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6368812,318 ops/s
[info]                  ·gc.alloc.rate:               628,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          155,368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164,701 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 6467380,802 ops/s
[info]                  ·gc.alloc.rate:                   647,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              157,547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6379853,416 ±(99.9%) 587255,118 ops/s [Average]
[info]   (min, avg, max) = (6119825,452, 6379853,416, 6491547,214), stdev = 152508,289
[info]   CI (99.9%): [5792598,298, 6967108,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   636,370 ±(99.9%) 56,450 MB/sec [Average]
[info]   (min, avg, max) = (613,992, 636,370, 647,649), stdev = 14,660
[info]   CI (99.9%): [579,919, 692,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156,932 ±(99.9%) 3,689 B/op [Average]
[info]   (min, avg, max) = (155,368, 156,932, 157,841), stdev = 0,958
[info]   CI (99.9%): [153,243, 160,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666,668 ±(99.9%) 1,049 MB/sec [Average]
[info]   (min, avg, max) = (666,387, 666,668, 667,075), stdev = 0,272
[info]   CI (99.9%): [665,620, 667,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   164,475 ±(99.9%) 15,403 B/op [Average]
[info]   (min, avg, max) = (161,511, 164,475, 171,310), stdev = 4,000
[info]   CI (99.9%): [149,072, 179,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,026), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,97% complete, ETA 00:09:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2371424,391 ops/s
[info] # Warmup Iteration   2: 5073839,633 ops/s
[info] # Warmup Iteration   3: 5151010,884 ops/s
[info] # Warmup Iteration   4: 5123528,326 ops/s
[info] # Warmup Iteration   5: 5171553,353 ops/s
[info] Iteration   1: 5120602,235 ops/s
[info]                  ·gc.alloc.rate:                   1393,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              428,262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 5110684,502 ops/s
[info]                  ·gc.alloc.rate:                   1390,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              428,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 5131807,884 ops/s
[info]                  ·gc.alloc.rate:                   1395,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              427,819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,964 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 5122800,682 ops/s
[info]                  ·gc.alloc.rate:                   1416,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              435,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5068797,088 ops/s
[info]                  ·gc.alloc.rate:                   1380,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              428,497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   5110938,478 ±(99.9%) 95212,835 ops/s [Average]
[info]   (min, avg, max) = (5068797,088, 5110938,478, 5131807,884), stdev = 24726,471
[info]   CI (99.9%): [5015725,643, 5206151,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1395,406 ±(99.9%) 51,101 MB/sec [Average]
[info]   (min, avg, max) = (1380,524, 1395,406, 1416,755), stdev = 13,271
[info]   CI (99.9%): [1344,305, 1446,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   429,549 ±(99.9%) 12,061 B/op [Average]
[info]   (min, avg, max) = (427,819, 429,549, 435,134), stdev = 3,132
[info]   CI (99.9%): [417,489, 441,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,162 ±(99.9%) 3,980 MB/sec [Average]
[info]   (min, avg, max) = (1338,696, 1340,162, 1341,392), stdev = 1,034
[info]   CI (99.9%): [1336,181, 1344,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   412,552 ±(99.9%) 6,668 B/op [Average]
[info]   (min, avg, max) = (411,230, 412,552, 415,514), stdev = 1,732
[info]   CI (99.9%): [405,884, 419,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,733 ±(99.9%) 5,242 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,733, 3,144), stdev = 1,361
[info]   CI (99.9%): [≈ 0, 5,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,225 ±(99.9%) 1,607 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,225, 0,964), stdev = 0,417
[info]   CI (99.9%): [≈ 0, 1,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,414
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,17% complete, ETA 00:09:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4421260,344 ops/s
[info] # Warmup Iteration   2: 5944767,136 ops/s
[info] # Warmup Iteration   3: 6051642,276 ops/s
[info] # Warmup Iteration   4: 6033291,318 ops/s
[info] # Warmup Iteration   5: 6040751,073 ops/s
[info] Iteration   1: 6010849,999 ops/s
[info]                  ·gc.alloc.rate:               603,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          158,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175,640 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 6017702,687 ops/s
[info]                  ·gc.alloc.rate:               603,006 MB/sec
[info]                  ·gc.alloc.rate.norm:          157,655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175,441 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6017555,834 ops/s
[info]                  ·gc.alloc.rate:               603,628 MB/sec
[info]                  ·gc.alloc.rate.norm:          157,816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175,610 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6017725,575 ops/s
[info]                  ·gc.alloc.rate:               609,713 MB/sec
[info]                  ·gc.alloc.rate.norm:          159,407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 6045900,343 ops/s
[info]                  ·gc.alloc.rate:                   602,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              156,663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6021946,888 ±(99.9%) 52798,178 ops/s [Average]
[info]   (min, avg, max) = (6010849,999, 6021946,888, 6045900,343), stdev = 13711,519
[info]   CI (99.9%): [5969148,710, 6074745,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   604,404 ±(99.9%) 11,718 MB/sec [Average]
[info]   (min, avg, max) = (602,006, 604,404, 609,713), stdev = 3,043
[info]   CI (99.9%): [592,685, 616,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157,910 ±(99.9%) 3,792 B/op [Average]
[info]   (min, avg, max) = (156,663, 157,910, 159,407), stdev = 0,985
[info]   CI (99.9%): [154,118, 161,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,558 ±(99.9%) 2,123 MB/sec [Average]
[info]   (min, avg, max) = (671,026, 671,558, 672,345), stdev = 0,551
[info]   CI (99.9%): [669,434, 673,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   175,454 ±(99.9%) 1,090 B/op [Average]
[info]   (min, avg, max) = (174,968, 175,454, 175,640), stdev = 0,283
[info]   CI (99.9%): [174,364, 176,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,37% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4467237,289 ops/s
[info] # Warmup Iteration   2: 6343119,782 ops/s
[info] # Warmup Iteration   3: 6474739,656 ops/s
[info] # Warmup Iteration   4: 6478322,060 ops/s
[info] # Warmup Iteration   5: 6479051,140 ops/s
[info] Iteration   1: 6473833,994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6469396,242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5982725,366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6470986,997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6472084,407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6373805,401 ±(99.9%) 841852,281 ops/s [Average]
[info]   (min, avg, max) = (5982725,366, 6373805,401, 6473833,994), stdev = 218626,364
[info]   CI (99.9%): [5531953,120, 7215657,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,57% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2348117,909 ops/s
[info] # Warmup Iteration   2: 4830021,048 ops/s
[info] # Warmup Iteration   3: 4876516,488 ops/s
[info] # Warmup Iteration   4: 4815553,177 ops/s
[info] # Warmup Iteration   5: 4817694,027 ops/s
[info] Iteration   1: 4873884,757 ops/s
[info]                  ·gc.alloc.rate:                   1598,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              516,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 4925053,898 ops/s
[info]                  ·gc.alloc.rate:                   1618,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              516,968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 4854536,307 ops/s
[info]                  ·gc.alloc.rate:                   1628,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              527,651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 4903799,780 ops/s
[info]                  ·gc.alloc.rate:                   1613,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              517,748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 4930412,275 ops/s
[info]                  ·gc.alloc.rate:                   1631,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              520,672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4897537,404 ±(99.9%) 126041,316 ops/s [Average]
[info]   (min, avg, max) = (4854536,307, 4897537,404, 4930412,275), stdev = 32732,529
[info]   CI (99.9%): [4771496,088, 5023578,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1618,081 ±(99.9%) 50,526 MB/sec [Average]
[info]   (min, avg, max) = (1598,471, 1618,081, 1631,682), stdev = 13,121
[info]   CI (99.9%): [1567,555, 1668,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   519,809 ±(99.9%) 18,167 B/op [Average]
[info]   (min, avg, max) = (516,005, 519,809, 527,651), stdev = 4,718
[info]   CI (99.9%): [501,642, 537,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474,661 ±(99.9%) 1157,652 MB/sec [Average]
[info]   (min, avg, max) = (1338,013, 1474,661, 2012,446), stdev = 300,639
[info]   CI (99.9%): [317,009, 2632,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   474,122 ±(99.9%) 383,446 B/op [Average]
[info]   (min, avg, max) = (426,987, 474,122, 652,210), stdev = 99,580
[info]   CI (99.9%): [90,676, 857,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,754 ±(99.9%) 5,203 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,754, 3,144), stdev = 1,351
[info]   CI (99.9%): [≈ 0, 5,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,241 ±(99.9%) 1,662 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,241, 1,004), stdev = 0,432
[info]   CI (99.9%): [≈ 0, 1,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,78% complete, ETA 00:08:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272890,705 ops/s
[info] # Warmup Iteration   2: 420364,758 ops/s
[info] # Warmup Iteration   3: 441225,313 ops/s
[info] # Warmup Iteration   4: 442695,126 ops/s
[info] # Warmup Iteration   5: 439074,164 ops/s
[info] Iteration   1: 442439,474 ops/s
[info]                  ·gc.alloc.rate:               444,909 MB/sec
[info]                  ·gc.alloc.rate.norm:          1581,973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1819,840 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 444433,938 ops/s
[info]                  ·gc.alloc.rate:      427,147 MB/sec
[info]                  ·gc.alloc.rate.norm: 1512,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 442415,656 ops/s
[info]                  ·gc.alloc.rate:               446,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          1586,603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2387,581 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 442477,776 ops/s
[info]                  ·gc.alloc.rate:               461,723 MB/sec
[info]                  ·gc.alloc.rate.norm:          1641,536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2387,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 443318,613 ops/s
[info]                  ·gc.alloc.rate:      433,355 MB/sec
[info]                  ·gc.alloc.rate.norm: 1537,915 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   443017,092 ±(99.9%) 3381,447 ops/s [Average]
[info]   (min, avg, max) = (442415,656, 443017,092, 444433,938), stdev = 878,151
[info]   CI (99.9%): [439635,645, 446398,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   442,667 ±(99.9%) 51,238 MB/sec [Average]
[info]   (min, avg, max) = (427,147, 442,667, 461,723), stdev = 13,306
[info]   CI (99.9%): [391,429, 493,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   1572,005 ±(99.9%) 191,660 B/op [Average]
[info]   (min, avg, max) = (1512,001, 1572,005, 1641,536), stdev = 49,773
[info]   CI (99.9%): [1380,345, 1763,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370,951 ±(99.9%) 1327,884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370,951, 671,490), stdev = 344,847
[info]   CI (99.9%): [≈ 0, 1698,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1318,945 ±(99.9%) 4721,362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1318,945, 2387,581), stdev = 1226,123
[info]   CI (99.9%): [≈ 0, 6040,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,98% complete, ETA 00:07:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402526,023 ops/s
[info] # Warmup Iteration   2: 1537568,449 ops/s
[info] # Warmup Iteration   3: 1612653,096 ops/s
[info] # Warmup Iteration   4: 1629701,933 ops/s
[info] # Warmup Iteration   5: 1646127,071 ops/s
[info] Iteration   1: 1589493,505 ops/s
[info]                  ·gc.alloc.rate:                   2291,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2267,644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2659,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,318 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1633884,742 ops/s
[info]                  ·gc.alloc.rate:                   2343,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              2256,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1936,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1648793,113 ops/s
[info]                  ·gc.alloc.rate:                   2399,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              2289,659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2559,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1650057,806 ops/s
[info]                  ·gc.alloc.rate:                   2378,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              2267,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1647698,077 ops/s
[info]                  ·gc.alloc.rate:               2374,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          2267,513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1927,648 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1633985,449 ±(99.9%) 99021,594 ops/s [Average]
[info]   (min, avg, max) = (1589493,505, 1633985,449, 1650057,806), stdev = 25715,593
[info]   CI (99.9%): [1534963,855, 1733007,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2357,428 ±(99.9%) 162,148 MB/sec [Average]
[info]   (min, avg, max) = (2291,137, 2357,428, 2399,534), stdev = 42,109
[info]   CI (99.9%): [2195,281, 2519,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2269,761 ±(99.9%) 46,632 B/op [Average]
[info]   (min, avg, max) = (2256,494, 2269,761, 2289,659), stdev = 12,110
[info]   CI (99.9%): [2223,129, 2316,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2282,846 ±(99.9%) 1411,976 MB/sec [Average]
[info]   (min, avg, max) = (2011,301, 2282,846, 2686,913), stdev = 366,686
[info]   CI (99.9%): [870,870, 3694,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2200,841 ±(99.9%) 1442,503 B/op [Average]
[info]   (min, avg, max) = (1921,285, 2200,841, 2659,362), stdev = 374,613
[info]   CI (99.9%): [758,339, 3643,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,712 ±(99.9%) 5,685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,712, 3,353), stdev = 1,476
[info]   CI (99.9%): [≈ 0, 6,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,704 ±(99.9%) 5,630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,704, 3,318), stdev = 1,462
[info]   CI (99.9%): [≈ 0, 6,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,18% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,855 ops/s
[info] # Warmup Iteration   2: 2963079,477 ops/s
[info] # Warmup Iteration   3: 3023284,640 ops/s
[info] # Warmup Iteration   4: 3083748,503 ops/s
[info] # Warmup Iteration   5: 3081775,603 ops/s
[info] Iteration   1: 3078799,949 ops/s
[info]                  ·gc.alloc.rate:                   592,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              302,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3088337,580 ops/s
[info]                  ·gc.alloc.rate:               596,122 MB/sec
[info]                  ·gc.alloc.rate.norm:          303,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 339,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 3005179,801 ops/s
[info]                  ·gc.alloc.rate:               589,240 MB/sec
[info]                  ·gc.alloc.rate.norm:          308,469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 3075076,609 ops/s
[info]                  ·gc.alloc.rate:                   603,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              308,683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     341,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3080468,323 ops/s
[info]                  ·gc.alloc.rate:                   597,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   3065572,452 ±(99.9%) 131327,650 ops/s [Average]
[info]   (min, avg, max) = (3005179,801, 3065572,452, 3088337,580), stdev = 34105,374
[info]   CI (99.9%): [2934244,802, 3196900,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   595,720 ±(99.9%) 20,228 MB/sec [Average]
[info]   (min, avg, max) = (589,240, 595,720, 603,357), stdev = 5,253
[info]   CI (99.9%): [575,492, 615,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305,736 ±(99.9%) 10,347 B/op [Average]
[info]   (min, avg, max) = (302,944, 305,736, 308,683), stdev = 2,687
[info]   CI (99.9%): [295,389, 316,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666,643 ±(99.9%) 1,075 MB/sec [Average]
[info]   (min, avg, max) = (666,370, 666,643, 667,039), stdev = 0,279
[info]   CI (99.9%): [665,568, 667,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   342,153 ±(99.9%) 14,976 B/op [Average]
[info]   (min, avg, max) = (339,459, 342,153, 349,026), stdev = 3,889
[info]   CI (99.9%): [327,176, 357,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,016 ±(99.9%) 0,076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,037), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,008 ±(99.9%) 0,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,019), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,38% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403752,315 ops/s
[info] # Warmup Iteration   2: 1699295,357 ops/s
[info] # Warmup Iteration   3: 1834675,211 ops/s
[info] # Warmup Iteration   4: 1863025,650 ops/s
[info] # Warmup Iteration   5: 1859994,961 ops/s
[info] Iteration   1: 1866311,813 ops/s
[info]                  ·gc.alloc.rate:                   1061,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              895,280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     563,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1857501,487 ops/s
[info]                  ·gc.alloc.rate:                   1070,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              906,332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1865305,731 ops/s
[info]                  ·gc.alloc.rate:               1069,578 MB/sec
[info]                  ·gc.alloc.rate.norm:          902,118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 564,290 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 1858084,666 ops/s
[info]                  ·gc.alloc.rate:                   1081,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              915,357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1133,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1854627,989 ops/s
[info]                  ·gc.alloc.rate:                   1077,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1133,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1860366,337 ±(99.9%) 19830,659 ops/s [Average]
[info]   (min, avg, max) = (1854627,989, 1860366,337, 1866311,813), stdev = 5149,959
[info]   CI (99.9%): [1840535,678, 1880196,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1071,939 ±(99.9%) 28,349 MB/sec [Average]
[info]   (min, avg, max) = (1061,993, 1071,939, 1081,032), stdev = 7,362
[info]   CI (99.9%): [1043,590, 1100,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   906,382 ±(99.9%) 31,253 B/op [Average]
[info]   (min, avg, max) = (895,280, 906,382, 915,357), stdev = 8,116
[info]   CI (99.9%): [875,129, 937,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,121 ±(99.9%) 1411,692 MB/sec [Average]
[info]   (min, avg, max) = (667,998, 1070,121, 1338,664), stdev = 366,612
[info]   CI (99.9%): [≈ 0, 2481,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   905,456 ±(99.9%) 1201,278 B/op [Average]
[info]   (min, avg, max) = (563,135, 905,456, 1133,605), stdev = 311,968
[info]   CI (99.9%): [≈ 0, 2106,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 6,497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,793), stdev = 1,687
[info]   CI (99.9%): [≈ 0, 7,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,657 ±(99.9%) 5,506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,657, 3,215), stdev = 1,430
[info]   CI (99.9%): [≈ 0, 6,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,58% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1106157,435 ops/s
[info] # Warmup Iteration   2: 2551412,557 ops/s
[info] # Warmup Iteration   3: 2582235,826 ops/s
[info] # Warmup Iteration   4: 2529283,357 ops/s
[info] # Warmup Iteration   5: 2596779,418 ops/s
[info] Iteration   1: 2597080,413 ops/s
[info]                  ·gc.alloc.rate:                   504,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              305,822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2598870,691 ops/s
[info]                  ·gc.alloc.rate:               508,710 MB/sec
[info]                  ·gc.alloc.rate.norm:          307,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 406,829 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 2575477,110 ops/s
[info]                  ·gc.alloc.rate:      484,584 MB/sec
[info]                  ·gc.alloc.rate.norm: 296,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2609718,525 ops/s
[info]                  ·gc.alloc.rate:               507,897 MB/sec
[info]                  ·gc.alloc.rate.norm:          306,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 405,171 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 2443104,567 ops/s
[info]                  ·gc.alloc.rate:               484,675 MB/sec
[info]                  ·gc.alloc.rate.norm:          312,118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 433,193 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2564850,261 ±(99.9%) 266393,029 ops/s [Average]
[info]   (min, avg, max) = (2443104,567, 2564850,261, 2609718,525), stdev = 69181,424
[info]   CI (99.9%): [2298457,232, 2831243,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   498,141 ±(99.9%) 47,818 MB/sec [Average]
[info]   (min, avg, max) = (484,584, 498,141, 508,710), stdev = 12,418
[info]   CI (99.9%): [450,322, 545,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305,612 ±(99.9%) 22,825 B/op [Average]
[info]   (min, avg, max) = (296,000, 305,612, 312,118), stdev = 5,928
[info]   CI (99.9%): [282,787, 328,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   505,730 ±(99.9%) 1121,034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505,730, 672,687), stdev = 291,129
[info]   CI (99.9%): [≈ 0, 1626,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   311,045 ±(99.9%) 693,395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 311,045, 433,193), stdev = 180,073
[info]   CI (99.9%): [≈ 0, 1004,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,78% complete, ETA 00:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640599,240 ops/s
[info] # Warmup Iteration   2: 1596514,648 ops/s
[info] # Warmup Iteration   3: 1862471,101 ops/s
[info] # Warmup Iteration   4: 1887429,722 ops/s
[info] # Warmup Iteration   5: 1885165,722 ops/s
[info] Iteration   1: 1894117,290 ops/s
[info]                  ·gc.alloc.rate:                   1064,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              883,808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1870325,672 ops/s
[info]                  ·gc.alloc.rate:                   1071,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              901,277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1893282,914 ops/s
[info]                  ·gc.alloc.rate:                   1074,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              892,866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1716585,575 ops/s
[info]                  ·gc.alloc.rate:               979,564 MB/sec
[info]                  ·gc.alloc.rate.norm:          897,758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229,117 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 1832910,698 ops/s
[info]                  ·gc.alloc.rate:                   1041,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              893,827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1841444,430 ±(99.9%) 285300,904 ops/s [Average]
[info]   (min, avg, max) = (1716585,575, 1841444,430, 1894117,290), stdev = 74091,739
[info]   CI (99.9%): [1556143,525, 2126745,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1046,192 ±(99.9%) 151,877 MB/sec [Average]
[info]   (min, avg, max) = (979,564, 1046,192, 1074,459), stdev = 39,442
[info]   CI (99.9%): [894,315, 1198,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   893,907 ±(99.9%) 25,267 B/op [Average]
[info]   (min, avg, max) = (883,808, 893,907, 901,277), stdev = 6,562
[info]   CI (99.9%): [868,640, 919,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   938,167 ±(99.9%) 1413,722 MB/sec [Average]
[info]   (min, avg, max) = (669,040, 938,167, 1341,117), stdev = 367,139
[info]   CI (99.9%): [≈ 0, 2351,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   808,868 ±(99.9%) 1305,107 B/op [Average]
[info]   (min, avg, max) = (555,711, 808,868, 1229,117), stdev = 338,932
[info]   CI (99.9%): [≈ 0, 2113,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,036), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 1,095
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,98% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690035,017 ops/s
[info] # Warmup Iteration   2: 1444501,200 ops/s
[info] # Warmup Iteration   3: 1525074,988 ops/s
[info] # Warmup Iteration   4: 1528113,313 ops/s
[info] # Warmup Iteration   5: 1521827,891 ops/s
[info] Iteration   1: 1522477,325 ops/s
[info]                  ·gc.alloc.rate:               1645,694 MB/sec
[info]                  ·gc.alloc.rate.norm:          1700,594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1390,956 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 1526209,656 ops/s
[info]                  ·gc.alloc.rate:                   1653,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1704,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2079,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,322 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 1502397,846 ops/s
[info]                  ·gc.alloc.rate:                   1612,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1406,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1482804,386 ops/s
[info]                  ·gc.alloc.rate:                   1605,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1703,184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1423,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1527805,956 ops/s
[info]                  ·gc.alloc.rate:               1665,784 MB/sec
[info]                  ·gc.alloc.rate.norm:          1715,463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2073,033 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1512339,034 ±(99.9%) 74704,661 ops/s [Average]
[info]   (min, avg, max) = (1482804,386, 1512339,034, 1527805,956), stdev = 19400,563
[info]   CI (99.9%): [1437634,373, 1587043,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1636,671 ±(99.9%) 101,734 MB/sec [Average]
[info]   (min, avg, max) = (1605,246, 1636,671, 1665,784), stdev = 26,420
[info]   CI (99.9%): [1534,938, 1738,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   1702,399 ±(99.9%) 36,728 B/op [Average]
[info]   (min, avg, max) = (1688,734, 1702,399, 1715,463), stdev = 9,538
[info]   CI (99.9%): [1665,671, 1739,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612,579 ±(99.9%) 1416,908 MB/sec [Average]
[info]   (min, avg, max) = (1342,072, 1612,579, 2018,316), stdev = 367,966
[info]   CI (99.9%): [195,671, 3029,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1674,833 ±(99.9%) 1411,652 B/op [Average]
[info]   (min, avg, max) = (1390,956, 1674,833, 2079,393), stdev = 366,601
[info]   CI (99.9%): [263,181, 3086,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 5,517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,224), stdev = 1,433
[info]   CI (99.9%): [≈ 0, 6,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,682 ±(99.9%) 5,683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,682, 3,322), stdev = 1,476
[info]   CI (99.9%): [≈ 0, 6,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 6,000), stdev = 1,817
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,18% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743738,110 ops/s
[info] # Warmup Iteration   2: 1948169,526 ops/s
[info] # Warmup Iteration   3: 2002633,579 ops/s
[info] # Warmup Iteration   4: 1978415,951 ops/s
[info] # Warmup Iteration   5: 2000870,641 ops/s
[info] Iteration   1: 1997385,143 ops/s
[info]                  ·gc.alloc.rate:                   1520,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1197,950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1058,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1999772,512 ops/s
[info]                  ·gc.alloc.rate:                   1523,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198,540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1996318,647 ops/s
[info]                  ·gc.alloc.rate:                   1518,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1588,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,659 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 2008417,566 ops/s
[info]                  ·gc.alloc.rate:               1523,467 MB/sec
[info]                  ·gc.alloc.rate.norm:          1193,408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1050,809 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 2006507,781 ops/s
[info]                  ·gc.alloc.rate:               1517,360 MB/sec
[info]                  ·gc.alloc.rate.norm:          1189,759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1050,745 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2001680,330 ±(99.9%) 21049,562 ops/s [Average]
[info]   (min, avg, max) = (1996318,647, 2001680,330, 2008417,566), stdev = 5466,504
[info]   CI (99.9%): [1980630,767, 2022729,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1520,761 ±(99.9%) 10,732 MB/sec [Average]
[info]   (min, avg, max) = (1517,360, 1520,761, 1523,467), stdev = 2,787
[info]   CI (99.9%): [1510,029, 1531,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1195,723 ±(99.9%) 15,437 B/op [Average]
[info]   (min, avg, max) = (1189,759, 1195,723, 1198,958), stdev = 4,009
[info]   CI (99.9%): [1180,286, 1211,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1476,105 ±(99.9%) 1153,914 MB/sec [Average]
[info]   (min, avg, max) = (1340,068, 1476,105, 2012,161), stdev = 299,668
[info]   CI (99.9%): [322,191, 2630,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1161,052 ±(99.9%) 920,575 B/op [Average]
[info]   (min, avg, max) = (1050,745, 1161,052, 1588,671), stdev = 239,070
[info]   CI (99.9%): [240,477, 2081,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,682 ±(99.9%) 5,781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,682, 3,367), stdev = 1,501
[info]   CI (99.9%): [≈ 0, 6,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,538 ±(99.9%) 4,564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,538, 2,659), stdev = 1,185
[info]   CI (99.9%): [≈ 0, 5,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 7,000), stdev = 2,121
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,38% complete, ETA 00:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,750 ops/s
[info] # Warmup Iteration   2: 3181778,568 ops/s
[info] # Warmup Iteration   3: 3373816,249 ops/s
[info] # Warmup Iteration   4: 3392713,734 ops/s
[info] # Warmup Iteration   5: 3398514,803 ops/s
[info] Iteration   1: 3381509,977 ops/s
[info]                  ·gc.alloc.rate:               906,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          421,605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619,466 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   2: 3390954,599 ops/s
[info]                  ·gc.alloc.rate:               895,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          415,638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 309,171 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 3387310,674 ops/s
[info]                  ·gc.alloc.rate:                   892,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              414,710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3387186,790 ops/s
[info]                  ·gc.alloc.rate:               893,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          415,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 309,820 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 3368511,513 ops/s
[info]                  ·gc.alloc.rate:                   902,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              421,639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3383094,711 ±(99.9%) 33979,524 ops/s [Average]
[info]   (min, avg, max) = (3368511,513, 3383094,711, 3390954,599), stdev = 8824,374
[info]   CI (99.9%): [3349115,187, 3417074,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   898,289 ±(99.9%) 22,597 MB/sec [Average]
[info]   (min, avg, max) = (892,904, 898,289, 906,169), stdev = 5,868
[info]   CI (99.9%): [875,691, 920,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   417,741 ±(99.9%) 13,699 B/op [Average]
[info]   (min, avg, max) = (414,710, 417,741, 421,639), stdev = 3,557
[info]   CI (99.9%): [404,043, 431,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933,145 ±(99.9%) 1405,416 MB/sec [Average]
[info]   (min, avg, max) = (666,380, 933,145, 1334,481), stdev = 364,982
[info]   CI (99.9%): [≈ 0, 2338,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   434,245 ±(99.9%) 657,782 B/op [Average]
[info]   (min, avg, max) = (309,171, 434,245, 623,269), stdev = 170,824
[info]   CI (99.9%): [≈ 0, 1092,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,009 ±(99.9%) 0,045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,022), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,342
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,58% complete, ETA 00:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 877685,907 ops/s
[info] # Warmup Iteration   2: 3044749,617 ops/s
[info] # Warmup Iteration   3: 2954618,367 ops/s
[info] # Warmup Iteration   4: 3196386,241 ops/s
[info] # Warmup Iteration   5: 3213741,010 ops/s
[info] Iteration   1: 3167575,092 ops/s
[info]                  ·gc.alloc.rate:               1387,095 MB/sec
[info]                  ·gc.alloc.rate.norm:          688,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661,283 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 3219908,781 ops/s
[info]                  ·gc.alloc.rate:                   1416,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              692,312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3217802,584 ops/s
[info]                  ·gc.alloc.rate:               1402,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          685,803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652,256 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 3213486,951 ops/s
[info]                  ·gc.alloc.rate:               1411,836 MB/sec
[info]                  ·gc.alloc.rate.norm:          691,211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654,117 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 3231084,715 ops/s
[info]                  ·gc.alloc.rate:                   1432,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              697,418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3209971,625 ±(99.9%) 94628,293 ops/s [Average]
[info]   (min, avg, max) = (3167575,092, 3209971,625, 3231084,715), stdev = 24574,667
[info]   CI (99.9%): [3115343,331, 3304599,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1410,173 ±(99.9%) 64,621 MB/sec [Average]
[info]   (min, avg, max) = (1387,095, 1410,173, 1432,294), stdev = 16,782
[info]   CI (99.9%): [1345,552, 1474,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   691,140 ±(99.9%) 16,568 B/op [Average]
[info]   (min, avg, max) = (685,803, 691,140, 697,418), stdev = 4,303
[info]   CI (99.9%): [674,571, 707,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1334,607 ±(99.9%) 11,084 MB/sec [Average]
[info]   (min, avg, max) = (1331,384, 1334,607, 1338,728), stdev = 2,879
[info]   CI (99.9%): [1323,522, 1345,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   654,140 ±(99.9%) 15,936 B/op [Average]
[info]   (min, avg, max) = (651,185, 654,140, 661,283), stdev = 4,139
[info]   CI (99.9%): [638,204, 670,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,78% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1589511,546 ops/s
[info] # Warmup Iteration   2: 3484498,843 ops/s
[info] # Warmup Iteration   3: 3532196,972 ops/s
[info] # Warmup Iteration   4: 3575779,194 ops/s
[info] # Warmup Iteration   5: 3622634,273 ops/s
[info] Iteration   1: 3606432,502 ops/s
[info]                  ·gc.alloc.rate:               974,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          425,250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 586,050 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 3614777,463 ops/s
[info]                  ·gc.alloc.rate:               954,146 MB/sec
[info]                  ·gc.alloc.rate.norm:          415,272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 292,491 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 3614025,956 ops/s
[info]                  ·gc.alloc.rate:                   963,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              419,399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3589869,563 ops/s
[info]                  ·gc.alloc.rate:                   985,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              431,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 3608423,381 ops/s
[info]                  ·gc.alloc.rate:               961,658 MB/sec
[info]                  ·gc.alloc.rate.norm:          419,279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 293,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3606705,773 ±(99.9%) 38756,883 ops/s [Average]
[info]   (min, avg, max) = (3589869,563, 3606705,773, 3614777,463), stdev = 10065,039
[info]   CI (99.9%): [3567948,890, 3645462,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   967,812 ±(99.9%) 46,754 MB/sec [Average]
[info]   (min, avg, max) = (954,146, 967,812, 985,054), stdev = 12,142
[info]   CI (99.9%): [921,058, 1014,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   422,180 ±(99.9%) 24,650 B/op [Average]
[info]   (min, avg, max) = (415,272, 422,180, 431,700), stdev = 6,402
[info]   CI (99.9%): [397,530, 446,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,052 ±(99.9%) 1416,603 MB/sec [Average]
[info]   (min, avg, max) = (672,038, 941,052, 1344,729), stdev = 367,887
[info]   CI (99.9%): [≈ 0, 2357,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   410,776 ±(99.9%) 621,891 B/op [Average]
[info]   (min, avg, max) = (292,491, 410,776, 589,327), stdev = 161,503
[info]   CI (99.9%): [≈ 0, 1032,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,031), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,014), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1946522,473 ops/s
[info] # Warmup Iteration   2: 4029646,485 ops/s
[info] # Warmup Iteration   3: 3657464,784 ops/s
[info] # Warmup Iteration   4: 3423463,459 ops/s
[info] # Warmup Iteration   5: 4033683,086 ops/s
[info] Iteration   1: 3589564,431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 4032388,860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4033263,570 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4031117,636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3104115,134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3758089,926 ±(99.9%) 1589514,426 ops/s [Average]
[info]   (min, avg, max) = (3104115,134, 3758089,926, 4033263,570), stdev = 412791,849
[info]   CI (99.9%): [2168575,501, 5347604,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727491,621 ops/s
[info] # Warmup Iteration   2: 2973353,236 ops/s
[info] # Warmup Iteration   3: 3113557,417 ops/s
[info] # Warmup Iteration   4: 3137257,622 ops/s
[info] # Warmup Iteration   5: 3135010,775 ops/s
[info] Iteration   1: 3088777,125 ops/s
[info]                  ·gc.alloc.rate:                   1543,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              786,259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 3135951,299 ops/s
[info]                  ·gc.alloc.rate:                   1549,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              777,425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3143130,020 ops/s
[info]                  ·gc.alloc.rate:                   1556,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              779,174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     672,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,694 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 3136289,278 ops/s
[info]                  ·gc.alloc.rate:               1579,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1008,498 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 3140815,994 ops/s
[info]                  ·gc.alloc.rate:               1569,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          786,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 670,915 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3128992,743 ±(99.9%) 87355,504 ops/s [Average]
[info]   (min, avg, max) = (3088777,125, 3128992,743, 3143130,020), stdev = 22685,947
[info]   CI (99.9%): [3041637,239, 3216348,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1559,688 ±(99.9%) 55,893 MB/sec [Average]
[info]   (min, avg, max) = (1543,592, 1559,688, 1579,253), stdev = 14,515
[info]   CI (99.9%): [1503,796, 1615,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   784,227 ±(99.9%) 23,044 B/op [Average]
[info]   (min, avg, max) = (777,425, 784,227, 792,227), stdev = 5,985
[info]   CI (99.9%): [761,183, 807,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1475,884 ±(99.9%) 1150,554 MB/sec [Average]
[info]   (min, avg, max) = (1339,392, 1475,884, 2010,375), stdev = 298,795
[info]   CI (99.9%): [325,329, 2626,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   741,956 ±(99.9%) 574,063 B/op [Average]
[info]   (min, avg, max) = (670,915, 741,956, 1008,498), stdev = 149,082
[info]   CI (99.9%): [167,893, 1316,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,681 ±(99.9%) 5,819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,681, 3,384), stdev = 1,511
[info]   CI (99.9%): [≈ 0, 6,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,341 ±(99.9%) 2,912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,341, 1,694), stdev = 0,756
[info]   CI (99.9%): [≈ 0, 3,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,39% complete, ETA 00:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4441,498 ops/s
[info] # Warmup Iteration   2: 10109,771 ops/s
[info] # Warmup Iteration   3: 13071,376 ops/s
[info] # Warmup Iteration   4: 13017,665 ops/s
[info] # Warmup Iteration   5: 13076,722 ops/s
[info] Iteration   1: 12842,671 ops/s
[info]                  ·gc.alloc.rate:                   1492,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              182815,882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164069,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,564 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         13,000 ms
[info] Iteration   2: 12617,625 ops/s
[info]                  ·gc.alloc.rate:                   1464,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              182621,455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167090,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,607 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 13085,713 ops/s
[info]                  ·gc.alloc.rate:                   1545,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              185825,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241553,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498,230 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 13178,239 ops/s
[info]                  ·gc.alloc.rate:                   1552,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              185335,333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159501,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,714 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13085,666 ops/s
[info]                  ·gc.alloc.rate:               1556,507 MB/sec
[info]                  ·gc.alloc.rate.norm:          187126,832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160462,811 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12961,983 ±(99.9%) 882,695 ops/s [Average]
[info]   (min, avg, max) = (12617,625, 12961,983, 13178,239), stdev = 229,233
[info]   CI (99.9%): [12079,288, 13844,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1522,248 ±(99.9%) 159,202 MB/sec [Average]
[info]   (min, avg, max) = (1464,596, 1522,248, 1556,507), stdev = 41,344
[info]   CI (99.9%): [1363,046, 1681,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   184744,901 ±(99.9%) 7560,159 B/op [Average]
[info]   (min, avg, max) = (182621,455, 184744,901, 187126,832), stdev = 1963,349
[info]   CI (99.9%): [177184,742, 192305,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1471,800 ±(99.9%) 1156,433 MB/sec [Average]
[info]   (min, avg, max) = (1334,718, 1471,800, 2009,018), stdev = 300,322
[info]   CI (99.9%): [315,368, 2628,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   178535,797 ±(99.9%) 136146,994 B/op [Average]
[info]   (min, avg, max) = (159501,925, 178535,797, 241553,839), stdev = 35356,942
[info]   CI (99.9%): [42388,803, 314682,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,875 ±(99.9%) 7,041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,875, 4,144), stdev = 1,829
[info]   CI (99.9%): [≈ 0, 7,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   105,223 ±(99.9%) 846,503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105,223, 498,230), stdev = 219,834
[info]   CI (99.9%): [≈ 0, 951,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 6,000, 13,000), stdev = 4,528
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,59% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1356,481 ops/s
[info] # Warmup Iteration   2: 22331,700 ops/s
[info] # Warmup Iteration   3: 24363,949 ops/s
[info] # Warmup Iteration   4: 24180,027 ops/s
[info] # Warmup Iteration   5: 24301,868 ops/s
[info] Iteration   1: 23954,687 ops/s
[info]                  ·gc.alloc.rate:               399,595 MB/sec
[info]                  ·gc.alloc.rate.norm:          26242,736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33610,449 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 24652,272 ops/s
[info]                  ·gc.alloc.rate:      388,728 MB/sec
[info]                  ·gc.alloc.rate.norm: 24808,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 24364,061 ops/s
[info]                  ·gc.alloc.rate:               401,373 MB/sec
[info]                  ·gc.alloc.rate.norm:          25917,260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42641,832 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 24568,068 ops/s
[info]                  ·gc.alloc.rate:      387,409 MB/sec
[info]                  ·gc.alloc.rate.norm: 24808,018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24559,952 ops/s
[info]                  ·gc.alloc.rate:                   399,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              25602,938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42299,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,334 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   24419,808 ±(99.9%) 1080,766 ops/s [Average]
[info]   (min, avg, max) = (23954,687, 24419,808, 24652,272), stdev = 280,672
[info]   CI (99.9%): [23339,042, 25500,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   395,359 ±(99.9%) 25,833 MB/sec [Average]
[info]   (min, avg, max) = (387,409, 395,359, 401,373), stdev = 6,709
[info]   CI (99.9%): [369,526, 421,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25475,794 ±(99.9%) 2503,738 B/op [Average]
[info]   (min, avg, max) = (24808,018, 25475,794, 26242,736), stdev = 650,213
[info]   CI (99.9%): [22972,056, 27979,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366,501 ±(99.9%) 1309,307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366,501, 660,382), stdev = 340,023
[info]   CI (99.9%): [≈ 0, 1675,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23710,432 ±(99.9%) 84502,663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23710,432, 42641,832), stdev = 21945,073
[info]   CI (99.9%): [≈ 0, 108213,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,267 ±(99.9%) 2,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,267, 1,334), stdev = 0,597
[info]   CI (99.9%): [≈ 0, 2,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,79% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9590,654 ops/s
[info] # Warmup Iteration   2: 23000,092 ops/s
[info] # Warmup Iteration   3: 23848,263 ops/s
[info] # Warmup Iteration   4: 23728,291 ops/s
[info] # Warmup Iteration   5: 23746,124 ops/s
[info] Iteration   1: 23722,251 ops/s
[info]                  ·gc.alloc.rate:               275,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          18293,263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33940,505 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 23943,478 ops/s
[info]                  ·gc.alloc.rate:      260,314 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23760,791 ops/s
[info]                  ·gc.alloc.rate:                   275,377 MB/sec
[info]                  ·gc.alloc.rate.norm:              18233,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33884,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,911 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 23918,970 ops/s
[info]                  ·gc.alloc.rate:      260,052 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104,018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23372,863 ops/s
[info]                  ·gc.alloc.rate:               264,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          17801,080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34448,662 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   23743,671 ±(99.9%) 879,987 ops/s [Average]
[info]   (min, avg, max) = (23372,863, 23743,671, 23943,478), stdev = 228,530
[info]   CI (99.9%): [22863,684, 24623,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267,206 ±(99.9%) 30,289 MB/sec [Average]
[info]   (min, avg, max) = (260,052, 267,206, 275,835), stdev = 7,866
[info]   CI (99.9%): [236,918, 297,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17707,095 ±(99.9%) 2242,404 B/op [Average]
[info]   (min, avg, max) = (17104,018, 17707,095, 18293,263), stdev = 582,345
[info]   CI (99.9%): [15464,691, 19949,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,063 ±(99.9%) 1079,368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,063, 511,773), stdev = 280,308
[info]   CI (99.9%): [≈ 0, 1386,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20454,795 ±(99.9%) 71906,464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20454,795, 34448,662), stdev = 18673,880
[info]   CI (99.9%): [≈ 0, 92361,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,029), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,382 ±(99.9%) 3,290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,382, 1,911), stdev = 0,854
[info]   CI (99.9%): [≈ 0, 3,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,643
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,99% complete, ETA 00:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186,904 ops/s
[info] # Warmup Iteration   2: 3276,133 ops/s
[info] # Warmup Iteration   3: 6421,762 ops/s
[info] # Warmup Iteration   4: 6654,530 ops/s
[info] # Warmup Iteration   5: 6644,715 ops/s
[info] Iteration   1: 6630,734 ops/s
[info]                  ·gc.alloc.rate:                   2067,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              490474,569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471487,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,940 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 6634,978 ops/s
[info]                  ·gc.alloc.rate:                   2088,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              495103,286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472625,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483,843 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 6663,548 ops/s
[info]                  ·gc.alloc.rate:                   2083,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              491957,457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471426,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6665,051 ops/s
[info]                  ·gc.alloc.rate:               2097,038 MB/sec
[info]                  ·gc.alloc.rate.norm:          494986,337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 472228,805 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 6594,528 ops/s
[info]                  ·gc.alloc.rate:               2103,412 MB/sec
[info]                  ·gc.alloc.rate.norm:          501805,206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 638111,592 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   6637,768 ±(99.9%) 111,201 ops/s [Average]
[info]   (min, avg, max) = (6594,528, 6637,768, 6665,051), stdev = 28,879
[info]   CI (99.9%): [6526,566, 6748,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2087,868 ±(99.9%) 53,426 MB/sec [Average]
[info]   (min, avg, max) = (2067,226, 2087,868, 2103,412), stdev = 13,875
[info]   CI (99.9%): [2034,442, 2141,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   494865,371 ±(99.9%) 16780,995 B/op [Average]
[info]   (min, avg, max) = (490474,569, 494865,371, 501805,206), stdev = 4357,971
[info]   CI (99.9%): [478084,376, 511646,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2130,501 ±(99.9%) 1171,726 MB/sec [Average]
[info]   (min, avg, max) = (1987,201, 2130,501, 2674,766), stdev = 304,293
[info]   CI (99.9%): [958,775, 3302,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   505176,020 ±(99.9%) 286160,458 B/op [Average]
[info]   (min, avg, max) = (471426,554, 505176,020, 638111,592), stdev = 74314,962
[info]   CI (99.9%): [219015,562, 791336,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,446 ±(99.9%) 3,444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,446, 2,041), stdev = 0,894
[info]   CI (99.9%): [≈ 0, 3,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   105,623 ±(99.9%) 816,605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105,623, 483,843), stdev = 212,070
[info]   CI (99.9%): [≈ 0, 922,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,600, 6,000), stdev = 1,140
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,19% complete, ETA 00:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26374,789 ops/s
[info] # Warmup Iteration   2: 68015,876 ops/s
[info] # Warmup Iteration   3: 69428,047 ops/s
[info] # Warmup Iteration   4: 69840,937 ops/s
[info] # Warmup Iteration   5: 68858,886 ops/s
[info] Iteration   1: 68994,827 ops/s
[info]                  ·gc.alloc.rate:               881,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          20106,234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15141,809 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   2: 69227,448 ops/s
[info]                  ·gc.alloc.rate:                   912,337 MB/sec
[info]                  ·gc.alloc.rate.norm:              20733,910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30205,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 68894,349 ops/s
[info]                  ·gc.alloc.rate:               883,111 MB/sec
[info]                  ·gc.alloc.rate.norm:          20166,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15186,829 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   4: 69558,580 ops/s
[info]                  ·gc.alloc.rate:               890,487 MB/sec
[info]                  ·gc.alloc.rate.norm:          20139,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15056,955 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 69716,420 ops/s
[info]                  ·gc.alloc.rate:               928,050 MB/sec
[info]                  ·gc.alloc.rate.norm:          20942,463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30062,006 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   69278,325 ±(99.9%) 1362,588 ops/s [Average]
[info]   (min, avg, max) = (68894,349, 69278,325, 69716,420), stdev = 353,860
[info]   CI (99.9%): [67915,737, 70640,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   899,149 ±(99.9%) 78,058 MB/sec [Average]
[info]   (min, avg, max) = (881,762, 899,149, 928,050), stdev = 20,271
[info]   CI (99.9%): [821,091, 977,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20417,724 ±(99.9%) 1507,220 B/op [Average]
[info]   (min, avg, max) = (20106,234, 20417,724, 20942,463), stdev = 391,420
[info]   CI (99.9%): [18910,505, 21924,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   931,225 ±(99.9%) 1403,998 MB/sec [Average]
[info]   (min, avg, max) = (664,046, 931,225, 1332,176), stdev = 364,614
[info]   CI (99.9%): [≈ 0, 2335,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21130,580 ±(99.9%) 31648,182 B/op [Average]
[info]   (min, avg, max) = (15056,955, 21130,580, 30205,301), stdev = 8218,932
[info]   CI (99.9%): [≈ 0, 52778,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,013), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,058 ±(99.9%) 0,501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,291), stdev = 0,130
[info]   CI (99.9%): [≈ 0, 0,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 5,000, 8,000), stdev = 2,000
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,39% complete, ETA 00:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37628,580 ops/s
[info] # Warmup Iteration   2: 74019,337 ops/s
[info] # Warmup Iteration   3: 75847,353 ops/s
[info] # Warmup Iteration   4: 75876,408 ops/s
[info] # Warmup Iteration   5: 75582,460 ops/s
[info] Iteration   1: 75864,608 ops/s
[info]                  ·gc.alloc.rate:               521,665 MB/sec
[info]                  ·gc.alloc.rate.norm:          10817,771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13846,692 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 71987,793 ops/s
[info]                  ·gc.alloc.rate:      481,380 MB/sec
[info]                  ·gc.alloc.rate.norm: 10520,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76088,923 ops/s
[info]                  ·gc.alloc.rate:               527,909 MB/sec
[info]                  ·gc.alloc.rate.norm:          10915,504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13806,299 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 76135,190 ops/s
[info]                  ·gc.alloc.rate:                   532,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              11001,718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13810,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 76151,242 ops/s
[info]                  ·gc.alloc.rate:                   535,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              11060,475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13808,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   75245,551 ±(99.9%) 7026,563 ops/s [Average]
[info]   (min, avg, max) = (71987,793, 75245,551, 76151,242), stdev = 1824,776
[info]   CI (99.9%): [68218,988, 82272,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519,738 ±(99.9%) 84,920 MB/sec [Average]
[info]   (min, avg, max) = (481,380, 519,738, 535,336), stdev = 22,054
[info]   CI (99.9%): [434,818, 604,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10863,095 ±(99.9%) 818,399 B/op [Average]
[info]   (min, avg, max) = (10520,007, 10863,095, 11060,475), stdev = 212,536
[info]   CI (99.9%): [10044,695, 11681,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534,424 ±(99.9%) 1150,388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534,424, 668,340), stdev = 298,752
[info]   CI (99.9%): [≈ 0, 1684,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11054,419 ±(99.9%) 23795,557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11054,419, 13846,692), stdev = 6179,631
[info]   CI (99.9%): [≈ 0, 34849,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,172 ±(99.9%) 0,907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,172, 0,430), stdev = 0,236
[info]   CI (99.9%): [≈ 0, 1,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35407,023 ops/s
[info] # Warmup Iteration   2: 78082,295 ops/s
[info] # Warmup Iteration   3: 81449,785 ops/s
[info] # Warmup Iteration   4: 80902,311 ops/s
[info] # Warmup Iteration   5: 81826,165 ops/s
[info] Iteration   1: 81695,144 ops/s
[info]                  ·gc.alloc.rate:      22,018 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 81630,555 ops/s
[info]                  ·gc.alloc.rate:      21,999 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 81889,392 ops/s
[info]                  ·gc.alloc.rate:      22,071 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 81914,269 ops/s
[info]                  ·gc.alloc.rate:      22,076 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 81854,005 ops/s
[info]                  ·gc.alloc.rate:      22,060 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   81796,673 ±(99.9%) 485,609 ops/s [Average]
[info]   (min, avg, max) = (81630,555, 81796,673, 81914,269), stdev = 126,111
[info]   CI (99.9%): [81311,064, 82282,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   22,045 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (21,999, 22,045, 22,076), stdev = 0,034
[info]   CI (99.9%): [21,913, 22,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   424,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,005, 424,006, 424,006), stdev = 0,001
[info]   CI (99.9%): [424,005, 424,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105591,389 ops/s
[info] # Warmup Iteration   2: 344894,014 ops/s
[info] # Warmup Iteration   3: 357784,490 ops/s
[info] # Warmup Iteration   4: 357518,408 ops/s
[info] # Warmup Iteration   5: 357318,180 ops/s
[info] Iteration   1: 357692,529 ops/s
[info]                  ·gc.alloc.rate:                   2164,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              9519,447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11815,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,571 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 345784,927 ops/s
[info]                  ·gc.alloc.rate:                   2063,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              9386,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9144,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 347097,385 ops/s
[info]                  ·gc.alloc.rate:                   2077,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              9417,331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9106,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 347808,515 ops/s
[info]                  ·gc.alloc.rate:               2093,589 MB/sec
[info]                  ·gc.alloc.rate.norm:          9469,699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9094,435 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 360665,851 ops/s
[info]                  ·gc.alloc.rate:                   2170,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              9466,563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8789,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   351809,841 ±(99.9%) 26367,238 ops/s [Average]
[info]   (min, avg, max) = (345784,927, 351809,841, 360665,851), stdev = 6847,488
[info]   CI (99.9%): [325442,603, 378177,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2113,816 ±(99.9%) 192,776 MB/sec [Average]
[info]   (min, avg, max) = (2063,070, 2113,816, 2170,245), stdev = 50,063
[info]   CI (99.9%): [1921,039, 2306,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9451,841 ±(99.9%) 198,321 B/op [Average]
[info]   (min, avg, max) = (9386,166, 9451,841, 9519,447), stdev = 51,503
[info]   CI (99.9%): [9253,521, 9650,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2146,238 ±(99.9%) 1162,682 MB/sec [Average]
[info]   (min, avg, max) = (2009,281, 2146,238, 2686,359), stdev = 301,945
[info]   CI (99.9%): [983,556, 3308,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9590,045 ±(99.9%) 4821,001 B/op [Average]
[info]   (min, avg, max) = (8789,150, 9590,045, 11815,147), stdev = 1251,999
[info]   CI (99.9%): [4769,044, 14411,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,725 ±(99.9%) 6,061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,725, 3,540), stdev = 1,574
[info]   CI (99.9%): [≈ 0, 6,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,189 ±(99.9%) 26,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,189, 15,571), stdev = 6,922
[info]   CI (99.9%): [≈ 0, 29,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 8,000), stdev = 2,387
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171280,841 ops/s
[info] # Warmup Iteration   2: 530804,154 ops/s
[info] # Warmup Iteration   3: 536765,172 ops/s
[info] # Warmup Iteration   4: 535290,410 ops/s
[info] # Warmup Iteration   5: 526691,810 ops/s
[info] Iteration   1: 540707,980 ops/s
[info]                  ·gc.alloc.rate:               630,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          1835,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1935,089 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 537438,689 ops/s
[info]                  ·gc.alloc.rate:               633,058 MB/sec
[info]                  ·gc.alloc.rate.norm:          1853,177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1946,785 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 537123,253 ops/s
[info]                  ·gc.alloc.rate:               623,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          1827,482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1950,840 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 534409,372 ops/s
[info]                  ·gc.alloc.rate:               623,741 MB/sec
[info]                  ·gc.alloc.rate.norm:          1836,260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1960,786 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 536136,963 ops/s
[info]                  ·gc.alloc.rate:               627,356 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840,982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1956,433 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   537163,251 ±(99.9%) 8881,493 ops/s [Average]
[info]   (min, avg, max) = (534409,372, 537163,251, 540707,980), stdev = 2306,495
[info]   CI (99.9%): [528281,758, 546044,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   627,756 ±(99.9%) 15,863 MB/sec [Average]
[info]   (min, avg, max) = (623,741, 627,756, 633,058), stdev = 4,120
[info]   CI (99.9%): [611,893, 643,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1838,583 ±(99.9%) 36,535 B/op [Average]
[info]   (min, avg, max) = (1827,482, 1838,583, 1853,177), stdev = 9,488
[info]   CI (99.9%): [1802,047, 1875,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665,782 ±(99.9%) 2,709 MB/sec [Average]
[info]   (min, avg, max) = (665,035, 665,782, 666,698), stdev = 0,704
[info]   CI (99.9%): [663,073, 668,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1949,987 ±(99.9%) 38,075 B/op [Average]
[info]   (min, avg, max) = (1935,089, 1949,987, 1960,786), stdev = 9,888
[info]   CI (99.9%): [1911,912, 1988,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 775828,644 ops/s
[info] # Warmup Iteration   2: 1358998,674 ops/s
[info] # Warmup Iteration   3: 1364119,938 ops/s
[info] # Warmup Iteration   4: 1373269,688 ops/s
[info] # Warmup Iteration   5: 1373683,728 ops/s
[info] Iteration   1: 1370539,191 ops/s
[info]                  ·gc.alloc.rate:               738,120 MB/sec
[info]                  ·gc.alloc.rate.norm:          847,309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 770,287 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1367550,809 ops/s
[info]                  ·gc.alloc.rate:               740,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          851,444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 772,733 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1369001,660 ops/s
[info]                  ·gc.alloc.rate:                   733,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              842,994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1334684,546 ops/s
[info]                  ·gc.alloc.rate:               736,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          868,611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 792,188 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 1371436,751 ops/s
[info]                  ·gc.alloc.rate:                   734,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              842,628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1362642,591 ±(99.9%) 60452,478 ops/s [Average]
[info]   (min, avg, max) = (1334684,546, 1362642,591, 1371436,751), stdev = 15699,317
[info]   CI (99.9%): [1302190,113, 1423095,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   736,635 ±(99.9%) 10,260 MB/sec [Average]
[info]   (min, avg, max) = (733,545, 736,635, 740,117), stdev = 2,664
[info]   CI (99.9%): [726,375, 746,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   850,597 ±(99.9%) 41,174 B/op [Average]
[info]   (min, avg, max) = (842,628, 850,597, 868,611), stdev = 10,693
[info]   CI (99.9%): [809,423, 891,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671,693 ±(99.9%) 1,575 MB/sec [Average]
[info]   (min, avg, max) = (671,024, 671,693, 672,039), stdev = 0,409
[info]   CI (99.9%): [670,119, 673,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   775,608 ±(99.9%) 35,870 B/op [Average]
[info]   (min, avg, max) = (770,287, 775,608, 792,188), stdev = 9,315
[info]   CI (99.9%): [739,738, 811,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21341,018 ops/s
[info] # Warmup Iteration   2: 109154,467 ops/s
[info] # Warmup Iteration   3: 114111,485 ops/s
[info] # Warmup Iteration   4: 115938,669 ops/s
[info] # Warmup Iteration   5: 116324,797 ops/s
[info] Iteration   1: 116520,236 ops/s
[info]                  ·gc.alloc.rate:                   3751,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              50649,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4010,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54154,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,843 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 115077,692 ops/s
[info]                  ·gc.alloc.rate:                   3681,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              50330,875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45869,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,285 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 116466,354 ops/s
[info]                  ·gc.alloc.rate:               3742,026 MB/sec
[info]                  ·gc.alloc.rate.norm:          50527,560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4040,279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54554,796 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   4: 116052,492 ops/s
[info]                  ·gc.alloc.rate:               3713,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          50347,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45841,437 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 116064,000 ops/s
[info]                  ·gc.alloc.rate:                   3715,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              50359,886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45954,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,565 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   116036,155 ±(99.9%) 2227,973 ops/s [Average]
[info]   (min, avg, max) = (115077,692, 116036,155, 116520,236), stdev = 578,597
[info]   CI (99.9%): [113808,182, 118264,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3720,774 ±(99.9%) 105,619 MB/sec [Average]
[info]   (min, avg, max) = (3681,496, 3720,774, 3751,358), stdev = 27,429
[info]   CI (99.9%): [3615,155, 3826,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50443,058 ±(99.9%) 539,932 B/op [Average]
[info]   (min, avg, max) = (50330,875, 50443,058, 50649,907), stdev = 140,219
[info]   CI (99.9%): [49903,126, 50982,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3635,590 ±(99.9%) 1372,421 MB/sec [Average]
[info]   (min, avg, max) = (3355,136, 3635,590, 4040,279), stdev = 356,413
[info]   CI (99.9%): [2263,168, 5008,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49274,787 ±(99.9%) 17865,410 B/op [Average]
[info]   (min, avg, max) = (45841,437, 49274,787, 54554,796), stdev = 4639,590
[info]   CI (99.9%): [31409,378, 67140,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,339 ±(99.9%) 1,412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,339, 0,843), stdev = 0,367
[info]   CI (99.9%): [≈ 0, 1,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 7,000), stdev = 0,894
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345046,357 ops/s
[info] # Warmup Iteration   2: 670425,533 ops/s
[info] # Warmup Iteration   3: 681940,815 ops/s
[info] # Warmup Iteration   4: 685373,101 ops/s
[info] # Warmup Iteration   5: 681504,185 ops/s
[info] Iteration   1: 685206,618 ops/s
[info]                  ·gc.alloc.rate:                   2031,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4665,211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3092,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,411 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 681816,628 ops/s
[info]                  ·gc.alloc.rate:                   2063,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              4761,178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4648,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,384 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 683286,650 ops/s
[info]                  ·gc.alloc.rate:                   2050,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              4721,740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4635,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 683248,087 ops/s
[info]                  ·gc.alloc.rate:                   2039,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              4695,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4635,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 683440,233 ops/s
[info]                  ·gc.alloc.rate:                   2067,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              4758,913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4637,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   683399,643 ±(99.9%) 4640,178 ops/s [Average]
[info]   (min, avg, max) = (681816,628, 683399,643, 685206,618), stdev = 1205,039
[info]   CI (99.9%): [678759,465, 688039,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2050,436 ±(99.9%) 58,368 MB/sec [Average]
[info]   (min, avg, max) = (2031,818, 2050,436, 2067,097), stdev = 15,158
[info]   CI (99.9%): [1992,068, 2108,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4720,520 ±(99.9%) 158,893 B/op [Average]
[info]   (min, avg, max) = (4665,211, 4720,520, 4761,178), stdev = 41,264
[info]   CI (99.9%): [4561,627, 4879,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880,281 ±(99.9%) 1148,587 MB/sec [Average]
[info]   (min, avg, max) = (1346,695, 1880,281, 2014,441), stdev = 298,284
[info]   CI (99.9%): [731,694, 3028,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4329,572 ±(99.9%) 2663,800 B/op [Average]
[info]   (min, avg, max) = (3092,116, 4329,572, 4648,235), stdev = 691,780
[info]   CI (99.9%): [1665,772, 6993,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,716 ±(99.9%) 5,412 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,716, 3,228), stdev = 1,406
[info]   CI (99.9%): [≈ 0, 6,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,645 ±(99.9%) 12,425 B/op [Average]
[info]   (min, avg, max) = (0,048, 1,645, 7,411), stdev = 3,227
[info]   CI (99.9%): [≈ 0, 14,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,80% complete, ETA 00:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150675,678 ops/s
[info] # Warmup Iteration   2: 368371,177 ops/s
[info] # Warmup Iteration   3: 373291,352 ops/s
[info] # Warmup Iteration   4: 365348,907 ops/s
[info] # Warmup Iteration   5: 367049,793 ops/s
[info] Iteration   1: 373223,919 ops/s
[info]                  ·gc.alloc.rate:                   1297,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              5467,740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5654,435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 373050,334 ops/s
[info]                  ·gc.alloc.rate:                   1307,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              5516,312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5659,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 372176,232 ops/s
[info]                  ·gc.alloc.rate:                   1303,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              5508,133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5678,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 373724,687 ops/s
[info]                  ·gc.alloc.rate:                   1321,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              5561,617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5655,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,815 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 374610,656 ops/s
[info]                  ·gc.alloc.rate:               1321,966 MB/sec
[info]                  ·gc.alloc.rate.norm:          5551,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5630,509 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   373357,166 ±(99.9%) 3451,011 ops/s [Average]
[info]   (min, avg, max) = (372176,232, 373357,166, 374610,656), stdev = 896,217
[info]   CI (99.9%): [369906,155, 376808,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1310,239 ±(99.9%) 42,438 MB/sec [Average]
[info]   (min, avg, max) = (1297,111, 1310,239, 1321,966), stdev = 11,021
[info]   CI (99.9%): [1267,801, 1352,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5521,151 ±(99.9%) 144,488 B/op [Average]
[info]   (min, avg, max) = (5467,740, 5521,151, 5561,617), stdev = 37,523
[info]   CI (99.9%): [5376,663, 5665,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342,176 ±(99.9%) 4,635 MB/sec [Average]
[info]   (min, avg, max) = (1340,670, 1342,176, 1343,394), stdev = 1,204
[info]   CI (99.9%): [1337,540, 1346,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5655,802 ±(99.9%) 66,459 B/op [Average]
[info]   (min, avg, max) = (5630,509, 5655,802, 5678,881), stdev = 17,259
[info]   CI (99.9%): [5589,342, 5722,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,716 ±(99.9%) 6,033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,716, 3,519), stdev = 1,567
[info]   CI (99.9%): [≈ 0, 6,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,016 ±(99.9%) 25,399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,016, 14,815), stdev = 6,596
[info]   CI (99.9%): [≈ 0, 28,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,000, 5,000), stdev = 1,225
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,00% complete, ETA 00:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255575,986 ops/s
[info] # Warmup Iteration   2: 781162,252 ops/s
[info] # Warmup Iteration   3: 837854,501 ops/s
[info] # Warmup Iteration   4: 795632,491 ops/s
[info] # Warmup Iteration   5: 834392,079 ops/s
[info] Iteration   1: 842002,193 ops/s
[info]                  ·gc.alloc.rate:                   663,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1239,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 824897,443 ops/s
[info]                  ·gc.alloc.rate:               653,725 MB/sec
[info]                  ·gc.alloc.rate.norm:          1246,850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1269,676 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 829554,089 ops/s
[info]                  ·gc.alloc.rate:                   655,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1243,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1264,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 798854,023 ops/s
[info]                  ·gc.alloc.rate:               627,626 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236,134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1313,033 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 824976,306 ops/s
[info]                  ·gc.alloc.rate:               654,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248,938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1272,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   824056,811 ±(99.9%) 60547,915 ops/s [Average]
[info]   (min, avg, max) = (798854,023, 824056,811, 842002,193), stdev = 15724,101
[info]   CI (99.9%): [763508,896, 884604,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   651,016 ±(99.9%) 52,495 MB/sec [Average]
[info]   (min, avg, max) = (627,626, 651,016, 663,463), stdev = 13,633
[info]   CI (99.9%): [598,521, 703,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1242,937 ±(99.9%) 20,032 B/op [Average]
[info]   (min, avg, max) = (1236,134, 1242,937, 1248,938), stdev = 5,202
[info]   CI (99.9%): [1222,905, 1262,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666,412 ±(99.9%) 2,739 MB/sec [Average]
[info]   (min, avg, max) = (665,689, 666,412, 667,333), stdev = 0,711
[info]   CI (99.9%): [663,673, 669,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1272,745 ±(99.9%) 96,981 B/op [Average]
[info]   (min, avg, max) = (1243,836, 1272,745, 1313,033), stdev = 25,186
[info]   CI (99.9%): [1175,765, 1369,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,078), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1134995,686 ops/s
[info] # Warmup Iteration   2: 1737484,176 ops/s
[info] # Warmup Iteration   3: 1758555,309 ops/s
[info] # Warmup Iteration   4: 1748754,198 ops/s
[info] # Warmup Iteration   5: 1761494,245 ops/s
[info] Iteration   1: 1758580,557 ops/s
[info]                  ·gc.alloc.rate:               835,582 MB/sec
[info]                  ·gc.alloc.rate.norm:          747,536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 600,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1764219,108 ops/s
[info]                  ·gc.alloc.rate:               834,518 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 598,700 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1762175,523 ops/s
[info]                  ·gc.alloc.rate:                   831,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              742,310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     599,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1753493,482 ops/s
[info]                  ·gc.alloc.rate:                   842,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              755,609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1205,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1760826,469 ops/s
[info]                  ·gc.alloc.rate:               828,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          740,304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 600,730 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1759859,028 ±(99.9%) 15814,273 ops/s [Average]
[info]   (min, avg, max) = (1753493,482, 1759859,028, 1764219,108), stdev = 4106,917
[info]   CI (99.9%): [1744044,754, 1775673,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   834,444 ±(99.9%) 19,727 MB/sec [Average]
[info]   (min, avg, max) = (828,541, 834,444, 842,166), stdev = 5,123
[info]   CI (99.9%): [814,717, 854,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   745,992 ±(99.9%) 23,104 B/op [Average]
[info]   (min, avg, max) = (740,304, 745,992, 755,609), stdev = 6,000
[info]   CI (99.9%): [722,888, 769,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,157 ±(99.9%) 1157,840 MB/sec [Average]
[info]   (min, avg, max) = (671,355, 806,157, 1344,042), stdev = 300,687
[info]   CI (99.9%): [≈ 0, 1963,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   721,132 ±(99.9%) 1043,512 B/op [Average]
[info]   (min, avg, max) = (598,700, 721,132, 1205,903), stdev = 270,997
[info]   CI (99.9%): [≈ 0, 1764,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,019), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 952301,163 ops/s
[info] # Warmup Iteration   2: 1894547,885 ops/s
[info] # Warmup Iteration   3: 1924629,947 ops/s
[info] # Warmup Iteration   4: 1907820,616 ops/s
[info] # Warmup Iteration   5: 1915499,294 ops/s
[info] Iteration   1: 1910855,412 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1916540,160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1916020,105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1905601,508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1900878,991 ops/s
[info]                  ·gc.alloc.rate:      0,518 MB/sec
[info]                  ·gc.alloc.rate.norm: 0,429 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1909979,235 ±(99.9%) 25994,303 ops/s [Average]
[info]   (min, avg, max) = (1900878,991, 1909979,235, 1916540,160), stdev = 6750,638
[info]   CI (99.9%): [1883984,932, 1935973,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0,104 ±(99.9%) 0,891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,104, 0,518), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 0,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,086 ±(99.9%) 0,738 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0,086, 0,429), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167317,981 ops/s
[info] # Warmup Iteration   2: 482289,001 ops/s
[info] # Warmup Iteration   3: 489610,139 ops/s
[info] # Warmup Iteration   4: 500055,583 ops/s
[info] # Warmup Iteration   5: 497862,280 ops/s
[info] Iteration   1: 502050,465 ops/s
[info]                  ·gc.alloc.rate:                   760,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2094,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 503213,024 ops/s
[info]                  ·gc.alloc.rate:               760,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          2378,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2091,673 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 503408,403 ops/s
[info]                  ·gc.alloc.rate:               767,203 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2090,867 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 500285,764 ops/s
[info]                  ·gc.alloc.rate:                   773,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              2431,705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4199,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 501897,957 ops/s
[info]                  ·gc.alloc.rate:               769,771 MB/sec
[info]                  ·gc.alloc.rate.norm:          2412,976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2100,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   502171,123 ±(99.9%) 4817,223 ops/s [Average]
[info]   (min, avg, max) = (500285,764, 502171,123, 503408,403), stdev = 1251,017
[info]   CI (99.9%): [497353,900, 506988,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   766,530 ±(99.9%) 21,996 MB/sec [Average]
[info]   (min, avg, max) = (760,837, 766,530, 773,962), stdev = 5,712
[info]   CI (99.9%): [744,534, 788,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2401,094 ±(99.9%) 83,227 B/op [Average]
[info]   (min, avg, max) = (2378,796, 2401,094, 2431,705), stdev = 21,614
[info]   CI (99.9%): [2317,867, 2484,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802,648 ±(99.9%) 1149,733 MB/sec [Average]
[info]   (min, avg, max) = (668,373, 802,648, 1336,767), stdev = 298,582
[info]   CI (99.9%): [≈ 0, 1952,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2515,478 ±(99.9%) 3626,044 B/op [Average]
[info]   (min, avg, max) = (2090,867, 2515,478, 4199,979), stdev = 941,672
[info]   CI (99.9%): [≈ 0, 6141,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,039 ±(99.9%) 0,225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,039, 0,131), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,095
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, GraalVM 1.0.0-rc2, 25.71-b01-internal-jvmci-0.43
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc2/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92932,153 ops/s
[info] # Warmup Iteration   2: 175613,103 ops/s
[info] # Warmup Iteration   3: 174132,674 ops/s
[info] # Warmup Iteration   4: 176908,980 ops/s
[info] # Warmup Iteration   5: 176599,851 ops/s
[info] Iteration   1: 177143,843 ops/s
[info]                  ·gc.alloc.rate:                   1070,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              9510,232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11937,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 178326,446 ops/s
[info]                  ·gc.alloc.rate:               1055,699 MB/sec
[info]                  ·gc.alloc.rate.norm:          9314,291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5931,897 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 177340,816 ops/s
[info]                  ·gc.alloc.rate:                   1063,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              9436,355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11930,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,554 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 177302,525 ops/s
[info]                  ·gc.alloc.rate:                   1058,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              9393,451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5969,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 176759,659 ops/s
[info]                  ·gc.alloc.rate:                   1071,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              9536,120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11978,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28,730 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   177374,658 ±(99.9%) 2231,835 ops/s [Average]
[info]   (min, avg, max) = (176759,659, 177374,658, 178326,446), stdev = 579,601
[info]   CI (99.9%): [175142,822, 179606,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1064,021 ±(99.9%) 27,104 MB/sec [Average]
[info]   (min, avg, max) = (1055,699, 1064,021, 1071,355), stdev = 7,039
[info]   CI (99.9%): [1036,918, 1091,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9438,090 ±(99.9%) 345,145 B/op [Average]
[info]   (min, avg, max) = (9314,291, 9438,090, 9536,120), stdev = 89,633
[info]   CI (99.9%): [9092,945, 9783,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,903 ±(99.9%) 1417,938 MB/sec [Average]
[info]   (min, avg, max) = (672,332, 1075,903, 1345,730), stdev = 368,234
[info]   CI (99.9%): [≈ 0, 2493,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9549,278 ±(99.9%) 12650,449 B/op [Average]
[info]   (min, avg, max) = (5931,897, 9549,278, 11978,320), stdev = 3285,281
[info]   CI (99.9%): [≈ 0, 22199,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,228), stdev = 1,432
[info]   CI (99.9%): [≈ 0, 6,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,931 ±(99.9%) 49,083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,931, 28,730), stdev = 12,747
[info]   CI (99.9%): [≈ 0, 55,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:35
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    916323,962 ±   29715,800   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2667,900 ±      75,829  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4580,892 ±     160,217    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2547,278 ±    1166,916  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4376,261 ±    2087,964    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0,021 ±       0,057  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0,036 ±       0,099    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        19,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        21,000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   2193444,191 ±   49724,167   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1457,708 ±      54,753  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1045,517 ±      26,930    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1335,999 ±       6,343  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       958,254 ±      20,462    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,875 ±       7,375  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,623 ±       5,252    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        10,000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        22,000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   6760322,132 ±   85230,403   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       459,126 ±      40,624  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       106,857 ±      10,387    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       371,167 ±    1328,807  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        86,549 ±     309,738    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,001 ±       0,008    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3,000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         8,000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    329993,237 ±   12857,886   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2909,692 ±     152,642  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13872,030 ±     475,119    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2829,122 ±    1195,062  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13486,931 ±    5613,630    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,087 ±       0,579  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,417 ±       2,763    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        21,000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        25,000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5   1005482,902 ±    4654,408   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2704,276 ±      71,749  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4231,338 ±     105,199    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2682,168 ±      30,600  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4196,755 ±      46,075    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0,037 ±       0,200  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0,059 ±       0,313    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        20,000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        23,000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   3172490,216 ±  168620,763   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1365,684 ±      83,301  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       677,246 ±      10,329    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1337,809 ±       4,622  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       663,539 ±      36,695    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,802 ±       6,724  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,394 ±       3,306    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        10,000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        21,000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  16743941,273 ±  297379,204   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       877,511 ±      20,456  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82,453 ±       3,281    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       806,208 ±    1157,851  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        75,847 ±     110,651    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,012 ±       0,044  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,001 ±       0,004    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         6,000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        15,000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  18488013,650 ± 1569800,061   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         2,535 ±      21,824  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0,220 ±       1,892    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    526390,773 ±   70801,073   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1497,240 ±     174,092  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4475,520 ±     123,828    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1465,346 ±    1147,430  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4394,985 ±    3796,744    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,062 ±       0,417  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,195 ±       1,307    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        11,000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        13,000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2290644,721 ±  105073,154   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      3213,447 ±     188,249  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2207,012 ±      67,159    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      3093,809 ±    1429,544  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2123,702 ±     930,682    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,050 ±       0,122  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,034 ±       0,085    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        23,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        24,000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  11456057,570 ±  167606,716   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1445,317 ±      69,605  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       198,481 ±       7,779    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1468,040 ±    1152,583  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       201,619 ±     158,659    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,984 ±       8,286  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,135 ±       1,139    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        25,000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3693777,401 ±   10208,445   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2312,559 ±      58,462  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       984,996 ±      26,923    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2138,240 ±    1140,820  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       910,808 ±     488,506    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,839 ±       7,136  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,357 ±       3,040    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        16,000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        21,000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  15158069,229 ±  212735,239   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      2005,343 ±      29,022  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       208,138 ±       0,472    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2018,062 ±      10,705  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       209,460 ±       2,727    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,612 ±       4,040  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,064 ±       0,420    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        15,000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        18,000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1260368,441 ±  113560,722   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2997,635 ±     244,601  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3742,061 ±      70,837    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2828,359 ±    1157,304  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3530,807 ±    1408,282    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,325 ±       2,454  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,402 ±       3,037    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        21,000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        26,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2733647,751 ±   40851,578   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2423,166 ±      39,900  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1394,607 ±      40,356    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2413,205 ±    1420,588  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1389,486 ±     836,178    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,750 ±       6,410  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,432 ±       3,692    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        18,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        21,000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  22681638,512 ±  661722,790   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       713,448 ±      35,301  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49,488 ±       2,246    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666,778 ±       1,078  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        46,253 ±       1,383    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,022 ±       0,114  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,002 ±       0,008    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5,000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        13,000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6815074,364 ± 1088765,967   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1930,678 ±     312,793  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445,699 ±       9,543    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1871,579 ±    1149,941  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       433,251 ±     289,365    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,783 ±       5,610  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,178 ±       1,252    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        21,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  31662618,564 ± 2138520,549   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       991,748 ±      70,031  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49,281 ±       2,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       941,302 ±    1419,806  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        46,721 ±      69,701    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,012 ±       0,072  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,001 ±       0,004    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         7,000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        17,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  38298290,131 ±  116643,919   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5        ≈ 10⁻³                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   2143280,907 ±   30822,899   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      3235,452 ±      67,331  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2374,981 ±      57,855    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      3085,816 ±    1429,780  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2265,472 ±    1062,676    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,021 ±       0,139  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,015 ±       0,102    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        23,000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        24,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    349816,752 ±   41769,226   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2144,026 ±     250,639  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9642,852 ±     156,836    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2012,347 ±      10,705  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9057,871 ±    1159,756    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,750 ±       6,141  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3,559 ±      29,253    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15,000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        17,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    541216,188 ±  133504,905   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       695,819 ±     163,619  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2023,029 ±      33,386    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       666,303 ±       2,745  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1943,928 ±     529,602    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,035 ±       0,203    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        15,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1478022,498 ±   29754,066   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1015,965 ±      61,502  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1081,461 ±      60,163    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       936,974 ±    1412,225  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       996,693 ±    1493,378    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,013 ±       0,076    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    131577,996 ±    2689,041   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4016,368 ±      49,634  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     48023,590 ±     600,931    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3912,416 ±    1132,928  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     46790,986 ±   14141,851    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,199 ±       0,802    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29,000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        29,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                          128  thrpt    5    602112,304 ±    8875,311   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1899,744 ±      38,182  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4964,248 ±     154,967    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1880,813 ±    1159,958  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4916,488 ±    3072,919    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,671 ±       4,763  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,755 ±      12,477    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                                128  thrpt    5        14,000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        19,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    377974,588 ±    1823,200   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1305,173 ±      51,789  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5432,703 ±     230,801    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207,471 ±    1154,654  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5026,280 ±    4809,924    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,754 ±       6,446  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,142 ±      26,870    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        19,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    980455,898 ±   84821,416   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       731,422 ±      71,317  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1173,628 ±      17,841    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666,968 ±       2,780  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1070,690 ±      92,447    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,007 ±       0,059    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        14,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2831016,981 ±   21043,873   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1349,704 ±      35,988  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       750,077 ±      18,204    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1344,652 ±       4,877  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       747,274 ±       6,540    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,637 ±       4,389  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,354 ±       2,439    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5        10,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        18,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3221345,527 ±   13912,285   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    524814,860 ±    4297,621   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       779,157 ±      48,054  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2335,844 ±     156,499    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       802,009 ±    1149,333  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2405,363 ±    3465,907    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,037 ±       0,215    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         6,000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        17,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                         128  thrpt    5    176936,907 ±    1664,049   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1057,842 ±      44,907  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5      9406,344 ±     471,172    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1075,625 ±    1418,204  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9570,626 ±   12688,205    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,604 ±       5,110  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         5,378 ±      45,515    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        20,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     18975,219 ±     802,056   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1527,839 ±      68,479  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126673,822 ±    2472,302    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1475,737 ±    1159,520  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    122262,127 ±   93124,248    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,775 ±       6,491  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        63,650 ±     533,128    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        20,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     38857,280 ±    3339,496   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1077,372 ±     129,559  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43613,472 ±    2044,352    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1071,019 ±    1411,695  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     43269,758 ±   55871,895    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,716 ±       5,989  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        28,620 ±     239,225    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        23,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     43951,265 ±      85,561   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       651,389 ±       9,465  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23317,083 ±     318,726    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671,690 ±       1,546  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     24043,782 ±      44,359    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,298 ±       1,572    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        12,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     32616,129 ±     537,095   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1657,997 ±      36,582  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79975,755 ±    1116,513    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1604,866 ±    1417,478  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     77417,877 ±   68473,275    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,929 ±       5,860  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        44,690 ±     281,926    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        24,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     27461,986 ±     323,281   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      2041,467 ±      35,598  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    116954,746 ±    1745,219    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2009,868 ±      12,376  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    115145,552 ±    1990,803    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,795 ±       5,390  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        45,720 ±     310,195    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        21,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     27168,738 ±     393,408   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1738,643 ±      61,461  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    100681,023 ±    3695,058    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1736,656 ±    1407,033  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    100591,824 ±   82032,042    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,837 ±       6,941  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        48,522 ±     402,350    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        22,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     29497,290 ±     598,944   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1803,746 ±      70,224  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     96202,894 ±    3057,877    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1746,216 ±    1418,334  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     93130,140 ±   75536,133    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,683 ±       4,094  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        36,527 ±     218,879    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        18,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     30327,883 ±    1039,118   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1741,389 ±      89,113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90333,127 ±    3518,190    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1746,318 ±    1415,288  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     90654,166 ±   74760,952    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,687 ±       5,693  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        35,509 ±     294,130    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        19,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      8638,816 ±     210,497   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1294,370 ±      46,321  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    235725,233 ±    5394,940    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1339,846 ±       4,884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    244017,068 ±    6659,357    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,841 ±       6,711  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       154,703 ±    1235,604    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        24,000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     19409,510 ±     889,715   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1787,002 ±      58,496  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144867,706 ±    9205,765    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1744,620 ±    1421,114  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    141598,439 ±  118936,021    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,783 ±       6,340  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        63,410 ±     513,462    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13,000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        22,000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     44774,761 ±     424,323   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1268,108 ±      20,540  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44556,960 ±     943,484    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203,629 ±    1153,658  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     42306,982 ±   40738,906    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,837 ±       7,029  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        29,438 ±     247,183    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        23,000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     70282,329 ±    2592,198   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       799,654 ±      32,018  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     17900,287 ±     366,432    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671,831 ±       1,692  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     15039,983 ±     548,028    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,187 ±       0,988    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        12,000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     34901,838 ±    2930,887   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2304,004 ±     193,828  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    103857,801 ±    1531,177    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2152,433 ±    1158,275  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     96963,487 ±   48699,376    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,225 ±       1,803  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10,325 ±      82,984    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     30017,193 ±     531,882   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1929,551 ±      30,191  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101132,369 ±    1179,214    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1872,240 ±    1151,581  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     98151,220 ±   60891,396    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,787 ±       5,278  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        41,327 ±     277,633    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        21,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     38141,721 ±     967,982   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1726,895 ±      73,903  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     71230,043 ±    2350,270    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1746,910 ±    1416,205  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     72088,309 ±   59085,869    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,675 ±       4,812  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        27,794 ±     198,275    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        13,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        20,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     37357,346 ±    3169,321   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1629,852 ±     167,640  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68634,297 ±    2445,862    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1614,086 ±    1419,731  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     67948,611 ±   58830,841    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,671 ±       5,060  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        27,918 ±     209,941    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        12,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        19,000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    379281,392 ±    5000,714   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2154,130 ±      69,382  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8935,454 ±     190,466    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2011,801 ±      11,104  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8345,250 ±     134,921    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,729 ±       6,186  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3,036 ±      25,767    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        18,000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1675903,728 ±   21133,905   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       545,695 ±      42,726  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       512,282 ±      39,154    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       532,835 ±    1146,967  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       500,394 ±    1077,164    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,014 ±       0,105  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,013 ±       0,099    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    742173,878 ±    1413,979   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       633,654 ±      16,350  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1343,242 ±      36,938    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667,236 ±       2,171  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1414,427 ±       4,780    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,009 ±       0,076    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14,000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   2046632,967 ±  142793,660   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       410,457 ±      50,446  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       315,601 ±      45,304    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       402,094 ±    1413,418  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       310,906 ±    1093,301    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,616 ±       5,219  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,486 ±       4,114    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    112715,202 ±    2003,226   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3797,374 ±      20,395  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     53003,765 ±     855,540    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3636,377 ±    1442,886  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     50774,599 ±   21012,499    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,037 ±       0,164  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,525 ±       2,309    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        27,000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        27,000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                                128  thrpt    5    754641,116 ±    4993,537   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      2034,461 ±      25,925  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      4241,492 ±      66,816    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2014,537 ±      11,129  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4199,953 ±      42,018    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,687 ±       5,308  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,434 ±      11,079    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    393310,900 ±   44873,506   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1366,673 ±     158,522  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5466,821 ±      87,685    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1341,711 ±       5,397  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5370,894 ±     634,169    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,754 ±       5,149  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,085 ±      21,000    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        10,000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        19,000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1835862,363 ±  100372,707   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       875,942 ±      70,055  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       750,578 ±      25,414    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800,471 ±    1147,092  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       685,000 ±     962,983    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,011 ±       0,056  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,010 ±       0,048    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        15,000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1125851,308 ±   23684,843   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       816,468 ±      19,781  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1140,938 ±      25,351    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       669,041 ±       1,672  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       934,937 ±      20,643    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,012 ±       0,061    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        13,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   3078426,931 ±   29226,057   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1474,099 ±      56,285  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       753,355 ±      32,461    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1478,573 ±    1150,605  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       755,772 ±     592,192    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,641 ±       4,862  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,328 ±       2,489    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5        11,000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        17,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3575287,662 ±   21071,586   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         2,256 ±      18,826  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0,995 ±       8,302    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    521915,224 ±   37359,342   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       627,218 ±      42,701  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1890,790 ±      48,701    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       668,687 ±       1,513  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2016,296 ±     144,524    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,012 ±       0,107    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        14,000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                               128  thrpt    5    188397,039 ±   10987,661   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1118,698 ±      39,968  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      9342,782 ±     307,676    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1076,209 ±    1419,386  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      9009,383 ±   12121,285    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,671 ±       5,684  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5,752 ±      48,781    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         8,000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        19,000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    176849,456 ±   14401,883   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2248,814 ±     183,894  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     20005,582 ±      19,337    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2152,664 ±    1158,985  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     19143,093 ±    9845,617    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,033 ±       0,166  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,297 ±       1,472    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16,000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        16,000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    498466,791 ±   23520,515   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       411,119 ±      49,763  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1297,447 ±     121,842    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       368,896 ±    1319,294  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1160,092 ±    4145,320    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,013 ±       0,112    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3,000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1367706,479 ±   34726,784   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       273,536 ±      27,471  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       314,635 ±      29,417    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       307,081 ±    1079,431  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       353,849 ±    1243,899    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,014 ±       0,123    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3,000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     89588,320 ±    3466,026   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3600,374 ±      88,326  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63226,315 ±    1171,359    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3497,412 ±    1128,258  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     61462,257 ±   22445,264    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,659 ±       1,182    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        26,000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        28,000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                   128  thrpt    5    337164,331 ±    1893,042   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1582,574 ±      47,451  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7384,767 ±     198,861    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1477,811 ±    1150,790  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      6895,275 ±    5349,532    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,691 ±       4,797  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3,225 ±      22,381    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        11,000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        17,000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    332264,820 ±    4656,586   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1866,699 ±      40,490  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8838,848 ±      78,449    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1742,811 ±    1412,964  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8254,177 ±    6729,462    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,138 ±       0,340    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        13,000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        15,000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   2044599,353 ±   91886,339   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1081,874 ±      77,742  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       832,435 ±      31,064    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070,937 ±    1411,514  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       823,407 ±    1077,495    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,679 ±       5,666  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,518 ±       4,324    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2952046,446 ±   64053,831   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       822,825 ±      41,306  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       438,520 ±      17,027    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,161 ±    1159,178  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       429,375 ±     612,405    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,004 ±       0,023    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        14,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3231556,862 ±   30671,408   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻³                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     53303,511 ±     603,701   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2421,329 ±      48,288  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71466,929 ±    1832,832    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2411,857 ±    1419,103  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     71200,102 ±   42280,936    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,229 ±       1,883  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         6,775 ±      55,704    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18,000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        19,000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                  128  thrpt    5    162060,528 ±    2226,664   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1178,961 ±      56,214  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11445,172 ±     502,520    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1076,362 ±    1419,061  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     10450,867 ±   13796,362    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,662 ±       4,792  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         6,413 ±      46,382    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         8,000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        17,000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    268589,541 ±    3083,579   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2955,513 ±      74,224  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17312,011 ±     363,543    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2824,181 ±    1154,933  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16543,494 ±    6799,654    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,049 ±       0,257    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        21,000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        20,000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    427185,318 ±    3976,648   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      2203,995 ±      41,321  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8117,087 ±     126,858    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2147,976 ±    1157,403  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7912,323 ±    4324,977    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,012 ±       0,044  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,046 ±       0,162    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        16,000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        18,000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2515209,310 ±  145729,130   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       898,609 ±      54,954  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       562,134 ±      32,822    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       940,837 ±    1417,965  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       590,265 ±     911,256    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,050 ±       0,343  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,031 ±       0,213    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         7,000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     97236,643 ±    9139,505   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3819,374 ±     454,430  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     61787,735 ±    1890,194    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3659,704 ±    1458,096  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59187,810 ±   21584,257    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,403 ±       1,399    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        27,000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31,000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                   128  thrpt    5    464221,181 ±    2549,261   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2271,700 ±      53,667  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7699,086 ±     160,043    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2283,114 ±    1421,424  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7737,769 ±    4816,655    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,708 ±       6,052  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2,403 ±      20,539    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        17,000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        19,000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    287619,824 ±    2873,178   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2334,841 ±      65,239  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12771,738 ±     335,142    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2279,474 ±    1406,760  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12470,243 ±    7737,382    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,142 ±       0,996  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,774 ±       5,442    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        17,000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        18,000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1733145,953 ±   28289,060   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1046,846 ±      18,469  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       950,329 ±      25,337    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070,914 ±    1411,545  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       972,897 ±    1290,363    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,671 ±       5,684  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,609 ±       5,163    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        20,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   3128011,491 ±   89679,032   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1100,806 ±      27,393  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       553,688 ±      14,148    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1075,918 ±    1417,404  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       541,904 ±     721,979    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,591 ±       4,958  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,296 ±       2,483    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8,000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        18,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3488198,282 ±   76815,048   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         1,280 ±      10,433  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0,583 ±       4,755    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    438676,264 ±   10788,006   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2830,214 ±      92,746  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10150,342 ±     183,728    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2701,152 ±      42,768  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9687,756 ±     238,292    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,030 ±       0,256    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        20,000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        22,000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                  128  thrpt    5    105969,921 ±    1129,359   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       812,902 ±      26,329  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     12068,545 ±     329,923    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       806,431 ±    1158,637  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11970,712 ±   17165,216    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,248 ±       1,559    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         6,000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        15,000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     29007,407 ±     470,422   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1875,010 ±      65,345  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101697,036 ±    3810,201    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1878,740 ±    1150,939  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    101937,867 ±   63351,157    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,783 ±       4,238  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        42,493 ±     230,498    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        21,000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5    109733,442 ±    3323,690   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5      1064,406 ±      58,153  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15261,215 ±     852,632    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1068,520 ±    1408,328  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15328,774 ±   20301,234    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,238 ±       1,491    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        21,000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     74344,908 ±    5409,073   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1337,504 ±     117,281  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28301,640 ±     789,166    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1339,486 ±       6,014  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     28353,154 ±    2118,310    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,845 ±       5,300  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        17,745 ±     111,244    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        22,000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    152328,149 ±    1078,736   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1058,528 ±      49,530  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10932,906 ±     583,223    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1075,781 ±    1418,071  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11115,652 ±   14704,395    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,591 ±       5,047  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6,108 ±      52,126    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        20,000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     41285,722 ±     769,882   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2041,296 ±      35,513  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     77784,836 ±    1021,762    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2005,037 ±      13,894  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     76404,352 ±    1722,950    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,895 ±       6,159  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        34,261 ±     236,163    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        22,000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                                 128  thrpt    5     74973,939 ±    4145,790   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1473,281 ±      51,399  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30915,277 ±     991,970    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1478,313 ±    1150,272  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30998,748 ±   23432,227    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,683 ±       5,015  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        14,228 ±     104,444    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        11,000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        19,000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     35172,173 ±     289,438   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       579,544 ±      38,781  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25922,947 ±    1900,711    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       535,527 ±    1152,763  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23973,265 ±   51604,328    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,373 ±       3,211    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        11,000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     36063,568 ±     286,898   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       457,999 ±      35,188  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19980,247 ±    1616,526    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       503,102 ±    1113,824  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     21963,863 ±   48618,112    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,182 ±       1,563    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     37195,559 ±    5718,103   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       464,600 ±      51,377  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19663,656 ±    2096,281    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       504,840 ±    1118,593  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     21507,474 ±   48174,206    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,190 ±       1,633    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     38161,454 ±     316,756   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       426,456 ±      38,533  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17582,319 ±    1719,019    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       402,082 ±    1413,375  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     16598,337 ±   58345,693    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,666 ±       5,693  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        27,539 ±     235,272    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         7,000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                                128  thrpt    5     30166,726 ±     357,344   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       727,576 ±      15,519  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     37944,467 ±     471,254    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       672,087 ±       1,085  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     35051,049 ±     448,497    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,434 ±       2,287    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        12,000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     16450,228 ±    1614,657   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1206,174 ±     132,618  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115351,790 ±    1964,194    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1209,015 ±    1156,677  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    115109,076 ±  103204,114    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,870 ±       4,583  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        82,281 ±     429,884    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        25,000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     16940,044 ±     261,535   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1111,507 ±      53,701  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    103229,254 ±    5633,977    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1071,351 ±    1412,569  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     99546,182 ±  131775,443    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,654 ±       5,585  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        60,682 ±     518,334    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26,000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    118034,202 ±    1004,225   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       317,288 ±      37,189  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4229,363 ±     523,346    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       338,908 ±    1217,332  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4523,377 ±   16248,230    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     15319,168 ±     349,254   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1517,785 ±      52,875  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    155874,633 ±    4558,063    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1472,038 ±    1157,387  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    151161,808 ±  118363,672    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,904 ±       6,783  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        92,824 ±     697,258    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        25,000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                               128  thrpt    5     15439,559 ±     439,149   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1085,632 ±      42,490  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    110621,501 ±    5001,992    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1076,449 ±    1419,187  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    109830,118 ±  146406,308    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,441 ±       3,667  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        45,072 ±     374,347    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        23,000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     48472,398 ±    1514,275   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1241,826 ±      27,583  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40309,287 ±    1896,780    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207,994 ±    1154,503  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     39243,858 ±   37925,770    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,766 ±       5,023  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24,723 ±     161,792    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        20,000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     67427,911 ±    1928,592   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1183,604 ±      53,131  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27616,797 ±     996,748    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1071,384 ±    1411,375  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     24980,179 ±   32699,020    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,750 ±       5,883  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        17,503 ±     137,239    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        20,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    194534,188 ±    2888,531   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       318,696 ±      34,329  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2577,670 ±     312,292    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338,916 ±    1217,360  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2748,440 ±    9870,854    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,101 ±       0,581    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    203643,368 ±     504,025   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         1,091 ±       9,392  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         8,438 ±      72,632    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     63534,992 ±     600,428   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1234,179 ±      41,691  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30561,315 ±    1088,645    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1207,320 ±    1153,696  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29904,184 ±   28673,026    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,804 ±       5,279  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        19,864 ±     130,406    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        21,000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                              128  thrpt    5     18436,047 ±    2246,731   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       661,185 ±      85,522  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     56419,473 ±     900,037    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       669,957 ±       3,424  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57217,385 ±    7112,165    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,687 ±       5,872  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        58,333 ±     498,516    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5    102891,599 ±     988,513   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2644,688 ±      46,818  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     40438,363 ±     690,974    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2543,901 ±    1157,954  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     38902,877 ±   17894,622    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,255 ±       1,598    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19,000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        19,000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    139442,555 ±    2783,630   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1989,458 ±      51,584  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22445,733 ±     314,782    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2004,378 ±      12,558  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     22614,603 ±     484,712    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,862 ±       5,764  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         9,761 ±      65,351    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        21,000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    183035,038 ±   11601,938   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1727,904 ±     125,667  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14851,512 ±     627,132    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1745,565 ±    1413,817  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15016,993 ±   12414,822    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,679 ±       5,096  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5,886 ±      44,232    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        20,000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     61030,379 ±    4189,969   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3289,310 ±     183,468  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84798,338 ±    2029,676    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3246,015 ±    1161,720  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     83728,930 ±   31895,297    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,033 ±       0,156  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,855 ±       3,980    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24,000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        27,000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                   128  thrpt    5    122696,479 ±    3606,743   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2351,120 ±      45,696  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     30147,927 ±     962,561    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2281,209 ±    1418,695  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     29272,055 ±   18847,589    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,154 ±       1,020  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,966 ±      12,965    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        17,000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        17,000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    197933,805 ±    4495,649   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1326,399 ±      53,072  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10541,944 ±     309,042    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1340,930 ±       7,235  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     10657,717 ±     183,272    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,745 ±       5,231  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         5,904 ±      41,423    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        25,000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    592680,031 ±    4415,984   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       620,348 ±      19,504  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1646,698 ±      61,361    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       667,952 ±       2,108  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1773,044 ±      14,301    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,011 ±       0,095    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    786401,549 ±   34235,056   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       623,534 ±      32,075  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1247,429 ±      27,440    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       671,181 ±       1,608  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1342,904 ±      61,163    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,017 ±       0,088    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        12,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    859763,291 ±    4188,711   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    361563,955 ±   27525,421   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1021,628 ±      64,577  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4445,978 ±     173,401    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       934,933 ±    1408,558  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4071,406 ±    6163,923    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,055 ±       0,316    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        21,000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                  128  thrpt    5     47415,021 ±    1363,624   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       517,255 ±      35,393  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     17162,414 ±     887,630    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       505,116 ±    1119,327  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     16769,059 ±   37050,123    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,140 ±       1,206    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        10,000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     42498,704 ±    1484,186   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      2170,789 ±      98,352  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80357,924 ±    1510,223    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2012,147 ±      10,574  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     74490,986 ±    2501,286    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,770 ±       6,191  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        28,512 ±     228,928    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        15,000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        18,000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    326347,863 ±    1983,076   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       347,426 ±      31,303  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1674,933 ±     158,446    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       368,363 ±    1317,068  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1777,441 ±    6354,046    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,008 ±       0,070  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,039 ±       0,338    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    123254,998 ±    4464,079   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1482,377 ±      36,949  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18922,004 ±     595,271    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472,032 ±    1143,115  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18801,279 ±   14933,288    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,858 ±       7,030  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10,869 ±      88,990    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        21,000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    522805,467 ±   24177,661   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       352,691 ±      51,189  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1061,266 ±     133,941    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370,899 ±    1327,679  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1113,292 ±    3977,321    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,650 ±       5,505  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,943 ±      16,458    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     46865,793 ±     519,960   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2333,489 ±      56,555  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78334,810 ±    2586,563    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2273,446 ±    1414,499  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     76336,023 ±   48042,129    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,875 ±       7,486  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        29,384 ±     251,502    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        17,000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        20,000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                  128  thrpt    5     95442,230 ±    1123,397   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1799,177 ±      65,352  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     29657,384 ±     875,082    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1745,755 ±    1411,899  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     28766,748 ±   23052,888    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,716 ±       6,123  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        11,771 ±     100,614    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        13,000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        18,000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     80444,519 ±   14390,829   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       654,493 ±     150,798  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12793,208 ±     718,051    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535,300 ±    1152,275  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     10259,532 ±   22088,140    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        11,000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     97508,310 ±     634,887   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       568,667 ±      10,080  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9175,327 ±     182,147    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       666,173 ±       1,715  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     10748,559 ±      80,548    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,005 ±       0,035  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,082 ±       0,560    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        14,000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     86123,965 ±     416,207   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       524,414 ±      38,305  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9579,879 ±     728,170    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       400,760 ±    1408,728  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7324,554 ±   25746,927    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,228 ±       1,966    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     96447,163 ±     737,192   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       560,221 ±      30,467  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9138,414 ±     551,920    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       537,263 ±    1156,499  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      8770,011 ±   18878,191    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,068 ±       0,586    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     95513,798 ±    9835,354   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       479,247 ±      65,668  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7893,556 ±     594,104    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       504,917 ±    1118,793  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      8339,298 ±   18590,884    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,135 ±       0,712    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5        10,000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     11263,786 ±     158,899   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1861,885 ±      77,042  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    260065,086 ±   12841,138    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1741,486 ±    1411,373  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    243356,202 ±  199514,726    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,808 ±       6,867  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       113,489 ±     964,689    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        21,000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5     11283,991 ±     182,614   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1750,890 ±      78,310  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    244054,566 ±    8833,226    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1736,557 ±    1404,536  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    242114,211 ±  196912,354    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,900 ±       6,710  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       125,269 ±     934,545    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        23,000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    170683,903 ±    8671,143   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       459,031 ±      53,089  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4230,312 ±     309,566    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       505,149 ±    1119,414  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4637,184 ±   10289,529    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,076 ±       0,401    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5        10,000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      6408,215 ±     128,615   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1684,639 ±      57,710  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    413585,331 ±   14736,866    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1602,636 ±    1409,855  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    393632,044 ±  350234,962    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,937 ±       6,834  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       231,573 ±    1691,360    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        26,000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                                128  thrpt    5     10464,668 ±     183,033   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1679,031 ±      75,002  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    252415,682 ±    9666,766    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1744,694 ±    1415,283  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    262314,389 ±  213269,322    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,791 ±       5,185  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       119,298 ±     782,703    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        25,000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     21357,791 ±     586,324   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1666,540 ±      69,662  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122761,840 ±    2654,620    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607,955 ±    1414,751  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    118388,436 ±  102781,469    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,783 ±       6,607  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        57,630 ±     486,342    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        20,000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     26256,687 ±     343,382   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1781,233 ±      11,133  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106728,249 ±    1212,641    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1605,559 ±    1410,192  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     96234,125 ±   85233,445    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,783 ±       6,652  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        47,186 ±     400,930    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        18,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    147145,963 ±    5855,894   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       337,632 ±      27,907  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3610,325 ±     347,141    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       338,926 ±    1217,405  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3639,252 ±   13042,967    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,133 ±       0,764    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    153841,853 ±    7195,877   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         1,404 ±      12,089  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        14,679 ±     126,361    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     25664,884 ±     488,778   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1790,985 ±      18,257  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109789,414 ±    2021,868    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1740,792 ±    1417,938  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    106765,448 ±   88046,406    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,820 ±       6,796  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        50,600 ±     419,226    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        21,000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                               128  thrpt    5     10759,988 ±      61,254   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5       948,695 ±      43,564  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    138707,916 ±    6121,057    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941,081 ±    1416,431  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    137603,475 ±  207213,696    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,221 ±      10,509    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        19,000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    135826,290 ±    8130,978   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1941,577 ±     110,312  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22489,521 ±     399,062    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1877,977 ±    1158,024  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     21781,891 ±   14054,664    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,770 ±       4,797  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         8,893 ±      55,473    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        14,000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        18,000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    622186,904 ±    2128,364   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       664,804 ±       9,302  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1681,017 ±      25,632    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       666,909 ±       1,727  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1686,340 ±       8,075    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,007 ±       0,063  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,018 ±       0,159    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        13,000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    358567,189 ±    1880,314   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       510,619 ±      43,921  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2240,445 ±     202,307    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       400,026 ±    1406,147  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1756,515 ±    6174,410    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,037 ±       0,315    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         3,000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    836389,661 ±   18278,567   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       564,369 ±      25,293  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1061,593 ±      30,343    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       535,755 ±    1153,255  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1005,802 ±    2165,140    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,600 ±       5,075  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,125 ±       9,515    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     84114,039 ±     872,737   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3484,250 ±      42,918  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65168,449 ±     600,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3361,342 ±      71,782  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     62869,607 ±    1231,515    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,037 ±       0,280  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,700 ±       5,230    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        25,000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        25,000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                    128  thrpt    5    256204,858 ±    8628,030   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1470,733 ±      49,604  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5      9031,400 ±     180,272    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1344,193 ±       8,523  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8254,835 ±     318,070    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,704 ±       5,748  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4,385 ±      35,843    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        10,000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5        18,000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    220434,356 ±    1756,439   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1619,337 ±      30,578  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11557,570 ±     244,942    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1474,324 ±    1155,418  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     10522,505 ±    8244,452    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,750 ±       5,319  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5,355 ±      38,007    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11,000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        18,000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    711926,009 ±  183769,151   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       399,419 ±     122,308  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       882,204 ±      92,888    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       399,464 ±    1404,174  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       869,708 ±    3065,556    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,019 ±       0,106  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,043 ±       0,233    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3,000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    668518,871 ±   20830,575   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       512,643 ±      32,702  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1206,510 ±      91,691    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502,933 ±    1113,358  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1184,794 ±    2615,033    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,087 ±       0,709  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,206 ±       1,670    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        12,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1230372,784 ±   24719,831   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       688,982 ±      20,384  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       881,007 ±      24,090    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671,829 ±       2,149  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       859,086 ±      17,018    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,011 ±       0,056    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        11,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1314203,807 ±   14468,505   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     38563,921 ±     756,831   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      2209,754 ±      41,223  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     90149,933 ±     914,904    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2142,751 ±    1142,311  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     87432,951 ±   47242,427    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,829 ±       7,002  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        33,837 ±     285,875    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        19,000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    141660,844 ±    1927,052   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1282,151 ±      32,543  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     14239,584 ±     431,281    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1210,660 ±    1158,736  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     13454,068 ±   12978,810    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,662 ±       5,523  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         7,347 ±      61,270    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         9,000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5        17,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    146360,651 ±    3179,208   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1875,919 ±      55,809  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20164,654 ±     304,655    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1740,245 ±    1410,176  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     18715,560 ±   15349,268    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,779 ±       5,588  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         8,442 ±      60,695    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        19,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    226197,663 ±    3362,853   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1389,239 ±      40,938  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9662,710 ±     368,355    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1336,959 ±       5,807  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9299,003 ±     157,720    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,841 ±       5,937  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         5,859 ±      41,304    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        23,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    284094,538 ±    5238,398   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1525,604 ±      55,254  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8448,617 ±     275,060    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1478,666 ±    1153,392  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8185,497 ±    6288,345    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,650 ±       5,594  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,592 ±      30,932    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        11,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        17,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     75770,514 ±    7235,853   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3063,537 ±     313,613  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63608,221 ±    1504,534    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2973,620 ±    1451,298  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     61706,290 ±   27920,454    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±       0,334  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,121 ±       6,873    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        22,000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        25,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                               128  thrpt    5    182028,376 ±    1642,914   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2019,417 ±      63,130  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     17453,999 ±     479,525    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1878,042 ±    1147,977  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     16231,160 ±    9898,319    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,721 ±       5,043  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6,233 ±      43,631    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        17,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    195033,915 ±   33992,759   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1303,632 ±     222,599  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10516,667 ±     399,772    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207,260 ±    1155,718  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9783,536 ±    9890,213    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,762 ±       6,473  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6,043 ±      51,285    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    780604,397 ±   80231,261   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       811,695 ±      32,905  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1636,568 ±     109,149    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       802,033 ±    1148,141  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1630,753 ±    2573,589    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,025 ±       0,144    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         6,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        17,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    765200,596 ±   28562,538   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       608,713 ±      23,941  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1251,573 ±      31,854    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671,565 ±       2,179  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1380,887 ±      51,124    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,034 ±       0,181    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    848662,634 ±   40478,343   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         1,599 ±      13,723  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         3,022 ±      25,930    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    386132,258 ±   13153,733   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1093,005 ±      59,322  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4452,677 ±     105,471    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1068,808 ±    1406,223  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4347,464 ±    5642,611    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,746 ±       6,375  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,086 ±      26,386    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        22,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                              128  thrpt    5     47614,489 ±     261,246   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       514,750 ±      40,732  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     17008,634 ±    1400,229    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       402,688 ±    1415,505  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     13315,538 ±   46806,083    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,138 ±       1,186    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         3,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     12025,703 ±     255,718   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1534,353 ±      45,001  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    200739,552 ±    8712,627    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1475,252 ±    1144,743  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    193111,051 ±  153023,999    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,795 ±       6,406  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       103,720 ±     835,403    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        23,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     12018,426 ±    1698,646   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1400,468 ±     198,835  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183321,972 ±    4917,414    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1338,811 ±       6,319  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    175446,974 ±   26075,786    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,891 ±       5,517  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       117,248 ±     712,315    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        23,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    304552,247 ±    3298,812   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      2042,417 ±      58,132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10550,837 ±     242,352    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1881,153 ±    1150,403  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9714,556 ±    5863,786    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,662 ±       4,770  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3,435 ±      24,763    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        14,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        16,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      9732,501 ±     139,720   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1758,125 ±      74,645  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    284192,759 ±    9940,877    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1736,222 ±    1404,042  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    280664,718 ±  227141,992    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,937 ±       7,369  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       151,508 ±    1191,659    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        13,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        26,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                          128  thrpt    5     10926,781 ±     165,099   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1335,565 ±      43,979  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5    192289,158 ±    4020,333    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1344,448 ±       5,548  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    193572,814 ±    3206,334    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,779 ±       6,179  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       111,771 ±     886,750    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        25,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     28349,636 ±    3873,216   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1494,033 ±     217,702  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82909,484 ±    3084,821    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1474,799 ±    1158,683  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     81792,329 ±   61071,752    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,791 ±       6,635  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        43,192 ±     361,698    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        21,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     36610,849 ±     414,895   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1527,719 ±      47,391  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65649,173 ±    1928,136    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1472,937 ±    1156,809  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     63293,082 ±   49642,224    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,787 ±       6,554  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        33,810 ±     281,503    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        20,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    704295,406 ±    9050,090   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1310,431 ±      31,218  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2927,342 ±      84,829    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210,101 ±    1157,556  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2703,905 ±    2595,058    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,658 ±       5,487  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,474 ±      12,294    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        18,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    868523,003 ±     980,539   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0,024 ±       0,205  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0,044 ±       0,372    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     33910,445 ±     242,146   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1540,323 ±      56,636  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71464,570 ±    2826,087    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1473,442 ±    1157,388  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     68376,661 ±   54160,271    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,808 ±       6,912  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        37,578 ±     321,485    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        21,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                         128  thrpt    5     15517,946 ±     185,485   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1015,821 ±      35,691  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    102989,935 ±    4078,650    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,798 ±    1418,504  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     95551,229 ±  144755,547    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,693 ±       8,927    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        17,000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     37869,011 ±    2054,901   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2005,498 ±     142,696  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83313,998 ±    2353,898    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1877,802 ±    1147,401  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     77889,147 ±   44461,749    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,795 ±       6,670  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32,829 ±     275,278    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14,000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        25,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     39130,865 ±    4561,036   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1739,920 ±     227,341  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69947,438 ±    1355,259    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1738,429 ±    1406,798  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69741,446 ±   52533,993    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,866 ±       7,146  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        34,487 ±     284,549    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        13,000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        23,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    519673,676 ±    7070,559   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1394,620 ±      20,756  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4222,169 ±      65,127    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1344,844 ±       5,022  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4071,484 ±      47,982    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,675 ±       4,421  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,044 ±      13,390    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        19,000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     21178,948 ±     382,516   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      2145,161 ±      44,048  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    159346,522 ±    1655,947    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2004,394 ±      14,353  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    148893,639 ±    3704,418    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,904 ±       7,044  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        67,611 ±     527,413    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        15,000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        22,000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                              128  thrpt    5     36453,057 ±     947,494   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1680,505 ±      23,526  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     72525,659 ±    1786,077    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1611,460 ±    1416,593  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     69571,617 ±   61734,972    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,766 ±       6,330  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        32,965 ±     272,297    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        26,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     62486,870 ±     362,485   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1921,529 ±      62,369  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48379,061 ±    1488,564    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741,918 ±    1407,935  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     43857,496 ±   35456,880    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,766 ±       5,012  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        19,325 ±     126,419    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        17,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    170627,340 ±    1082,477   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2071,919 ±      44,936  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19104,142 ±     386,420    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2006,838 ±      11,347  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18504,110 ±     131,652    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,758 ±       6,482  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6,978 ±      59,670    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        19,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1310808,256 ±    7957,843   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1453,217 ±      28,589  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1744,181 ±      33,929    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344,530 ±       6,948  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1613,733 ±       7,665    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,654 ±       5,496  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,785 ±       6,600    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        17,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1519274,340 ±   26531,849   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         4,073 ±      34,999  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         4,206 ±      36,142    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     75814,692 ±    2045,418   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1925,484 ±      61,430  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39958,475 ±    1245,954    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1873,385 ±    1156,675  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     38897,438 ±   24480,814    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,804 ±       5,443  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        16,838 ±     114,250    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        20,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                             128  thrpt    5     30240,311 ±    2046,817   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       708,547 ±      32,417  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     36864,731 ±     898,802    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671,584 ±       1,057  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     34947,595 ±    2442,177    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,860 ±       5,396    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        12,000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     19630,802 ±     899,504   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1740,256 ±      47,495  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    139471,687 ±    4285,422    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1608,733 ±    1414,425  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    129098,642 ±  117208,049    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,833 ±       6,860  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        68,088 ±     561,382    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        20,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     19676,161 ±    1139,635   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1591,312 ±      54,777  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    127250,918 ±    5827,494    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1604,868 ±    1408,045  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    128522,615 ±  116957,286    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,887 ±       5,490  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        71,978 ±     449,559    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        23,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    737194,461 ±  115766,224   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1988,895 ±     314,582  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4244,420 ±      42,652    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1880,991 ±    1159,838  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3997,669 ±    1956,107    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,654 ±       5,361  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,372 ±      11,238    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        14,000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        17,000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     14851,502 ±     372,250   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1986,530 ±      56,768  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    210437,312 ±    4254,027    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2004,580 ±      14,670  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    212354,682 ±    5079,746    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,929 ±       6,112  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        98,452 ±     649,070    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        15,000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        25,000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                              128  thrpt    5     19597,851 ±     306,101   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1620,449 ±      49,699  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    130072,501 ±    4208,318    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1610,354 ±    1414,652  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    129270,634 ±  113757,992    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,754 ±       5,233  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        60,733 ±     421,891    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        21,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     48957,308 ±    1659,033   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1922,486 ±      98,606  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61779,402 ±    1572,199    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1875,494 ±    1157,001  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     60212,469 ±   35734,365    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,754 ±       5,545  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        24,171 ±     177,958    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        20,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     62942,350 ±     933,287   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1950,314 ±      51,425  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48743,868 ±     715,261    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2008,090 ±      11,362  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     50188,971 ±     969,546    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,779 ±       5,213  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        19,538 ±     130,878    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        21,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1427707,796 ±  149068,318   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1340,773 ±     136,134  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1477,486 ±      30,764    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1345,057 ±       5,253  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1483,005 ±     148,883    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,621 ±       4,528  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,659 ±       4,763    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        17,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1730681,687 ±    6072,950   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3838,047 ±     217,210   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       525,444 ±      43,950  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    215366,618 ±    9087,254    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       535,286 ±    1152,243  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    219328,053 ±  472366,956    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,103 ±      29,491    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        12,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                             128  thrpt    5     34182,232 ±     164,943   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       787,247 ±      14,778  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     36232,445 ±     614,487    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       672,102 ±       1,395  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     30933,058 ±     160,087    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,384 ±       2,023    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        12,000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    136665,510 ±   10798,798   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2171,168 ±     200,504  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24993,765 ±     889,259    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2146,353 ±    1161,905  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     24702,660 ±   12912,773    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,758 ±       6,215  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         8,676 ±      71,049    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16,000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        18,000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    418206,157 ±    9627,238   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       858,013 ±      26,354  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3227,960 ±     143,311    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       800,302 ±    1148,856  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3014,264 ±    4389,354    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,014 ±       0,054  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,051 ±       0,203    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        17,000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    284477,817 ±   21184,651   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       637,644 ±      50,097  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3526,525 ±      80,075    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       666,896 ±       2,172  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3689,421 ±     275,356    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,023 ±       0,197    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14,000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    567887,344 ±   14052,393   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       743,186 ±      30,298  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2059,125 ±     124,147    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806,161 ±    1158,563  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2237,777 ±    3292,168    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,023 ±       0,201    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        14,000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     81546,095 ±    4533,115   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3450,738 ±     213,012  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66574,597 ±     436,166    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3359,225 ±      72,959  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     64818,699 ±    3026,685    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,162 ±       0,855    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25,000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        27,000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    147112,163 ±    1817,516   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1295,898 ±      43,732  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13858,841 ±     329,750    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1341,265 ±       4,879  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     14344,298 ±     187,207    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,775 ±       6,225  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8,315 ±      66,841    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        10,000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22,000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    224966,897 ±   38111,897   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       179,556 ±      46,462  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1255,234 ±     200,035    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       102,358 ±     881,330  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       702,514 ±    6048,861    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,003 ±       0,028  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,022 ±       0,193    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         1,000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    466225,952 ±   10855,318   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       475,494 ±      46,352  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1604,706 ±     171,767    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       502,969 ±    1113,467  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1699,244 ±    3756,308    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,028 ±       0,241    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    512201,549 ±   18403,384   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       416,786 ±      51,947  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1280,450 ±     186,374    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370,768 ±    1327,133  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1143,181 ±    4094,430    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    553572,339 ±    2332,112   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     31965,435 ±    1230,874   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1753,729 ±      78,287  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     86307,204 ±    1985,990    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1740,645 ±    1409,369  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     85662,518 ±   69297,510    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,854 ±       6,422  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        42,312 ±     318,856    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        22,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      9271,863 ±     172,921   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1328,537 ±      24,207  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    225434,258 ±    4963,625    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341,940 ±       6,258  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    227710,378 ±    4904,717    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,808 ±       6,472  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       136,990 ±    1097,551    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        24,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8903,369 ±     109,551   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1176,263 ±      34,805  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    207846,084 ±    7374,192    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1072,018 ±    1413,224  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    189559,474 ±  251377,574    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,812 ±       6,858  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       143,498 ±    1211,808    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        24,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    201142,385 ±    4543,111   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      2019,921 ±      62,796  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15798,857 ±     237,110    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      2015,117 ±       9,137  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     15761,888 ±     417,715    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,658 ±       4,971  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5,183 ±      39,204    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        15,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        19,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      8539,108 ±     401,163   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1434,391 ±      63,955  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    264271,131 ±    6794,211    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1337,319 ±       7,566  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    246410,962 ±   11975,153    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,950 ±       6,066  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       175,149 ±    1112,829    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        25,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                         128  thrpt    5      8324,956 ±    1367,095   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                          128  thrpt    5      1148,391 ±     187,623  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    217021,152 ±    6258,901    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1076,101 ±    1417,858  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    203279,919 ±  267022,300    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,758 ±       5,166  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       139,729 ±     943,787    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                                128  thrpt    5        22,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     22474,204 ±     345,251   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1284,847 ±      27,827  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89946,306 ±    1704,961    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1341,501 ±       6,011  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     93913,248 ±    1467,705    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,779 ±       6,393  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        54,319 ±     445,786    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        23,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     27945,170 ±    4401,226   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1239,264 ±     210,232  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69762,868 ±    1340,063    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1205,285 ±    1154,355  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     67396,525 ±   58020,879    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,791 ±       6,635  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        43,482 ±     364,372    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        22,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    408983,070 ±    9113,989   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       951,495 ±      26,886  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3660,298 ±     110,954    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       941,560 ±    1420,032  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3622,810 ±    5473,455    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,032 ±       0,278    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        16,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    459444,562 ±    2040,786   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻³                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     26891,889 ±    4553,333   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1292,392 ±     222,880  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75609,701 ±    2493,184    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1206,455 ±    1153,879  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     70599,494 ±   67785,891    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,820 ±       6,930  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        46,696 ±     393,883    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        21,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                        128  thrpt    5     11914,936 ±     426,870   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                         128  thrpt    5      1020,716 ±      40,954  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    134779,128 ±    5607,060    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5       941,034 ±    1417,020  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    124369,413 ±  188666,610    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,633 ±      14,061    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                               128  thrpt    5        15,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     14727,048 ±     637,666   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1445,338 ±      54,174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    154408,443 ±    4795,860    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1475,583 ±    1152,806  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    157898,745 ±  130715,111    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,812 ±       5,232  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        86,981 ±     558,295    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        23,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     15564,427 ±     217,277   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1397,229 ±      35,068  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    141234,266 ±    3590,174    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1337,098 ±       5,684  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    135156,933 ±    2082,546    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,891 ±       5,696  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        90,290 ±     578,316    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        22,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    319604,530 ±    1934,607   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1911,027 ±      66,668  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9407,400 ±     348,011    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1746,415 ±    1412,052  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      8598,699 ±    6986,276    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,658 ±       4,603  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3,239 ±      22,657    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        16,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     14288,558 ±     216,483   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1747,763 ±      32,596  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    192439,812 ±    5198,107    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1741,791 ±    1407,619  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    191881,048 ±  157112,136    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,175 ±       1,372  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19,369 ±     152,026    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                             128  thrpt    5     14316,324 ±    1263,886   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1358,556 ±     149,160  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    149242,277 ±    3903,140    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1208,992 ±    1155,809  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    132256,998 ±  118941,134    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,779 ±       6,483  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        84,754 ±     705,478    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        20,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     36682,565 ±     207,074   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1595,032 ±      18,995  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68409,737 ±     989,185    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1609,025 ±    1412,933  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     69027,197 ±   60996,937    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,766 ±       5,111  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        32,826 ±     218,907    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        20,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     89855,484 ±    4093,315   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2271,803 ±     120,458  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39777,789 ±    1042,011    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2277,599 ±    1414,707  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39866,356 ±   24265,953    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,187 ±       1,526  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3,271 ±      26,636    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        17,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        21,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    694164,673 ±   28638,414   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       976,765 ±      59,326  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2213,860 ±     100,670    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       941,421 ±    1419,897  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2134,234 ±    3223,179    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,019 ±       0,100    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        15,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    796953,725 ±   40164,030   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     81892,037 ±    1681,310   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2381,468 ±      49,200  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45752,650 ±    1210,401    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2274,000 ±    1403,970  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     43701,601 ±   27408,058    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,158 ±       1,192  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,050 ±      22,991    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        17,000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        20,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                            128  thrpt    5     22369,362 ±     158,376   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       849,066 ±      30,360  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     59715,924 ±    2175,861    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,844 ±    1157,879  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     56758,399 ±   81668,539    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,587 ±       5,051    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         6,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        13,000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16247,700 ±     798,738   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       869,314 ±      68,234  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     84178,051 ±    6084,779    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       805,497 ±    1156,395  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     77934,628 ±  110659,566    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,037 ±       0,323  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3,610 ±      31,084    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        19,000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     18225,547 ±     360,097   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       804,927 ±      65,013  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69485,723 ±    6626,892    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       802,215 ±    1150,890  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69321,110 ±  100773,418    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,717 ±       6,171    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17,000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    134445,126 ±    1429,330   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       347,313 ±      32,986  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4064,424 ±     426,598    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       338,922 ±    1217,386  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3973,758 ±   14278,277    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,098 ±       0,842    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     16121,421 ±    1092,283   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1230,306 ±     101,448  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    120066,823 ±    7328,437    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1203,827 ±    1151,914  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    117658,480 ±  114692,155    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,916 ±       5,895  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        88,790 ±     571,870    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        27,000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                                 128  thrpt    5     17343,202 ±     114,426   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       847,411 ±      21,632  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     76873,207 ±    2220,591    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       806,545 ±    1158,471  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     73168,805 ±  105150,772    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,134 ±       6,508    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        15,000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     49501,057 ±     290,188   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1523,962 ±      37,187  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48425,732 ±    1239,723    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1473,544 ±    1153,123  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     46824,638 ±   36673,886    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,753 ±       4,954  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        23,922 ±     157,453    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11,000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        20,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     82329,678 ±     899,440   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1748,062 ±      35,382  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33404,286 ±     814,058    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1606,677 ±    1412,613  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     30715,344 ±   27288,780    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,754 ±       6,446  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        14,434 ±     123,428    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12,000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        18,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    361455,058 ±    3411,850   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       711,368 ±      17,699  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3096,376 ±      82,980    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       671,908 ±       1,733  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2924,612 ±      23,768    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        11,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    392631,889 ±   20800,030   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         1,433 ±      12,337  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         5,702 ±      49,088    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     74114,348 ±    1409,879   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1720,585 ±      96,885  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36521,763 ±    1429,794    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741,871 ±    1411,065  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     36955,738 ±   29542,311    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,804 ±       6,520  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        17,102 ±     138,717    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        21,000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                                128  thrpt    5     16361,117 ±    1719,761   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       674,629 ±      67,383  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     64877,904 ±    3610,156    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       671,890 ±       1,745  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64646,566 ±    6996,085    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,789 ±       6,797    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        12,000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    160002,427 ±    7044,511   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      2097,711 ±      60,649  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20627,386 ±     481,746    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2011,858 ±      11,312  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     19784,417 ±     901,808    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,762 ±       6,340  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         7,453 ±      62,004    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        17,000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    920960,909 ±  145404,915   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       525,178 ±      80,435  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       897,259 ±      58,711    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533,022 ±    1147,370  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       916,454 ±    1981,335    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,008 ±       0,043  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,014 ±       0,076    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10,000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    423148,309 ±   90478,864   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       431,829 ±      76,475  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1606,575 ±     138,335    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       368,889 ±    1319,267  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1407,268 ±    5094,630    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,017 ±       0,148    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        10,000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1271306,090 ±   37909,924   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       454,323 ±      29,188  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       562,284 ±      43,050    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370,773 ±    1327,141  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       460,168 ±    1645,575    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     87299,712 ±     854,885   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3531,911 ±      37,983  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63649,481 ±     131,566    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3361,580 ±      72,717  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     60580,162 ±    1371,396    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,150 ±       0,792    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        25,000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        26,000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                  128  thrpt    5    316654,980 ±    6884,187   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1588,211 ±       7,241  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5      7891,047 ±     156,224    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608,957 ±    1418,566  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8002,292 ±    7233,910    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,021 ±       0,179    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12,000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        12,000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    298366,810 ±    3617,562   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1816,863 ±      14,250  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9580,047 ±     134,308    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1741,927 ±    1418,048  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9188,634 ±    7555,513    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,746 ±       6,330  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3,927 ±      33,341    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        13,000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        21,000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1368937,154 ±   11125,531   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       478,843 ±      44,477  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       550,316 ±      52,735    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       399,715 ±    1405,056  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       459,636 ±    1615,685    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,010 ±       0,083    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1713195,692 ±   89621,712   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1031,765 ±      56,747  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       947,514 ±      31,640    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       937,428 ±    1412,113  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       862,151 ±    1314,529    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,004 ±       0,034    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        18,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   2098265,477 ±   37135,877   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       733,147 ±      22,741  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       549,699 ±      10,672    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671,847 ±       2,238  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       503,750 ±       9,763    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,003 ±       0,027    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        17,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2257782,814 ±    8455,782   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0,011 ±       0,095  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0,008 ±       0,066    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     46637,890 ±    1169,724   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2330,768 ±      63,204  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78627,717 ±    1475,668    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2141,512 ±    1144,463  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     72227,960 ±   37937,949    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,196 ±       1,332  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6,605 ±      44,894    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        16,000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                                 128  thrpt    5    158273,105 ±    1989,055   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1249,799 ±      52,202  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     12423,033 ±     402,191    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210,830 ±    1158,970  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     12028,369 ±   11422,618    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,687 ±       5,562  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         6,828 ±      55,269    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5        17,000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     17086,105 ±     439,597   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2103,260 ±      70,547  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    193665,749 ±    4985,559    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2145,971 ±    1146,860  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    197551,020 ±  103499,855    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,889 ±       5,694  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        81,659 ±     522,464    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16,000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        21,000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5    100670,633 ±    3393,059   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1351,058 ±      15,051  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21114,780 ±     584,697    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338,541 ±       5,796  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20919,461 ±     722,469    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,862 ±       5,225  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13,431 ±      81,297    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        22,000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    280576,259 ±   24425,834   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       938,883 ±      87,361  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5264,603 ±     234,358    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       941,351 ±    1416,858  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5283,427 ±    8001,188    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,095 ±       0,383    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13899,036 ±     165,395   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2240,879 ±      61,435  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    253652,136 ±    5845,580    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2138,476 ±    1142,976  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    242014,556 ±  127392,759    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,900 ±       7,522  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       102,095 ±     853,766    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        22,000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                   128  thrpt    5     16306,628 ±     328,012   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1905,651 ±      60,453  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5    183856,946 ±    6475,689    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1745,258 ±    1411,508  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    168442,442 ±  137475,946    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,737 ±       4,345  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        71,268 ±     419,923    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        13,000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        18,000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33957,786 ±     647,635   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2852,522 ±      56,692  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    132155,322 ±     325,424    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2700,810 ±      41,344  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    125128,742 ±    2719,644    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,054 ±       0,231  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2,508 ±      10,695    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20,000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        20,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    117260,960 ±    2853,404   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1660,940 ±      37,919  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22285,348 ±     603,944    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1606,208 ±    1413,302  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21563,381 ±   19246,932    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,766 ±       6,509  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10,254 ±      87,086    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        12,000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        20,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    193820,355 ±   21602,212   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       636,039 ±      64,167  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5163,249 ±      85,669    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       671,697 ±       1,577  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      5456,134 ±     632,665    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,033 ±       0,287    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        12,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    213360,985 ±    3595,824   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0,086 ±       0,516  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0,638 ±       3,799    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     52761,451 ±     270,174   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3739,952 ±      60,426  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111518,201 ±    1782,786    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3642,324 ±    1442,712  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    108607,300 ±   43028,325    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,621 ±       1,693    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        27,000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        29,000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                  128  thrpt    5      9865,577 ±      82,739   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1062,121 ±      43,281  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5    169350,786 ±    7466,838    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1075,424 ±    1415,771  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    171530,975 ±  226479,492    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,525 ±       4,339  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        83,555 ±     690,933    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        18,000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     29623,646 ±     634,639   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1601,614 ±      50,935  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     85057,832 ±    2650,708    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1609,940 ±    1412,436  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     85511,845 ±   75270,843    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,812 ±       4,949  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        43,067 ±     262,915    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        21,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     32297,794 ±     899,468   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1388,528 ±      58,792  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     67633,758 ±    1113,081    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1338,761 ±       6,333  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     65213,884 ±    1940,629    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,866 ±       5,557  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        42,063 ±     270,122    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        26,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    711320,483 ±   11328,728   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1911,454 ±      82,130  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4227,669 ±     123,487    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1746,201 ±    1413,056  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3861,042 ±    3099,119    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,650 ±       4,329  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,445 ±       9,641    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13,000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        15,000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     27317,418 ±     372,615   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      2044,897 ±      58,081  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    117764,707 ±    3470,133    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1879,120 ±    1155,104  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    108258,111 ±   67475,226    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,175 ±       1,329  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10,090 ±      76,763    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        18,000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                              128  thrpt    5     31595,657 ±    1191,749   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1453,045 ±      86,961  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     72334,130 ±    2304,892    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1477,329 ±    1153,992  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     73547,695 ±   57406,419    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,737 ±       6,169  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        36,595 ±     306,169    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        22,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     79697,121 ±    2677,478   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      2120,030 ±      68,209  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41850,932 ±     728,275    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2010,176 ±      11,778  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     39684,361 ±    1368,250    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,775 ±       6,009  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        15,337 ±     119,038    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        15,000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        20,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    204554,703 ±    2144,445   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2299,810 ±      35,915  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17688,485 ±     384,390    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2142,799 ±    1145,868  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     16484,823 ±    8978,297    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,171 ±       1,258  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,314 ±       9,687    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        16,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        17,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1663703,286 ±   30842,696   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1427,815 ±      34,558  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1350,237 ±      20,848    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344,998 ±       7,195  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1271,940 ±      19,894    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,650 ±       4,533  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,614 ±       4,281    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        16,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1940212,508 ±   14498,180   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    168014,494 ±   12845,852   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2179,912 ±     155,426  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20413,178 ±     421,780    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2018,260 ±      32,474  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18904,613 ±    1440,559    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,350 ±       0,971    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15,000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        16,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                             128  thrpt    5     38855,137 ±    1644,289   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       826,542 ±      58,872  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     33466,360 ±    1743,385    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806,590 ±    1158,271  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32644,602 ±   46577,821    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,839 ±       3,232    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        14,000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     47194,983 ±    4083,591   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1748,288 ±     141,052  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     58278,659 ±    2340,048    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1737,845 ±    1413,571  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     58068,136 ±   49859,523    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,857 ±       7,158  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        28,314 ±     236,174    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        23,000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    850472,775 ±   32119,717   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1720,444 ±      77,682  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3182,613 ±      77,193    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1612,753 ±    1417,866  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2982,127 ±    2590,322    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,671 ±       5,595  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,235 ±      10,302    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12,000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     36023,982 ±     807,966   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2523,376 ±      75,796  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    110202,310 ±    2385,908    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2423,955 ±    1411,530  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    105917,059 ±   63295,704    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,133 ±       1,060  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5,826 ±      46,372    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        18,000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        20,000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                   128  thrpt    5     46446,087 ±     745,586   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1945,620 ±      46,448  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     65901,722 ±    1977,318    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1880,732 ±    1163,987  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     63701,043 ±   39383,011    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,845 ±       4,848    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        14,000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    424774,304 ±   10212,744   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1219,858 ±      50,333  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4517,998 ±     137,745    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1205,359 ±    1151,547  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4466,132 ±    4288,344    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,758 ±       5,429  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,797 ±      20,043    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         9,000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        22,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2173873,289 ±   50342,908   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1312,625 ±      62,696  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       949,986 ±      46,800    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210,957 ±    1157,917  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       876,953 ±     845,221    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,633 ±       4,624  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,461 ±       3,370    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        16,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2396238,608 ±   13718,992   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    280894,125 ±   34507,791   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1877,383 ±     218,795  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10515,889 ±     341,579    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1747,952 ±    1423,433  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9821,384 ±    8561,503    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,117 ±       0,580  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,646 ±       3,198    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        15,000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                  128  thrpt    5     58789,024 ±    4988,192   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       634,119 ±      44,792  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     16970,330 ±     423,378    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671,735 ±       1,525  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     17982,778 ±    1572,648    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,226 ±       1,194    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         5,000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        12,000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     81249,232 ±    1567,450   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1798,854 ±      37,531  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34831,476 ±     592,754    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1741,449 ±    1419,911  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     33734,268 ±   27794,662    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,833 ±       6,904  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        16,125 ±     133,660    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13,000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        21,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     93882,076 ±   17920,328   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1237,566 ±     251,299  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20737,389 ±    1042,878    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202,552 ±    1150,567  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20251,753 ±   20534,886    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,908 ±       7,244  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        14,925 ±     119,050    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        23,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5    106267,845 ±    2448,511   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1317,486 ±      49,479  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19504,938 ±     550,200    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1209,515 ±    1156,274  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17894,245 ±   16956,942    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,758 ±       4,907  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        11,206 ±      72,421    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        18,000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     50813,564 ±     649,899   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2385,692 ±      59,618  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73864,548 ±    1482,677    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2403,314 ±    1415,801  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74434,698 ±   44545,872    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,983 ±       8,284  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30,567 ±     257,663    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        18,000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        22,000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                                 128  thrpt    5     86166,164 ±    2710,303   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1565,366 ±      46,867  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     28581,349 ±     487,098    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1475,879 ±    1162,220  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     26946,735 ±   21179,977    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,808 ±       5,395  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        14,737 ±      98,437    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        11,000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        21,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    125321,525 ±    3138,024   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1203,805 ±      41,531  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15113,002 ±     524,669    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1206,390 ±    1154,683  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15153,815 ±   14606,352    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,754 ±       5,632  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9,515 ±      71,219    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        21,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    361419,930 ±   17018,304   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       555,188 ±      51,352  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2416,795 ±     178,697    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533,750 ±    1148,939  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2324,856 ±    5006,472    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,073 ±       0,458    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    751776,777 ±   49353,387   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       958,942 ±      95,874  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2006,660 ±      75,529    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940,352 ±    1418,452  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1961,577 ±    2876,058    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,043 ±       0,237    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        18,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    828232,689 ±   34741,906   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0,214 ±       1,837  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,408 ±       3,508    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    266863,138 ±    6396,634   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       878,842 ±      19,088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5181,421 ±     135,158    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802,027 ±    1151,018  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4733,919 ±    6889,789    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,099 ±       0,620    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6,000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                                128  thrpt    5     29388,842 ±     484,551   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       404,753 ±      38,160  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     21668,461 ±    2286,994    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       370,762 ±    1327,110  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     19902,295 ±   71264,762    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,224 ±       1,932    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         9,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    139027,306 ±    2540,628   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1970,927 ±       6,448  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22304,413 ±     345,294    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2008,074 ±      11,968  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     22724,933 ±     508,970    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,791 ±       5,446  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         8,981 ±      61,912    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        15,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        21,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    202493,222 ±    8622,091   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1239,685 ±      48,295  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9631,579 ±     208,704    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1204,774 ±    1150,945  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9360,539 ±    8947,594    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,837 ±       5,723  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6,499 ±      44,495    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        25,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    497432,746 ±   24575,413   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       335,043 ±      54,064  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1059,411 ±     132,154    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       338,872 ±    1217,137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1064,135 ±    3818,762    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,013 ±       0,112    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     76610,559 ±    1571,704   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3095,781 ±      81,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63573,989 ±     992,492    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2971,186 ±    1412,422  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     60998,061 ±   28258,114    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±       0,280  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,766 ±       5,722    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        22,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        25,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                             128  thrpt    5    180989,218 ±    1604,531   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      2016,727 ±      44,660  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17527,201 ±     240,239    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2012,374 ±      14,498  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     17489,615 ±     285,160    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,737 ±       5,699  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6,430 ±      49,733    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        15,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        19,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    201165,978 ±    6519,464   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1319,616 ±      67,504  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10320,095 ±     240,755    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207,361 ±    1155,247  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9427,130 ±    8830,478    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,762 ±       6,384  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,938 ±      49,733    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        19,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    585183,290 ±  107992,480   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       594,525 ±     144,476  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1597,346 ±     100,707    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533,547 ±    1148,503  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1404,519 ±    3023,572    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,022 ±       0,116    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        11,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1281202,734 ±   12920,970   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       980,831 ±      53,222  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1204,452 ±      67,580    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       941,174 ±    1418,545  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1155,991 ±    1745,358    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,015 ±       0,088    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1347008,682 ±  500207,331   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0,289 ±       2,414  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,406 ±       3,411    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    379714,071 ±  106513,622   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1063,655 ±     326,126  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4405,396 ±     162,795    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1069,335 ±    1407,604  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4362,546 ±    4783,012    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,737 ±       6,258  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,412 ±      29,007    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5       151,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                            128  thrpt    5     49852,437 ±     348,835   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       381,723 ±      30,597  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     12047,130 ±    1029,013    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370,765 ±    1327,115  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     11714,314 ±   41938,797    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,132 ±       1,134    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       657,788 ±      73,157   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1413,156 ±     158,445  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3378880,737 ±  127748,350    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1468,636 ±    1158,019  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3507422,058 ± 2600106,202    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1,194 ±       9,659  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2798,818 ±   22590,186    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        29,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       649,897 ±      47,147   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1389,139 ±      42,372  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3362885,728 ±  210065,164    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1331,704 ±      10,655  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3224013,470 ±  227340,396    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1,199 ±       9,032  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2880,327 ±   21599,607    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        27,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     39928,327 ±    2700,773   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       723,461 ±      63,223  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     28504,539 ±     633,595    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       670,361 ±       0,052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     26420,780 ±    1799,932    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,330 ±       2,840    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         5,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        16,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       638,888 ±       8,131   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1410,421 ±      27,229  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3471767,913 ±   87721,043    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1331,513 ±      11,206  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3277516,713 ±   38685,595    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1,265 ±       8,751  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3121,755 ±   21607,155    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        29,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                          128  thrpt    5       656,930 ±      62,964   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1400,608 ±      97,479  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5   3354170,422 ±  116155,323    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1336,944 ±      12,740  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3202792,008 ±  305710,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1,159 ±       8,092  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2760,197 ±   19081,467    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        26,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     15963,583 ±     781,334   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1284,750 ±      55,232  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    126622,926 ±    3975,963    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1334,862 ±       8,000  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    131574,189 ±    6803,392    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1,162 ±       9,961  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       113,440 ±     972,252    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        28,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     18925,029 ±     668,593   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1155,281 ±      34,560  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     96042,642 ±    3650,600    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1067,385 ±    1406,150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     88794,252 ±  117646,665    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1,199 ±       8,871  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       100,704 ±     747,109    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    230047,747 ±    3373,300   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       856,351 ±      33,505  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5856,489 ±     191,366    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804,433 ±    1154,408  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5501,931 ±    7903,050    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,057 ±       0,490    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        18,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    253900,890 ±   16868,255   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         1,439 ±      10,509  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         9,153 ±      67,214    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     19623,879 ±     902,140   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1280,929 ±      44,821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    102696,222 ±    2176,453    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1333,964 ±       8,701  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    106954,987 ±    4293,187    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1,245 ±      10,544  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        99,088 ±     838,689    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        29,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                         128  thrpt    5      7726,977 ±     185,985   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1103,883 ±      54,688  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    224758,120 ±   11576,561    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1072,615 ±    1413,866  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    218471,892 ±  288870,003    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1,033 ±       8,849  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       210,363 ±    1802,212    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        24,000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1707655,552 ±   51019,569   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        72,523 ±      24,238  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        66,855 ±      24,582    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     89905,349 ±     781,622   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3848,256 ±      54,011  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67341,266 ±    1020,161    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3659,484 ±    1433,637  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     64043,093 ±   25343,977    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0,025 ±       0,088  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0,437 ±       1,539    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        27,000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        30,000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1895339,572 ±  295003,955   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1020,758 ±     151,583  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       847,389 ±      30,593    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       936,751 ±    1411,382  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       782,815 ±    1241,129    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,025 ±       0,105  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,020 ±       0,084    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7,000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        19,000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2307512,534 ±  362323,098   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       664,717 ±      98,172  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       453,246 ±      15,411    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671,761 ±       1,574  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       458,641 ±      76,052    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,008 ±       0,044  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,006 ±       0,031    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5,000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        12,000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2570955,362 ±   17083,650   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        26,147 ±       0,174  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     56924,864 ±     716,112   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2463,149 ±      62,477  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     68075,554 ±    2193,908    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2273,053 ±    1405,485  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     62835,387 ±   39297,334    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0,121 ±       0,630  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         3,334 ±      17,371    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        17,000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        20,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    973306,791 ±   14467,127   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      3150,994 ±      64,611  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5093,354 ±      87,115    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      3091,329 ±    1421,974  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      4998,261 ±    2349,141    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,007 ±       0,058    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        23,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        22,000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5552825,819 ± 1013986,696   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       347,413 ±      59,417  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98,438 ±       8,910    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       368,362 ±    1317,683  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       105,696 ±     374,087    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,011 ±       0,095  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,003 ±       0,027    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         9,000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1074942,853 ±  133429,765   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1265,857 ±     164,720  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1852,635 ±      74,815    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1203,411 ±    1153,177  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1766,136 ±    1749,294    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,860 ±       7,205  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1,247 ±      10,441    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        23,000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9050459,307 ± 2432766,293   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       424,433 ±     134,673  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        73,735 ±       6,336    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       371,170 ±    1328,811  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        63,159 ±     227,067    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,001 ±       0,006    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    531354,955 ±    4573,705   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2434,438 ±      62,884  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7208,158 ±     212,824    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2287,141 ±    1418,346  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6772,478 ±    4215,026    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,254 ±       2,056  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,754 ±       6,102    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17,000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        19,000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                  N/A  thrpt    5   1389394,681 ±   52917,519   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1966,770 ±      65,220  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5      2227,100 ±      45,843    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1879,151 ±    1157,640  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2129,317 ±    1344,342    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,725 ±       4,792  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,828 ±       5,474    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5        14,000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        20,000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4962,494 ±      44,364   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2499,971 ±      55,859  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792562,351 ±   18253,315    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2403,392 ±    1402,674  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    762064,847 ±  448296,333    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,246 ±       0,981  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5        77,910 ±     311,586    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        18,000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        22,000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      7785,728 ±     145,150   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2667,698 ±      51,868  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    539052,654 ±   14913,120    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2556,701 ±    1170,198  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    516791,150 ±  242299,996    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,083 ±       0,673  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        16,848 ±     136,239    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        19,000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        22,000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     53526,647 ±     455,774   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       883,617 ±      51,362  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     25969,653 ±    1342,599    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       806,514 ±    1156,888  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     23691,743 ±   33763,411    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,012 ±       0,080  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,368 ±       2,354    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        14,000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      5049,329 ±      88,064   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1110,465 ±      58,015  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    345960,980 ±   19506,297    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1069,836 ±    1407,876  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    333323,711 ±  438948,250    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,814 ±       6,565  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       253,138 ±    2040,957    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         8,000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        24,000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5767,215 ±      41,571   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       428,146 ±      39,992  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    116790,897 ±   10840,323    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       366,919 ±    1311,038  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    100083,560 ±  357612,491    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         3,000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         6,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      7262,681 ±      68,326   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       365,127 ±      33,898  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79097,495 ±    8034,023    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338,903 ±    1217,311  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     73540,299 ±  264130,663    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,903 ±       7,779    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3,000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         7,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      7296,256 ±      60,625   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       313,100 ±      36,881  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67511,923 ±    8189,628    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       338,851 ±    1217,009  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     73128,051 ±  262586,281    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,008 ±       0,072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         1,802 ±      15,519    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         3,000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         9,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      8765,514 ±     580,942   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1867,093 ±     151,604  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    335090,274 ±    6978,331    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1873,914 ±    1156,469  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    336593,015 ±  213155,021    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,848 ±       5,520  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       151,779 ±     993,599    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        14,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        22,000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     21129,699 ±     972,935   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       537,130 ±      32,438  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39995,530 ±    2828,433    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       532,052 ±    1145,283  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     39709,712 ±   85502,366    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,005 ±       0,035  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,376 ±       2,577    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        11,000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     17619,206 ±     213,617   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       481,482 ±      43,986  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     42992,952 ±    4194,875    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       397,238 ±    1396,352  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     35514,189 ±  124838,950    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,746 ±       3,933    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     25558,774 ±    1442,177   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       482,307 ±      61,729  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29683,929 ±    2736,485    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       402,584 ±    1415,140  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     24642,850 ±   86624,394    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,007 ±       0,039  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,440 ±       2,371    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4612,234 ±     225,352   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2839,011 ±     129,001  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    968378,354 ±   17015,127    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2690,141 ±      33,323  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    917723,941 ±   54022,550    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,079 ±       0,347  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        26,920 ±     117,693    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        20,000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        25,000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                  N/A  thrpt    5     11037,372 ±     485,844   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1409,858 ±      26,378  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5    200977,963 ±    9831,510    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1342,411 ±       5,435  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    191361,312 ±    7855,660    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,741 ±       5,142  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       105,419 ±     731,451    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5        10,000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        19,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     11354,696 ±     262,520   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2441,304 ±      48,317  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    338269,487 ±    8213,354    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2409,868 ±    1418,260  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    334091,858 ±  201766,256    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,183 ±       1,311  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        25,505 ±     182,617    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        18,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        21,000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     63015,893 ±     443,917   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       604,048 ±      33,739  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15080,352 ±     853,982    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       531,527 ±    1144,154  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     13272,506 ±   28570,366    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,004 ±       0,025  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,104 ±       0,617    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13,000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     49710,169 ±    7019,814   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       731,591 ±     111,508  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23151,609 ±     484,541    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       665,283 ±       3,239  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     21078,161 ±    3046,126    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,007 ±       0,043  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,223 ±       1,339    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5        14,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     99782,688 ±    2695,392   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       774,893 ±      37,980  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12217,911 ±     636,993    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       805,848 ±    1155,750  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     12697,115 ±   18050,912    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,008 ±       0,072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,131 ±       1,126    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         6,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        14,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    115977,256 ±     722,290   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0,157 ±       0,861  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         2,133 ±      11,675    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      8089,786 ±      74,282   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2671,996 ±      72,283  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    519616,956 ±   13094,158    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2556,212 ±    1168,774  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    497094,183 ±  227033,216    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,075 ±       0,602  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        14,614 ±     117,306    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        19,000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        23,000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                                 N/A  thrpt    5      5013,419 ±      50,156   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                  N/A  thrpt    5       528,699 ±      29,445  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                             N/A  thrpt    5    165906,989 ±   10623,399    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       536,403 ±    1154,647  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    168492,386 ±  362693,511    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,014 ±       0,061  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         4,453 ±      19,088    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                       N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                        N/A  thrpt    5        13,000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9830225,430 ±  231473,924   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      5399,551 ±     163,320  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       864,095 ±       7,413    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      5157,934 ±    1414,530  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       825,252 ±     213,130    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0,042 ±       0,272  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0,007 ±       0,043    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        38,000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        36,000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  42047383,680 ±   97071,975   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5         0,031 ±       0,266  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5         0,001 ±       0,010    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  12033126,202 ±   78738,048   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      4137,214 ±      23,681  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540,916 ±       2,140    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      4048,911 ±      91,007  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       529,375 ±      14,605    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,012 ±       0,044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,002 ±       0,006    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        30,000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        32,000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  53911112,377 ±  296831,613   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  34825663,682 ±  400298,117   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       908,895 ±      48,553  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41,060 ±       2,153    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       942,096 ±    1419,936  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        42,560 ±      64,156    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         7,000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9749528,058 ±  202893,352   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      4125,956 ±      80,366  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       665,801 ±       1,831    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      4052,530 ±      83,210  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       653,971 ±      22,034    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,037 ±       0,067  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,006 ±       0,011    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        30,000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        30,000                    ms
[info] IntBenchmark.readUPickle                                                                            N/A  thrpt    5  12497378,501 ±  657885,064   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                             N/A  thrpt    5      5351,566 ±     268,229  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                        N/A  thrpt    5       673,698 ±       7,853    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      5160,772 ±    1399,872  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       649,853 ±     184,969    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,050 ±       0,176  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,006 ±       0,022    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                  N/A  thrpt    5        38,000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                   N/A  thrpt    5        34,000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  15669716,919 ± 1184166,736   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1902,890 ±     120,958  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       191,069 ±       4,669    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1878,893 ±    1158,539  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       188,888 ±     121,520    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0,675 ±       4,645  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0,068 ±       0,466    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        14,000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        18,000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  46850187,260 ±  213152,987   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       981,397 ±      33,826  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32,956 ±       1,156    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       934,402 ±    1408,510  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        31,382 ±      47,362    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,022 ±       0,097  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,001 ±       0,003    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         7,000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        20,000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  14725773,096 ±  311365,464   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      3035,789 ±      77,893  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       324,346 ±       5,932    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2954,677 ±    1405,678  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       315,715 ±     151,486    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        22,000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        23,000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  53590830,362 ±  849235,030   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1124,832 ±      47,904  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        33,021 ±       1,189    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1075,798 ±    1417,390  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        31,570 ±      41,462    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,616 ±       5,218  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,018 ±       0,154    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8,000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        18,000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  68857343,047 ±  280952,985   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  19750418,006 ±  104844,082   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1868,185 ±      47,193  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148,815 ±       3,043    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1889,752 ±    1161,742  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       150,521 ±      92,235    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,331 ±       2,455  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,026 ±       0,196    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        14,000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   3023902,951 ±  219823,175   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2435,650 ±     180,331  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1267,146 ±      14,574    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2280,176 ±    1399,462  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1185,519 ±     697,173    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,162 ±       1,311  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,084 ±       0,675    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        16,000                    ms
[info] IntBenchmark.writeUPickle                                                                           N/A  thrpt    5  13234691,947 ±   90176,356   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                            N/A  thrpt    5      2370,852 ±      60,321  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                       N/A  thrpt    5       281,836 ±       6,763    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2285,118 ±    1414,634  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       271,677 ±     169,178    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,167 ±       1,390  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,020 ±       0,166    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                                 N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                  N/A  thrpt    5        17,000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    188184,739 ±    2304,054   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3586,075 ±      36,723  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29980,660 ±      82,469    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3376,318 ±      53,907  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28227,491 ±     776,302    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±       0,091  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,279 ±       0,766    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        25,000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        24,000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     36984,473 ±     510,250   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2792,908 ±      81,050  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    118803,744 ±    2625,528    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2697,022 ±      39,213  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    114725,984 ±    1562,541    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,046 ±       0,154  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,953 ±       6,599    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20,000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        23,000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    158667,907 ±    4119,683   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1373,912 ±      57,165  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13622,738 ±     369,772    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336,955 ±       5,708  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13256,922 ±     368,105    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,866 ±       6,135  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8,593 ±      60,916    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        22,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    490767,249 ±    3449,855   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1976,719 ±      47,076  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6336,937 ±     137,747    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1880,366 ±    1156,194  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6028,504 ±    3716,937    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,658 ±       5,058  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,110 ±      16,221    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        14,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        17,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    529228,134 ±   12334,384   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1521,556 ±      53,616  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4523,295 ±     131,844    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1478,936 ±    1163,360  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4396,749 ±    3461,080    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,675 ±       4,554  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2,008 ±      13,540    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        18,000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     70471,139 ±     895,254   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1681,936 ±      53,444  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     37549,775 ±    1145,104    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1608,509 ±    1414,232  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     35913,559 ±   31644,387    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,179 ±       1,409  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,996 ±      31,452    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        12,000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    367837,246 ±     761,003   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2759,868 ±      25,315  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11804,227 ±     123,431    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2686,921 ±      33,115  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11492,221 ±     150,064    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,036 ±       0,188    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        19,000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    635369,400 ±    8376,629   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1704,075 ±      26,419  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4219,248 ±     116,362    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1601,202 ±    1408,100  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3966,900 ±    3541,231    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,904 ±       7,514  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,232 ±      18,557    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        22,000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1507990,948 ±   20130,057   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      3063,309 ±      57,732  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3195,893 ±      49,392    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2965,854 ±    1411,208  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3094,076 ±    1465,920    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,036  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,026 ±       0,037    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        22,000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        21,000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    117325,496 ±    1350,290   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3936,627 ±      38,766  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52788,271 ±     671,558    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3773,915 ±    1377,261  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50613,512 ±   18824,314    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,558 ±       1,074    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28,000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29,000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                                 128  thrpt    5    671677,990 ±   14337,787   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      3034,687 ±      82,509  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7108,015 ±     149,647    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2829,041 ±    1159,491  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6627,933 ±    2793,919    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,107 ±       0,245    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        21,000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        21,000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    378190,831 ±    2395,361   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1309,282 ±      29,126  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5446,588 ±     115,959    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1341,584 ±       5,695  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5580,974 ±      34,218    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,729 ±       6,186  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3,030 ±      25,719    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        10,000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        22,000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    920700,924 ±   34379,179   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       684,232 ±      21,479  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1169,243 ±      28,888    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667,488 ±       2,112  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1140,682 ±      41,763    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,028 ±       0,150    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2337842,508 ±    4526,210   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1114,342 ±      28,121  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       749,916 ±      18,142    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1076,168 ±    1420,089  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       724,226 ±     955,660    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,650 ±       5,505  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,437 ±       3,703    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        17,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2471555,981 ± 1013534,196   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    515867,113 ±   35977,492   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       768,081 ±      57,429  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2342,608 ±     117,923    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       803,259 ±    1152,751  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2451,079 ±    3531,854    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,025 ±       0,219    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6,000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        15,000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                                128  thrpt    5    182193,734 ±    1988,430   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1085,533 ±      33,620  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9374,124 ±     375,174    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1075,493 ±    1418,295  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9294,240 ±   12332,986    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,650 ±       5,549  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5,628 ±      48,074    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         8,000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     65983,818 ±     438,397   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2315,017 ±      42,088  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55196,760 ±     960,197    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2145,580 ±    1147,257  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     51161,662 ±   27546,976    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,171 ±       1,213  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4,076 ±      28,958    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        16,000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        17,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5    103167,010 ±    8993,699   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1911,562 ±     218,748  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29146,475 ±     954,364    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1869,068 ±    1154,441  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28429,342 ±   15619,449    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,920 ±       6,383  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        13,942 ±      96,781    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        14,000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        22,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    181263,405 ±   25697,834   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2884,003 ±     436,087  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25030,046 ±     476,197    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2825,522 ±    1138,943  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24523,971 ±    9042,022    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,012 ±       0,044  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,106 ±       0,374    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        21,000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        22,000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     36144,672 ±     578,094   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2428,235 ±      65,554  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105691,635 ±    2153,691    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2416,640 ±    1415,929  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    105214,872 ±   62423,779    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,105  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,728 ±       4,580    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        18,000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        20,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    174587,714 ±   10565,837   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1168,910 ±      99,924  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10532,730 ±     345,278    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069,784 ±    1409,288  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9624,769 ±   12493,261    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,866 ±       6,380  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7,747 ±      57,095    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        23,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    511040,391 ±    6830,652   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       579,407 ±      44,510  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1783,678 ±     116,625    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       537,112 ±    1156,175  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1651,468 ±    3554,959    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,004 ±       0,036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,013 ±       0,110    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        10,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    548342,114 ±    8751,000   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5,854 ±       1,547  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16,798 ±       4,655    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     70916,460 ±    2624,859   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1491,078 ±      40,630  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     33079,525 ±     671,405    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1469,290 ±    1141,392  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32597,368 ±   25330,355    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,092 ±       0,427  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,048 ±       9,579    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        12,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   3088984,707 ±  259493,295   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      4309,295 ±     349,627  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2194,651 ±      12,920    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      4190,274 ±    1131,862  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2134,510 ±     578,838    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,042 ±       0,098  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,021 ±       0,049    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        31,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        30,000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    932000,469 ±   42848,873   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       542,258 ±      28,646  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       915,360 ±      24,753    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       532,699 ±    1146,674  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       897,215 ±    1931,888    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,013 ±       0,078  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,022 ±       0,131    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10,000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    315935,433 ±   11562,361   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       804,966 ±      32,186  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      4008,630 ±     143,517    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800,838 ±    1147,856  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3992,727 ±    5804,221    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,017 ±       0,067  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,083 ±       0,336    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6,000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        24,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    795381,352 ±   55446,642   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       731,184 ±      54,348  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1446,305 ±      34,142    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672,365 ±       1,607  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1330,317 ±      94,111    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,008 ±       0,072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,017 ±       0,142    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        10,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3635690,515 ±  305523,014   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      2200,051 ±     226,235  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       951,924 ±      35,690    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2155,207 ±    1157,213  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       932,548 ±     490,503    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0,529 ±       4,465  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0,226 ±       1,907    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        16,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        17,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   8905408,921 ±  357776,060   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       980,550 ±      73,653  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       173,223 ±       9,047    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       942,261 ±    1421,338  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       166,470 ±     251,053    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0,025 ±       0,088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0,004 ±       0,016    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         7,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        13,000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    245905,798 ±   15008,098   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2144,989 ±     131,205  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13723,857 ±     540,899    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2151,572 ±    1177,825  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13767,647 ±    7555,230    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,187 ±       1,569  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1,218 ±      10,212    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16,000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        28,000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                                N/A  thrpt    5    322702,776 ±   14353,749   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       633,789 ±      29,345  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      3090,072 ±      98,489    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       671,017 ±       1,546  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      3271,852 ±     145,609    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,012 ±       0,072  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,061 ±       0,350    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5        14,000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1738755,851 ±   49651,115   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       100,883 ±      27,340  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        91,327 ±      27,633    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102,341 ±     881,185  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5        93,853 ±     808,099    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,135 ±       1,160  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,123 ±       1,063    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1,000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     83586,212 ±     492,203   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3692,392 ±      60,295  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69497,226 ±     840,738    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3522,073 ±    1150,690  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66287,775 ±   21404,230    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,004 ±       0,036  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,078 ±       0,674    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        26,000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        29,000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1671629,184 ±  100419,466   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       903,224 ±      64,152  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       850,127 ±      52,198    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935,946 ±    1410,850  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       883,729 ±    1367,092    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,017 ±       0,105  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,016 ±       0,098    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        19,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1795138,654 ±  158342,322   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       517,622 ±      79,738  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       453,589 ±      47,485    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       402,555 ±    1415,038  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       350,551 ±    1232,429    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,004 ±       0,031    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         3,000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1875561,111 ±  417808,489   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        19,074 ±       4,253  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     57132,585 ±     660,498   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2480,372 ±      56,874  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68302,145 ±    1894,766    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2413,075 ±    1401,755  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     66458,117 ±   38881,879    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,025 ±       0,067  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,688 ±       1,844    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        18,000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        20,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    301307,139 ±    5950,360   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1214,194 ±      51,308  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6339,896 ±     235,266    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1210,244 ±    1157,146  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6321,996 ±    6076,794    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,696 ±       4,694  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3,625 ±      24,473    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         9,000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        19,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     44303,493 ±    3699,737   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2163,832 ±     158,217  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     76843,760 ±    1774,320    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2016,512 ±      24,347  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     71633,986 ±    5881,596    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,192 ±       1,302  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         6,738 ±      45,808    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15,000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        19,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    119184,800 ±   23390,220   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1202,619 ±     253,689  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15873,432 ±     807,562    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1204,537 ±    1151,291  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15981,932 ±   16224,755    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,858 ±       5,770  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11,086 ±      74,609    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        22,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    342438,537 ±    8233,647   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       475,667 ±      32,550  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2185,441 ±     161,502    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504,919 ±    1118,775  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2323,974 ±    5150,022    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,004 ±       0,036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,019 ±       0,166    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        10,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    403588,185 ±    3128,584   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         5,938 ±      15,783  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        23,151 ±      61,558    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     58557,501 ±    1110,403   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1556,492 ±      16,576  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     41818,011 ±    1038,106    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1467,312 ±    1140,482  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     39451,026 ±   31524,397    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,012 ±       0,072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,336 ±       1,928    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        18,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     83022,996 ±    1347,464   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1789,927 ±      46,084  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     33918,178 ±     391,223    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1742,708 ±    1413,009  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     33020,285 ±   26703,037    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,758 ±       6,348  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14,367 ±     120,306    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        13,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        21,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    148476,520 ±     767,756   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       736,483 ±      16,386  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7803,557 ±     154,682    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       666,877 ±       2,114  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      7066,066 ±      55,469    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,008 ±       0,044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,088 ±       0,465    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        15,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    322311,718 ±    6163,086   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1375,239 ±      31,988  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6712,977 ±      98,212    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1343,912 ±       6,158  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6560,157 ±     102,271    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,683 ±       5,311  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3,331 ±      25,907    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        10,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        21,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     30390,769 ±     712,910   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1651,564 ±      50,686  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85497,237 ±    3342,904    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1607,374 ±    1406,775  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     83193,058 ±   72474,382    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,283 ±       1,827  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        14,703 ±      94,820    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        16,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    201729,816 ±    2292,319   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1150,775 ±      50,477  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8975,069 ±     372,623    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1070,414 ±    1411,589  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8351,163 ±   11043,867    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,845 ±       7,101  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         6,597 ±      55,401    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         8,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        21,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    533357,469 ±    4943,845   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1606,189 ±      38,889  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4737,446 ±     102,665    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478,059 ±    1160,743  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4360,813 ±    3461,598    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,666 ±       5,336  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1,969 ±      15,790    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        17,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    568532,531 ±   23688,928   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1078,910 ±      30,194  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2985,912 ±     160,486    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1075,964 ±    1418,065  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2984,752 ±    4012,049    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,571 ±       4,824  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         1,596 ±      13,497    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         8,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        17,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     75461,571 ±    2563,830   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1683,878 ±      50,226  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35107,327 ±     631,152    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1610,208 ±    1404,569  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     33611,570 ±   30191,265    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,162 ±       1,399  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3,437 ±      29,597    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        12,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        15,000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5    107020,995 ±    2020,760   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1763,714 ±      60,499  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25927,123 ±     801,638    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1744,388 ±    1414,076  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25645,310 ±   20833,448    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,762 ±       6,162  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11,135 ±      89,981    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        20,000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    190250,238 ±   39700,169   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       806,268 ±     179,554  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6666,520 ±     344,860    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       799,891 ±    1144,318  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6605,055 ±    9059,585    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,098  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,168 ±       0,795    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18,000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    306194,909 ±   16668,938   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1130,091 ±      68,415  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5806,552 ±     191,130    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1209,988 ±    1157,343  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      6225,008 ±    6048,429    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,721 ±       5,981  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,794 ±      31,523    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21,000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     77897,819 ±     745,170   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2958,736 ±      49,650  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     59755,591 ±    1215,201    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2814,606 ±    1174,260  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56853,676 ±   24179,945    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±       0,036  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,084 ±       0,724    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        21,000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        23,000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                               128  thrpt    5    176036,691 ±    1196,778   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1488,028 ±      54,098  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13298,736 ±     524,910    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1477,871 ±    1146,620  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     13209,830 ±   10306,019    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,741 ±       5,724  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6,628 ±      51,192    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        18,000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    225330,307 ±    3978,110   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1584,725 ±      50,861  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     11064,790 ±     370,445    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1608,754 ±    1412,643  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     11240,922 ±   10053,758    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,775 ±       5,208  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5,393 ±      36,268    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        12,000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22,000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    556602,805 ±   13512,960   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       447,946 ±      30,564  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1266,167 ±      92,878    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       368,796 ±    1318,857  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1043,433 ±    3725,983    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±       0,113  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,059 ±       0,320    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         9,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    709111,680 ±   10282,516   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       394,730 ±      40,467  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       875,829 ±      99,514    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       370,637 ±    1326,583  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       824,001 ±    2948,222    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    762507,972 ±   13412,141   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7,755 ±       0,136  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     39164,653 ±     977,465   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      2133,830 ±      64,853  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85715,010 ±    1638,991    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2008,988 ±      11,640  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     80702,847 ±    2127,030    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,812 ±       6,814  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        32,612 ±     273,605    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        15,000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19,000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                              128  thrpt    5    138016,844 ±    1671,169   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1479,158 ±      49,894  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     16861,432 ±     561,311    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1478,653 ±    1148,641  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     16854,618 ±   13060,500    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,712 ±       5,439  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         8,139 ±      62,202    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        19,000                    ms
[info] NestedStructsBenchmark.readCirce                                                                    128  thrpt    5     90089,239 ±    4416,528   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      3388,984 ±     182,954  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     59183,866 ±    1339,058    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      3231,723 ±    1141,437  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     56400,510 ±   17972,359    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,029 ±       0,209  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,504 ±       3,617    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        24,000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        24,000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                             128  thrpt    5    158715,124 ±    1324,393   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      2105,492 ±      58,098  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     20870,599 ±     462,992    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2135,199 ±    1137,448  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21166,117 ±   11312,696    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,044  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,083 ±       0,435    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        16,000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        17,000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                            128  thrpt    5    728116,685 ±   23800,152   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1973,096 ±      97,947  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      4263,361 ±     147,407    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1881,093 ±    1160,349  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4064,649 ±    2507,686    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,625 ±       5,067  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,368 ±      11,108    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        14,000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        18,000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                                 128  thrpt    5     21525,020 ±    1149,647   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2854,302 ±     236,754  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    208613,280 ±   11812,087    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2819,467 ±    1140,513  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    206123,160 ±   84972,804    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,606 ±       2,719  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        44,082 ±     197,266    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        21,000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        27,000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                   128  thrpt    5     90032,570 ±    1127,307   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      3670,768 ±      38,935  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     64144,327 ±     908,948    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3506,689 ±    1166,284  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61286,091 ±   20931,770    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,008 ±       0,044  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,145 ±       0,765    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        26,000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        27,000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                            128  thrpt    5    321226,144 ±   23484,093   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1544,113 ±      88,810  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7563,139 ±     211,090    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space                           128  thrpt    5         0,004 ±       0,030  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm                      128  thrpt    5         0,018 ±       0,151    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.Metaspace                                        128  thrpt    5         0,011 ±       0,091  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm                                   128  thrpt    5         0,053 ±       0,453    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1472,722 ±    1151,807  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7217,861 ±    5746,863    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Old_Gen                                       128  thrpt    5         0,498 ±       4,288  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Old_Gen.norm                                  128  thrpt    5         2,491 ±      21,445    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,885 ±       6,004  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,346 ±      29,537    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5        13,000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        46,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1364316,298 ±   29017,517   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       705,946 ±      32,276  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       814,071 ±      22,256    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671,822 ±       2,123  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       774,758 ±      17,240    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,008 ±       0,044  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,010 ±       0,051    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1471477,425 ±    7864,685   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻³                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                                128  thrpt    5     52377,064 ±    4218,080   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2858,046 ±     237,086  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85848,746 ±    2056,060    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2689,594 ±      34,347  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     80815,060 ±    6209,331    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,325 ±       2,238  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,678 ±      66,186    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        20,000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        24,000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    937468,198 ±   14969,960   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2516,466 ±      80,444  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4223,246 ±     148,589    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2412,217 ±    1419,644  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      4049,786 ±    2427,221    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,200 ±       1,677  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,337 ±       2,823    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        18,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        18,000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   2091527,170 ±   64330,807   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1340,263 ±      31,183  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1008,160 ±      17,775    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1336,223 ±       5,918  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1005,158 ±      33,704    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,912 ±       7,741  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,687 ±       5,827    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5        10,000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        25,000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   9163936,611 ±  567264,355   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       289,687 ±      47,715  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49,723 ±       6,160    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307,062 ±    1079,366  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        52,386 ±     184,146    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,001 ±       0,007    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3,000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    352971,009 ±    6369,021   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2315,830 ±      60,471  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10322,015 ±     267,503    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2283,150 ±    1416,501  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5     10176,164 ±    6307,695    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,329 ±       1,971  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1,470 ±       8,823    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        17,000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        21,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1198760,349 ±   16733,312   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1969,374 ±      40,908  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2584,648 ±      32,711    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2008,049 ±      11,181  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2635,443 ±      45,331    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,779 ±       6,706  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1,021 ±       8,794    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        15,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        22,000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   3043840,986 ±   93546,279   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1342,888 ±      13,314  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       694,136 ±      20,889    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1338,193 ±       5,811  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       691,712 ±      21,745    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,804 ±       6,876  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,418 ±       3,578    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5        10,000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        24,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6968464,857 ± 1552293,712   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       804,233 ±     189,552  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181,551 ±       7,593    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805,853 ±    1155,856  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       181,574 ±     246,921    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,002 ±       0,010    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6,000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        15,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   7270508,671 ± 1828871,286   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       454,590 ±     137,713  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        98,306 ±       8,665    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       370,635 ±    1326,577  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5        78,180 ±     280,046    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0,002 ±       0,009    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         3,000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    481152,337 ±    5953,129   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2658,806 ±      70,152  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8693,769 ±     149,180    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2559,998 ±    1147,206  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8368,580 ±    3673,469    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,079 ±       0,593  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,259 ±       1,941    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        19,000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        22,000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     88228,572 ±    4973,731   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2473,341 ±     129,694  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44103,812 ±    1060,455    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2415,002 ±    1408,432  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     43059,959 ±   24971,403    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0,217 ±       1,386  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         3,843 ±      24,632    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        18,000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        22,000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    140638,894 ±    7485,959   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2233,293 ±      72,710  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24984,071 ±     821,716    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2136,474 ±    1141,933  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23939,385 ±   14282,884    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,937 ±       7,670  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        10,466 ±      85,565    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        16,000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        21,000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    196178,825 ±   15267,893   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2988,705 ±     232,862  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23968,652 ±     604,837    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2827,670 ±    1141,946  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22673,499 ±    8741,492    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,029 ±       0,091  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,236 ±       0,758    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        21,000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     68410,143 ±    2343,642   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3392,102 ±     114,654  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     78003,363 ±    1226,117    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      3359,130 ±      69,548  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     77250,629 ±    3601,566    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,017 ±       0,067  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,382 ±       1,539    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        25,000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        27,000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                      128  thrpt    5    126941,373 ±    2204,638   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                       128  thrpt    5      2548,648 ±      49,675  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                  128  thrpt    5     31583,956 ±     515,677    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2553,140 ±    1161,246  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     31645,945 ±   14606,329    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,104 ±       0,558  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,288 ±       6,903    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                            128  thrpt    5        19,000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                             128  thrpt    5        20,000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    209036,622 ±    1410,967   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1484,635 ±      21,782  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11173,877 ±     162,185    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1340,724 ±       7,523  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     10090,765 ±      73,670    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0,766 ±       6,199  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         5,766 ±      46,641    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10,000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        18,000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    516877,990 ±    9617,330   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       460,064 ±      30,756  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1400,453 ±     105,048    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       502,097 ±    1111,066  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1530,619 ±    3383,249    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,004 ±       0,036  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,013 ±       0,109    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4,000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        12,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    738616,410 ±   11787,112   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       412,418 ±      49,171  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       878,558 ±     115,470    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       370,636 ±    1326,577  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       791,244 ±    2832,669    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,008 ±       0,044  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,018 ±       0,094    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3,000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    736679,880 ±  134394,287   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7,492 ±       1,366  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     39070,025 ±    1171,699   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      2137,412 ±      51,380  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     86061,655 ±    1874,853    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2142,037 ±    1144,588  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     86317,973 ±   48884,770    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,835 ±       6,744  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        33,688 ±     272,033    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        16,000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        21,000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                     128  thrpt    5    134046,655 ±    1697,697   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                      128  thrpt    5      1448,581 ±      39,962  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                                 128  thrpt    5     17001,919 ±     304,855    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1344,037 ±       8,166  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     15775,130 ±     196,267    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,691 ±       5,729  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         8,076 ±      66,920    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                           128  thrpt    5        10,000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                            128  thrpt    5        18,000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3623368,441 ±  112091,126   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      3066,354 ±      60,676  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1331,470 ±      31,232    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2962,085 ±    1396,596  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1286,850 ±     633,103    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,020 ±       0,045    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        22,000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        21,000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   6582839,290 ±   84823,209   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1277,085 ±      41,934  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       305,205 ±       7,827    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336,292 ±       5,641  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       319,361 ±       4,934    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,832 ±       6,976  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,200 ±       1,673    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5        10,000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        23,000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4485141,198 ±   13648,532   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2484,211 ±      65,129  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       871,410 ±      23,568    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2411,086 ±    1423,609  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       845,770 ±     499,740    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,174  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,009 ±       0,061    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        18,000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        18,000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6642466,027 ±   65829,036   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1291,420 ±      43,926  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       305,881 ±       9,568    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211,051 ±    1158,143  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       286,876 ±     274,710    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,637 ±       5,090  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,151 ±       1,206    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        18,000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4486056,365 ±  200049,889   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2697,075 ±     187,450  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       945,842 ±      25,007    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2549,584 ±    1169,963  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       893,323 ±     378,619    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,044  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,003 ±       0,015    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        19,000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                             128  thrpt    5   4102051,826 ±  446011,868   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      2330,770 ±     182,932  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5       894,096 ±      30,392    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2150,714 ±    1151,398  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       828,044 ±     550,149    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,075 ±       0,466  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,028 ±       0,176    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        16,000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        23,000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2312805,940 ±   25610,305   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1387,891 ±      29,068  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       944,101 ±      15,361    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1342,614 ±       4,404  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       913,309 ±      10,752    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,696 ±       4,677  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,472 ±       3,179    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10,000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        20,000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   6379853,416 ±  587255,118   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       636,370 ±      56,450  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       156,932 ±       3,689    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       666,668 ±       1,049  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       164,475 ±      15,403    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,006 ±       0,044  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,001 ±       0,011    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        13,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   5110938,478 ±   95212,835   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1395,406 ±      51,101  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       429,549 ±      12,061    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1340,162 ±       3,980  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       412,552 ±       6,668    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,733 ±       5,242  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,225 ±       1,607    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        20,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6021946,888 ±   52798,178   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       604,404 ±      11,718  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       157,910 ±       3,792    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       671,558 ±       2,123  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       175,454 ±       1,090    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,004 ±       0,036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,001 ±       0,009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        12,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6373805,401 ±  841852,281   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4897537,404 ±  126041,316   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1618,081 ±      50,526  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       519,809 ±      18,167    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1474,661 ±    1157,652  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       474,122 ±     383,446    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,754 ±       5,203  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,241 ±       1,662    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        11,000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        18,000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                            128  thrpt    5    443017,092 ±    3381,447   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       442,667 ±      51,238  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      1572,005 ±     191,660    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370,951 ±    1327,884  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1318,945 ±    4721,362    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3,000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1633985,449 ±   99021,594   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2357,428 ±     162,148  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2269,761 ±      46,632    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2282,846 ±    1411,976  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2200,841 ±    1442,503    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,712 ±       5,685  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,704 ±       5,630    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        17,000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        19,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   3065572,452 ±  131327,650   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       595,720 ±      20,228  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       305,736 ±      10,347    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       666,643 ±       1,075  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       342,153 ±      14,976    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,016 ±       0,076  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,008 ±       0,039    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        13,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1860366,337 ±   19830,659   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1071,939 ±      28,349  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       906,382 ±      31,253    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1070,121 ±    1411,692  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       905,456 ±    1201,278    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,775 ±       6,497  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,657 ±       5,506    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        21,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2564850,261 ±  266393,029   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       498,141 ±      47,818  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       305,612 ±      22,825    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       505,730 ±    1121,034  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       311,045 ±     693,395    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,008 ±       0,072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,005 ±       0,043    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         4,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         9,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1841444,430 ±  285300,904   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1046,192 ±     151,877  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       893,907 ±      25,267    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       938,167 ±    1413,722  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       808,868 ±    1305,107    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,061  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,021 ±       0,052    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        19,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                          128  thrpt    5   1512339,034 ±   74704,661   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1636,671 ±     101,734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      1702,399 ±      36,728    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612,579 ±    1416,908  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1674,833 ±    1411,652    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,662 ±       5,517  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,682 ±       5,683    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                                128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        18,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   2001680,330 ±   21049,562   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1520,761 ±      10,732  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1195,723 ±      15,437    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1476,105 ±    1153,914  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1161,052 ±     920,575    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,682 ±       5,781  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,538 ±       4,564    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        20,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   3383094,711 ±   33979,524   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       898,289 ±      22,597  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       417,741 ±      13,699    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       933,145 ±    1405,416  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       434,245 ±     657,782    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,009 ±       0,045  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,004 ±       0,021    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        18,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   3209971,625 ±   94628,293   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1410,173 ±      64,621  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       691,140 ±      16,568    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1334,607 ±      11,084  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       654,140 ±      15,936    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,012 ±       0,072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,006 ±       0,035    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        12,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3606705,773 ±   38756,883   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       967,812 ±      46,754  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       422,180 ±      24,650    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       941,052 ±    1416,603  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       410,776 ±     621,891    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,012 ±       0,066  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,005 ±       0,029    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3758089,926 ± 1589514,426   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻³                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   3128992,743 ±   87355,504   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1559,688 ±      55,893  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       784,227 ±      23,044    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1475,884 ±    1150,554  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       741,956 ±     574,063    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,681 ±       5,819  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,341 ±       2,912    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        19,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     12961,983 ±     882,695   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1522,248 ±     159,202  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    184744,901 ±    7560,159    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1471,800 ±    1156,433  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    178535,797 ±  136146,994    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,875 ±       7,041  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       105,223 ±     846,503    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        11,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30,000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     24419,808 ±    1080,766   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       395,359 ±      25,833  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     25475,794 ±    2503,738    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       366,501 ±    1309,307  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23710,432 ±   84502,663    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,267 ±       2,297    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     23743,671 ±     879,987   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       267,206 ±      30,289  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17707,095 ±    2242,404    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307,063 ±    1079,368  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     20454,795 ±   71906,464    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,006 ±       0,050  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,382 ±       3,290    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         9,000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      6637,768 ±     111,201   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2087,868 ±      53,426  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    494865,371 ±   16780,995    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2130,501 ±    1171,726  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    505176,020 ±  286160,458    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,446 ±       3,444  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       105,623 ±     816,605    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16,000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        23,000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     69278,325 ±    1362,588   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       899,149 ±      78,058  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20417,724 ±    1507,220    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       931,225 ±    1403,998  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21130,580 ±   31648,182    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,003 ±       0,022  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,058 ±       0,501    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         7,000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        25,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     75245,551 ±    7026,563   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       519,738 ±      84,920  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10863,095 ±     818,399    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       534,424 ±    1150,388  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11054,419 ±   23795,557    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,172 ±       0,907    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5         9,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     81796,673 ±     485,609   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        22,045 ±       0,132  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       424,006 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    351809,841 ±   26367,238   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2113,816 ±     192,776  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9451,841 ±     198,321    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2146,238 ±    1162,682  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9590,045 ±    4821,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,725 ±       6,061  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,189 ±      26,655    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        16,000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        19,000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    537163,251 ±    8881,493   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       627,756 ±      15,863  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1838,583 ±      36,535    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       665,782 ±       2,709  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1949,987 ±      38,075    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        15,000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1362642,591 ±   60452,478   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       736,635 ±      10,260  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       850,597 ±      41,174    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671,693 ±       1,575  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       775,608 ±      35,870    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,014 ±       0,082    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        11,000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    116036,155 ±    2227,973   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3720,774 ±     105,619  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50443,058 ±     539,932    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3635,590 ±    1372,421  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     49274,787 ±   17865,410    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±       0,105  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,339 ±       1,412    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        27,000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28,000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    683399,643 ±    4640,178   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2050,436 ±      58,368  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      4720,520 ±     158,893    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1880,281 ±    1148,587  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4329,572 ±    2663,800    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,716 ±       5,412  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,645 ±      12,425    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        14,000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        16,000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    373357,166 ±    3451,011   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1310,239 ±      42,438  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5521,151 ±     144,488    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342,176 ±       4,635  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5655,802 ±      66,459    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,716 ±       6,033  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3,016 ±      25,399    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10,000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        20,000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    824056,811 ±   60547,915   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       651,016 ±      52,495  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1242,937 ±      20,032    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       666,412 ±       2,739  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1272,745 ±      96,981    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,023 ±       0,134    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1759859,028 ±   15814,273   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       834,444 ±      19,727  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       745,992 ±      23,104    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       806,157 ±    1157,840  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       721,132 ±    1043,512    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,008 ±       0,044  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,007 ±       0,039    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        14,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1909979,235 ±   25994,303   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0,104 ±       0,891  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,086 ±       0,738    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    502171,123 ±    4817,223   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       766,530 ±      21,996  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2401,094 ±      83,227    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802,648 ±    1149,733  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2515,478 ±    3626,044    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,012 ±       0,072  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,039 ±       0,225    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    177374,658 ±    2231,835   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1064,021 ±      27,104  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      9438,090 ±     345,145    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1075,903 ±    1417,938  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9549,278 ±   12650,449    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,666 ±       5,514  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,931 ±      49,083    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8,000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        18,000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 8164 s, completed 30 черв. 2018 20:04:29
